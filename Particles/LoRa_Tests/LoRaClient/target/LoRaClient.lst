
c:/Users/julia/Documents/Particle/projects/LoRa_Tests/LoRaClient/target/LoRaClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f60  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2f80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000000  080a2f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d4  20000078  20000078  00030078  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2ffc  080a2ffc  00022ffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3024  080a3024  00023024  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013abbd  00000000  00000000  00023028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001ec8d  00000000  00000000  0015dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a78d  00000000  00000000  0017c872  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ce0  00000000  00000000  00196fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003c70  00000000  00000000  00199cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000416ef  00000000  00000000  0019d94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004ee08  00000000  00000000  001df03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b9725  00000000  00000000  0022de46  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d910  00000000  00000000  002e756c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 fc67 	bl	80a2904 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 fc6c 	bl	80a291a <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a2f84 	.word	0x080a2f84
 80a0050:	20000078 	.word	0x20000078
 80a0054:	20000078 	.word	0x20000078
 80a0058:	2000054c 	.word	0x2000054c
 80a005c:	2000054c 	.word	0x2000054c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fac1 	bl	80a15e8 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a2ee4 	.word	0x080a2ee4
 80a0088:	080a2f74 	.word	0x080a2f74

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b924 	b.w	80a02d8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f94b 	bl	80a032c <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 ba67 	b.w	80a156c <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 b8f9 	b.w	80a1294 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 b8ff 	b.w	80a12a4 <free>
	...

080a00a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a03      	ldr	r2, [pc, #12]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
 80a00b0:	f001 f86c 	bl	80a118c <panic_>
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a0f99 	.word	0x080a0f99

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 80a00cc:	2001      	movs	r0, #1
 80a00ce:	4770      	bx	lr

080a00d0 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 80a00d0:	b510      	push	{r4, lr}
 80a00d2:	4604      	mov	r4, r0
    while (!available())
 80a00d4:	6823      	ldr	r3, [r4, #0]
 80a00d6:	4620      	mov	r0, r4
 80a00d8:	685b      	ldr	r3, [r3, #4]
 80a00da:	4798      	blx	r3
 80a00dc:	2800      	cmp	r0, #0
 80a00de:	d0f9      	beq.n	80a00d4 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 80a00e0:	bd10      	pop	{r4, pc}

080a00e2 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 80a00e2:	7903      	ldrb	r3, [r0, #4]
 80a00e4:	2b03      	cmp	r3, #3
 80a00e6:	d0fc      	beq.n	80a00e2 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 80a00e8:	2001      	movs	r0, #1
 80a00ea:	4770      	bx	lr

080a00ec <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 80a00ec:	7181      	strb	r1, [r0, #6]
 80a00ee:	4770      	bx	lr

080a00f0 <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 80a00f0:	7141      	strb	r1, [r0, #5]
 80a00f2:	4770      	bx	lr

080a00f4 <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 80a00f4:	72c1      	strb	r1, [r0, #11]
 80a00f6:	4770      	bx	lr

080a00f8 <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 80a00f8:	7301      	strb	r1, [r0, #12]
 80a00fa:	4770      	bx	lr

080a00fc <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 80a00fc:	7341      	strb	r1, [r0, #13]
 80a00fe:	4770      	bx	lr

080a0100 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
 80a0100:	7b83      	ldrb	r3, [r0, #14]
 80a0102:	ea23 0202 	bic.w	r2, r3, r2
 80a0106:	4311      	orrs	r1, r2
 80a0108:	7381      	strb	r1, [r0, #14]
 80a010a:	4770      	bx	lr

080a010c <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 80a010c:	79c0      	ldrb	r0, [r0, #7]
}
 80a010e:	4770      	bx	lr

080a0110 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 80a0110:	7a00      	ldrb	r0, [r0, #8]
}
 80a0112:	4770      	bx	lr

080a0114 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 80a0114:	7a40      	ldrb	r0, [r0, #9]
}
 80a0116:	4770      	bx	lr

080a0118 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 80a0118:	7a80      	ldrb	r0, [r0, #10]
}
 80a011a:	4770      	bx	lr

080a011c <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
 80a011c:	2000      	movs	r0, #0
 80a011e:	4770      	bx	lr

080a0120 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
 80a0120:	b570      	push	{r4, r5, r6, lr}
 80a0122:	4604      	mov	r4, r0
 80a0124:	460e      	mov	r6, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0126:	f000 ff3f 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
 80a012a:	4605      	mov	r5, r0
 80a012c:	f000 ff3c 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
 80a0130:	1b40      	subs	r0, r0, r5
 80a0132:	42b0      	cmp	r0, r6
 80a0134:	d206      	bcs.n	80a0144 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
    {
        if (available())
 80a0136:	6823      	ldr	r3, [r4, #0]
 80a0138:	4620      	mov	r0, r4
 80a013a:	685b      	ldr	r3, [r3, #4]
 80a013c:	4798      	blx	r3
 80a013e:	2800      	cmp	r0, #0
 80a0140:	d0f4      	beq.n	80a012c <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
 80a0142:	bd70      	pop	{r4, r5, r6, pc}
	{
           return true;
	}
	YIELD;
    }
    return false;
 80a0144:	2000      	movs	r0, #0
}
 80a0146:	bd70      	pop	{r4, r5, r6, pc}

080a0148 <_ZN15RHGenericDriver14waitPacketSentEt>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
 80a0148:	b570      	push	{r4, r5, r6, lr}
 80a014a:	4604      	mov	r4, r0
 80a014c:	460e      	mov	r6, r1
 80a014e:	f000 ff2b 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
 80a0152:	4605      	mov	r5, r0
 80a0154:	f000 ff28 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
 80a0158:	1b40      	subs	r0, r0, r5
 80a015a:	42b0      	cmp	r0, r6
 80a015c:	d204      	bcs.n	80a0168 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
 80a015e:	7923      	ldrb	r3, [r4, #4]
 80a0160:	2b03      	cmp	r3, #3
 80a0162:	d0f7      	beq.n	80a0154 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 80a0164:	2001      	movs	r0, #1
 80a0166:	bd70      	pop	{r4, r5, r6, pc}
	YIELD;
    }
    return false;
 80a0168:	2000      	movs	r0, #0
}
 80a016a:	bd70      	pop	{r4, r5, r6, pc}

080a016c <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
 80a016c:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
 80a016e:	6983      	ldr	r3, [r0, #24]
    return false;
}

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
 80a0170:	4604      	mov	r4, r0
    if (!_cad_timeout)
 80a0172:	b1b3      	cbz	r3, 80a01a2 <_ZN15RHGenericDriver7waitCADEv+0x36>
 80a0174:	f000 ff18 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
 80a0178:	4606      	mov	r6, r0
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 80a017a:	2564      	movs	r5, #100	; 0x64
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
 80a017c:	6823      	ldr	r3, [r4, #0]
 80a017e:	4620      	mov	r0, r4
 80a0180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0182:	4798      	blx	r3
 80a0184:	b168      	cbz	r0, 80a01a2 <_ZN15RHGenericDriver7waitCADEv+0x36>
 80a0186:	f000 ff0f 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
    {
         if (millis() - t > _cad_timeout) 
 80a018a:	69a3      	ldr	r3, [r4, #24]
 80a018c:	1b80      	subs	r0, r0, r6
 80a018e:	4298      	cmp	r0, r3
 80a0190:	d809      	bhi.n	80a01a6 <_ZN15RHGenericDriver7waitCADEv+0x3a>
	     return false;
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
 80a0192:	210a      	movs	r1, #10
 80a0194:	2001      	movs	r0, #1
 80a0196:	f001 fc84 	bl	80a1aa2 <_Z6randomii>
 80a019a:	4368      	muls	r0, r5
 80a019c:	f001 f994 	bl	80a14c8 <delay>
 80a01a0:	e7ec      	b.n	80a017c <_ZN15RHGenericDriver7waitCADEv+0x10>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
 80a01a2:	2001      	movs	r0, #1
 80a01a4:	bd70      	pop	{r4, r5, r6, pc}
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
 80a01a6:	2000      	movs	r0, #0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    }

    return true;
}
 80a01a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a01ac <_ZN15RHGenericDriverC1Ev>:
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
 80a01ac:	4a07      	ldr	r2, [pc, #28]	; (80a01cc <_ZN15RHGenericDriverC1Ev+0x20>)
 80a01ae:	21ff      	movs	r1, #255	; 0xff
 80a01b0:	6002      	str	r2, [r0, #0]
 80a01b2:	2200      	movs	r2, #0
 80a01b4:	7102      	strb	r2, [r0, #4]
 80a01b6:	7141      	strb	r1, [r0, #5]
 80a01b8:	8202      	strh	r2, [r0, #16]
 80a01ba:	72c1      	strb	r1, [r0, #11]
 80a01bc:	8242      	strh	r2, [r0, #18]
 80a01be:	7301      	strb	r1, [r0, #12]
 80a01c0:	7342      	strb	r2, [r0, #13]
 80a01c2:	7382      	strb	r2, [r0, #14]
 80a01c4:	8282      	strh	r2, [r0, #20]
 80a01c6:	6182      	str	r2, [r0, #24]
{
}
 80a01c8:	4770      	bx	lr
 80a01ca:	bf00      	nop
 80a01cc:	080a2a1c 	.word	0x080a2a1c

080a01d0 <_GLOBAL__sub_I__ZN15RHGenericDriverC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01d0:	f000 be62 	b.w	80a0e98 <HAL_Pin_Map>

080a01d4 <_GLOBAL__sub_I_RH_TCP.cpp>:
 80a01d4:	f000 be60 	b.w	80a0e98 <HAL_Pin_Map>

080a01d8 <_GLOBAL__sub_I_HardwareSerial.cpp>:
 80a01d8:	f000 be5e 	b.w	80a0e98 <HAL_Pin_Map>

080a01dc <_GLOBAL__sub_I__Z14RHcrc16_updateth>:
 80a01dc:	f000 be5c 	b.w	80a0e98 <HAL_Pin_Map>

080a01e0 <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPI.attachInterrupt();
#endif
}

void RHHardwareSPI::detachInterrupt() 
{
 80a01e0:	4770      	bx	lr
	...

080a01e4 <_ZN13RHHardwareSPI8transferEh>:
{
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
 80a01e4:	4801      	ldr	r0, [pc, #4]	; (80a01ec <_ZN13RHHardwareSPI8transferEh+0x8>)
 80a01e6:	f001 b8d1 	b.w	80a138c <_ZN8SPIClass8transferEh>
 80a01ea:	bf00      	nop
 80a01ec:	20000458 	.word	0x20000458

080a01f0 <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
 80a01f0:	b510      	push	{r4, lr}
 80a01f2:	4604      	mov	r4, r0

    }
    SPI.begin(frequency, bitOrder, dataMode);

#elif (RH_PLATFORM == RH_PLATFORM_STM32F2) // Photon
    Serial.println("HERE");
 80a01f4:	f001 faf0 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a01f8:	491a      	ldr	r1, [pc, #104]	; (80a0264 <_ZN13RHHardwareSPI5beginEv+0x74>)
 80a01fa:	f001 f916 	bl	80a142a <_ZN5Print7printlnEPKc>
    uint8_t dataMode;
    if (_dataMode == DataMode0)
 80a01fe:	79a1      	ldrb	r1, [r4, #6]
 80a0200:	b139      	cbz	r1, 80a0212 <_ZN13RHHardwareSPI5beginEv+0x22>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
 80a0202:	2901      	cmp	r1, #1
 80a0204:	d005      	beq.n	80a0212 <_ZN13RHHardwareSPI5beginEv+0x22>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
 80a0206:	2902      	cmp	r1, #2
 80a0208:	d003      	beq.n	80a0212 <_ZN13RHHardwareSPI5beginEv+0x22>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
 80a020a:	2903      	cmp	r1, #3
 80a020c:	bf14      	ite	ne
 80a020e:	2100      	movne	r1, #0
 80a0210:	2103      	moveq	r1, #3
    else
	dataMode = SPI_MODE0;
    SPI.setDataMode(dataMode);
 80a0212:	4815      	ldr	r0, [pc, #84]	; (80a0268 <_ZN13RHHardwareSPI5beginEv+0x78>)
 80a0214:	f001 f87f 	bl	80a1316 <_ZN8SPIClass11setDataModeEh>
    if (_bitOrder == BitOrderLSBFirst)
 80a0218:	7963      	ldrb	r3, [r4, #5]
	SPI.setBitOrder(LSBFIRST);
    else
	SPI.setBitOrder(MSBFIRST);
 80a021a:	4813      	ldr	r0, [pc, #76]	; (80a0268 <_ZN13RHHardwareSPI5beginEv+0x78>)
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    SPI.setDataMode(dataMode);
    if (_bitOrder == BitOrderLSBFirst)
 80a021c:	2b01      	cmp	r3, #1
	SPI.setBitOrder(LSBFIRST);
 80a021e:	bf0c      	ite	eq
 80a0220:	2100      	moveq	r1, #0
    else
	SPI.setBitOrder(MSBFIRST);
 80a0222:	2101      	movne	r1, #1
 80a0224:	f001 f874 	bl	80a1310 <_ZN8SPIClass11setBitOrderEh>

    switch (_frequency)
 80a0228:	7923      	ldrb	r3, [r4, #4]
 80a022a:	3b01      	subs	r3, #1
 80a022c:	2b03      	cmp	r3, #3
 80a022e:	d803      	bhi.n	80a0238 <_ZN13RHHardwareSPI5beginEv+0x48>
 80a0230:	e8df f003 	tbb	[pc, r3]
 80a0234:	0e0b0805 	.word	0x0e0b0805
    {
	case Frequency1MHz:
	default:
	    SPI.setClockSpeed(1, MHZ);
 80a0238:	4a0c      	ldr	r2, [pc, #48]	; (80a026c <_ZN13RHHardwareSPI5beginEv+0x7c>)
 80a023a:	2101      	movs	r1, #1
 80a023c:	e00a      	b.n	80a0254 <_ZN13RHHardwareSPI5beginEv+0x64>
	    break;

	case Frequency2MHz:
	    SPI.setClockSpeed(2, MHZ);
 80a023e:	4a0b      	ldr	r2, [pc, #44]	; (80a026c <_ZN13RHHardwareSPI5beginEv+0x7c>)
 80a0240:	2102      	movs	r1, #2
 80a0242:	e007      	b.n	80a0254 <_ZN13RHHardwareSPI5beginEv+0x64>
	    break;

	case Frequency4MHz:
	    SPI.setClockSpeed(4, MHZ);
 80a0244:	4a09      	ldr	r2, [pc, #36]	; (80a026c <_ZN13RHHardwareSPI5beginEv+0x7c>)
 80a0246:	2104      	movs	r1, #4
 80a0248:	e004      	b.n	80a0254 <_ZN13RHHardwareSPI5beginEv+0x64>
	    break;

	case Frequency8MHz:
	    SPI.setClockSpeed(8, MHZ);
 80a024a:	4a08      	ldr	r2, [pc, #32]	; (80a026c <_ZN13RHHardwareSPI5beginEv+0x7c>)
 80a024c:	2108      	movs	r1, #8
 80a024e:	e001      	b.n	80a0254 <_ZN13RHHardwareSPI5beginEv+0x64>
	    break;

	case Frequency16MHz:
	    SPI.setClockSpeed(16, MHZ);
 80a0250:	4a06      	ldr	r2, [pc, #24]	; (80a026c <_ZN13RHHardwareSPI5beginEv+0x7c>)
 80a0252:	2110      	movs	r1, #16
 80a0254:	4804      	ldr	r0, [pc, #16]	; (80a0268 <_ZN13RHHardwareSPI5beginEv+0x78>)
 80a0256:	f001 f877 	bl	80a1348 <_ZN8SPIClass13setClockSpeedEjj>
  }
  SPI.begin(divider, bitOrder, dataMode);
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif
}
 80a025a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    break;
    }

//      SPI.setClockDivider(SPI_CLOCK_DIV4);  // 72MHz / 4MHz = 18MHz
//      SPI.setClockSpeed(1, MHZ);
      SPI.begin();
 80a025e:	4802      	ldr	r0, [pc, #8]	; (80a0268 <_ZN13RHHardwareSPI5beginEv+0x78>)
 80a0260:	f001 b844 	b.w	80a12ec <_ZN8SPIClass5beginEv>
 80a0264:	080a2a74 	.word	0x080a2a74
 80a0268:	20000458 	.word	0x20000458
 80a026c:	000f4240 	.word	0x000f4240

080a0270 <_ZN13RHHardwareSPI3endEv>:
#endif
}

void RHHardwareSPI::end() 
{
    return SPI.end();
 80a0270:	4801      	ldr	r0, [pc, #4]	; (80a0278 <_ZN13RHHardwareSPI3endEv+0x8>)
 80a0272:	f001 b840 	b.w	80a12f6 <_ZN8SPIClass3endEv>
 80a0276:	bf00      	nop
 80a0278:	20000458 	.word	0x20000458

080a027c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a027c:	b510      	push	{r4, lr}
 80a027e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a0280:	f000 f81e 	bl	80a02c0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 80a0284:	4b01      	ldr	r3, [pc, #4]	; (80a028c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x10>)
{
}
 80a0286:	4620      	mov	r0, r4
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a0288:	6023      	str	r3, [r4, #0]
{
}
 80a028a:	bd10      	pop	{r4, pc}
 80a028c:	080a2a84 	.word	0x080a2a84

080a0290 <_GLOBAL__sub_I_hardware_spi>:
}

void RHHardwareSPI::end() 
{
    return SPI.end();
}
 80a0290:	b510      	push	{r4, lr}
 80a0292:	f000 fe01 	bl	80a0e98 <HAL_Pin_Map>
 80a0296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// $Id: RHHardwareSPI.cpp,v 1.16 2016/07/07 00:02:53 mikem Exp $

#include <RHHardwareSPI.h>

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
 80a029a:	2300      	movs	r3, #0
 80a029c:	461a      	mov	r2, r3
 80a029e:	4619      	mov	r1, r3
 80a02a0:	4801      	ldr	r0, [pc, #4]	; (80a02a8 <_GLOBAL__sub_I_hardware_spi+0x18>)
 80a02a2:	f7ff bfeb 	b.w	80a027c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 80a02a6:	bf00      	nop
 80a02a8:	2000007c 	.word	0x2000007c

080a02ac <_GLOBAL__sub_I__ZN8RHRouter11_tmpMessageE>:
 80a02ac:	f000 bdf4 	b.w	80a0e98 <HAL_Pin_Map>

080a02b0 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
 80a02b0:	4770      	bx	lr

080a02b2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
 80a02b2:	4770      	bx	lr

080a02b4 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 80a02b4:	7141      	strb	r1, [r0, #5]
 80a02b6:	4770      	bx	lr

080a02b8 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 80a02b8:	7181      	strb	r1, [r0, #6]
 80a02ba:	4770      	bx	lr

080a02bc <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 80a02bc:	7101      	strb	r1, [r0, #4]
 80a02be:	4770      	bx	lr

080a02c0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a02c0:	b530      	push	{r4, r5, lr}
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
 80a02c2:	4d03      	ldr	r5, [pc, #12]	; (80a02d0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 80a02c4:	7101      	strb	r1, [r0, #4]
 80a02c6:	6005      	str	r5, [r0, #0]
 80a02c8:	7142      	strb	r2, [r0, #5]
 80a02ca:	7183      	strb	r3, [r0, #6]
{
}
 80a02cc:	bd30      	pop	{r4, r5, pc}
 80a02ce:	bf00      	nop
 80a02d0:	080a2aac 	.word	0x080a2aac

080a02d4 <_GLOBAL__sub_I__ZN12RHGenericSPIC2ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
 80a02d4:	f000 bde0 	b.w	80a0e98 <HAL_Pin_Map>

080a02d8 <setup>:

// Need this on Arduino Zero with SerialUSB port (eg RocketScream Mini Ultra Pro)
//#define Serial SerialUSB

void setup()
{
 80a02d8:	b508      	push	{r3, lr}
  // Rocket Scream Mini Ultra Pro with the RFM95W only:
  // Ensure serial flash is not interfering with radio communication on SPI bus
//  pinMode(4, OUTPUT);
//  digitalWrite(4, HIGH);

  Serial.begin(9600);
 80a02da:	f001 fa7d 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a02de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a02e2:	f001 fa67 	bl	80a17b4 <_ZN9USBSerial5beginEl>
  while (!Serial) ; // Wait for serial port to be available
 80a02e6:	f001 fa77 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a02ea:	f001 fa6a 	bl	80a17c2 <_ZN9USBSerialcvbEv>
 80a02ee:	2800      	cmp	r0, #0
 80a02f0:	d0f9      	beq.n	80a02e6 <setup+0xe>
  if (!manager.init())
 80a02f2:	480a      	ldr	r0, [pc, #40]	; (80a031c <setup+0x44>)
 80a02f4:	f000 fb91 	bl	80a0a1a <_ZN10RHDatagram4initEv>
 80a02f8:	b920      	cbnz	r0, 80a0304 <setup+0x2c>
    Serial.println("init failed");
 80a02fa:	f001 fa6d 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a02fe:	4908      	ldr	r1, [pc, #32]	; (80a0320 <setup+0x48>)
 80a0300:	f001 f893 	bl	80a142a <_ZN5Print7printlnEPKc>
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
  // you can set transmitter powers from 5 to 23 dBm:
  driver.setTxPower(10, false);
 80a0304:	210a      	movs	r1, #10
 80a0306:	4807      	ldr	r0, [pc, #28]	; (80a0324 <setup+0x4c>)
 80a0308:	2200      	movs	r2, #0
 80a030a:	f000 fa91 	bl	80a0830 <_ZN7RH_RF9510setTxPowerEab>
//  driver.setTxPower(14, true);
  // You can optionally require this module to wait until Channel Activity
  // Detection shows no activity on the channel before transmitting by setting
  // the CAD timeout to non-zero:
//  driver.setCADTimeout(10000);
}
 80a030e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
  // you can set transmitter powers from 5 to 23 dBm:
  driver.setTxPower(10, false);
  driver.setFrequency(915.0);  // hay que setear frecuencia para los rfm96 915
 80a0312:	4905      	ldr	r1, [pc, #20]	; (80a0328 <setup+0x50>)
 80a0314:	4803      	ldr	r0, [pc, #12]	; (80a0324 <setup+0x4c>)
 80a0316:	f000 b93f 	b.w	80a0598 <_ZN7RH_RF9512setFrequencyEf>
 80a031a:	bf00      	nop
 80a031c:	200001ac 	.word	0x200001ac
 80a0320:	080a2acc 	.word	0x080a2acc
 80a0324:	20000084 	.word	0x20000084
 80a0328:	4464c000 	.word	0x4464c000

080a032c <loop>:
uint8_t data[] = "Hello World!";
// Dont put this on the stack:
uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];

void loop()
{
 80a032c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Serial.println("Sending to rf95_reliable_datagram_server");
 80a032e:	f001 fa53 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a0332:	4920      	ldr	r1, [pc, #128]	; (80a03b4 <loop+0x88>)
 80a0334:	f001 f879 	bl	80a142a <_ZN5Print7printlnEPKc>

  // Send a message to manager_server
  if (manager.sendtoWait(data, sizeof(data), SERVER_ADDRESS))
 80a0338:	2302      	movs	r3, #2
 80a033a:	220d      	movs	r2, #13
 80a033c:	491e      	ldr	r1, [pc, #120]	; (80a03b8 <loop+0x8c>)
 80a033e:	481f      	ldr	r0, [pc, #124]	; (80a03bc <loop+0x90>)
 80a0340:	f000 fbeb 	bl	80a0b1a <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
 80a0344:	b350      	cbz	r0, 80a039c <loop+0x70>
  {
    // Now wait for a reply from the server
    uint8_t len = sizeof(buf);
 80a0346:	23fb      	movs	r3, #251	; 0xfb
 80a0348:	aa06      	add	r2, sp, #24
 80a034a:	f802 3d02 	strb.w	r3, [r2, #-2]!
    uint8_t from;
    if (manager.recvfromAckTimeout(buf, &len, 2000, &from))
 80a034e:	2300      	movs	r3, #0
 80a0350:	9303      	str	r3, [sp, #12]
 80a0352:	9302      	str	r3, [sp, #8]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	f10d 0317 	add.w	r3, sp, #23
 80a035a:	9300      	str	r3, [sp, #0]
 80a035c:	4918      	ldr	r1, [pc, #96]	; (80a03c0 <loop+0x94>)
 80a035e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80a0362:	4816      	ldr	r0, [pc, #88]	; (80a03bc <loop+0x90>)
 80a0364:	f000 fca6 	bl	80a0cb4 <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_>
 80a0368:	b1a0      	cbz	r0, 80a0394 <loop+0x68>
    {
      Serial.print("got reply from : 0x");
 80a036a:	f001 fa35 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a036e:	4915      	ldr	r1, [pc, #84]	; (80a03c4 <loop+0x98>)
 80a0370:	f001 f848 	bl	80a1404 <_ZN5Print5printEPKc>
      Serial.print(from, HEX);
 80a0374:	f001 fa30 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a0378:	2210      	movs	r2, #16
 80a037a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80a037e:	f001 f888 	bl	80a1492 <_ZN5Print5printEhi>
      Serial.print(": ");
 80a0382:	f001 fa29 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a0386:	4910      	ldr	r1, [pc, #64]	; (80a03c8 <loop+0x9c>)
 80a0388:	f001 f83c 	bl	80a1404 <_ZN5Print5printEPKc>
      Serial.println((char*)buf);
 80a038c:	f001 fa24 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a0390:	490b      	ldr	r1, [pc, #44]	; (80a03c0 <loop+0x94>)
 80a0392:	e006      	b.n	80a03a2 <loop+0x76>
    }
    else
    {
      Serial.println("No reply, is rf95_reliable_datagram_server running?");
 80a0394:	f001 fa20 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a0398:	490c      	ldr	r1, [pc, #48]	; (80a03cc <loop+0xa0>)
 80a039a:	e002      	b.n	80a03a2 <loop+0x76>
    }
  }
  else
    Serial.println("sendtoWait failed");
 80a039c:	f001 fa1c 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a03a0:	490b      	ldr	r1, [pc, #44]	; (80a03d0 <loop+0xa4>)
 80a03a2:	f001 f842 	bl	80a142a <_ZN5Print7printlnEPKc>
  delay(500);
 80a03a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a03aa:	f001 f88d 	bl	80a14c8 <delay>
}
 80a03ae:	b007      	add	sp, #28
 80a03b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a03b4:	080a2ad8 	.word	0x080a2ad8
 80a03b8:	20000000 	.word	0x20000000
 80a03bc:	200001ac 	.word	0x200001ac
 80a03c0:	200002c6 	.word	0x200002c6
 80a03c4:	080a2b01 	.word	0x080a2b01
 80a03c8:	080a2cf8 	.word	0x080a2cf8
 80a03cc:	080a2b15 	.word	0x080a2b15
 80a03d0:	080a2b49 	.word	0x080a2b49

080a03d4 <_GLOBAL__sub_I_SystemMode>:
 80a03d4:	b510      	push	{r4, lr}
 80a03d6:	f000 fd5f 	bl	80a0e98 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a03da:	4b0c      	ldr	r3, [pc, #48]	; (80a040c <_GLOBAL__sub_I_SystemMode+0x38>)
 80a03dc:	2200      	movs	r2, #0
 80a03de:	701a      	strb	r2, [r3, #0]
 80a03e0:	805a      	strh	r2, [r3, #2]
 80a03e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
#define SERVER_ADDRESS 2

SYSTEM_MODE(SEMI_AUTOMATIC);

// Singleton instance of the radio driver
RH_RF95 driver;
 80a03e6:	4c0a      	ldr	r4, [pc, #40]	; (80a0410 <_GLOBAL__sub_I_SystemMode+0x3c>)
 80a03e8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a03ea:	2002      	movs	r0, #2
 80a03ec:	f000 fed6 	bl	80a119c <set_system_mode>
 80a03f0:	2202      	movs	r2, #2
 80a03f2:	210c      	movs	r1, #12
 80a03f4:	4620      	mov	r0, r4
 80a03f6:	4b07      	ldr	r3, [pc, #28]	; (80a0414 <_GLOBAL__sub_I_SystemMode+0x40>)
 80a03f8:	f000 f862 	bl	80a04c0 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
//RH_RF95 rf95(5, 2); // Rocket Scream Mini Ultra Pro with the RFM95W

// Class to manage message delivery and receipt, using the driver declared above
RHReliableDatagram manager(driver, CLIENT_ADDRESS);
 80a03fc:	4621      	mov	r1, r4
    }
  }
  else
    Serial.println("sendtoWait failed");
  delay(500);
}
 80a03fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Singleton instance of the radio driver
RH_RF95 driver;
//RH_RF95 rf95(5, 2); // Rocket Scream Mini Ultra Pro with the RFM95W

// Class to manage message delivery and receipt, using the driver declared above
RHReliableDatagram manager(driver, CLIENT_ADDRESS);
 80a0402:	2201      	movs	r2, #1
 80a0404:	4804      	ldr	r0, [pc, #16]	; (80a0418 <_GLOBAL__sub_I_SystemMode+0x44>)
 80a0406:	f000 bb5d 	b.w	80a0ac4 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
 80a040a:	bf00      	nop
 80a040c:	200002c0 	.word	0x200002c0
 80a0410:	20000084 	.word	0x20000084
 80a0414:	2000007c 	.word	0x2000007c
 80a0418:	200001ac 	.word	0x200001ac

080a041c <_GLOBAL__sub_I__ZN7RH_RF2419_deviceForInterruptE>:
 80a041c:	f000 bd3c 	b.w	80a0e98 <HAL_Pin_Map>

080a0420 <_GLOBAL__sub_I__ZN14RHNRFSPIDriverC2EhR12RHGenericSPI>:
 80a0420:	f000 bd3a 	b.w	80a0e98 <HAL_Pin_Map>

080a0424 <_GLOBAL__sub_I__ZN8RH_NRF24C2EhhR12RHGenericSPI>:
 80a0424:	f000 bd38 	b.w	80a0e98 <HAL_Pin_Map>

080a0428 <_GLOBAL__sub_I__ZN9RH_NRF905C2EhhhR12RHGenericSPI>:
 80a0428:	f000 bd36 	b.w	80a0e98 <HAL_Pin_Map>

080a042c <_GLOBAL__sub_I__ZN13RHSoftwareSPIC2EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 80a042c:	f000 bd34 	b.w	80a0e98 <HAL_Pin_Map>

080a0430 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 80a0430:	20fb      	movs	r0, #251	; 0xfb
 80a0432:	4770      	bx	lr

080a0434 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 80a0434:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 80a0436:	7903      	ldrb	r3, [r0, #4]
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
 80a0438:	4604      	mov	r4, r0
    // Set mode RHModeCad
    if (_mode != RHModeCad)
 80a043a:	2b05      	cmp	r3, #5
 80a043c:	d00a      	beq.n	80a0454 <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 80a043e:	2207      	movs	r2, #7
 80a0440:	2101      	movs	r1, #1
 80a0442:	f000 fcae 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 80a0446:	2280      	movs	r2, #128	; 0x80
 80a0448:	2140      	movs	r1, #64	; 0x40
 80a044a:	4620      	mov	r0, r4
 80a044c:	f000 fca9 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
 80a0450:	2305      	movs	r3, #5
 80a0452:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
 80a0454:	7923      	ldrb	r3, [r4, #4]
 80a0456:	2b05      	cmp	r3, #5
 80a0458:	d0fc      	beq.n	80a0454 <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
 80a045a:	7da0      	ldrb	r0, [r4, #22]
}
 80a045c:	bd10      	pop	{r4, pc}

080a045e <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10>:
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
    }
    else
    {
	if (power > 23)
 80a045e:	2917      	cmp	r1, #23
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
	_mode = RHModeTx;
    }
}

void RH_RF95::setTxPower(int8_t power, bool useRFO)
 80a0460:	b538      	push	{r3, r4, r5, lr}
 80a0462:	4605      	mov	r5, r0
 80a0464:	460c      	mov	r4, r1
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
    }
    else
    {
	if (power > 23)
 80a0466:	dc04      	bgt.n	80a0472 <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10+0x14>
	    power = 23;
	if (power < 5)
 80a0468:	2904      	cmp	r1, #4
 80a046a:	dd0b      	ble.n	80a0484 <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10+0x26>
	    power = 5;

	// For RH_RF95_PA_DAC_ENABLE, manual says '+20dBm on PA_BOOST when OutputPower=0xf'
	// RH_RF95_PA_DAC_ENABLE actually adds about 3dBm to all power levels. We will us it
	// for 21, 22 and 23dBm
	if (power > 20)
 80a046c:	2914      	cmp	r1, #20
 80a046e:	dc01      	bgt.n	80a0474 <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10+0x16>
 80a0470:	e009      	b.n	80a0486 <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
    }
    else
    {
	if (power > 23)
	    power = 23;
 80a0472:	2417      	movs	r4, #23
	// For RH_RF95_PA_DAC_ENABLE, manual says '+20dBm on PA_BOOST when OutputPower=0xf'
	// RH_RF95_PA_DAC_ENABLE actually adds about 3dBm to all power levels. We will us it
	// for 21, 22 and 23dBm
	if (power > 20)
	{
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 80a0474:	2207      	movs	r2, #7
 80a0476:	214d      	movs	r1, #77	; 0x4d
 80a0478:	4628      	mov	r0, r5
	    power -= 3;
 80a047a:	3c03      	subs	r4, #3
	// For RH_RF95_PA_DAC_ENABLE, manual says '+20dBm on PA_BOOST when OutputPower=0xf'
	// RH_RF95_PA_DAC_ENABLE actually adds about 3dBm to all power levels. We will us it
	// for 21, 22 and 23dBm
	if (power > 20)
	{
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 80a047c:	f000 fc91 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 80a0480:	b264      	sxtb	r4, r4
 80a0482:	e005      	b.n	80a0490 <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10+0x32>
    else
    {
	if (power > 23)
	    power = 23;
	if (power < 5)
	    power = 5;
 80a0484:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
	    power -= 3;
	}
	else
	{
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 80a0486:	2204      	movs	r2, #4
 80a0488:	214d      	movs	r1, #77	; 0x4d
 80a048a:	4628      	mov	r0, r5
 80a048c:	f000 fc89 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	// pin is connected, so must use PA_BOOST
	// Pout = 2 + OutputPower.
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a0490:	1f62      	subs	r2, r4, #5
 80a0492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80a0496:	4628      	mov	r0, r5
    }
}
 80a0498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// pin is connected, so must use PA_BOOST
	// Pout = 2 + OutputPower.
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a049c:	b2d2      	uxtb	r2, r2
 80a049e:	2109      	movs	r1, #9
 80a04a0:	f000 bc7f 	b.w	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>

080a04a4 <_ZN7RH_RF955sleepEv>:
	_mode = RHModeIdle;
    }
}

bool RH_RF95::sleep()
{
 80a04a4:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 80a04a6:	7903      	ldrb	r3, [r0, #4]
	_mode = RHModeIdle;
    }
}

bool RH_RF95::sleep()
{
 80a04a8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 80a04aa:	2b01      	cmp	r3, #1
 80a04ac:	d005      	beq.n	80a04ba <_ZN7RH_RF955sleepEv+0x16>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 80a04ae:	2200      	movs	r2, #0
 80a04b0:	2101      	movs	r1, #1
 80a04b2:	f000 fc76 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 80a04b6:	2301      	movs	r3, #1
 80a04b8:	7123      	strb	r3, [r4, #4]
    }
    return true;
}
 80a04ba:	2001      	movs	r0, #1
 80a04bc:	bd10      	pop	{r4, pc}
	...

080a04c0 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
	{ 0x42,   0x84,    0x00}, //17: BW31_25CR45SF9 Bw = 31.25khz, Cr = 4/5, Sf8  = 256 chips/symbol, CRC on.  was A4
	{ 0x52,   0x84,    0x00}, //18: BW41_7CR45SF9 Bw = 41.7khz,  Cr = 4/5, Sf8  = 256 chips/symbol, CRC on.  was A4
    
};

RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 80a04c0:	b538      	push	{r3, r4, r5, lr}
 80a04c2:	4604      	mov	r4, r0
 80a04c4:	4615      	mov	r5, r2
    :
    RHSPIDriver(slaveSelectPin, spi),
    _rxBufValid(0)
 80a04c6:	461a      	mov	r2, r3
 80a04c8:	f000 fc3a 	bl	80a0d40 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 80a04cc:	4b05      	ldr	r3, [pc, #20]	; (80a04e4 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
{
    _interruptPin = interruptPin;
 80a04ce:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
};

RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
    :
    RHSPIDriver(slaveSelectPin, spi),
    _rxBufValid(0)
 80a04d2:	6023      	str	r3, [r4, #0]
 80a04d4:	2300      	movs	r3, #0
 80a04d6:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
{
    _interruptPin = interruptPin;
    _myInterruptIndex = 0xff; // Not allocated yet
 80a04da:	23ff      	movs	r3, #255	; 0xff
 80a04dc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
 80a04e0:	4620      	mov	r0, r4
 80a04e2:	bd38      	pop	{r3, r4, r5, pc}
 80a04e4:	080a2b9c 	.word	0x080a2b9c

080a04e8 <_ZN7RH_RF9513validateRxBufEv>:
}

// Check whether the latest received message is complete and uncorrupted
void RH_RF95::validateRxBuf()
{
    if (_bufLen < 4)
 80a04e8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80a04ec:	2b03      	cmp	r3, #3
 80a04ee:	d91b      	bls.n	80a0528 <_ZN7RH_RF9513validateRxBufEv+0x40>
	return; // Too short to be a real message
    // Extract the 4 headers
    _rxHeaderTo    = _buf[0];
 80a04f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80a04f4:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 80a04f6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80a04fa:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 80a04fc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80a0500:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 80a0502:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80a0506:	7283      	strb	r3, [r0, #10]
    if (_promiscuous ||
	_rxHeaderTo == _thisAddress ||
 80a0508:	7983      	ldrb	r3, [r0, #6]
 80a050a:	b933      	cbnz	r3, 80a051a <_ZN7RH_RF9513validateRxBufEv+0x32>
 80a050c:	79c3      	ldrb	r3, [r0, #7]
    // Extract the 4 headers
    _rxHeaderTo    = _buf[0];
    _rxHeaderFrom  = _buf[1];
    _rxHeaderId    = _buf[2];
    _rxHeaderFlags = _buf[3];
    if (_promiscuous ||
 80a050e:	7942      	ldrb	r2, [r0, #5]
 80a0510:	429a      	cmp	r2, r3
 80a0512:	d002      	beq.n	80a051a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == _thisAddress ||
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 80a0514:	79c3      	ldrb	r3, [r0, #7]
    _rxHeaderTo    = _buf[0];
    _rxHeaderFrom  = _buf[1];
    _rxHeaderId    = _buf[2];
    _rxHeaderFlags = _buf[3];
    if (_promiscuous ||
	_rxHeaderTo == _thisAddress ||
 80a0516:	2bff      	cmp	r3, #255	; 0xff
 80a0518:	d106      	bne.n	80a0528 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
    {
	_rxGood++;
 80a051a:	8a43      	ldrh	r3, [r0, #18]
 80a051c:	3301      	adds	r3, #1
 80a051e:	b29b      	uxth	r3, r3
 80a0520:	8243      	strh	r3, [r0, #18]
	_rxBufValid = true;
 80a0522:	2301      	movs	r3, #1
 80a0524:	f880 3123 	strb.w	r3, [r0, #291]	; 0x123
 80a0528:	4770      	bx	lr

080a052a <_ZN7RH_RF9510clearRxBufEv>:
    setModeRx();
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
}

void RH_RF95::clearRxBuf()
{
 80a052a:	b510      	push	{r4, lr}
 80a052c:	4604      	mov	r4, r0
    ATOMIC_BLOCK_START;
 80a052e:	f000 fd43 	bl	80a0fb8 <HAL_disable_irq>
    _rxBufValid = false;
 80a0532:	2300      	movs	r3, #0
 80a0534:	f884 3123 	strb.w	r3, [r4, #291]	; 0x123
    _bufLen = 0;
 80a0538:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    ATOMIC_BLOCK_END;
}
 80a053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RH_RF95::clearRxBuf()
{
    ATOMIC_BLOCK_START;
    _rxBufValid = false;
    _bufLen = 0;
    ATOMIC_BLOCK_END;
 80a0540:	f000 bd42 	b.w	80a0fc8 <HAL_enable_irq>

080a0544 <_ZN7RH_RF954recvEPhS0_>:
}

bool RH_RF95::recv(uint8_t* buf, uint8_t* len)
{
 80a0544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!available())
 80a0548:	6803      	ldr	r3, [r0, #0]
    _bufLen = 0;
    ATOMIC_BLOCK_END;
}

bool RH_RF95::recv(uint8_t* buf, uint8_t* len)
{
 80a054a:	4604      	mov	r4, r0
    if (!available())
 80a054c:	685b      	ldr	r3, [r3, #4]
    _bufLen = 0;
    ATOMIC_BLOCK_END;
}

bool RH_RF95::recv(uint8_t* buf, uint8_t* len)
{
 80a054e:	460f      	mov	r7, r1
 80a0550:	4615      	mov	r5, r2
    if (!available())
 80a0552:	4798      	blx	r3
 80a0554:	4606      	mov	r6, r0
 80a0556:	b1d8      	cbz	r0, 80a0590 <_ZN7RH_RF954recvEPhS0_+0x4c>
	return false;
    if (buf && len)
 80a0558:	b1bf      	cbz	r7, 80a058a <_ZN7RH_RF954recvEPhS0_+0x46>
 80a055a:	b1b5      	cbz	r5, 80a058a <_ZN7RH_RF954recvEPhS0_+0x46>
    {
	ATOMIC_BLOCK_START;
 80a055c:	f000 fd2c 	bl	80a0fb8 <HAL_disable_irq>
 80a0560:	4680      	mov	r8, r0
	// Skip the 4 headers that are at the beginning of the rxBuf
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 80a0562:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80a0566:	782a      	ldrb	r2, [r5, #0]
 80a0568:	3b03      	subs	r3, #3
 80a056a:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a056c:	bfd8      	it	le
 80a056e:	f894 3023 	ldrble.w	r3, [r4, #35]	; 0x23
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a0572:	f104 0128 	add.w	r1, r4, #40	; 0x28
    if (buf && len)
    {
	ATOMIC_BLOCK_START;
	// Skip the 4 headers that are at the beginning of the rxBuf
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a0576:	bfdc      	itt	le
 80a0578:	3b04      	suble	r3, #4
 80a057a:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a057c:	782a      	ldrb	r2, [r5, #0]
 80a057e:	4638      	mov	r0, r7
 80a0580:	f002 f9c0 	bl	80a2904 <memcpy>
	ATOMIC_BLOCK_END;
 80a0584:	4640      	mov	r0, r8
 80a0586:	f000 fd1f 	bl	80a0fc8 <HAL_enable_irq>
    }
    clearRxBuf(); // This message accepted and cleared
 80a058a:	4620      	mov	r0, r4
 80a058c:	f7ff ffcd 	bl	80a052a <_ZN7RH_RF9510clearRxBufEv>
    return true;
}
 80a0590:	4630      	mov	r0, r6
 80a0592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0598 <_ZN7RH_RF9512setFrequencyEf>:
{
    return RH_RF95_MAX_MESSAGE_LEN;
}

bool RH_RF95::setFrequency(float centre)
{
 80a0598:	b570      	push	{r4, r5, r6, lr}
 80a059a:	4604      	mov	r4, r0
    // Frf = FRF / FSTEP
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 80a059c:	4608      	mov	r0, r1
{
    return RH_RF95_MAX_MESSAGE_LEN;
}

bool RH_RF95::setFrequency(float centre)
{
 80a059e:	460e      	mov	r6, r1
    // Frf = FRF / FSTEP
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 80a05a0:	f001 fea6 	bl	80a22f0 <__aeabi_f2d>
 80a05a4:	a314      	add	r3, pc, #80	; (adr r3, 80a05f8 <_ZN7RH_RF9512setFrequencyEf+0x60>)
 80a05a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05aa:	f001 fef5 	bl	80a2398 <__aeabi_dmul>
 80a05ae:	a314      	add	r3, pc, #80	; (adr r3, 80a0600 <_ZN7RH_RF9512setFrequencyEf+0x68>)
 80a05b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05b4:	f002 f81a 	bl	80a25ec <__aeabi_ddiv>
 80a05b8:	f002 f900 	bl	80a27bc <__aeabi_d2uiz>
 80a05bc:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80a05be:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80a05c2:	2106      	movs	r1, #6
 80a05c4:	4620      	mov	r0, r4
 80a05c6:	f000 fbec 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80a05ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a05ce:	2107      	movs	r1, #7
 80a05d0:	4620      	mov	r0, r4
 80a05d2:	f000 fbe6 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 80a05d6:	b2ea      	uxtb	r2, r5
 80a05d8:	2108      	movs	r1, #8
 80a05da:	4620      	mov	r0, r4
 80a05dc:	f000 fbe1 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
 80a05e0:	4909      	ldr	r1, [pc, #36]	; (80a0608 <_ZN7RH_RF9512setFrequencyEf+0x70>)
 80a05e2:	4630      	mov	r0, r6
 80a05e4:	f04f 0501 	mov.w	r5, #1
 80a05e8:	f002 f96a 	bl	80a28c0 <__aeabi_fcmpge>
 80a05ec:	b900      	cbnz	r0, 80a05f0 <_ZN7RH_RF9512setFrequencyEf+0x58>
 80a05ee:	4605      	mov	r5, r0
 80a05f0:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124

    return true;
}
 80a05f4:	2001      	movs	r0, #1
 80a05f6:	bd70      	pop	{r4, r5, r6, pc}
 80a05f8:	00000000 	.word	0x00000000
 80a05fc:	412e8480 	.word	0x412e8480
 80a0600:	00000000 	.word	0x00000000
 80a0604:	404e8480 	.word	0x404e8480
 80a0608:	4442c000 	.word	0x4442c000

080a060c <_ZN7RH_RF9511setModeIdleEv>:

void RH_RF95::setModeIdle()
{
 80a060c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 80a060e:	7903      	ldrb	r3, [r0, #4]

    return true;
}

void RH_RF95::setModeIdle()
{
 80a0610:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 80a0612:	2b02      	cmp	r3, #2
 80a0614:	d005      	beq.n	80a0622 <_ZN7RH_RF9511setModeIdleEv+0x16>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 80a0616:	2201      	movs	r2, #1
 80a0618:	4611      	mov	r1, r2
 80a061a:	f000 fbc2 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 80a061e:	2302      	movs	r3, #2
 80a0620:	7123      	strb	r3, [r4, #4]
 80a0622:	bd10      	pop	{r4, pc}

080a0624 <_ZN7RH_RF9515handleInterruptEv>:
// LORA is unusual in that it has several interrupt lines, and not a single, combined one.
// On MiniWirelessLoRa, only one of the several interrupt lines (DI0) from the RFM95 is usefuly 
// connnected to the processor.
// We use this to get RxDone and TxDone interrupts
void RH_RF95::handleInterrupt()
{
 80a0624:	b570      	push	{r4, r5, r6, lr}
 80a0626:	4604      	mov	r4, r0
    // Read the interrupt register
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 80a0628:	2112      	movs	r1, #18
 80a062a:	f000 fb99 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 80a062e:	7923      	ldrb	r3, [r4, #4]
 80a0630:	2b04      	cmp	r3, #4
 80a0632:	d102      	bne.n	80a063a <_ZN7RH_RF9515handleInterruptEv+0x16>
 80a0634:	f010 0fa0 	tst.w	r0, #160	; 0xa0
 80a0638:	d106      	bne.n	80a0648 <_ZN7RH_RF9515handleInterruptEv+0x24>
    {
	_rxBad++;
    }
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 80a063a:	7925      	ldrb	r5, [r4, #4]
 80a063c:	b2ed      	uxtb	r5, r5
 80a063e:	2d04      	cmp	r5, #4
 80a0640:	d159      	bne.n	80a06f6 <_ZN7RH_RF9515handleInterruptEv+0xd2>
 80a0642:	0641      	lsls	r1, r0, #25
 80a0644:	d40b      	bmi.n	80a065e <_ZN7RH_RF9515handleInterruptEv+0x3a>
 80a0646:	e056      	b.n	80a06f6 <_ZN7RH_RF9515handleInterruptEv+0xd2>
{
    // Read the interrupt register
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
    if (_mode == RHModeRx && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
    {
	_rxBad++;
 80a0648:	8a23      	ldrh	r3, [r4, #16]
 80a064a:	3301      	adds	r3, #1
 80a064c:	b29b      	uxth	r3, r3
 80a064e:	8223      	strh	r3, [r4, #16]
    {
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
        setModeIdle();
    }
    
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0650:	4620      	mov	r0, r4
}
 80a0652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    {
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
        setModeIdle();
    }
    
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0656:	22ff      	movs	r2, #255	; 0xff
 80a0658:	2112      	movs	r1, #18
 80a065a:	f000 bba2 	b.w	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	_rxBad++;
    }
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
    {
	// Have received a packet
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a065e:	2113      	movs	r1, #19
 80a0660:	4620      	mov	r0, r4
 80a0662:	f000 fb7d 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>

	// Reset the fifo read ptr to the beginning of the packet
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a0666:	2110      	movs	r1, #16
	_rxBad++;
    }
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
    {
	// Have received a packet
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a0668:	4606      	mov	r6, r0

	// Reset the fifo read ptr to the beginning of the packet
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a066a:	4620      	mov	r0, r4
 80a066c:	f000 fb78 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>
 80a0670:	210d      	movs	r1, #13
 80a0672:	4602      	mov	r2, r0
 80a0674:	4620      	mov	r0, r4
 80a0676:	f000 fb94 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 80a067a:	4633      	mov	r3, r6
 80a067c:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80a0680:	2100      	movs	r1, #0
 80a0682:	4620      	mov	r0, r4
 80a0684:	f000 fbaf 	bl	80a0de6 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_bufLen = len;
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0688:	22ff      	movs	r2, #255	; 0xff
 80a068a:	2112      	movs	r1, #18
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);

	// Reset the fifo read ptr to the beginning of the packet
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
	_bufLen = len;
 80a068c:	f884 6023 	strb.w	r6, [r4, #35]	; 0x23
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0690:	4620      	mov	r0, r4
 80a0692:	f000 fb86 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>

	// Remember the last signal to noise ratio, LORA mode
	// Per page 111, SX1276/77/78/79 datasheet
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 80a0696:	2119      	movs	r1, #25
 80a0698:	4620      	mov	r0, r4
 80a069a:	f000 fb61 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>
 80a069e:	b240      	sxtb	r0, r0
 80a06a0:	fb90 f5f5 	sdiv	r5, r0, r5

	// Remember the RSSI of this packet, LORA mode
	// this is according to the doc, but is it really correct?
	// weakest receiveable signals are reported RSSI at about -66
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 80a06a4:	211a      	movs	r1, #26
	_bufLen = len;
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags

	// Remember the last signal to noise ratio, LORA mode
	// Per page 111, SX1276/77/78/79 datasheet
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
 80a06a6:	f884 5125 	strb.w	r5, [r4, #293]	; 0x125

	// Remember the RSSI of this packet, LORA mode
	// this is according to the doc, but is it really correct?
	// weakest receiveable signals are reported RSSI at about -66
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 80a06aa:	4620      	mov	r0, r4
 80a06ac:	f000 fb58 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>
	// Adjust the RSSI, datasheet page 87
	if (_lastSNR < 0)
 80a06b0:	f994 3125 	ldrsb.w	r3, [r4, #293]	; 0x125
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;

	// Remember the RSSI of this packet, LORA mode
	// this is according to the doc, but is it really correct?
	// weakest receiveable signals are reported RSSI at about -66
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 80a06b4:	b240      	sxtb	r0, r0
	// Adjust the RSSI, datasheet page 87
	if (_lastSNR < 0)
 80a06b6:	2b00      	cmp	r3, #0
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;

	// Remember the RSSI of this packet, LORA mode
	// this is according to the doc, but is it really correct?
	// weakest receiveable signals are reported RSSI at about -66
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
 80a06b8:	73e0      	strb	r0, [r4, #15]
	// Adjust the RSSI, datasheet page 87
	if (_lastSNR < 0)
 80a06ba:	da02      	bge.n	80a06c2 <_ZN7RH_RF9515handleInterruptEv+0x9e>
	    _lastRssi = _lastRssi + _lastSNR;
 80a06bc:	7be2      	ldrb	r2, [r4, #15]
 80a06be:	4413      	add	r3, r2
 80a06c0:	e005      	b.n	80a06ce <_ZN7RH_RF9515handleInterruptEv+0xaa>
	else
	    _lastRssi = (int)_lastRssi * 16 / 15;
 80a06c2:	7be3      	ldrb	r3, [r4, #15]
 80a06c4:	220f      	movs	r2, #15
 80a06c6:	b25b      	sxtb	r3, r3
 80a06c8:	011b      	lsls	r3, r3, #4
 80a06ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80a06ce:	b25b      	sxtb	r3, r3
 80a06d0:	73e3      	strb	r3, [r4, #15]
	if (_usingHFport)
 80a06d2:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 80a06d6:	b113      	cbz	r3, 80a06de <_ZN7RH_RF9515handleInterruptEv+0xba>
	    _lastRssi -= 157;
 80a06d8:	7be3      	ldrb	r3, [r4, #15]
 80a06da:	3363      	adds	r3, #99	; 0x63
 80a06dc:	e001      	b.n	80a06e2 <_ZN7RH_RF9515handleInterruptEv+0xbe>
	else
	    _lastRssi -= 164;
 80a06de:	7be3      	ldrb	r3, [r4, #15]
 80a06e0:	335c      	adds	r3, #92	; 0x5c
 80a06e2:	b25b      	sxtb	r3, r3
 80a06e4:	73e3      	strb	r3, [r4, #15]
	    
	// We have received a message.
	validateRxBuf(); 
 80a06e6:	4620      	mov	r0, r4
 80a06e8:	f7ff fefe 	bl	80a04e8 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 80a06ec:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80a06f0:	2b00      	cmp	r3, #0
 80a06f2:	d0ad      	beq.n	80a0650 <_ZN7RH_RF9515handleInterruptEv+0x2c>
 80a06f4:	e008      	b.n	80a0708 <_ZN7RH_RF9515handleInterruptEv+0xe4>
	    setModeIdle(); // Got one 
    }
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 80a06f6:	7923      	ldrb	r3, [r4, #4]
 80a06f8:	2b03      	cmp	r3, #3
 80a06fa:	d109      	bne.n	80a0710 <_ZN7RH_RF9515handleInterruptEv+0xec>
 80a06fc:	0702      	lsls	r2, r0, #28
 80a06fe:	d507      	bpl.n	80a0710 <_ZN7RH_RF9515handleInterruptEv+0xec>
    {
	_txGood++;
 80a0700:	8aa3      	ldrh	r3, [r4, #20]
 80a0702:	3301      	adds	r3, #1
 80a0704:	b29b      	uxth	r3, r3
 80a0706:	82a3      	strh	r3, [r4, #20]
	setModeIdle();
 80a0708:	4620      	mov	r0, r4
 80a070a:	f7ff ff7f 	bl	80a060c <_ZN7RH_RF9511setModeIdleEv>
 80a070e:	e79f      	b.n	80a0650 <_ZN7RH_RF9515handleInterruptEv+0x2c>
    }
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
 80a0710:	7923      	ldrb	r3, [r4, #4]
 80a0712:	2b05      	cmp	r3, #5
 80a0714:	d19c      	bne.n	80a0650 <_ZN7RH_RF9515handleInterruptEv+0x2c>
 80a0716:	0743      	lsls	r3, r0, #29
 80a0718:	d59a      	bpl.n	80a0650 <_ZN7RH_RF9515handleInterruptEv+0x2c>
    {
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
 80a071a:	f000 0001 	and.w	r0, r0, #1
 80a071e:	75a0      	strb	r0, [r4, #22]
 80a0720:	e7f2      	b.n	80a0708 <_ZN7RH_RF9515handleInterruptEv+0xe4>
	...

080a0724 <_ZN7RH_RF954isr0Ev>:
// These are low level functions that call the interrupt handler for the correct
// instance of RH_RF95.
// 3 interrupts allows us to have 3 different devices
void RH_RF95::isr0()
{
    if (_deviceForInterrupt[0])
 80a0724:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <_ZN7RH_RF954isr0Ev+0xc>)
 80a0726:	6818      	ldr	r0, [r3, #0]
 80a0728:	b108      	cbz	r0, 80a072e <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 80a072a:	f7ff bf7b 	b.w	80a0624 <_ZN7RH_RF9515handleInterruptEv>
 80a072e:	4770      	bx	lr
 80a0730:	200003c4 	.word	0x200003c4

080a0734 <_ZN7RH_RF954isr1Ev>:
}
void RH_RF95::isr1()
{
    if (_deviceForInterrupt[1])
 80a0734:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <_ZN7RH_RF954isr1Ev+0xc>)
 80a0736:	6858      	ldr	r0, [r3, #4]
 80a0738:	b108      	cbz	r0, 80a073e <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 80a073a:	f7ff bf73 	b.w	80a0624 <_ZN7RH_RF9515handleInterruptEv>
 80a073e:	4770      	bx	lr
 80a0740:	200003c4 	.word	0x200003c4

080a0744 <_ZN7RH_RF954isr2Ev>:
}
void RH_RF95::isr2()
{
    if (_deviceForInterrupt[2])
 80a0744:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <_ZN7RH_RF954isr2Ev+0xc>)
 80a0746:	6898      	ldr	r0, [r3, #8]
 80a0748:	b108      	cbz	r0, 80a074e <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 80a074a:	f7ff bf6b 	b.w	80a0624 <_ZN7RH_RF9515handleInterruptEv>
 80a074e:	4770      	bx	lr
 80a0750:	200003c4 	.word	0x200003c4

080a0754 <_ZN7RH_RF959setModeRxEv>:
    }
    return true;
}

void RH_RF95::setModeRx()
{
 80a0754:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 80a0756:	7903      	ldrb	r3, [r0, #4]
    }
    return true;
}

void RH_RF95::setModeRx()
{
 80a0758:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 80a075a:	2b04      	cmp	r3, #4
 80a075c:	d00a      	beq.n	80a0774 <_ZN7RH_RF959setModeRxEv+0x20>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 80a075e:	2205      	movs	r2, #5
 80a0760:	2101      	movs	r1, #1
 80a0762:	f000 fb1e 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 80a0766:	2200      	movs	r2, #0
 80a0768:	2140      	movs	r1, #64	; 0x40
 80a076a:	4620      	mov	r0, r4
 80a076c:	f000 fb19 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
 80a0770:	2304      	movs	r3, #4
 80a0772:	7123      	strb	r3, [r4, #4]
 80a0774:	bd10      	pop	{r4, pc}

080a0776 <_ZN7RH_RF959availableEv>:
	_rxBufValid = true;
    }
}

bool RH_RF95::available()
{
 80a0776:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 80a0778:	7903      	ldrb	r3, [r0, #4]
	_rxBufValid = true;
    }
}

bool RH_RF95::available()
{
 80a077a:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 80a077c:	2b03      	cmp	r3, #3
 80a077e:	d005      	beq.n	80a078c <_ZN7RH_RF959availableEv+0x16>
	return false;
    setModeRx();
 80a0780:	f7ff ffe8 	bl	80a0754 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 80a0784:	f894 0123 	ldrb.w	r0, [r4, #291]	; 0x123
 80a0788:	b2c0      	uxtb	r0, r0
 80a078a:	bd10      	pop	{r4, pc}
}

bool RH_RF95::available()
{
    if (_mode == RHModeTx)
	return false;
 80a078c:	2000      	movs	r0, #0
    setModeRx();
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
}
 80a078e:	bd10      	pop	{r4, pc}

080a0790 <_ZN7RH_RF959setModeTxEv>:
	_mode = RHModeRx;
    }
}

void RH_RF95::setModeTx()
{
 80a0790:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 80a0792:	7903      	ldrb	r3, [r0, #4]
	_mode = RHModeRx;
    }
}

void RH_RF95::setModeTx()
{
 80a0794:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 80a0796:	2b03      	cmp	r3, #3
 80a0798:	d00a      	beq.n	80a07b0 <_ZN7RH_RF959setModeTxEv+0x20>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 80a079a:	2203      	movs	r2, #3
 80a079c:	2101      	movs	r1, #1
 80a079e:	f000 fb00 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80a07a2:	2240      	movs	r2, #64	; 0x40
 80a07a4:	4611      	mov	r1, r2
 80a07a6:	4620      	mov	r0, r4
 80a07a8:	f000 fafb 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
 80a07ac:	2303      	movs	r3, #3
 80a07ae:	7123      	strb	r3, [r4, #4]
 80a07b0:	bd10      	pop	{r4, pc}

080a07b2 <_ZN7RH_RF954sendEPKhh>:
    return true;
}

bool RH_RF95::send(const uint8_t* data, uint8_t len)
{
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a07b2:	2afb      	cmp	r2, #251	; 0xfb
    clearRxBuf(); // This message accepted and cleared
    return true;
}

bool RH_RF95::send(const uint8_t* data, uint8_t len)
{
 80a07b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07b6:	4604      	mov	r4, r0
 80a07b8:	460f      	mov	r7, r1
 80a07ba:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a07bc:	d901      	bls.n	80a07c2 <_ZN7RH_RF954sendEPKhh+0x10>
	return false;
 80a07be:	2600      	movs	r6, #0
 80a07c0:	e034      	b.n	80a082c <_ZN7RH_RF954sendEPKhh+0x7a>

    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 80a07c2:	6803      	ldr	r3, [r0, #0]
 80a07c4:	699b      	ldr	r3, [r3, #24]
 80a07c6:	4798      	blx	r3
    setModeIdle();
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	f7ff ff1f 	bl	80a060c <_ZN7RH_RF9511setModeIdleEv>

    if (!waitCAD()) 
 80a07ce:	6823      	ldr	r3, [r4, #0]
 80a07d0:	4620      	mov	r0, r4
 80a07d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07d4:	4798      	blx	r3
 80a07d6:	4606      	mov	r6, r0
 80a07d8:	2800      	cmp	r0, #0
 80a07da:	d0f0      	beq.n	80a07be <_ZN7RH_RF954sendEPKhh+0xc>
	return false;  // Check channel activity

    // Position at the beginning of the FIFO
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 80a07dc:	2200      	movs	r2, #0
 80a07de:	210d      	movs	r1, #13
 80a07e0:	4620      	mov	r0, r4
 80a07e2:	f000 fade 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    // The headers
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 80a07e6:	7ae2      	ldrb	r2, [r4, #11]
 80a07e8:	2100      	movs	r1, #0
 80a07ea:	4620      	mov	r0, r4
 80a07ec:	f000 fad9 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 80a07f0:	7b22      	ldrb	r2, [r4, #12]
 80a07f2:	2100      	movs	r1, #0
 80a07f4:	4620      	mov	r0, r4
 80a07f6:	f000 fad4 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 80a07fa:	7b62      	ldrb	r2, [r4, #13]
 80a07fc:	2100      	movs	r1, #0
 80a07fe:	4620      	mov	r0, r4
 80a0800:	f000 facf 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 80a0804:	7ba2      	ldrb	r2, [r4, #14]
 80a0806:	2100      	movs	r1, #0
 80a0808:	4620      	mov	r0, r4
 80a080a:	f000 faca 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    // The message data
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 80a080e:	462b      	mov	r3, r5
 80a0810:	463a      	mov	r2, r7
 80a0812:	2100      	movs	r1, #0
 80a0814:	4620      	mov	r0, r4
 80a0816:	f000 fb11 	bl	80a0e3c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 80a081a:	1d2a      	adds	r2, r5, #4
 80a081c:	b2d2      	uxtb	r2, r2
 80a081e:	2122      	movs	r1, #34	; 0x22
 80a0820:	4620      	mov	r0, r4
 80a0822:	f000 fabe 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>

    setModeTx(); // Start the transmitter
 80a0826:	4620      	mov	r0, r4
 80a0828:	f7ff ffb2 	bl	80a0790 <_ZN7RH_RF959setModeTxEv>
    // when Tx is done, interruptHandler will fire and radio mode will return to STANDBY
    return true;
}
 80a082c:	4630      	mov	r0, r6
 80a082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0830 <_ZN7RH_RF9510setTxPowerEab>:
	_mode = RHModeTx;
    }
}

void RH_RF95::setTxPower(int8_t power, bool useRFO)
{
 80a0830:	b410      	push	{r4}
 80a0832:	460b      	mov	r3, r1
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 80a0834:	b162      	cbz	r2, 80a0850 <_ZN7RH_RF9510setTxPowerEab+0x20>
    {
	if (power > 14)
 80a0836:	290e      	cmp	r1, #14
	    power = 14;
	if (power < -1)
	    power = -1;
 80a0838:	bfd4      	ite	le
 80a083a:	ea41 73e1 	orrle.w	r3, r1, r1, asr #31
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
    {
	if (power > 14)
	    power = 14;
 80a083e:	230e      	movgt	r3, #14
	if (power < -1)
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80a0840:	1c5a      	adds	r2, r3, #1
 80a0842:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80a0846:	b2d2      	uxtb	r2, r2
 80a0848:	2109      	movs	r1, #9
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 80a084a:	bc10      	pop	{r4}
    {
	if (power > 14)
	    power = 14;
	if (power < -1)
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80a084c:	f000 baa9 	b.w	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 80a0850:	bc10      	pop	{r4}
 80a0852:	f7ff be04 	b.w	80a045e <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10>

080a0856 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:

// Sets registers from a canned modem configuration structure
void RH_RF95::setModemRegisters(const ModemConfig* config)
{
 80a0856:	b538      	push	{r3, r4, r5, lr}
 80a0858:	4605      	mov	r5, r0
 80a085a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 80a085c:	780a      	ldrb	r2, [r1, #0]
 80a085e:	211d      	movs	r1, #29
 80a0860:	f000 fa9f 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 80a0864:	7862      	ldrb	r2, [r4, #1]
 80a0866:	211e      	movs	r1, #30
 80a0868:	4628      	mov	r0, r5
 80a086a:	f000 fa9a 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a086e:	78a2      	ldrb	r2, [r4, #2]
 80a0870:	4628      	mov	r0, r5
}
 80a0872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Sets registers from a canned modem configuration structure
void RH_RF95::setModemRegisters(const ModemConfig* config)
{
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a0876:	2126      	movs	r1, #38	; 0x26
 80a0878:	f000 ba93 	b.w	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>

080a087c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool RH_RF95::setModemConfig(ModemConfigChoice index)
{
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a087c:	2912      	cmp	r1, #18
}

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool RH_RF95::setModemConfig(ModemConfigChoice index)
{
 80a087e:	b507      	push	{r0, r1, r2, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a0880:	dc0e      	bgt.n	80a08a0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x24>
        return false;

    ModemConfig cfg;
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a0882:	4b09      	ldr	r3, [pc, #36]	; (80a08a8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 80a0884:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0888:	4419      	add	r1, r3
 80a088a:	880a      	ldrh	r2, [r1, #0]
 80a088c:	788b      	ldrb	r3, [r1, #2]
    setModemRegisters(&cfg);
 80a088e:	a901      	add	r1, sp, #4
{
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
        return false;

    ModemConfig cfg;
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a0890:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0894:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 80a0898:	f7ff ffdd 	bl	80a0856 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>

    return true;
 80a089c:	2001      	movs	r0, #1
 80a089e:	e000      	b.n	80a08a2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool RH_RF95::setModemConfig(ModemConfigChoice index)
{
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
        return false;
 80a08a0:	2000      	movs	r0, #0
    ModemConfig cfg;
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
    setModemRegisters(&cfg);

    return true;
}
 80a08a2:	b003      	add	sp, #12
 80a08a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a08a8:	080a2b5b 	.word	0x080a2b5b

080a08ac <_ZN7RH_RF9517setPreambleLengthEt>:

void RH_RF95::setPreambleLength(uint16_t bytes)
{
 80a08ac:	b538      	push	{r3, r4, r5, lr}
 80a08ae:	4605      	mov	r5, r0
 80a08b0:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 80a08b2:	0a0a      	lsrs	r2, r1, #8
 80a08b4:	2120      	movs	r1, #32
 80a08b6:	f000 fa74 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a08ba:	b2e2      	uxtb	r2, r4
 80a08bc:	4628      	mov	r0, r5
}
 80a08be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void RH_RF95::setPreambleLength(uint16_t bytes)
{
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a08c2:	2121      	movs	r1, #33	; 0x21
 80a08c4:	f000 ba6d 	b.w	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>

080a08c8 <_GLOBAL__sub_I__ZN7RH_RF9519_deviceForInterruptE>:
 80a08c8:	f000 bae6 	b.w	80a0e98 <HAL_Pin_Map>

080a08cc <_ZN7RH_RF954initEv>:
    _interruptPin = interruptPin;
    _myInterruptIndex = 0xff; // Not allocated yet
}

bool RH_RF95::init()
{
 80a08cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a08ce:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 80a08d0:	f000 fa21 	bl	80a0d16 <_ZN11RHSPIDriver4initEv>
 80a08d4:	4605      	mov	r5, r0
 80a08d6:	b908      	cbnz	r0, 80a08dc <_ZN7RH_RF954initEv+0x10>
	return false;
 80a08d8:	2500      	movs	r5, #0
 80a08da:	e05c      	b.n	80a0996 <_ZN7RH_RF954initEv+0xca>
#endif

    // No way to check the device type :-(
    
    // Set sleep mode, so we can also set LORA mode:
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a08dc:	2280      	movs	r2, #128	; 0x80
 80a08de:	2101      	movs	r1, #1
 80a08e0:	4620      	mov	r0, r4
{
    if (!RHSPIDriver::init())
	return false;

    // Determine the interrupt number that corresponds to the interruptPin
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 80a08e2:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
#endif

    // No way to check the device type :-(
    
    // Set sleep mode, so we can also set LORA mode:
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a08e6:	f000 fa5c 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 80a08ea:	200a      	movs	r0, #10
 80a08ec:	f000 fdec 	bl	80a14c8 <delay>
    // Check we are in sleep mode, with LORA set
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 80a08f0:	2101      	movs	r1, #1
 80a08f2:	4620      	mov	r0, r4
 80a08f4:	f000 fa34 	bl	80a0d60 <_ZN11RHSPIDriver7spiReadEh>
 80a08f8:	2880      	cmp	r0, #128	; 0x80
 80a08fa:	d1ed      	bne.n	80a08d8 <_ZN7RH_RF954initEv+0xc>
    }

    // Add by Adrien van den Bossche <vandenbo@univ-tlse2.fr> for Teensy
    // ARM M4 requires the below. else pin interrupt doesn't work properly.
    // On all other platforms, its innocuous, belt and braces
    pinMode(_interruptPin, INPUT); 
 80a08fc:	2100      	movs	r1, #0
 80a08fe:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80a0902:	f001 f9bd 	bl	80a1c80 <pinMode>
    // Since there are a limited number of interrupt glue functions isr*() available,
    // we can only support a limited number of devices simultaneously
    // ON some devices, notably most Arduinos, the interrupt pin passed in is actuallt the 
    // interrupt number. You have to figure out the interruptnumber-to-interruptpin mapping
    // yourself based on knwledge of what Arduino board you are running on.
    if (_myInterruptIndex == 0xff)
 80a0906:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a090a:	2bff      	cmp	r3, #255	; 0xff
 80a090c:	d107      	bne.n	80a091e <_ZN7RH_RF954initEv+0x52>
    {
	// First run, no interrupt allocated yet
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 80a090e:	4a23      	ldr	r2, [pc, #140]	; (80a099c <_ZN7RH_RF954initEv+0xd0>)
 80a0910:	7813      	ldrb	r3, [r2, #0]
 80a0912:	2b03      	cmp	r3, #3
 80a0914:	d8e0      	bhi.n	80a08d8 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 80a0916:	1c59      	adds	r1, r3, #1
 80a0918:	7011      	strb	r1, [r2, #0]
 80a091a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	else
	    return false; // Too many devices, not enough interrupt vectors
    }
    _deviceForInterrupt[_myInterruptIndex] = this;
 80a091e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a0922:	4b1f      	ldr	r3, [pc, #124]	; (80a09a0 <_ZN7RH_RF954initEv+0xd4>)
 80a0924:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 80a0928:	b92a      	cbnz	r2, 80a0936 <_ZN7RH_RF954initEv+0x6a>
	attachInterrupt(interruptNumber, isr0, RISING);
 80a092a:	9200      	str	r2, [sp, #0]
 80a092c:	f04f 33ff 	mov.w	r3, #4294967295
 80a0930:	2201      	movs	r2, #1
 80a0932:	491c      	ldr	r1, [pc, #112]	; (80a09a4 <_ZN7RH_RF954initEv+0xd8>)
 80a0934:	e00f      	b.n	80a0956 <_ZN7RH_RF954initEv+0x8a>
    else if (_myInterruptIndex == 1)
 80a0936:	2a01      	cmp	r2, #1
 80a0938:	f04f 0300 	mov.w	r3, #0
 80a093c:	d104      	bne.n	80a0948 <_ZN7RH_RF954initEv+0x7c>
	attachInterrupt(interruptNumber, isr1, RISING);
 80a093e:	9300      	str	r3, [sp, #0]
 80a0940:	4919      	ldr	r1, [pc, #100]	; (80a09a8 <_ZN7RH_RF954initEv+0xdc>)
 80a0942:	f04f 33ff 	mov.w	r3, #4294967295
 80a0946:	e006      	b.n	80a0956 <_ZN7RH_RF954initEv+0x8a>
    else if (_myInterruptIndex == 2)
 80a0948:	2a02      	cmp	r2, #2
 80a094a:	d1c5      	bne.n	80a08d8 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 80a094c:	4917      	ldr	r1, [pc, #92]	; (80a09ac <_ZN7RH_RF954initEv+0xe0>)
 80a094e:	9300      	str	r3, [sp, #0]
 80a0950:	2201      	movs	r2, #1
 80a0952:	f04f 33ff 	mov.w	r3, #4294967295
 80a0956:	4630      	mov	r0, r6
 80a0958:	f000 ff94 	bl	80a1884 <_Z15attachInterrupttPFvvE13InterruptModeah>
	return false; // Too many devices, not enough interrupt vectors

    // Set up FIFO
    // We configure so that we can use the entire 256 byte FIFO for either receive
    // or transmit, but not both at the same time
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 80a095c:	2200      	movs	r2, #0
 80a095e:	210e      	movs	r1, #14
 80a0960:	4620      	mov	r0, r4
 80a0962:	f000 fa1e 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 80a0966:	2200      	movs	r2, #0
 80a0968:	210f      	movs	r1, #15
 80a096a:	4620      	mov	r0, r4
 80a096c:	f000 fa19 	bl	80a0da2 <_ZN11RHSPIDriver8spiWriteEhh>
    // Explicit Header Mode
    // payload is TO + FROM + ID + FLAGS + message data
    // RX mode is implmented with RXCONTINUOUS
    // max message data length is 255 - 4 = 251 octets

    setModeIdle();
 80a0970:	4620      	mov	r0, r4
 80a0972:	f7ff fe4b 	bl	80a060c <_ZN7RH_RF9511setModeIdleEv>
  // setModemConfig(BW62_5Cr45Sf1024); // 6: Bw = 62.5kHz,  Cr = 4/5, Sf10 = 1024 chips/symbol,CRC on Slow+long range--->>>               delay I got of 1652ms ( NOW DO NOT WORK!!)sending this --> Hello World!
  // setModemConfig(BW62_5Cr45Sf512);  // 7: Bw = 62.5kHz,  Cr = 4/5, Sf9  = 512  chips/symbol,CRC on --> I gott a delay of: RSSI= 40, 1816 ms sending this --> Hello World!! (665m con el gps tracker 5dbm)
  // setModemConfig(BW256_7Cr45sf128); // 8: Bw = 256 kHz,  Cr = 4/5, Sf7  = 128  chips/symbol,CRC on --> I gott a delay of: RSSI= 35, 145 ms sending this --> Hello World!!
  // setModemConfig(BW125_7Cr45sf128); // 9: Bw = 125 kHz,  Cr = 4/5, Sf7  = 128  chips/symbol,CRC on --> I gott a delay of: RSSI= 39, 219 ms sending this --> Hello World!!
  // setModemConfig(BW62_57Cr45sf128); // 10: Bw = 62.5kHz, Cr = 4/5, Sf7  = 128  chips/symbol,CRC on --> I gott a delay of: RSSI= 36, 376 ms sending this --> Hello World!!
    setModemConfig(BW125CR46SF9);     // 11: BW = 125 Khz, Cr = 4/6, SF9  = 512  chips/symbol,CRC on --> I gott a delay of: RSSI= 36, 647 ms sending this --> Hello World!
 80a0976:	210a      	movs	r1, #10
 80a0978:	4620      	mov	r0, r4
 80a097a:	f7ff ff7f 	bl	80a087c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
  // setModemConfig(BW125CR45SF11);    // 15: Bw = 125 khz, Cr = 4/5, Sf11 = 2048 chips/symbol,CRC on--> DO NOT WORK sending this --> Hello World!
  // setModemConfig(BW125CR45SF10);    // 16: Bw = 125khz,  Cr = 4/5, Sf10 = 1024 chips/symbol,CRC on--> DO NOT WORK sending this --> Hello World!
  // setModemConfig(BW31_25CR45SF9);    // 17: Bw = 31.25khz, Cr = 4/5, Sf8  = 256 chips/symbol,CRC on--> I gott a delay of: RSSI= 39, 1313 ms sending this --> Hello World! (858m con el GPS tracker 5dbm)
   //setModemConfig(BW41_7CR45SF9);     // 18: Bw = 41.7khz,  Cr = 4/5, Sf8  = 256 chips/symbol, CRC on.  
    
    setPreambleLength(8); // Default is 8
 80a097e:	2108      	movs	r1, #8
 80a0980:	4620      	mov	r0, r4
 80a0982:	f7ff ff93 	bl	80a08ac <_ZN7RH_RF9517setPreambleLengthEt>
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
 80a0986:	490a      	ldr	r1, [pc, #40]	; (80a09b0 <_ZN7RH_RF954initEv+0xe4>)
 80a0988:	4620      	mov	r0, r4
 80a098a:	f7ff fe05 	bl	80a0598 <_ZN7RH_RF9512setFrequencyEf>
 80a098e:	210d      	movs	r1, #13
 80a0990:	4620      	mov	r0, r4
 80a0992:	f7ff fd64 	bl	80a045e <_ZN7RH_RF9510setTxPowerEab.part.7.constprop.10>
    // Lowish power
    setTxPower(13);

    return true;
}
 80a0996:	4628      	mov	r0, r5
 80a0998:	b002      	add	sp, #8
 80a099a:	bd70      	pop	{r4, r5, r6, pc}
 80a099c:	200003d0 	.word	0x200003d0
 80a09a0:	200003c4 	.word	0x200003c4
 80a09a4:	080a0725 	.word	0x080a0725
 80a09a8:	080a0735 	.word	0x080a0735
 80a09ac:	080a0745 	.word	0x080a0745
 80a09b0:	43d90000 	.word	0x43d90000

080a09b4 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
 80a09b4:	6001      	str	r1, [r0, #0]
 80a09b6:	7102      	strb	r2, [r0, #4]
{
}
 80a09b8:	4770      	bx	lr

080a09ba <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
 80a09ba:	6800      	ldr	r0, [r0, #0]
 80a09bc:	6803      	ldr	r3, [r0, #0]
 80a09be:	685b      	ldr	r3, [r3, #4]
 80a09c0:	4718      	bx	r3

080a09c2 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable();
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
 80a09c2:	6800      	ldr	r0, [r0, #0]
 80a09c4:	6803      	ldr	r3, [r0, #0]
 80a09c6:	699b      	ldr	r3, [r3, #24]
 80a09c8:	4718      	bx	r3

080a09ca <_ZN10RHDatagram20waitAvailableTimeoutEt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout)
{
    return _driver.waitAvailableTimeout(timeout);
 80a09ca:	6800      	ldr	r0, [r0, #0]
 80a09cc:	6803      	ldr	r3, [r0, #0]
 80a09ce:	6a1b      	ldr	r3, [r3, #32]
 80a09d0:	4718      	bx	r3

080a09d2 <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
 80a09d2:	6800      	ldr	r0, [r0, #0]
 80a09d4:	6803      	ldr	r3, [r0, #0]
 80a09d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09d8:	4718      	bx	r3

080a09da <_ZN10RHDatagram6sendtoEPhhh>:
    setHeaderFrom(thisAddress);
    _thisAddress = thisAddress;
}

bool RHDatagram::sendto(uint8_t* buf, uint8_t len, uint8_t address)
{
 80a09da:	b570      	push	{r4, r5, r6, lr}
 80a09dc:	4606      	mov	r6, r0
 80a09de:	460c      	mov	r4, r1
 80a09e0:	4615      	mov	r5, r2
    setHeaderTo(address);
 80a09e2:	4619      	mov	r1, r3
 80a09e4:	f7ff fff5 	bl	80a09d2 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
 80a09e8:	6830      	ldr	r0, [r6, #0]
 80a09ea:	462a      	mov	r2, r5
 80a09ec:	6803      	ldr	r3, [r0, #0]
 80a09ee:	4621      	mov	r1, r4
}
 80a09f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

bool RHDatagram::sendto(uint8_t* buf, uint8_t len, uint8_t address)
{
    setHeaderTo(address);
    return _driver.send(buf, len);
 80a09f4:	68db      	ldr	r3, [r3, #12]
 80a09f6:	4718      	bx	r3

080a09f8 <_ZN10RHDatagram13setHeaderFromEh>:
    _driver.setHeaderTo(to);
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
 80a09f8:	6800      	ldr	r0, [r0, #0]
 80a09fa:	6803      	ldr	r3, [r0, #0]
 80a09fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09fe:	4718      	bx	r3

080a0a00 <_ZN10RHDatagram14setThisAddressEh>:
	setThisAddress(_thisAddress);
    return ret;
}

void RHDatagram::setThisAddress(uint8_t thisAddress)
{
 80a0a00:	b538      	push	{r3, r4, r5, lr}
 80a0a02:	4604      	mov	r4, r0
 80a0a04:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
 80a0a06:	6800      	ldr	r0, [r0, #0]
 80a0a08:	6803      	ldr	r3, [r0, #0]
 80a0a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a0c:	4798      	blx	r3
    // Use this address in the transmitted FROM header
    setHeaderFrom(thisAddress);
 80a0a0e:	4629      	mov	r1, r5
 80a0a10:	4620      	mov	r0, r4
 80a0a12:	f7ff fff1 	bl	80a09f8 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
 80a0a16:	7125      	strb	r5, [r4, #4]
 80a0a18:	bd38      	pop	{r3, r4, r5, pc}

080a0a1a <_ZN10RHDatagram4initEv>:
}

////////////////////////////////////////////////////////////////////
// Public methods
bool RHDatagram::init()
{
 80a0a1a:	b538      	push	{r3, r4, r5, lr}
 80a0a1c:	4604      	mov	r4, r0
    bool ret = _driver.init();
 80a0a1e:	6800      	ldr	r0, [r0, #0]
 80a0a20:	6803      	ldr	r3, [r0, #0]
 80a0a22:	681b      	ldr	r3, [r3, #0]
 80a0a24:	4798      	blx	r3
    if (ret)
 80a0a26:	4605      	mov	r5, r0
 80a0a28:	b118      	cbz	r0, 80a0a32 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
 80a0a2a:	7921      	ldrb	r1, [r4, #4]
 80a0a2c:	4620      	mov	r0, r4
 80a0a2e:	f7ff ffe7 	bl	80a0a00 <_ZN10RHDatagram14setThisAddressEh>
    return ret;
}
 80a0a32:	4628      	mov	r0, r5
 80a0a34:	bd38      	pop	{r3, r4, r5, pc}

080a0a36 <_ZN10RHDatagram11setHeaderIdEh>:
    _driver.setHeaderFrom(from);
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
 80a0a36:	6800      	ldr	r0, [r0, #0]
 80a0a38:	6803      	ldr	r3, [r0, #0]
 80a0a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a3c:	4718      	bx	r3

080a0a3e <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
 80a0a3e:	6800      	ldr	r0, [r0, #0]
 80a0a40:	6803      	ldr	r3, [r0, #0]
 80a0a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a44:	4718      	bx	r3

080a0a46 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
 80a0a46:	6800      	ldr	r0, [r0, #0]
 80a0a48:	6803      	ldr	r3, [r0, #0]
 80a0a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a4c:	4718      	bx	r3

080a0a4e <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
 80a0a4e:	6800      	ldr	r0, [r0, #0]
 80a0a50:	6803      	ldr	r3, [r0, #0]
 80a0a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a54:	4718      	bx	r3

080a0a56 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
 80a0a56:	6800      	ldr	r0, [r0, #0]
 80a0a58:	6803      	ldr	r3, [r0, #0]
 80a0a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a5c:	4718      	bx	r3

080a0a5e <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
 80a0a5e:	6800      	ldr	r0, [r0, #0]
 80a0a60:	6803      	ldr	r3, [r0, #0]
 80a0a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0a64:	4718      	bx	r3

080a0a66 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
    setHeaderTo(address);
    return _driver.send(buf, len);
}

bool RHDatagram::recvfrom(uint8_t* buf, uint8_t* len, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{
 80a0a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0a6a:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
 80a0a6c:	6800      	ldr	r0, [r0, #0]
    setHeaderTo(address);
    return _driver.send(buf, len);
}

bool RHDatagram::recvfrom(uint8_t* buf, uint8_t* len, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{
 80a0a6e:	4699      	mov	r9, r3
    if (_driver.recv(buf, len))
 80a0a70:	6803      	ldr	r3, [r0, #0]
    setHeaderTo(address);
    return _driver.send(buf, len);
}

bool RHDatagram::recvfrom(uint8_t* buf, uint8_t* len, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{
 80a0a72:	f8dd 8020 	ldr.w	r8, [sp, #32]
    if (_driver.recv(buf, len))
 80a0a76:	689b      	ldr	r3, [r3, #8]
    setHeaderTo(address);
    return _driver.send(buf, len);
}

bool RHDatagram::recvfrom(uint8_t* buf, uint8_t* len, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{
 80a0a78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a0a7a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    if (_driver.recv(buf, len))
 80a0a7c:	4798      	blx	r3
 80a0a7e:	4605      	mov	r5, r0
 80a0a80:	b1c8      	cbz	r0, 80a0ab6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x50>
    {
	if (from)  *from =  headerFrom();
 80a0a82:	f1b9 0f00 	cmp.w	r9, #0
 80a0a86:	d004      	beq.n	80a0a92 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x2c>
 80a0a88:	4620      	mov	r0, r4
 80a0a8a:	f7ff ffe0 	bl	80a0a4e <_ZN10RHDatagram10headerFromEv>
 80a0a8e:	f889 0000 	strb.w	r0, [r9]
	if (to)    *to =    headerTo();
 80a0a92:	f1b8 0f00 	cmp.w	r8, #0
 80a0a96:	d004      	beq.n	80a0aa2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x3c>
 80a0a98:	4620      	mov	r0, r4
 80a0a9a:	f7ff ffd4 	bl	80a0a46 <_ZN10RHDatagram8headerToEv>
 80a0a9e:	f888 0000 	strb.w	r0, [r8]
	if (id)    *id =    headerId();
 80a0aa2:	b11f      	cbz	r7, 80a0aac <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x46>
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f7ff ffd6 	bl	80a0a56 <_ZN10RHDatagram8headerIdEv>
 80a0aaa:	7038      	strb	r0, [r7, #0]
	if (flags) *flags = headerFlags();
 80a0aac:	b11e      	cbz	r6, 80a0ab6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x50>
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	f7ff ffd5 	bl	80a0a5e <_ZN10RHDatagram11headerFlagsEv>
 80a0ab4:	7030      	strb	r0, [r6, #0]
	return true;
    }
    return false;
}
 80a0ab6:	4628      	mov	r0, r5
 80a0ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0abc <_GLOBAL__sub_I__ZN10RHDatagramC2ER15RHGenericDriverh>:
 80a0abc:	f000 b9ec 	b.w	80a0e98 <HAL_Pin_Map>

080a0ac0 <_GLOBAL__sub_I__ZN7RH_RF6919_deviceForInterruptE>:
 80a0ac0:	f000 b9ea 	b.w	80a0e98 <HAL_Pin_Map>

080a0ac4 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
 80a0ac4:	b510      	push	{r4, lr}
 80a0ac6:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
 80a0ac8:	f7ff ff74 	bl	80a09b4 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
 80a0acc:	2100      	movs	r1, #0
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
 80a0ace:	f44f 7348 	mov.w	r3, #800	; 0x320
////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    : RHDatagram(driver, thisAddress)
{
    _retransmissions = 0;
 80a0ad2:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
 80a0ad4:	7321      	strb	r1, [r4, #12]
    _timeout = RH_DEFAULT_TIMEOUT;
 80a0ad6:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
 80a0ad8:	7421      	strb	r1, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
 80a0ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a0ade:	f104 0011 	add.w	r0, r4, #17
 80a0ae2:	f001 ff1a 	bl	80a291a <memset>
}
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	bd10      	pop	{r4, pc}

080a0aea <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
 80a0aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0aec:	4604      	mov	r4, r0
 80a0aee:	4615      	mov	r5, r2
    setHeaderId(id);
 80a0af0:	f7ff ffa1 	bl	80a0a36 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
 80a0af4:	4620      	mov	r0, r4
 80a0af6:	2200      	movs	r2, #0
 80a0af8:	2180      	movs	r1, #128	; 0x80
 80a0afa:	f7ff ffa0 	bl	80a0a3e <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
 80a0afe:	a902      	add	r1, sp, #8
 80a0b00:	2321      	movs	r3, #33	; 0x21
 80a0b02:	f801 3d01 	strb.w	r3, [r1, #-1]!
    sendto(&ack, sizeof(ack), from); 
 80a0b06:	2201      	movs	r2, #1
 80a0b08:	462b      	mov	r3, r5
 80a0b0a:	4620      	mov	r0, r4
 80a0b0c:	f7ff ff65 	bl	80a09da <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
 80a0b10:	4620      	mov	r0, r4
 80a0b12:	f7ff ff56 	bl	80a09c2 <_ZN10RHDatagram14waitPacketSentEv>
}
 80a0b16:	b003      	add	sp, #12
 80a0b18:	bd30      	pop	{r4, r5, pc}

080a0b1a <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
    return _retries;
}

////////////////////////////////////////////////////////////////////
bool RHReliableDatagram::sendtoWait(uint8_t* buf, uint8_t len, uint8_t address)
{
 80a0b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b1e:	4604      	mov	r4, r0
 80a0b20:	4689      	mov	r9, r1
 80a0b22:	4692      	mov	sl, r2
    // Assemble the message
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
 80a0b24:	7b06      	ldrb	r6, [r0, #12]
    return _retries;
}

////////////////////////////////////////////////////////////////////
bool RHReliableDatagram::sendtoWait(uint8_t* buf, uint8_t len, uint8_t address)
{
 80a0b26:	4698      	mov	r8, r3
    // Assemble the message
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
 80a0b28:	3601      	adds	r6, #1
 80a0b2a:	b2f6      	uxtb	r6, r6
    return _retries;
}

////////////////////////////////////////////////////////////////////
bool RHReliableDatagram::sendtoWait(uint8_t* buf, uint8_t len, uint8_t address)
{
 80a0b2c:	b089      	sub	sp, #36	; 0x24
    // Assemble the message
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
 80a0b2e:	7306      	strb	r6, [r0, #12]
    uint8_t retries = 0;
 80a0b30:	2300      	movs	r3, #0
	// This is to prevent collisions on every retransmit
	// if 2 nodes try to transmit at the same time
#if (RH_PLATFORM == RH_PLATFORM_RASPI) // use standard library random(), bugs in random(min, max)
	uint16_t timeout = _timeout + (_timeout * (random() & 0xFF) / 256);
#else
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
 80a0b32:	f44f 7b80 	mov.w	fp, #256	; 0x100
bool RHReliableDatagram::sendtoWait(uint8_t* buf, uint8_t len, uint8_t address)
{
    // Assemble the message
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
    uint8_t retries = 0;
    while (retries++ <= _retries)
 80a0b36:	7c22      	ldrb	r2, [r4, #16]
 80a0b38:	1c5f      	adds	r7, r3, #1
 80a0b3a:	429a      	cmp	r2, r3
 80a0b3c:	b2ff      	uxtb	r7, r7
 80a0b3e:	d365      	bcc.n	80a0c0c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xf2>
    {
	setHeaderId(thisSequenceNumber);
 80a0b40:	4631      	mov	r1, r6
 80a0b42:	4620      	mov	r0, r4
 80a0b44:	f7ff ff77 	bl	80a0a36 <_ZN10RHDatagram11setHeaderIdEh>
	setHeaderFlags(RH_FLAGS_NONE, RH_FLAGS_ACK); // Clear the ACK flag
 80a0b48:	2280      	movs	r2, #128	; 0x80
 80a0b4a:	2100      	movs	r1, #0
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	f7ff ff76 	bl	80a0a3e <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
 80a0b52:	4643      	mov	r3, r8
 80a0b54:	4652      	mov	r2, sl
 80a0b56:	4649      	mov	r1, r9
 80a0b58:	4620      	mov	r0, r4
 80a0b5a:	f7ff ff3e 	bl	80a09da <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	f7ff ff2f 	bl	80a09c2 <_ZN10RHDatagram14waitPacketSentEv>

	// Never wait for ACKS to broadcasts:
	if (address == RH_BROADCAST_ADDRESS)
 80a0b64:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a0b68:	d052      	beq.n	80a0c10 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xf6>
	    return true;

	if (retries > 1)
 80a0b6a:	2f01      	cmp	r7, #1
	    _retransmissions++;
 80a0b6c:	bf82      	ittt	hi
 80a0b6e:	68a3      	ldrhi	r3, [r4, #8]
 80a0b70:	3301      	addhi	r3, #1
 80a0b72:	60a3      	strhi	r3, [r4, #8]
 80a0b74:	f000 fa18 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
	// This is to prevent collisions on every retransmit
	// if 2 nodes try to transmit at the same time
#if (RH_PLATFORM == RH_PLATFORM_RASPI) // use standard library random(), bugs in random(min, max)
	uint16_t timeout = _timeout + (_timeout * (random() & 0xFF) / 256);
#else
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
 80a0b78:	89e3      	ldrh	r3, [r4, #14]
 80a0b7a:	4605      	mov	r5, r0
 80a0b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0b80:	2000      	movs	r0, #0
 80a0b82:	9305      	str	r3, [sp, #20]
 80a0b84:	f000 ff8d 	bl	80a1aa2 <_Z6randomii>
 80a0b88:	9b05      	ldr	r3, [sp, #20]
 80a0b8a:	4358      	muls	r0, r3
 80a0b8c:	fb90 f0fb 	sdiv	r0, r0, fp
 80a0b90:	4418      	add	r0, r3
 80a0b92:	b280      	uxth	r0, r0
#endif
	int32_t timeLeft;
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
 80a0b94:	4405      	add	r5, r0
 80a0b96:	f000 fa07 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
 80a0b9a:	1a29      	subs	r1, r5, r0
 80a0b9c:	2900      	cmp	r1, #0
bool RHReliableDatagram::sendtoWait(uint8_t* buf, uint8_t len, uint8_t address)
{
    // Assemble the message
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
    uint8_t retries = 0;
    while (retries++ <= _retries)
 80a0b9e:	463b      	mov	r3, r7
	uint16_t timeout = _timeout + (_timeout * (random() & 0xFF) / 256);
#else
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
#endif
	int32_t timeLeft;
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
 80a0ba0:	ddc9      	ble.n	80a0b36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x1c>
	{
	    if (waitAvailableTimeout(timeLeft))
 80a0ba2:	b289      	uxth	r1, r1
 80a0ba4:	4620      	mov	r0, r4
 80a0ba6:	f7ff ff10 	bl	80a09ca <_ZN10RHDatagram20waitAvailableTimeoutEt>
 80a0baa:	2800      	cmp	r0, #0
 80a0bac:	d0f3      	beq.n	80a0b96 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x7c>
	    {
		uint8_t from, to, id, flags;
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
 80a0bae:	f10d 031f 	add.w	r3, sp, #31
 80a0bb2:	9302      	str	r3, [sp, #8]
 80a0bb4:	f10d 031e 	add.w	r3, sp, #30
 80a0bb8:	9301      	str	r3, [sp, #4]
 80a0bba:	2200      	movs	r2, #0
 80a0bbc:	f10d 031d 	add.w	r3, sp, #29
 80a0bc0:	9300      	str	r3, [sp, #0]
 80a0bc2:	4611      	mov	r1, r2
 80a0bc4:	ab07      	add	r3, sp, #28
 80a0bc6:	4620      	mov	r0, r4
 80a0bc8:	f7ff ff4d 	bl	80a0a66 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
 80a0bcc:	2800      	cmp	r0, #0
 80a0bce:	d0e2      	beq.n	80a0b96 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x7c>
		{
		    // Now have a message: is it our ACK?
		    if (   from == address 
 80a0bd0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80a0bd4:	f99d 301f 	ldrsb.w	r3, [sp, #31]
 80a0bd8:	4590      	cmp	r8, r2
 80a0bda:	d10b      	bne.n	80a0bf4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xda>
			   && to == _thisAddress 
 80a0bdc:	f894 e004 	ldrb.w	lr, [r4, #4]
 80a0be0:	f89d 101d 	ldrb.w	r1, [sp, #29]
 80a0be4:	458e      	cmp	lr, r1
 80a0be6:	d105      	bne.n	80a0bf4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xda>
			   && (flags & RH_FLAGS_ACK) 
 80a0be8:	2b00      	cmp	r3, #0
 80a0bea:	da03      	bge.n	80a0bf4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xda>
			   && (id == thisSequenceNumber))
 80a0bec:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80a0bf0:	42b1      	cmp	r1, r6
 80a0bf2:	d00e      	beq.n	80a0c12 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xf8>
		    {
			// Its the ACK we are waiting for
			return true;
		    }
		    else if (   !(flags & RH_FLAGS_ACK)
 80a0bf4:	2b00      	cmp	r3, #0
 80a0bf6:	dbce      	blt.n	80a0b96 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x7c>
				&& (id == _seenIds[from]))
 80a0bf8:	18a3      	adds	r3, r4, r2
 80a0bfa:	7c5b      	ldrb	r3, [r3, #17]
 80a0bfc:	f89d 101e 	ldrb.w	r1, [sp, #30]
 80a0c00:	4299      	cmp	r1, r3
 80a0c02:	d1c8      	bne.n	80a0b96 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x7c>
		    {
			// This is a request we have already received. ACK it again
			acknowledge(id, from);
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	f7ff ff70 	bl	80a0aea <_ZN18RHReliableDatagram11acknowledgeEhh>
 80a0c0a:	e7c4      	b.n	80a0b96 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x7c>
	}
	// Timeout exhausted, maybe retry
	YIELD;
    }
    // Retries exhausted
    return false;
 80a0c0c:	2000      	movs	r0, #0
 80a0c0e:	e000      	b.n	80a0c12 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xf8>
	sendto(buf, len, address);
	waitPacketSent();

	// Never wait for ACKS to broadcasts:
	if (address == RH_BROADCAST_ADDRESS)
	    return true;
 80a0c10:	2001      	movs	r0, #1
	// Timeout exhausted, maybe retry
	YIELD;
    }
    // Retries exhausted
    return false;
}
 80a0c12:	b009      	add	sp, #36	; 0x24
 80a0c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0c18 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHReliableDatagram::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{  
 80a0c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c1c:	b086      	sub	sp, #24
 80a0c1e:	af0e      	add	r7, sp, #56	; 0x38
 80a0c20:	4604      	mov	r4, r0
 80a0c22:	e897 0380 	ldmia.w	r7, {r7, r8, r9}
 80a0c26:	460d      	mov	r5, r1
 80a0c28:	4692      	mov	sl, r2
 80a0c2a:	461e      	mov	r6, r3
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    // Get the message before its clobbered by the ACK (shared rx and tx buffer in some drivers
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
 80a0c2c:	f7ff fec5 	bl	80a09ba <_ZN10RHDatagram9availableEv>
 80a0c30:	b338      	cbz	r0, 80a0c82 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x6a>
 80a0c32:	f10d 0317 	add.w	r3, sp, #23
 80a0c36:	9302      	str	r3, [sp, #8]
 80a0c38:	f10d 0316 	add.w	r3, sp, #22
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	f10d 0315 	add.w	r3, sp, #21
 80a0c42:	9300      	str	r3, [sp, #0]
 80a0c44:	4629      	mov	r1, r5
 80a0c46:	ab05      	add	r3, sp, #20
 80a0c48:	4652      	mov	r2, sl
 80a0c4a:	4620      	mov	r0, r4
 80a0c4c:	f7ff ff0b 	bl	80a0a66 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
 80a0c50:	4605      	mov	r5, r0
 80a0c52:	b1b0      	cbz	r0, 80a0c82 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x6a>
    {
	// Never ACK an ACK
	if (!(_flags & RH_FLAGS_ACK))
 80a0c54:	f99d 3017 	ldrsb.w	r3, [sp, #23]
 80a0c58:	2b00      	cmp	r3, #0
 80a0c5a:	db12      	blt.n	80a0c82 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x6a>
	{
	    // Its a normal message for this node, not an ACK
	    if (_to != RH_BROADCAST_ADDRESS)
 80a0c5c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a0c60:	2bff      	cmp	r3, #255	; 0xff
 80a0c62:	d006      	beq.n	80a0c72 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x5a>
	    {
		// Its not a broadcast, so ACK it
		// Acknowledge message with ACK set in flags and ID set to received ID
		acknowledge(_id, _from);
 80a0c64:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a0c68:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80a0c6c:	4620      	mov	r0, r4
 80a0c6e:	f7ff ff3c 	bl	80a0aea <_ZN18RHReliableDatagram11acknowledgeEhh>
	    }
	    // If we have not seen this message before, then we are interested in it
	    if (_id != _seenIds[_from])
 80a0c72:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80a0c76:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80a0c7a:	4414      	add	r4, r2
 80a0c7c:	7c61      	ldrb	r1, [r4, #17]
 80a0c7e:	4299      	cmp	r1, r3
 80a0c80:	d101      	bne.n	80a0c86 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x6e>
	    }
	    // Else just re-ack it and wait for a new one
	}
    }
    // No message for us available
    return false;
 80a0c82:	2500      	movs	r5, #0
 80a0c84:	e012      	b.n	80a0cac <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
		acknowledge(_id, _from);
	    }
	    // If we have not seen this message before, then we are interested in it
	    if (_id != _seenIds[_from])
	    {
		if (from)  *from =  _from;
 80a0c86:	b106      	cbz	r6, 80a0c8a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x72>
 80a0c88:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
 80a0c8a:	b117      	cbz	r7, 80a0c92 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7a>
 80a0c8c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80a0c90:	703a      	strb	r2, [r7, #0]
		if (id)    *id =    _id;
 80a0c92:	f1b8 0f00 	cmp.w	r8, #0
 80a0c96:	d001      	beq.n	80a0c9c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x84>
 80a0c98:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
 80a0c9c:	f1b9 0f00 	cmp.w	r9, #0
 80a0ca0:	d003      	beq.n	80a0caa <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x92>
 80a0ca2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80a0ca6:	f889 2000 	strb.w	r2, [r9]
		_seenIds[_from] = _id;
 80a0caa:	7463      	strb	r3, [r4, #17]
	    // Else just re-ack it and wait for a new one
	}
    }
    // No message for us available
    return false;
}
 80a0cac:	4628      	mov	r0, r5
 80a0cae:	b006      	add	sp, #24
 80a0cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0cb4 <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_>:

bool RHReliableDatagram::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags)
{
 80a0cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0cb8:	ac0d      	add	r4, sp, #52	; 0x34
 80a0cba:	461f      	mov	r7, r3
 80a0cbc:	cc70      	ldmia	r4, {r4, r5, r6}
 80a0cbe:	4680      	mov	r8, r0
 80a0cc0:	4689      	mov	r9, r1
 80a0cc2:	4692      	mov	sl, r2
 80a0cc4:	f000 f970 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
 80a0cc8:	4407      	add	r7, r0
 80a0cca:	f000 f96d 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
 80a0cce:	1a39      	subs	r1, r7, r0
 80a0cd0:	2900      	cmp	r1, #0
 80a0cd2:	dd10      	ble.n	80a0cf6 <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_+0x42>
    {
	if (waitAvailableTimeout(timeLeft))
 80a0cd4:	b289      	uxth	r1, r1
 80a0cd6:	4640      	mov	r0, r8
 80a0cd8:	f7ff fe77 	bl	80a09ca <_ZN10RHDatagram20waitAvailableTimeoutEt>
 80a0cdc:	2800      	cmp	r0, #0
 80a0cde:	d0f4      	beq.n	80a0cca <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_+0x16>
	{
	    if (recvfromAck(buf, len, from, to, id, flags))
 80a0ce0:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 80a0ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a0ce6:	4652      	mov	r2, sl
 80a0ce8:	4649      	mov	r1, r9
 80a0cea:	4640      	mov	r0, r8
 80a0cec:	f7ff ff94 	bl	80a0c18 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
 80a0cf0:	2800      	cmp	r0, #0
 80a0cf2:	d0ea      	beq.n	80a0cca <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_+0x16>
 80a0cf4:	e000      	b.n	80a0cf8 <_ZN18RHReliableDatagram18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_+0x44>
		return true;
	}
	YIELD;
    }
    return false;
 80a0cf6:	2000      	movs	r0, #0
}
 80a0cf8:	b004      	add	sp, #16
 80a0cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0cfe <_GLOBAL__sub_I__ZN18RHReliableDatagramC2ER15RHGenericDriverh>:
 80a0cfe:	f000 b8cb 	b.w	80a0e98 <HAL_Pin_Map>

080a0d02 <_GLOBAL__sub_I__ZN8RH_CC11019_deviceForInterruptE>:
 80a0d02:	f000 b8c9 	b.w	80a0e98 <HAL_Pin_Map>

080a0d06 <_GLOBAL__sub_I__ZN8RH_MRF8919_deviceForInterruptE>:
 80a0d06:	f000 b8c7 	b.w	80a0e98 <HAL_Pin_Map>

080a0d0a <_GLOBAL__sub_I__ZN7RH_RF2219_deviceForInterruptE>:
 80a0d0a:	f000 b8c5 	b.w	80a0e98 <HAL_Pin_Map>

080a0d0e <_GLOBAL__sub_I__ZN9RH_SerialC2ER11USARTSerial>:
 80a0d0e:	f000 b8c3 	b.w	80a0e98 <HAL_Pin_Map>

080a0d12 <_GLOBAL__sub_I__ZN6RH_ASKC2Ethhhb>:
 80a0d12:	f000 b8c1 	b.w	80a0e98 <HAL_Pin_Map>

080a0d16 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 80a0d16:	b510      	push	{r4, lr}
 80a0d18:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 80a0d1a:	69c0      	ldr	r0, [r0, #28]
 80a0d1c:	6803      	ldr	r3, [r0, #0]
 80a0d1e:	68db      	ldr	r3, [r3, #12]
 80a0d20:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 80a0d22:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0d26:	2101      	movs	r1, #1
 80a0d28:	f000 ffaa 	bl	80a1c80 <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 80a0d2c:	2101      	movs	r1, #1
 80a0d2e:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0d32:	f000 ffb6 	bl	80a1ca2 <digitalWrite>

    delay(100);
 80a0d36:	2064      	movs	r0, #100	; 0x64
 80a0d38:	f000 fbc6 	bl	80a14c8 <delay>
    return true;
}
 80a0d3c:	2001      	movs	r0, #1
 80a0d3e:	bd10      	pop	{r4, pc}

080a0d40 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHSPIDriver.cpp,v 1.10 2015/12/16 04:55:33 mikem Exp $

#include <RHSPIDriver.h>

RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 80a0d40:	b570      	push	{r4, r5, r6, lr}
 80a0d42:	4604      	mov	r4, r0
 80a0d44:	460d      	mov	r5, r1
 80a0d46:	4616      	mov	r6, r2
    : 
    _spi(spi),
    _slaveSelectPin(slaveSelectPin)
 80a0d48:	f7ff fa30 	bl	80a01ac <_ZN15RHGenericDriverC1Ev>
 80a0d4c:	4b03      	ldr	r3, [pc, #12]	; (80a0d5c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
 80a0d4e:	61e6      	str	r6, [r4, #28]
 80a0d50:	6023      	str	r3, [r4, #0]
 80a0d52:	f884 5020 	strb.w	r5, [r4, #32]
{
}
 80a0d56:	4620      	mov	r0, r4
 80a0d58:	bd70      	pop	{r4, r5, r6, pc}
 80a0d5a:	bf00      	nop
 80a0d5c:	080a2bfc 	.word	0x080a2bfc

080a0d60 <_ZN11RHSPIDriver7spiReadEh>:
    delay(100);
    return true;
}

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 80a0d60:	b570      	push	{r4, r5, r6, lr}
 80a0d62:	4604      	mov	r4, r0
 80a0d64:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
 80a0d66:	f000 f927 	bl	80a0fb8 <HAL_disable_irq>
    digitalWrite(_slaveSelectPin, LOW);
 80a0d6a:	2100      	movs	r1, #0
}

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
    uint8_t val;
    ATOMIC_BLOCK_START;
 80a0d6c:	4606      	mov	r6, r0
    digitalWrite(_slaveSelectPin, LOW);
 80a0d6e:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0d72:	f000 ff96 	bl	80a1ca2 <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 80a0d76:	69e0      	ldr	r0, [r4, #28]
 80a0d78:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 80a0d7c:	6803      	ldr	r3, [r0, #0]
 80a0d7e:	681b      	ldr	r3, [r3, #0]
 80a0d80:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 80a0d82:	69e0      	ldr	r0, [r4, #28]
 80a0d84:	2100      	movs	r1, #0
 80a0d86:	6803      	ldr	r3, [r0, #0]
 80a0d88:	681b      	ldr	r3, [r3, #0]
 80a0d8a:	4798      	blx	r3
 80a0d8c:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 80a0d8e:	2101      	movs	r1, #1
 80a0d90:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0d94:	f000 ff85 	bl	80a1ca2 <digitalWrite>
    ATOMIC_BLOCK_END;
 80a0d98:	4630      	mov	r0, r6
 80a0d9a:	f000 f915 	bl	80a0fc8 <HAL_enable_irq>
    return val;
}
 80a0d9e:	4628      	mov	r0, r5
 80a0da0:	bd70      	pop	{r4, r5, r6, pc}

080a0da2 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 80a0da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0da4:	4617      	mov	r7, r2
 80a0da6:	4604      	mov	r4, r0
 80a0da8:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0daa:	f000 f905 	bl	80a0fb8 <HAL_disable_irq>
    digitalWrite(_slaveSelectPin, LOW);
 80a0dae:	2100      	movs	r1, #0
}

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0db0:	4606      	mov	r6, r0
    digitalWrite(_slaveSelectPin, LOW);
 80a0db2:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0db6:	f000 ff74 	bl	80a1ca2 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 80a0dba:	69e0      	ldr	r0, [r4, #28]
 80a0dbc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0dc0:	6803      	ldr	r3, [r0, #0]
 80a0dc2:	681b      	ldr	r3, [r3, #0]
 80a0dc4:	4798      	blx	r3
 80a0dc6:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 80a0dc8:	69e0      	ldr	r0, [r4, #28]
 80a0dca:	4639      	mov	r1, r7
 80a0dcc:	6803      	ldr	r3, [r0, #0]
 80a0dce:	681b      	ldr	r3, [r3, #0]
 80a0dd0:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 80a0dd2:	2101      	movs	r1, #1
 80a0dd4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0dd8:	f000 ff63 	bl	80a1ca2 <digitalWrite>
    ATOMIC_BLOCK_END;
 80a0ddc:	4630      	mov	r0, r6
 80a0dde:	f000 f8f3 	bl	80a0fc8 <HAL_enable_irq>
    return status;
}
 80a0de2:	4628      	mov	r0, r5
 80a0de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0de6 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 80a0de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0dea:	460f      	mov	r7, r1
 80a0dec:	4615      	mov	r5, r2
 80a0dee:	461e      	mov	r6, r3
 80a0df0:	4604      	mov	r4, r0
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0df2:	f000 f8e1 	bl	80a0fb8 <HAL_disable_irq>
    digitalWrite(_slaveSelectPin, LOW);
 80a0df6:	2100      	movs	r1, #0
}

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0df8:	4680      	mov	r8, r0
    digitalWrite(_slaveSelectPin, LOW);
 80a0dfa:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0dfe:	f000 ff50 	bl	80a1ca2 <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 80a0e02:	69e0      	ldr	r0, [r4, #28]
 80a0e04:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 80a0e08:	6803      	ldr	r3, [r0, #0]
 80a0e0a:	442e      	add	r6, r5
 80a0e0c:	681b      	ldr	r3, [r3, #0]
 80a0e0e:	4798      	blx	r3
 80a0e10:	4607      	mov	r7, r0
    while (len--)
 80a0e12:	42b5      	cmp	r5, r6
 80a0e14:	d007      	beq.n	80a0e26 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
 80a0e16:	69e0      	ldr	r0, [r4, #28]
 80a0e18:	2100      	movs	r1, #0
 80a0e1a:	6803      	ldr	r3, [r0, #0]
 80a0e1c:	681b      	ldr	r3, [r3, #0]
 80a0e1e:	4798      	blx	r3
 80a0e20:	f805 0b01 	strb.w	r0, [r5], #1
{
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
    while (len--)
 80a0e24:	e7f5      	b.n	80a0e12 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
	*dest++ = _spi.transfer(0);
    digitalWrite(_slaveSelectPin, HIGH);
 80a0e26:	2101      	movs	r1, #1
 80a0e28:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0e2c:	f000 ff39 	bl	80a1ca2 <digitalWrite>
    ATOMIC_BLOCK_END;
 80a0e30:	4640      	mov	r0, r8
 80a0e32:	f000 f8c9 	bl	80a0fc8 <HAL_enable_irq>
    return status;
}
 80a0e36:	4638      	mov	r0, r7
 80a0e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0e3c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 80a0e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0e40:	460f      	mov	r7, r1
 80a0e42:	4615      	mov	r5, r2
 80a0e44:	461e      	mov	r6, r3
 80a0e46:	4604      	mov	r4, r0
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0e48:	f000 f8b6 	bl	80a0fb8 <HAL_disable_irq>
    digitalWrite(_slaveSelectPin, LOW);
 80a0e4c:	2100      	movs	r1, #0
}

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0e4e:	4680      	mov	r8, r0
    digitalWrite(_slaveSelectPin, LOW);
 80a0e50:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0e54:	f000 ff25 	bl	80a1ca2 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 80a0e58:	69e0      	ldr	r0, [r4, #28]
 80a0e5a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 80a0e5e:	6803      	ldr	r3, [r0, #0]
 80a0e60:	442e      	add	r6, r5
 80a0e62:	681b      	ldr	r3, [r3, #0]
 80a0e64:	4798      	blx	r3
 80a0e66:	4607      	mov	r7, r0
    while (len--)
 80a0e68:	42b5      	cmp	r5, r6
 80a0e6a:	d006      	beq.n	80a0e7a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
 80a0e6c:	69e0      	ldr	r0, [r4, #28]
 80a0e6e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e72:	6803      	ldr	r3, [r0, #0]
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	4798      	blx	r3
{
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
    while (len--)
 80a0e78:	e7f6      	b.n	80a0e68 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
	_spi.transfer(*src++);
    digitalWrite(_slaveSelectPin, HIGH);
 80a0e7a:	2101      	movs	r1, #1
 80a0e7c:	f894 0020 	ldrb.w	r0, [r4, #32]
 80a0e80:	f000 ff0f 	bl	80a1ca2 <digitalWrite>
    ATOMIC_BLOCK_END;
 80a0e84:	4640      	mov	r0, r8
 80a0e86:	f000 f89f 	bl	80a0fc8 <HAL_enable_irq>
    return status;
}
 80a0e8a:	4638      	mov	r0, r7
 80a0e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0e90 <_GLOBAL__sub_I__ZN11RHSPIDriverC2EhR12RHGenericSPI>:
 80a0e90:	f000 b802 	b.w	80a0e98 <HAL_Pin_Map>

080a0e94 <_GLOBAL__sub_I__ZN6RHMesh11_tmpMessageE>:
 80a0e94:	f000 b800 	b.w	80a0e98 <HAL_Pin_Map>

080a0e98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <HAL_Pin_Map+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	681b      	ldr	r3, [r3, #0]
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601b0 	.word	0x080601b0

080a0ea8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <HAL_Pin_Mode+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	689b      	ldr	r3, [r3, #8]
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601b0 	.word	0x080601b0

080a0eb8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <HAL_Get_Pin_Mode+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	68db      	ldr	r3, [r3, #12]
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601b0 	.word	0x080601b0

080a0ec8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <HAL_GPIO_Write+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	691b      	ldr	r3, [r3, #16]
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601b0 	.word	0x080601b0

080a0ed8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <HAL_Interrupts_Attach+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	699b      	ldr	r3, [r3, #24]
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601b0 	.word	0x080601b0

080a0ee8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <HAL_Interrupts_Detach+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	69db      	ldr	r3, [r3, #28]
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601b0 	.word	0x080601b0

080a0ef8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b02      	ldr	r3, [pc, #8]	; (80a0f04 <HAL_SPI_Begin+0xc>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	681b      	ldr	r3, [r3, #0]
 80a0f00:	9301      	str	r3, [sp, #4]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	080601b4 	.word	0x080601b4

080a0f08 <HAL_SPI_End>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <HAL_SPI_End+0xc>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	685b      	ldr	r3, [r3, #4]
 80a0f10:	9301      	str	r3, [sp, #4]
 80a0f12:	bd08      	pop	{r3, pc}
 80a0f14:	080601b4 	.word	0x080601b4

080a0f18 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a0f18:	b508      	push	{r3, lr}
 80a0f1a:	4b02      	ldr	r3, [pc, #8]	; (80a0f24 <HAL_SPI_Set_Bit_Order+0xc>)
 80a0f1c:	681b      	ldr	r3, [r3, #0]
 80a0f1e:	689b      	ldr	r3, [r3, #8]
 80a0f20:	9301      	str	r3, [sp, #4]
 80a0f22:	bd08      	pop	{r3, pc}
 80a0f24:	080601b4 	.word	0x080601b4

080a0f28 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a0f28:	b508      	push	{r3, lr}
 80a0f2a:	4b02      	ldr	r3, [pc, #8]	; (80a0f34 <HAL_SPI_Set_Data_Mode+0xc>)
 80a0f2c:	681b      	ldr	r3, [r3, #0]
 80a0f2e:	68db      	ldr	r3, [r3, #12]
 80a0f30:	9301      	str	r3, [sp, #4]
 80a0f32:	bd08      	pop	{r3, pc}
 80a0f34:	080601b4 	.word	0x080601b4

080a0f38 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a0f38:	b508      	push	{r3, lr}
 80a0f3a:	4b02      	ldr	r3, [pc, #8]	; (80a0f44 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a0f3c:	681b      	ldr	r3, [r3, #0]
 80a0f3e:	691b      	ldr	r3, [r3, #16]
 80a0f40:	9301      	str	r3, [sp, #4]
 80a0f42:	bd08      	pop	{r3, pc}
 80a0f44:	080601b4 	.word	0x080601b4

080a0f48 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0f48:	b508      	push	{r3, lr}
 80a0f4a:	4b02      	ldr	r3, [pc, #8]	; (80a0f54 <HAL_SPI_Send_Receive_Data+0xc>)
 80a0f4c:	681b      	ldr	r3, [r3, #0]
 80a0f4e:	695b      	ldr	r3, [r3, #20]
 80a0f50:	9301      	str	r3, [sp, #4]
 80a0f52:	bd08      	pop	{r3, pc}
 80a0f54:	080601b4 	.word	0x080601b4

080a0f58 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0f58:	b508      	push	{r3, lr}
 80a0f5a:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <HAL_SPI_Init+0xc>)
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	69db      	ldr	r3, [r3, #28]
 80a0f60:	9301      	str	r3, [sp, #4]
 80a0f62:	bd08      	pop	{r3, pc}
 80a0f64:	080601b4 	.word	0x080601b4

080a0f68 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0f68:	b508      	push	{r3, lr}
 80a0f6a:	4b02      	ldr	r3, [pc, #8]	; (80a0f74 <HAL_SPI_Is_Enabled+0xc>)
 80a0f6c:	681b      	ldr	r3, [r3, #0]
 80a0f6e:	6a1b      	ldr	r3, [r3, #32]
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	bd08      	pop	{r3, pc}
 80a0f74:	080601b4 	.word	0x080601b4

080a0f78 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0f78:	b508      	push	{r3, lr}
 80a0f7a:	4b02      	ldr	r3, [pc, #8]	; (80a0f84 <HAL_SPI_Info+0xc>)
 80a0f7c:	681b      	ldr	r3, [r3, #0]
 80a0f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f80:	9301      	str	r3, [sp, #4]
 80a0f82:	bd08      	pop	{r3, pc}
 80a0f84:	080601b4 	.word	0x080601b4

080a0f88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0f88:	b508      	push	{r3, lr}
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <HAL_RNG_GetRandomNumber+0xc>)
 80a0f8c:	681b      	ldr	r3, [r3, #0]
 80a0f8e:	685b      	ldr	r3, [r3, #4]
 80a0f90:	9301      	str	r3, [sp, #4]
 80a0f92:	bd08      	pop	{r3, pc}
 80a0f94:	0806019c 	.word	0x0806019c

080a0f98 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0f98:	b508      	push	{r3, lr}
 80a0f9a:	4b02      	ldr	r3, [pc, #8]	; (80a0fa4 <HAL_Delay_Microseconds+0xc>)
 80a0f9c:	681b      	ldr	r3, [r3, #0]
 80a0f9e:	68db      	ldr	r3, [r3, #12]
 80a0fa0:	9301      	str	r3, [sp, #4]
 80a0fa2:	bd08      	pop	{r3, pc}
 80a0fa4:	0806019c 	.word	0x0806019c

080a0fa8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0fa8:	b508      	push	{r3, lr}
 80a0faa:	4b02      	ldr	r3, [pc, #8]	; (80a0fb4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0fac:	681b      	ldr	r3, [r3, #0]
 80a0fae:	695b      	ldr	r3, [r3, #20]
 80a0fb0:	9301      	str	r3, [sp, #4]
 80a0fb2:	bd08      	pop	{r3, pc}
 80a0fb4:	0806019c 	.word	0x0806019c

080a0fb8 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a0fb8:	b508      	push	{r3, lr}
 80a0fba:	4b02      	ldr	r3, [pc, #8]	; (80a0fc4 <HAL_disable_irq+0xc>)
 80a0fbc:	681b      	ldr	r3, [r3, #0]
 80a0fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0fc0:	9301      	str	r3, [sp, #4]
 80a0fc2:	bd08      	pop	{r3, pc}
 80a0fc4:	0806019c 	.word	0x0806019c

080a0fc8 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a0fc8:	b508      	push	{r3, lr}
 80a0fca:	4b02      	ldr	r3, [pc, #8]	; (80a0fd4 <HAL_enable_irq+0xc>)
 80a0fcc:	681b      	ldr	r3, [r3, #0]
 80a0fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0fd0:	9301      	str	r3, [sp, #4]
 80a0fd2:	bd08      	pop	{r3, pc}
 80a0fd4:	0806019c 	.word	0x0806019c

080a0fd8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0fd8:	b508      	push	{r3, lr}
 80a0fda:	4b02      	ldr	r3, [pc, #8]	; (80a0fe4 <os_mutex_create+0xc>)
 80a0fdc:	681b      	ldr	r3, [r3, #0]
 80a0fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fe0:	9301      	str	r3, [sp, #4]
 80a0fe2:	bd08      	pop	{r3, pc}
 80a0fe4:	080601d0 	.word	0x080601d0

080a0fe8 <os_mutex_trylock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
 80a0fe8:	b508      	push	{r3, lr}
 80a0fea:	4b02      	ldr	r3, [pc, #8]	; (80a0ff4 <os_mutex_trylock+0xc>)
 80a0fec:	681b      	ldr	r3, [r3, #0]
 80a0fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ff0:	9301      	str	r3, [sp, #4]
 80a0ff2:	bd08      	pop	{r3, pc}
 80a0ff4:	080601d0 	.word	0x080601d0

080a0ff8 <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a0ff8:	b508      	push	{r3, lr}
 80a0ffa:	4b02      	ldr	r3, [pc, #8]	; (80a1004 <os_mutex_unlock+0xc>)
 80a0ffc:	681b      	ldr	r3, [r3, #0]
 80a0ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1000:	9301      	str	r3, [sp, #4]
 80a1002:	bd08      	pop	{r3, pc}
 80a1004:	080601d0 	.word	0x080601d0

080a1008 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1008:	b508      	push	{r3, lr}
 80a100a:	4b02      	ldr	r3, [pc, #8]	; (80a1014 <HAL_USART_Init+0xc>)
 80a100c:	681b      	ldr	r3, [r3, #0]
 80a100e:	699b      	ldr	r3, [r3, #24]
 80a1010:	9301      	str	r3, [sp, #4]
 80a1012:	bd08      	pop	{r3, pc}
 80a1014:	080601c4 	.word	0x080601c4

080a1018 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1018:	b508      	push	{r3, lr}
 80a101a:	4b02      	ldr	r3, [pc, #8]	; (80a1024 <HAL_USART_Write_Data+0xc>)
 80a101c:	681b      	ldr	r3, [r3, #0]
 80a101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1020:	9301      	str	r3, [sp, #4]
 80a1022:	bd08      	pop	{r3, pc}
 80a1024:	080601c4 	.word	0x080601c4

080a1028 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1028:	b508      	push	{r3, lr}
 80a102a:	4b02      	ldr	r3, [pc, #8]	; (80a1034 <HAL_USART_Available_Data+0xc>)
 80a102c:	681b      	ldr	r3, [r3, #0]
 80a102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1030:	9301      	str	r3, [sp, #4]
 80a1032:	bd08      	pop	{r3, pc}
 80a1034:	080601c4 	.word	0x080601c4

080a1038 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1038:	b508      	push	{r3, lr}
 80a103a:	4b02      	ldr	r3, [pc, #8]	; (80a1044 <HAL_USART_Read_Data+0xc>)
 80a103c:	681b      	ldr	r3, [r3, #0]
 80a103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1040:	9301      	str	r3, [sp, #4]
 80a1042:	bd08      	pop	{r3, pc}
 80a1044:	080601c4 	.word	0x080601c4

080a1048 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1048:	b508      	push	{r3, lr}
 80a104a:	4b02      	ldr	r3, [pc, #8]	; (80a1054 <HAL_USART_Peek_Data+0xc>)
 80a104c:	681b      	ldr	r3, [r3, #0]
 80a104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1050:	9301      	str	r3, [sp, #4]
 80a1052:	bd08      	pop	{r3, pc}
 80a1054:	080601c4 	.word	0x080601c4

080a1058 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1058:	b508      	push	{r3, lr}
 80a105a:	4b02      	ldr	r3, [pc, #8]	; (80a1064 <HAL_USART_Flush_Data+0xc>)
 80a105c:	681b      	ldr	r3, [r3, #0]
 80a105e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1060:	9301      	str	r3, [sp, #4]
 80a1062:	bd08      	pop	{r3, pc}
 80a1064:	080601c4 	.word	0x080601c4

080a1068 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1068:	b508      	push	{r3, lr}
 80a106a:	4b02      	ldr	r3, [pc, #8]	; (80a1074 <HAL_USART_Is_Enabled+0xc>)
 80a106c:	681b      	ldr	r3, [r3, #0]
 80a106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1070:	9301      	str	r3, [sp, #4]
 80a1072:	bd08      	pop	{r3, pc}
 80a1074:	080601c4 	.word	0x080601c4

080a1078 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1078:	b508      	push	{r3, lr}
 80a107a:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <HAL_USART_Available_Data_For_Write+0xc>)
 80a107c:	681b      	ldr	r3, [r3, #0]
 80a107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1080:	9301      	str	r3, [sp, #4]
 80a1082:	bd08      	pop	{r3, pc}
 80a1084:	080601c4 	.word	0x080601c4

080a1088 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1088:	b508      	push	{r3, lr}
 80a108a:	4b02      	ldr	r3, [pc, #8]	; (80a1094 <HAL_I2C_Write_Data+0xc>)
 80a108c:	681b      	ldr	r3, [r3, #0]
 80a108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1090:	9301      	str	r3, [sp, #4]
 80a1092:	bd08      	pop	{r3, pc}
 80a1094:	080601ac 	.word	0x080601ac

080a1098 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1098:	b508      	push	{r3, lr}
 80a109a:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <HAL_I2C_Available_Data+0xc>)
 80a109c:	681b      	ldr	r3, [r3, #0]
 80a109e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a10a0:	9301      	str	r3, [sp, #4]
 80a10a2:	bd08      	pop	{r3, pc}
 80a10a4:	080601ac 	.word	0x080601ac

080a10a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a10a8:	b508      	push	{r3, lr}
 80a10aa:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <HAL_I2C_Read_Data+0xc>)
 80a10ac:	681b      	ldr	r3, [r3, #0]
 80a10ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a10b0:	9301      	str	r3, [sp, #4]
 80a10b2:	bd08      	pop	{r3, pc}
 80a10b4:	080601ac 	.word	0x080601ac

080a10b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b02      	ldr	r3, [pc, #8]	; (80a10c4 <HAL_I2C_Peek_Data+0xc>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a10c0:	9301      	str	r3, [sp, #4]
 80a10c2:	bd08      	pop	{r3, pc}
 80a10c4:	080601ac 	.word	0x080601ac

080a10c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a10c8:	b508      	push	{r3, lr}
 80a10ca:	4b02      	ldr	r3, [pc, #8]	; (80a10d4 <HAL_I2C_Flush_Data+0xc>)
 80a10cc:	681b      	ldr	r3, [r3, #0]
 80a10ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a10d0:	9301      	str	r3, [sp, #4]
 80a10d2:	bd08      	pop	{r3, pc}
 80a10d4:	080601ac 	.word	0x080601ac

080a10d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a10d8:	b508      	push	{r3, lr}
 80a10da:	4b02      	ldr	r3, [pc, #8]	; (80a10e4 <HAL_I2C_Is_Enabled+0xc>)
 80a10dc:	681b      	ldr	r3, [r3, #0]
 80a10de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a10e0:	9301      	str	r3, [sp, #4]
 80a10e2:	bd08      	pop	{r3, pc}
 80a10e4:	080601ac 	.word	0x080601ac

080a10e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a10e8:	b508      	push	{r3, lr}
 80a10ea:	4b03      	ldr	r3, [pc, #12]	; (80a10f8 <HAL_I2C_Init+0x10>)
 80a10ec:	681b      	ldr	r3, [r3, #0]
 80a10ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a10f2:	9301      	str	r3, [sp, #4]
 80a10f4:	bd08      	pop	{r3, pc}
 80a10f6:	0000      	.short	0x0000
 80a10f8:	080601ac 	.word	0x080601ac

080a10fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <HAL_USB_USART_Init+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	681b      	ldr	r3, [r3, #0]
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601d8 	.word	0x080601d8

080a110c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <HAL_USB_USART_Begin+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	685b      	ldr	r3, [r3, #4]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601d8 	.word	0x080601d8

080a111c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <HAL_USB_USART_Available_Data+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	691b      	ldr	r3, [r3, #16]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601d8 	.word	0x080601d8

080a112c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	695b      	ldr	r3, [r3, #20]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601d8 	.word	0x080601d8

080a113c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <HAL_USB_USART_Receive_Data+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	699b      	ldr	r3, [r3, #24]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601d8 	.word	0x080601d8

080a114c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <HAL_USB_USART_Send_Data+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	69db      	ldr	r3, [r3, #28]
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601d8 	.word	0x080601d8

080a115c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <HAL_USB_USART_Flush_Data+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	6a1b      	ldr	r3, [r3, #32]
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601d8 	.word	0x080601d8

080a116c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <HAL_USB_USART_Is_Enabled+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601d8 	.word	0x080601d8

080a117c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <inet_gethostbyname+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601c0 	.word	0x080601c0

080a118c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <panic_+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080201a8 	.word	0x080201a8

080a119c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <set_system_mode+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	685b      	ldr	r3, [r3, #4]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601a4 	.word	0x080601a4

080a11ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <system_delay_ms+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	695b      	ldr	r3, [r3, #20]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601a4 	.word	0x080601a4

080a11bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b03      	ldr	r3, [pc, #12]	; (80a11cc <system_ctrl_set_app_request_handler+0x10>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a11c6:	9301      	str	r3, [sp, #4]
 80a11c8:	bd08      	pop	{r3, pc}
 80a11ca:	0000      	.short	0x0000
 80a11cc:	080601a4 	.word	0x080601a4

080a11d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b03      	ldr	r3, [pc, #12]	; (80a11e0 <system_ctrl_set_result+0x10>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a11da:	9301      	str	r3, [sp, #4]
 80a11dc:	bd08      	pop	{r3, pc}
 80a11de:	0000      	.short	0x0000
 80a11e0:	080601a4 	.word	0x080601a4

080a11e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a11e4:	b508      	push	{r3, lr}
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <network_connect+0xc>)
 80a11e8:	681b      	ldr	r3, [r3, #0]
 80a11ea:	685b      	ldr	r3, [r3, #4]
 80a11ec:	9301      	str	r3, [sp, #4]
 80a11ee:	bd08      	pop	{r3, pc}
 80a11f0:	080601c8 	.word	0x080601c8

080a11f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a11f4:	b508      	push	{r3, lr}
 80a11f6:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <network_connecting+0xc>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	689b      	ldr	r3, [r3, #8]
 80a11fc:	9301      	str	r3, [sp, #4]
 80a11fe:	bd08      	pop	{r3, pc}
 80a1200:	080601c8 	.word	0x080601c8

080a1204 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1204:	b508      	push	{r3, lr}
 80a1206:	4b02      	ldr	r3, [pc, #8]	; (80a1210 <network_disconnect+0xc>)
 80a1208:	681b      	ldr	r3, [r3, #0]
 80a120a:	68db      	ldr	r3, [r3, #12]
 80a120c:	9301      	str	r3, [sp, #4]
 80a120e:	bd08      	pop	{r3, pc}
 80a1210:	080601c8 	.word	0x080601c8

080a1214 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1214:	b508      	push	{r3, lr}
 80a1216:	4b02      	ldr	r3, [pc, #8]	; (80a1220 <network_ready+0xc>)
 80a1218:	681b      	ldr	r3, [r3, #0]
 80a121a:	691b      	ldr	r3, [r3, #16]
 80a121c:	9301      	str	r3, [sp, #4]
 80a121e:	bd08      	pop	{r3, pc}
 80a1220:	080601c8 	.word	0x080601c8

080a1224 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1224:	b508      	push	{r3, lr}
 80a1226:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <network_on+0xc>)
 80a1228:	681b      	ldr	r3, [r3, #0]
 80a122a:	695b      	ldr	r3, [r3, #20]
 80a122c:	9301      	str	r3, [sp, #4]
 80a122e:	bd08      	pop	{r3, pc}
 80a1230:	080601c8 	.word	0x080601c8

080a1234 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <network_off+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	699b      	ldr	r3, [r3, #24]
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601c8 	.word	0x080601c8

080a1244 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <network_listen+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	69db      	ldr	r3, [r3, #28]
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	080601c8 	.word	0x080601c8

080a1254 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <network_listening+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	6a1b      	ldr	r3, [r3, #32]
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	080601c8 	.word	0x080601c8

080a1264 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <network_set_listen_timeout+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601c8 	.word	0x080601c8

080a1274 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1274:	b508      	push	{r3, lr}
 80a1276:	4b02      	ldr	r3, [pc, #8]	; (80a1280 <network_get_listen_timeout+0xc>)
 80a1278:	681b      	ldr	r3, [r3, #0]
 80a127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	bd08      	pop	{r3, pc}
 80a1280:	080601c8 	.word	0x080601c8

080a1284 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1284:	b508      	push	{r3, lr}
 80a1286:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1288:	681b      	ldr	r3, [r3, #0]
 80a128a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a128c:	9301      	str	r3, [sp, #4]
 80a128e:	bd08      	pop	{r3, pc}
 80a1290:	080601cc 	.word	0x080601cc

080a1294 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1294:	b508      	push	{r3, lr}
 80a1296:	4b02      	ldr	r3, [pc, #8]	; (80a12a0 <malloc+0xc>)
 80a1298:	681b      	ldr	r3, [r3, #0]
 80a129a:	681b      	ldr	r3, [r3, #0]
 80a129c:	9301      	str	r3, [sp, #4]
 80a129e:	bd08      	pop	{r3, pc}
 80a12a0:	080601a0 	.word	0x080601a0

080a12a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a12a4:	b508      	push	{r3, lr}
 80a12a6:	4b02      	ldr	r3, [pc, #8]	; (80a12b0 <free+0xc>)
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	685b      	ldr	r3, [r3, #4]
 80a12ac:	9301      	str	r3, [sp, #4]
 80a12ae:	bd08      	pop	{r3, pc}
 80a12b0:	080601a0 	.word	0x080601a0

080a12b4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a12b4:	4770      	bx	lr

080a12b6 <_ZN8SPIClassD0Ev>:
 80a12b6:	b510      	push	{r4, lr}
 80a12b8:	4604      	mov	r4, r0
 80a12ba:	2110      	movs	r1, #16
 80a12bc:	f000 fd69 	bl	80a1d92 <_ZdlPvj>
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	bd10      	pop	{r4, pc}

080a12c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a12c4:	b570      	push	{r4, r5, r6, lr}
 80a12c6:	4604      	mov	r4, r0
 80a12c8:	460e      	mov	r6, r1
 80a12ca:	4b07      	ldr	r3, [pc, #28]	; (80a12e8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a12cc:	2500      	movs	r5, #0
 80a12ce:	6003      	str	r3, [r0, #0]
 80a12d0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a12d4:	f7ff fe80 	bl	80a0fd8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a12d8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a12da:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a12dc:	f7ff fe3c 	bl	80a0f58 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a12e0:	60a5      	str	r5, [r4, #8]
}
 80a12e2:	4620      	mov	r0, r4
 80a12e4:	bd70      	pop	{r4, r5, r6, pc}
 80a12e6:	bf00      	nop
 80a12e8:	080a2c5c 	.word	0x080a2c5c

080a12ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a12ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a12f0:	7900      	ldrb	r0, [r0, #4]
 80a12f2:	f7ff be01 	b.w	80a0ef8 <HAL_SPI_Begin>

080a12f6 <_ZN8SPIClass3endEv>:

  HAL_SPI_Begin_Ext(_spi, mode, ss_pin, NULL);
}

void SPIClass::end()
{
 80a12f6:	b510      	push	{r4, lr}
 80a12f8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
 80a12fa:	68c0      	ldr	r0, [r0, #12]
 80a12fc:	f7ff fe74 	bl	80a0fe8 <os_mutex_trylock>
    void unlock() { os_mutex_unlock(handle_); }
 80a1300:	68e0      	ldr	r0, [r4, #12]
 80a1302:	f7ff fe79 	bl	80a0ff8 <os_mutex_unlock>
  trylock();
  unlock();
  HAL_SPI_End(_spi);
 80a1306:	7920      	ldrb	r0, [r4, #4]
}
 80a1308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SPIClass::end()
{
  trylock();
  unlock();
  HAL_SPI_End(_spi);
 80a130c:	f7ff bdfc 	b.w	80a0f08 <HAL_SPI_End>

080a1310 <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1310:	7900      	ldrb	r0, [r0, #4]
 80a1312:	f7ff be01 	b.w	80a0f18 <HAL_SPI_Set_Bit_Order>

080a1316 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1316:	7900      	ldrb	r0, [r0, #4]
 80a1318:	f7ff be06 	b.w	80a0f28 <HAL_SPI_Set_Data_Mode>

080a131c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a131c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a131e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1320:	6018      	str	r0, [r3, #0]
 80a1322:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1324:	6818      	ldr	r0, [r3, #0]
 80a1326:	b2e5      	uxtb	r5, r4
 80a1328:	4288      	cmp	r0, r1
 80a132a:	d906      	bls.n	80a133a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a132c:	3401      	adds	r4, #1
 80a132e:	2c08      	cmp	r4, #8
 80a1330:	d002      	beq.n	80a1338 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1332:	0840      	lsrs	r0, r0, #1
 80a1334:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1336:	e7f5      	b.n	80a1324 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1338:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a133c:	5d5b      	ldrb	r3, [r3, r5]
 80a133e:	7013      	strb	r3, [r2, #0]
 80a1340:	bd30      	pop	{r4, r5, pc}
 80a1342:	bf00      	nop
 80a1344:	080a2c64 	.word	0x080a2c64

080a1348 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1348:	b570      	push	{r4, r5, r6, lr}
 80a134a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a134c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1350:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a1352:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1354:	2214      	movs	r2, #20
 80a1356:	2100      	movs	r1, #0
 80a1358:	a803      	add	r0, sp, #12
 80a135a:	f001 fade 	bl	80a291a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a135e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1360:	a903      	add	r1, sp, #12
 80a1362:	4630      	mov	r0, r6
 80a1364:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1366:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a136a:	f7ff fe05 	bl	80a0f78 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a136e:	ab02      	add	r3, sp, #8
 80a1370:	f10d 0207 	add.w	r2, sp, #7
 80a1374:	4629      	mov	r1, r5
 80a1376:	9804      	ldr	r0, [sp, #16]
 80a1378:	f7ff ffd0 	bl	80a131c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a137c:	7920      	ldrb	r0, [r4, #4]
 80a137e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1382:	f7ff fdd9 	bl	80a0f38 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1386:	9802      	ldr	r0, [sp, #8]
 80a1388:	b008      	add	sp, #32
 80a138a:	bd70      	pop	{r4, r5, r6, pc}

080a138c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a138c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a138e:	7900      	ldrb	r0, [r0, #4]
 80a1390:	f7ff fdda 	bl	80a0f48 <HAL_SPI_Send_Receive_Data>
}
 80a1394:	b2c0      	uxtb	r0, r0
 80a1396:	bd08      	pop	{r3, pc}

080a1398 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1398:	7900      	ldrb	r0, [r0, #4]
 80a139a:	f7ff bde5 	b.w	80a0f68 <HAL_SPI_Is_Enabled>
	...

080a13a0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a13a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a13a4:	4b03      	ldr	r3, [pc, #12]	; (80a13b4 <_GLOBAL__sub_I_System+0x14>)
 80a13a6:	2000      	movs	r0, #0
 80a13a8:	7018      	strb	r0, [r3, #0]
 80a13aa:	8058      	strh	r0, [r3, #2]
 80a13ac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a13ae:	f7ff bef5 	b.w	80a119c <set_system_mode>
 80a13b2:	bf00      	nop
 80a13b4:	200003d2 	.word	0x200003d2

080a13b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a13b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13ba:	4606      	mov	r6, r0
 80a13bc:	460d      	mov	r5, r1
 80a13be:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a13c0:	2400      	movs	r4, #0
  while (size--) {
 80a13c2:	42bd      	cmp	r5, r7
 80a13c4:	d00c      	beq.n	80a13e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a13c6:	6833      	ldr	r3, [r6, #0]
 80a13c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a13cc:	689b      	ldr	r3, [r3, #8]
 80a13ce:	4630      	mov	r0, r6
 80a13d0:	4798      	blx	r3
     if (chunk>=0)
 80a13d2:	2800      	cmp	r0, #0
 80a13d4:	db01      	blt.n	80a13da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a13d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a13d8:	e7f3      	b.n	80a13c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a13da:	2c00      	cmp	r4, #0
 80a13dc:	bf08      	it	eq
 80a13de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a13e0:	4620      	mov	r0, r4
 80a13e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a13e4:	b570      	push	{r4, r5, r6, lr}
 80a13e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a13e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a13ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a13ec:	b149      	cbz	r1, 80a1402 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a13ee:	f001 faff 	bl	80a29f0 <strlen>
 80a13f2:	682b      	ldr	r3, [r5, #0]
 80a13f4:	4602      	mov	r2, r0
 80a13f6:	4621      	mov	r1, r4
 80a13f8:	4628      	mov	r0, r5
    }
 80a13fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a13fe:	68db      	ldr	r3, [r3, #12]
 80a1400:	4718      	bx	r3
    }
 80a1402:	bd70      	pop	{r4, r5, r6, pc}

080a1404 <_ZN5Print5printEPKc>:
 80a1404:	b508      	push	{r3, lr}
 80a1406:	f7ff ffed 	bl	80a13e4 <_ZN5Print5writeEPKc>
 80a140a:	bd08      	pop	{r3, pc}

080a140c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a140c:	6803      	ldr	r3, [r0, #0]
 80a140e:	689b      	ldr	r3, [r3, #8]
 80a1410:	4718      	bx	r3

080a1412 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1412:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1414:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1416:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1418:	f7ff fff8 	bl	80a140c <_ZN5Print5printEc>
  n += print('\n');
 80a141c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a141e:	4604      	mov	r4, r0
  n += print('\n');
 80a1420:	4628      	mov	r0, r5
 80a1422:	f7ff fff3 	bl	80a140c <_ZN5Print5printEc>
  return n;
}
 80a1426:	4420      	add	r0, r4
 80a1428:	bd38      	pop	{r3, r4, r5, pc}

080a142a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a142a:	b538      	push	{r3, r4, r5, lr}
 80a142c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a142e:	f7ff ffd9 	bl	80a13e4 <_ZN5Print5writeEPKc>
 80a1432:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1434:	4628      	mov	r0, r5
 80a1436:	f7ff ffec 	bl	80a1412 <_ZN5Print7printlnEv>
  return n;
}
 80a143a:	4420      	add	r0, r4
 80a143c:	bd38      	pop	{r3, r4, r5, pc}

080a143e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a143e:	2a01      	cmp	r2, #1
 80a1440:	bf98      	it	ls
 80a1442:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1444:	b530      	push	{r4, r5, lr}
 80a1446:	460b      	mov	r3, r1
 80a1448:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a144a:	2100      	movs	r1, #0
 80a144c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1450:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1454:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1458:	fb05 3312 	mls	r3, r5, r2, r3
 80a145c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a145e:	2b09      	cmp	r3, #9
 80a1460:	bf94      	ite	ls
 80a1462:	3330      	addls	r3, #48	; 0x30
 80a1464:	3337      	addhi	r3, #55	; 0x37
 80a1466:	b2db      	uxtb	r3, r3
 80a1468:	4621      	mov	r1, r4
 80a146a:	f804 3901 	strb.w	r3, [r4], #-1
 80a146e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1470:	2d00      	cmp	r5, #0
 80a1472:	d1ef      	bne.n	80a1454 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1474:	f7ff ffb6 	bl	80a13e4 <_ZN5Print5writeEPKc>
}
 80a1478:	b00b      	add	sp, #44	; 0x2c
 80a147a:	bd30      	pop	{r4, r5, pc}

080a147c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a147c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a147e:	b922      	cbnz	r2, 80a148a <_ZN5Print5printEmi+0xe>
 80a1480:	6803      	ldr	r3, [r0, #0]
 80a1482:	b2c9      	uxtb	r1, r1
 80a1484:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1486:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1488:	4718      	bx	r3
  else return printNumber(n, base);
 80a148a:	b2d2      	uxtb	r2, r2
}
 80a148c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a148e:	f7ff bfd6 	b.w	80a143e <_ZN5Print11printNumberEmh>

080a1492 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1492:	f7ff bff3 	b.w	80a147c <_ZN5Print5printEmi>

080a1496 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1496:	2300      	movs	r3, #0
 80a1498:	461a      	mov	r2, r3
 80a149a:	4619      	mov	r1, r3
 80a149c:	6840      	ldr	r0, [r0, #4]
 80a149e:	f7ff bec1 	b.w	80a1224 <network_on>
	...

080a14a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a14a4:	4a01      	ldr	r2, [pc, #4]	; (80a14ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a14a8:	601a      	str	r2, [r3, #0]
 80a14aa:	4770      	bx	lr
 80a14ac:	080a2ce2 	.word	0x080a2ce2
 80a14b0:	200003d8 	.word	0x200003d8

080a14b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a14b4:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a14b6:	681a      	ldr	r2, [r3, #0]
 80a14b8:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a14ba:	601a      	str	r2, [r3, #0]
 80a14bc:	4770      	bx	lr
 80a14be:	bf00      	nop
 80a14c0:	20000010 	.word	0x20000010
 80a14c4:	200003dc 	.word	0x200003dc

080a14c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a14c8:	2100      	movs	r1, #0
 80a14ca:	f7ff be6f 	b.w	80a11ac <system_delay_ms>

080a14ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a14ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a14d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a14d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a14d4:	b113      	cbz	r3, 80a14dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a14d6:	2203      	movs	r2, #3
 80a14d8:	4601      	mov	r1, r0
 80a14da:	4798      	blx	r3
    }
 80a14dc:	4620      	mov	r0, r4
 80a14de:	bd10      	pop	{r4, pc}

080a14e0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a14e0:	b510      	push	{r4, lr}
 80a14e2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a14e4:	f7ff fff3 	bl	80a14ce <_ZNSt14_Function_baseD1Ev>
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	bd10      	pop	{r4, pc}

080a14ec <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a14ec:	4803      	ldr	r0, [pc, #12]	; (80a14fc <_GLOBAL__sub_I_RGB+0x10>)
 80a14ee:	2300      	movs	r3, #0
 80a14f0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a14f2:	4a03      	ldr	r2, [pc, #12]	; (80a1500 <_GLOBAL__sub_I_RGB+0x14>)
 80a14f4:	4903      	ldr	r1, [pc, #12]	; (80a1504 <_GLOBAL__sub_I_RGB+0x18>)
 80a14f6:	f000 bc47 	b.w	80a1d88 <__aeabi_atexit>
 80a14fa:	bf00      	nop
 80a14fc:	200003e0 	.word	0x200003e0
 80a1500:	20000078 	.word	0x20000078
 80a1504:	080a14e1 	.word	0x080a14e1

080a1508 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1508:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a150a:	4b14      	ldr	r3, [pc, #80]	; (80a155c <serialEventRun+0x54>)
 80a150c:	b133      	cbz	r3, 80a151c <serialEventRun+0x14>
 80a150e:	f000 f963 	bl	80a17d8 <_Z16_fetch_usbserialv>
 80a1512:	6803      	ldr	r3, [r0, #0]
 80a1514:	691b      	ldr	r3, [r3, #16]
 80a1516:	4798      	blx	r3
 80a1518:	2800      	cmp	r0, #0
 80a151a:	dc16      	bgt.n	80a154a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a151c:	4b10      	ldr	r3, [pc, #64]	; (80a1560 <serialEventRun+0x58>)
 80a151e:	b133      	cbz	r3, 80a152e <serialEventRun+0x26>
 80a1520:	f000 fa32 	bl	80a1988 <_Z22__fetch_global_Serial1v>
 80a1524:	6803      	ldr	r3, [r0, #0]
 80a1526:	691b      	ldr	r3, [r3, #16]
 80a1528:	4798      	blx	r3
 80a152a:	2800      	cmp	r0, #0
 80a152c:	dc10      	bgt.n	80a1550 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a152e:	4b0d      	ldr	r3, [pc, #52]	; (80a1564 <serialEventRun+0x5c>)
 80a1530:	b10b      	cbz	r3, 80a1536 <serialEventRun+0x2e>
 80a1532:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1536:	4b0c      	ldr	r3, [pc, #48]	; (80a1568 <serialEventRun+0x60>)
 80a1538:	b17b      	cbz	r3, 80a155a <serialEventRun+0x52>
 80a153a:	f000 f97b 	bl	80a1834 <_Z17_fetch_usbserial1v>
 80a153e:	6803      	ldr	r3, [r0, #0]
 80a1540:	691b      	ldr	r3, [r3, #16]
 80a1542:	4798      	blx	r3
 80a1544:	2800      	cmp	r0, #0
 80a1546:	dc06      	bgt.n	80a1556 <serialEventRun+0x4e>
 80a1548:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a154a:	f3af 8000 	nop.w
 80a154e:	e7e5      	b.n	80a151c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1550:	f3af 8000 	nop.w
 80a1554:	e7eb      	b.n	80a152e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1556:	f3af 8000 	nop.w
 80a155a:	bd08      	pop	{r3, pc}
	...

080a156c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a156c:	b508      	push	{r3, lr}
	serialEventRun();
 80a156e:	f7ff ffcb 	bl	80a1508 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1572:	f7ff fd19 	bl	80a0fa8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1576:	4b01      	ldr	r3, [pc, #4]	; (80a157c <_post_loop+0x10>)
 80a1578:	6018      	str	r0, [r3, #0]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	20000478 	.word	0x20000478

080a1580 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1580:	4802      	ldr	r0, [pc, #8]	; (80a158c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1582:	4a03      	ldr	r2, [pc, #12]	; (80a1590 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1584:	4903      	ldr	r1, [pc, #12]	; (80a1594 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1586:	1a12      	subs	r2, r2, r0
 80a1588:	f001 b9bc 	b.w	80a2904 <memcpy>
 80a158c:	40024000 	.word	0x40024000
 80a1590:	40024004 	.word	0x40024004
 80a1594:	080a2f80 	.word	0x080a2f80

080a1598 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1598:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a159a:	2300      	movs	r3, #0
 80a159c:	9300      	str	r3, [sp, #0]
 80a159e:	461a      	mov	r2, r3
 80a15a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15a4:	f7ff fe14 	bl	80a11d0 <system_ctrl_set_result>
}
 80a15a8:	b003      	add	sp, #12
 80a15aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a15b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a15b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a15b2:	8843      	ldrh	r3, [r0, #2]
 80a15b4:	2b0a      	cmp	r3, #10
 80a15b6:	d008      	beq.n	80a15ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a15b8:	2b50      	cmp	r3, #80	; 0x50
 80a15ba:	d109      	bne.n	80a15d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a15bc:	4b09      	ldr	r3, [pc, #36]	; (80a15e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a15be:	681b      	ldr	r3, [r3, #0]
 80a15c0:	b13b      	cbz	r3, 80a15d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a15c2:	b003      	add	sp, #12
 80a15c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a15c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a15ca:	f7ff ffe5 	bl	80a1598 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a15ce:	e006      	b.n	80a15de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a15d0:	2300      	movs	r3, #0
 80a15d2:	9300      	str	r3, [sp, #0]
 80a15d4:	461a      	mov	r2, r3
 80a15d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a15da:	f7ff fdf9 	bl	80a11d0 <system_ctrl_set_result>
        break;
    }
}
 80a15de:	b003      	add	sp, #12
 80a15e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a15e4:	200003f0 	.word	0x200003f0

080a15e8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a15e8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a15ea:	4c10      	ldr	r4, [pc, #64]	; (80a162c <module_user_init_hook+0x44>)
 80a15ec:	4d10      	ldr	r5, [pc, #64]	; (80a1630 <module_user_init_hook+0x48>)
 80a15ee:	6823      	ldr	r3, [r4, #0]
 80a15f0:	42ab      	cmp	r3, r5
 80a15f2:	4b10      	ldr	r3, [pc, #64]	; (80a1634 <module_user_init_hook+0x4c>)
 80a15f4:	bf0c      	ite	eq
 80a15f6:	2201      	moveq	r2, #1
 80a15f8:	2200      	movne	r2, #0
 80a15fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a15fc:	d002      	beq.n	80a1604 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a15fe:	f7ff ffbf 	bl	80a1580 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1602:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1604:	f7ff fcc0 	bl	80a0f88 <HAL_RNG_GetRandomNumber>
 80a1608:	4604      	mov	r4, r0
    srand(seed);
 80a160a:	f001 f98f 	bl	80a292c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a160e:	4b0a      	ldr	r3, [pc, #40]	; (80a1638 <module_user_init_hook+0x50>)
 80a1610:	b113      	cbz	r3, 80a1618 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1612:	4620      	mov	r0, r4
 80a1614:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1618:	2100      	movs	r1, #0
 80a161a:	4807      	ldr	r0, [pc, #28]	; (80a1638 <module_user_init_hook+0x50>)
 80a161c:	f7ff fe32 	bl	80a1284 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1624:	2100      	movs	r1, #0
 80a1626:	4805      	ldr	r0, [pc, #20]	; (80a163c <module_user_init_hook+0x54>)
 80a1628:	f7ff bdc8 	b.w	80a11bc <system_ctrl_set_app_request_handler>
 80a162c:	40024000 	.word	0x40024000
 80a1630:	9a271c1e 	.word	0x9a271c1e
 80a1634:	200003f4 	.word	0x200003f4
 80a1638:	00000000 	.word	0x00000000
 80a163c:	080a15b1 	.word	0x080a15b1

080a1640 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1640:	4770      	bx	lr

080a1642 <_ZN9IPAddressD0Ev>:
 80a1642:	b510      	push	{r4, lr}
 80a1644:	4604      	mov	r4, r0
 80a1646:	2118      	movs	r1, #24
 80a1648:	f000 fba3 	bl	80a1d92 <_ZdlPvj>
 80a164c:	4620      	mov	r0, r4
 80a164e:	bd10      	pop	{r4, pc}

080a1650 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1652:	460f      	mov	r7, r1
 80a1654:	f100 0608 	add.w	r6, r0, #8
 80a1658:	1d05      	adds	r5, r0, #4
 80a165a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a165c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1660:	220a      	movs	r2, #10
 80a1662:	4638      	mov	r0, r7
 80a1664:	f7ff ff15 	bl	80a1492 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1668:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a166a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a166c:	d007      	beq.n	80a167e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a166e:	2c00      	cmp	r4, #0
 80a1670:	d0f4      	beq.n	80a165c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1672:	212e      	movs	r1, #46	; 0x2e
 80a1674:	4638      	mov	r0, r7
 80a1676:	f7ff fec9 	bl	80a140c <_ZN5Print5printEc>
 80a167a:	4404      	add	r4, r0
 80a167c:	e7ee      	b.n	80a165c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a167e:	4620      	mov	r0, r4
 80a1680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1684 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1684:	b510      	push	{r4, lr}
 80a1686:	4604      	mov	r4, r0
 80a1688:	4b04      	ldr	r3, [pc, #16]	; (80a169c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a168a:	2211      	movs	r2, #17
 80a168c:	f840 3b04 	str.w	r3, [r0], #4
 80a1690:	2100      	movs	r1, #0
 80a1692:	f001 f942 	bl	80a291a <memset>
{
    clear();
}
 80a1696:	4620      	mov	r0, r4
 80a1698:	bd10      	pop	{r4, pc}
 80a169a:	bf00      	nop
 80a169c:	080a2d84 	.word	0x080a2d84

080a16a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a16a0:	4603      	mov	r3, r0
 80a16a2:	4a07      	ldr	r2, [pc, #28]	; (80a16c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a16a4:	b510      	push	{r4, lr}
 80a16a6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a16aa:	f101 0210 	add.w	r2, r1, #16
 80a16ae:	f851 4b04 	ldr.w	r4, [r1], #4
 80a16b2:	4291      	cmp	r1, r2
 80a16b4:	f843 4b04 	str.w	r4, [r3], #4
 80a16b8:	d1f9      	bne.n	80a16ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a16ba:	780a      	ldrb	r2, [r1, #0]
 80a16bc:	701a      	strb	r2, [r3, #0]
}
 80a16be:	bd10      	pop	{r4, pc}
 80a16c0:	080a2d84 	.word	0x080a2d84

080a16c4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a16c4:	4a02      	ldr	r2, [pc, #8]	; (80a16d0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a16c6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a16c8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a16ca:	2204      	movs	r2, #4
 80a16cc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a16ce:	4770      	bx	lr
 80a16d0:	080a2d84 	.word	0x080a2d84

080a16d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a16d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a16d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a16da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a16de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a16e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a16e6:	2304      	movs	r3, #4
 80a16e8:	6041      	str	r1, [r0, #4]
 80a16ea:	7503      	strb	r3, [r0, #20]
 80a16ec:	bd10      	pop	{r4, pc}
	...

080a16f0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a16f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a16f2:	4d04      	ldr	r5, [pc, #16]	; (80a1704 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a16f4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a16f6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a16fa:	9500      	str	r5, [sp, #0]
 80a16fc:	f7ff ffea 	bl	80a16d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1700:	b003      	add	sp, #12
 80a1702:	bd30      	pop	{r4, r5, pc}
 80a1704:	080a2d84 	.word	0x080a2d84

080a1708 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1708:	7441      	strb	r1, [r0, #17]
 80a170a:	4770      	bx	lr

080a170c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a170c:	4770      	bx	lr

080a170e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a170e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1710:	2100      	movs	r1, #0
 80a1712:	7c00      	ldrb	r0, [r0, #16]
 80a1714:	f7ff fd12 	bl	80a113c <HAL_USB_USART_Receive_Data>
}
 80a1718:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a171c:	bf28      	it	cs
 80a171e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1722:	bd08      	pop	{r3, pc}

080a1724 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1724:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1726:	2101      	movs	r1, #1
 80a1728:	7c00      	ldrb	r0, [r0, #16]
 80a172a:	f7ff fd07 	bl	80a113c <HAL_USB_USART_Receive_Data>
}
 80a172e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1732:	bf28      	it	cs
 80a1734:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1738:	bd08      	pop	{r3, pc}

080a173a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a173a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a173c:	7c00      	ldrb	r0, [r0, #16]
 80a173e:	f7ff fcf5 	bl	80a112c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1746:	bd08      	pop	{r3, pc}

080a1748 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1748:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a174a:	7c00      	ldrb	r0, [r0, #16]
 80a174c:	f7ff fce6 	bl	80a111c <HAL_USB_USART_Available_Data>
}
 80a1750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1754:	bd08      	pop	{r3, pc}

080a1756 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1756:	7c00      	ldrb	r0, [r0, #16]
 80a1758:	f7ff bd00 	b.w	80a115c <HAL_USB_USART_Flush_Data>

080a175c <_ZN9USBSerialD0Ev>:
 80a175c:	b510      	push	{r4, lr}
 80a175e:	4604      	mov	r4, r0
 80a1760:	2114      	movs	r1, #20
 80a1762:	f000 fb16 	bl	80a1d92 <_ZdlPvj>
 80a1766:	4620      	mov	r0, r4
 80a1768:	bd10      	pop	{r4, pc}

080a176a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a176a:	b538      	push	{r3, r4, r5, lr}
 80a176c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a176e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1770:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1772:	f7ff fcdb 	bl	80a112c <HAL_USB_USART_Available_Data_For_Write>
 80a1776:	2800      	cmp	r0, #0
 80a1778:	dc01      	bgt.n	80a177e <_ZN9USBSerial5writeEh+0x14>
 80a177a:	7c60      	ldrb	r0, [r4, #17]
 80a177c:	b128      	cbz	r0, 80a178a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a177e:	4629      	mov	r1, r5
 80a1780:	7c20      	ldrb	r0, [r4, #16]
 80a1782:	f7ff fce3 	bl	80a114c <HAL_USB_USART_Send_Data>
 80a1786:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a178a:	bd38      	pop	{r3, r4, r5, pc}

080a178c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a178c:	b510      	push	{r4, lr}
 80a178e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1790:	2300      	movs	r3, #0
 80a1792:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1798:	60a3      	str	r3, [r4, #8]
 80a179a:	4b05      	ldr	r3, [pc, #20]	; (80a17b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a179c:	4608      	mov	r0, r1
 80a179e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a17a0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a17a2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a17a4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a17a6:	4611      	mov	r1, r2
 80a17a8:	f7ff fca8 	bl	80a10fc <HAL_USB_USART_Init>
}
 80a17ac:	4620      	mov	r0, r4
 80a17ae:	bd10      	pop	{r4, pc}
 80a17b0:	080a2d98 	.word	0x080a2d98

080a17b4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a17b4:	2200      	movs	r2, #0
 80a17b6:	7c00      	ldrb	r0, [r0, #16]
 80a17b8:	f7ff bca8 	b.w	80a110c <HAL_USB_USART_Begin>

080a17bc <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a17bc:	7c00      	ldrb	r0, [r0, #16]
 80a17be:	f7ff bcd5 	b.w	80a116c <HAL_USB_USART_Is_Enabled>

080a17c2 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a17c2:	f7ff bffb 	b.w	80a17bc <_ZN9USBSerial9isEnabledEv>

080a17c6 <_Z19acquireSerialBufferv>:
 80a17c6:	b510      	push	{r4, lr}
 80a17c8:	4604      	mov	r4, r0
 80a17ca:	2214      	movs	r2, #20
 80a17cc:	2100      	movs	r1, #0
 80a17ce:	f001 f8a4 	bl	80a291a <memset>
 80a17d2:	4620      	mov	r0, r4
 80a17d4:	bd10      	pop	{r4, pc}
	...

080a17d8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a17d8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a17da:	4d0e      	ldr	r5, [pc, #56]	; (80a1814 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a17dc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a17de:	a801      	add	r0, sp, #4
 80a17e0:	f7ff fff1 	bl	80a17c6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a17e4:	6829      	ldr	r1, [r5, #0]
 80a17e6:	f011 0401 	ands.w	r4, r1, #1
 80a17ea:	d110      	bne.n	80a180e <_Z16_fetch_usbserialv+0x36>
 80a17ec:	4628      	mov	r0, r5
 80a17ee:	f7fe fc65 	bl	80a00bc <__cxa_guard_acquire>
 80a17f2:	b160      	cbz	r0, 80a180e <_Z16_fetch_usbserialv+0x36>
 80a17f4:	aa01      	add	r2, sp, #4
 80a17f6:	4621      	mov	r1, r4
 80a17f8:	4807      	ldr	r0, [pc, #28]	; (80a1818 <_Z16_fetch_usbserialv+0x40>)
 80a17fa:	f7ff ffc7 	bl	80a178c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a17fe:	4628      	mov	r0, r5
 80a1800:	f7fe fc61 	bl	80a00c6 <__cxa_guard_release>
 80a1804:	4a05      	ldr	r2, [pc, #20]	; (80a181c <_Z16_fetch_usbserialv+0x44>)
 80a1806:	4906      	ldr	r1, [pc, #24]	; (80a1820 <_Z16_fetch_usbserialv+0x48>)
 80a1808:	4803      	ldr	r0, [pc, #12]	; (80a1818 <_Z16_fetch_usbserialv+0x40>)
 80a180a:	f000 fabd 	bl	80a1d88 <__aeabi_atexit>
	return _usbserial;
}
 80a180e:	4802      	ldr	r0, [pc, #8]	; (80a1818 <_Z16_fetch_usbserialv+0x40>)
 80a1810:	b007      	add	sp, #28
 80a1812:	bd30      	pop	{r4, r5, pc}
 80a1814:	200003f8 	.word	0x200003f8
 80a1818:	20000400 	.word	0x20000400
 80a181c:	20000078 	.word	0x20000078
 80a1820:	080a170d 	.word	0x080a170d

080a1824 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1824:	b510      	push	{r4, lr}
 80a1826:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1828:	2214      	movs	r2, #20
 80a182a:	2100      	movs	r1, #0
 80a182c:	f001 f875 	bl	80a291a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1830:	4620      	mov	r0, r4
 80a1832:	bd10      	pop	{r4, pc}

080a1834 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1834:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1836:	4c0e      	ldr	r4, [pc, #56]	; (80a1870 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1838:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a183a:	a801      	add	r0, sp, #4
 80a183c:	f7ff fff2 	bl	80a1824 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1840:	6823      	ldr	r3, [r4, #0]
 80a1842:	07db      	lsls	r3, r3, #31
 80a1844:	d410      	bmi.n	80a1868 <_Z17_fetch_usbserial1v+0x34>
 80a1846:	4620      	mov	r0, r4
 80a1848:	f7fe fc38 	bl	80a00bc <__cxa_guard_acquire>
 80a184c:	b160      	cbz	r0, 80a1868 <_Z17_fetch_usbserial1v+0x34>
 80a184e:	aa01      	add	r2, sp, #4
 80a1850:	2101      	movs	r1, #1
 80a1852:	4808      	ldr	r0, [pc, #32]	; (80a1874 <_Z17_fetch_usbserial1v+0x40>)
 80a1854:	f7ff ff9a 	bl	80a178c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1858:	4620      	mov	r0, r4
 80a185a:	f7fe fc34 	bl	80a00c6 <__cxa_guard_release>
 80a185e:	4a06      	ldr	r2, [pc, #24]	; (80a1878 <_Z17_fetch_usbserial1v+0x44>)
 80a1860:	4906      	ldr	r1, [pc, #24]	; (80a187c <_Z17_fetch_usbserial1v+0x48>)
 80a1862:	4804      	ldr	r0, [pc, #16]	; (80a1874 <_Z17_fetch_usbserial1v+0x40>)
 80a1864:	f000 fa90 	bl	80a1d88 <__aeabi_atexit>
  return _usbserial1;
}
 80a1868:	4802      	ldr	r0, [pc, #8]	; (80a1874 <_Z17_fetch_usbserial1v+0x40>)
 80a186a:	b006      	add	sp, #24
 80a186c:	bd10      	pop	{r4, pc}
 80a186e:	bf00      	nop
 80a1870:	200003fc 	.word	0x200003fc
 80a1874:	20000414 	.word	0x20000414
 80a1878:	20000078 	.word	0x20000078
 80a187c:	080a170d 	.word	0x080a170d

080a1880 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1880:	4700      	bx	r0
	...

080a1884 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1884:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1886:	461c      	mov	r4, r3
 80a1888:	b085      	sub	sp, #20
 80a188a:	4605      	mov	r5, r0
 80a188c:	460e      	mov	r6, r1
 80a188e:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1890:	f7ff fb2a 	bl	80a0ee8 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1894:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1896:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1898:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a189c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a189e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a18a2:	bfb4      	ite	lt
 80a18a4:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a18a6:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a18aa:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a18ac:	bfa4      	itt	ge
 80a18ae:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a18b2:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a18b4:	9300      	str	r3, [sp, #0]
 80a18b6:	4632      	mov	r2, r6
 80a18b8:	463b      	mov	r3, r7
 80a18ba:	4904      	ldr	r1, [pc, #16]	; (80a18cc <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a18bc:	bfa8      	it	ge
 80a18be:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a18c2:	f7ff fb09 	bl	80a0ed8 <HAL_Interrupts_Attach>
    return true;
}
 80a18c6:	2001      	movs	r0, #1
 80a18c8:	b005      	add	sp, #20
 80a18ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a18cc:	080a1881 	.word	0x080a1881

080a18d0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a18d0:	4770      	bx	lr

080a18d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a18d2:	7441      	strb	r1, [r0, #17]
 80a18d4:	4770      	bx	lr

080a18d6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a18d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a18d8:	7c00      	ldrb	r0, [r0, #16]
 80a18da:	f7ff fbcd 	bl	80a1078 <HAL_USART_Available_Data_For_Write>
}
 80a18de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18e2:	bd08      	pop	{r3, pc}

080a18e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a18e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a18e6:	7c00      	ldrb	r0, [r0, #16]
 80a18e8:	f7ff fb9e 	bl	80a1028 <HAL_USART_Available_Data>
}
 80a18ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a18f0:	bd08      	pop	{r3, pc}

080a18f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a18f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a18f4:	7c00      	ldrb	r0, [r0, #16]
 80a18f6:	f7ff fba7 	bl	80a1048 <HAL_USART_Peek_Data>
}
 80a18fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a18fe:	bf28      	it	cs
 80a1900:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1904:	bd08      	pop	{r3, pc}

080a1906 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1906:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1908:	7c00      	ldrb	r0, [r0, #16]
 80a190a:	f7ff fb95 	bl	80a1038 <HAL_USART_Read_Data>
}
 80a190e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1912:	bf28      	it	cs
 80a1914:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1918:	bd08      	pop	{r3, pc}

080a191a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a191a:	7c00      	ldrb	r0, [r0, #16]
 80a191c:	f7ff bb9c 	b.w	80a1058 <HAL_USART_Flush_Data>

080a1920 <_ZN11USARTSerialD0Ev>:
 80a1920:	b510      	push	{r4, lr}
 80a1922:	4604      	mov	r4, r0
 80a1924:	2114      	movs	r1, #20
 80a1926:	f000 fa34 	bl	80a1d92 <_ZdlPvj>
 80a192a:	4620      	mov	r0, r4
 80a192c:	bd10      	pop	{r4, pc}

080a192e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a192e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1930:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1932:	4604      	mov	r4, r0
 80a1934:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1936:	b925      	cbnz	r5, 80a1942 <_ZN11USARTSerial5writeEh+0x14>
 80a1938:	7c00      	ldrb	r0, [r0, #16]
 80a193a:	f7ff fb9d 	bl	80a1078 <HAL_USART_Available_Data_For_Write>
 80a193e:	2800      	cmp	r0, #0
 80a1940:	dd05      	ble.n	80a194e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1942:	4631      	mov	r1, r6
 80a1944:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a194a:	f7ff bb65 	b.w	80a1018 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a194e:	4628      	mov	r0, r5
 80a1950:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1954 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1954:	b510      	push	{r4, lr}
 80a1956:	4604      	mov	r4, r0
 80a1958:	4608      	mov	r0, r1
 80a195a:	4611      	mov	r1, r2
 80a195c:	2200      	movs	r2, #0
 80a195e:	6062      	str	r2, [r4, #4]
 80a1960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1964:	60a2      	str	r2, [r4, #8]
 80a1966:	4a05      	ldr	r2, [pc, #20]	; (80a197c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1968:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a196a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a196c:	2201      	movs	r2, #1
 80a196e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1970:	461a      	mov	r2, r3
 80a1972:	f7ff fb49 	bl	80a1008 <HAL_USART_Init>
}
 80a1976:	4620      	mov	r0, r4
 80a1978:	bd10      	pop	{r4, pc}
 80a197a:	bf00      	nop
 80a197c:	080a2dc8 	.word	0x080a2dc8

080a1980 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1980:	7c00      	ldrb	r0, [r0, #16]
 80a1982:	f7ff bb71 	b.w	80a1068 <HAL_USART_Is_Enabled>
	...

080a1988 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a198a:	4c19      	ldr	r4, [pc, #100]	; (80a19f0 <_Z22__fetch_global_Serial1v+0x68>)
 80a198c:	6825      	ldr	r5, [r4, #0]
 80a198e:	b94d      	cbnz	r5, 80a19a4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1990:	2084      	movs	r0, #132	; 0x84
 80a1992:	f7fe fb84 	bl	80a009e <_Znwj>
 80a1996:	4606      	mov	r6, r0
 80a1998:	b118      	cbz	r0, 80a19a2 <_Z22__fetch_global_Serial1v+0x1a>
 80a199a:	2284      	movs	r2, #132	; 0x84
 80a199c:	4629      	mov	r1, r5
 80a199e:	f000 ffbc 	bl	80a291a <memset>
 80a19a2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a19a4:	4d13      	ldr	r5, [pc, #76]	; (80a19f4 <_Z22__fetch_global_Serial1v+0x6c>)
 80a19a6:	682e      	ldr	r6, [r5, #0]
 80a19a8:	b94e      	cbnz	r6, 80a19be <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a19aa:	2084      	movs	r0, #132	; 0x84
 80a19ac:	f7fe fb77 	bl	80a009e <_Znwj>
 80a19b0:	4607      	mov	r7, r0
 80a19b2:	b118      	cbz	r0, 80a19bc <_Z22__fetch_global_Serial1v+0x34>
 80a19b4:	2284      	movs	r2, #132	; 0x84
 80a19b6:	4631      	mov	r1, r6
 80a19b8:	f000 ffaf 	bl	80a291a <memset>
 80a19bc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a19be:	4f0e      	ldr	r7, [pc, #56]	; (80a19f8 <_Z22__fetch_global_Serial1v+0x70>)
 80a19c0:	6839      	ldr	r1, [r7, #0]
 80a19c2:	f011 0601 	ands.w	r6, r1, #1
 80a19c6:	d111      	bne.n	80a19ec <_Z22__fetch_global_Serial1v+0x64>
 80a19c8:	4638      	mov	r0, r7
 80a19ca:	f7fe fb77 	bl	80a00bc <__cxa_guard_acquire>
 80a19ce:	b168      	cbz	r0, 80a19ec <_Z22__fetch_global_Serial1v+0x64>
 80a19d0:	6822      	ldr	r2, [r4, #0]
 80a19d2:	4631      	mov	r1, r6
 80a19d4:	682b      	ldr	r3, [r5, #0]
 80a19d6:	4809      	ldr	r0, [pc, #36]	; (80a19fc <_Z22__fetch_global_Serial1v+0x74>)
 80a19d8:	f7ff ffbc 	bl	80a1954 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a19dc:	4638      	mov	r0, r7
 80a19de:	f7fe fb72 	bl	80a00c6 <__cxa_guard_release>
 80a19e2:	4a07      	ldr	r2, [pc, #28]	; (80a1a00 <_Z22__fetch_global_Serial1v+0x78>)
 80a19e4:	4907      	ldr	r1, [pc, #28]	; (80a1a04 <_Z22__fetch_global_Serial1v+0x7c>)
 80a19e6:	4805      	ldr	r0, [pc, #20]	; (80a19fc <_Z22__fetch_global_Serial1v+0x74>)
 80a19e8:	f000 f9ce 	bl	80a1d88 <__aeabi_atexit>
#endif
	return serial1;
}
 80a19ec:	4803      	ldr	r0, [pc, #12]	; (80a19fc <_Z22__fetch_global_Serial1v+0x74>)
 80a19ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a19f0:	20000444 	.word	0x20000444
 80a19f4:	2000043c 	.word	0x2000043c
 80a19f8:	20000440 	.word	0x20000440
 80a19fc:	20000428 	.word	0x20000428
 80a1a00:	20000078 	.word	0x20000078
 80a1a04:	080a18d1 	.word	0x080a18d1

080a1a08 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1a08:	4770      	bx	lr

080a1a0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a0c:	4606      	mov	r6, r0
 80a1a0e:	4615      	mov	r5, r2
 80a1a10:	460c      	mov	r4, r1
 80a1a12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a14:	42bc      	cmp	r4, r7
 80a1a16:	d006      	beq.n	80a1a26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1a18:	6833      	ldr	r3, [r6, #0]
 80a1a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1a1e:	689b      	ldr	r3, [r3, #8]
 80a1a20:	4630      	mov	r0, r6
 80a1a22:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1a24:	e7f6      	b.n	80a1a14 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1a26:	4628      	mov	r0, r5
 80a1a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a2a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1a2a:	2200      	movs	r2, #0
 80a1a2c:	7c00      	ldrb	r0, [r0, #16]
 80a1a2e:	f7ff bb2b 	b.w	80a1088 <HAL_I2C_Write_Data>

080a1a32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1a32:	2100      	movs	r1, #0
 80a1a34:	7c00      	ldrb	r0, [r0, #16]
 80a1a36:	f7ff bb2f 	b.w	80a1098 <HAL_I2C_Available_Data>

080a1a3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1a3a:	2100      	movs	r1, #0
 80a1a3c:	7c00      	ldrb	r0, [r0, #16]
 80a1a3e:	f7ff bb33 	b.w	80a10a8 <HAL_I2C_Read_Data>

080a1a42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1a42:	2100      	movs	r1, #0
 80a1a44:	7c00      	ldrb	r0, [r0, #16]
 80a1a46:	f7ff bb37 	b.w	80a10b8 <HAL_I2C_Peek_Data>

080a1a4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1a4a:	2100      	movs	r1, #0
 80a1a4c:	7c00      	ldrb	r0, [r0, #16]
 80a1a4e:	f7ff bb3b 	b.w	80a10c8 <HAL_I2C_Flush_Data>

080a1a52 <_ZN7TwoWireD0Ev>:
 80a1a52:	b510      	push	{r4, lr}
 80a1a54:	4604      	mov	r4, r0
 80a1a56:	2114      	movs	r1, #20
 80a1a58:	f000 f99b 	bl	80a1d92 <_ZdlPvj>
 80a1a5c:	4620      	mov	r0, r4
 80a1a5e:	bd10      	pop	{r4, pc}

080a1a60 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a60:	b510      	push	{r4, lr}
 80a1a62:	4604      	mov	r4, r0
 80a1a64:	4608      	mov	r0, r1
 80a1a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a6a:	60a3      	str	r3, [r4, #8]
 80a1a6c:	4b04      	ldr	r3, [pc, #16]	; (80a1a80 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1a6e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1a70:	7420      	strb	r0, [r4, #16]
 80a1a72:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a74:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1a76:	f7ff fb37 	bl	80a10e8 <HAL_I2C_Init>

}
 80a1a7a:	4620      	mov	r0, r4
 80a1a7c:	bd10      	pop	{r4, pc}
 80a1a7e:	bf00      	nop
 80a1a80:	080a2df8 	.word	0x080a2df8

080a1a84 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a84:	2100      	movs	r1, #0
 80a1a86:	7c00      	ldrb	r0, [r0, #16]
 80a1a88:	f7ff bb26 	b.w	80a10d8 <HAL_I2C_Is_Enabled>

080a1a8c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a1a8c:	b510      	push	{r4, lr}
  if (0 == max) {
 80a1a8e:	4604      	mov	r4, r0
 80a1a90:	b130      	cbz	r0, 80a1aa0 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
 80a1a92:	f000 ff73 	bl	80a297c <rand>
 80a1a96:	fb90 f3f4 	sdiv	r3, r0, r4
 80a1a9a:	fb03 0014 	mls	r0, r3, r4, r0
 80a1a9e:	bd10      	pop	{r4, pc}
}
 80a1aa0:	bd10      	pop	{r4, pc}

080a1aa2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a1aa2:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
 80a1aa4:	b510      	push	{r4, lr}
 80a1aa6:	4604      	mov	r4, r0
  if (min >= max) {
 80a1aa8:	da04      	bge.n	80a1ab4 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
 80a1aaa:	1a08      	subs	r0, r1, r0
 80a1aac:	f7ff ffee 	bl	80a1a8c <_Z6randomi>
 80a1ab0:	4420      	add	r0, r4
 80a1ab2:	bd10      	pop	{r4, pc}
}
 80a1ab4:	bd10      	pop	{r4, pc}

080a1ab6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1ab6:	2200      	movs	r2, #0
 80a1ab8:	4611      	mov	r1, r2
 80a1aba:	6840      	ldr	r0, [r0, #4]
 80a1abc:	f7ff bbaa 	b.w	80a1214 <network_ready>

080a1ac0 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ac2:	4616      	mov	r6, r2
 80a1ac4:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1ac6:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ac8:	460f      	mov	r7, r1
 80a1aca:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1acc:	2100      	movs	r1, #0
 80a1ace:	a803      	add	r0, sp, #12
 80a1ad0:	f000 ff23 	bl	80a291a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1ad4:	4630      	mov	r0, r6
 80a1ad6:	f000 ff8b 	bl	80a29f0 <strlen>
 80a1ada:	2500      	movs	r5, #0
 80a1adc:	9500      	str	r5, [sp, #0]
 80a1ade:	b281      	uxth	r1, r0
 80a1ae0:	687b      	ldr	r3, [r7, #4]
 80a1ae2:	aa03      	add	r2, sp, #12
 80a1ae4:	4630      	mov	r0, r6
 80a1ae6:	f7ff fb49 	bl	80a117c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1aea:	b120      	cbz	r0, 80a1af6 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1aec:	4629      	mov	r1, r5
 80a1aee:	4620      	mov	r0, r4
 80a1af0:	f7ff fde8 	bl	80a16c4 <_ZN9IPAddressC1Em>
 80a1af4:	e003      	b.n	80a1afe <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1af6:	a903      	add	r1, sp, #12
 80a1af8:	4620      	mov	r0, r4
 80a1afa:	f7ff fdd1 	bl	80a16a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	b009      	add	sp, #36	; 0x24
 80a1b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b04 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1b04:	2200      	movs	r2, #0
 80a1b06:	4611      	mov	r1, r2
 80a1b08:	6840      	ldr	r0, [r0, #4]
 80a1b0a:	f7ff bba3 	b.w	80a1254 <network_listening>

080a1b0e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1b0e:	2200      	movs	r2, #0
 80a1b10:	4611      	mov	r1, r2
 80a1b12:	6840      	ldr	r0, [r0, #4]
 80a1b14:	f7ff bbae 	b.w	80a1274 <network_get_listen_timeout>

080a1b18 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1b18:	2200      	movs	r2, #0
 80a1b1a:	6840      	ldr	r0, [r0, #4]
 80a1b1c:	f7ff bba2 	b.w	80a1264 <network_set_listen_timeout>

080a1b20 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1b20:	2200      	movs	r2, #0
 80a1b22:	f081 0101 	eor.w	r1, r1, #1
 80a1b26:	6840      	ldr	r0, [r0, #4]
 80a1b28:	f7ff bb8c 	b.w	80a1244 <network_listen>

080a1b2c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1b2c:	2300      	movs	r3, #0
 80a1b2e:	461a      	mov	r2, r3
 80a1b30:	4619      	mov	r1, r3
 80a1b32:	6840      	ldr	r0, [r0, #4]
 80a1b34:	f7ff bb7e 	b.w	80a1234 <network_off>

080a1b38 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1b38:	2200      	movs	r2, #0
 80a1b3a:	4611      	mov	r1, r2
 80a1b3c:	6840      	ldr	r0, [r0, #4]
 80a1b3e:	f7ff bb59 	b.w	80a11f4 <network_connecting>

080a1b42 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1b42:	2200      	movs	r2, #0
 80a1b44:	2102      	movs	r1, #2
 80a1b46:	6840      	ldr	r0, [r0, #4]
 80a1b48:	f7ff bb5c 	b.w	80a1204 <network_disconnect>

080a1b4c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1b4c:	2300      	movs	r3, #0
 80a1b4e:	461a      	mov	r2, r3
 80a1b50:	6840      	ldr	r0, [r0, #4]
 80a1b52:	f7ff bb47 	b.w	80a11e4 <network_connect>
	...

080a1b58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1b58:	4b02      	ldr	r3, [pc, #8]	; (80a1b64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1b5a:	2204      	movs	r2, #4
 80a1b5c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1b5e:	4a02      	ldr	r2, [pc, #8]	; (80a1b68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1b60:	601a      	str	r2, [r3, #0]
 80a1b62:	4770      	bx	lr
 80a1b64:	20000448 	.word	0x20000448
 80a1b68:	080a2e20 	.word	0x080a2e20

080a1b6c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1b6c:	2300      	movs	r3, #0
 80a1b6e:	461a      	mov	r2, r3
 80a1b70:	6840      	ldr	r0, [r0, #4]
 80a1b72:	f7ff bb37 	b.w	80a11e4 <network_connect>

080a1b76 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1b76:	2200      	movs	r2, #0
 80a1b78:	2102      	movs	r1, #2
 80a1b7a:	6840      	ldr	r0, [r0, #4]
 80a1b7c:	f7ff bb42 	b.w	80a1204 <network_disconnect>

080a1b80 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1b80:	2200      	movs	r2, #0
 80a1b82:	4611      	mov	r1, r2
 80a1b84:	6840      	ldr	r0, [r0, #4]
 80a1b86:	f7ff bb35 	b.w	80a11f4 <network_connecting>

080a1b8a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1b8a:	2200      	movs	r2, #0
 80a1b8c:	4611      	mov	r1, r2
 80a1b8e:	6840      	ldr	r0, [r0, #4]
 80a1b90:	f7ff bb40 	b.w	80a1214 <network_ready>

080a1b94 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1b94:	2300      	movs	r3, #0
 80a1b96:	461a      	mov	r2, r3
 80a1b98:	4619      	mov	r1, r3
 80a1b9a:	6840      	ldr	r0, [r0, #4]
 80a1b9c:	f7ff bb42 	b.w	80a1224 <network_on>

080a1ba0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1ba0:	2300      	movs	r3, #0
 80a1ba2:	461a      	mov	r2, r3
 80a1ba4:	4619      	mov	r1, r3
 80a1ba6:	6840      	ldr	r0, [r0, #4]
 80a1ba8:	f7ff bb44 	b.w	80a1234 <network_off>

080a1bac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1bac:	2200      	movs	r2, #0
 80a1bae:	f081 0101 	eor.w	r1, r1, #1
 80a1bb2:	6840      	ldr	r0, [r0, #4]
 80a1bb4:	f7ff bb46 	b.w	80a1244 <network_listen>

080a1bb8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1bb8:	2200      	movs	r2, #0
 80a1bba:	6840      	ldr	r0, [r0, #4]
 80a1bbc:	f7ff bb52 	b.w	80a1264 <network_set_listen_timeout>

080a1bc0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1bc0:	2200      	movs	r2, #0
 80a1bc2:	4611      	mov	r1, r2
 80a1bc4:	6840      	ldr	r0, [r0, #4]
 80a1bc6:	f7ff bb55 	b.w	80a1274 <network_get_listen_timeout>

080a1bca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1bca:	2200      	movs	r2, #0
 80a1bcc:	4611      	mov	r1, r2
 80a1bce:	6840      	ldr	r0, [r0, #4]
 80a1bd0:	f7ff bb40 	b.w	80a1254 <network_listening>

080a1bd4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1bd4:	b570      	push	{r4, r5, r6, lr}
 80a1bd6:	4616      	mov	r6, r2
 80a1bd8:	b08e      	sub	sp, #56	; 0x38
 80a1bda:	4604      	mov	r4, r0
    IPAddress addr;
 80a1bdc:	a808      	add	r0, sp, #32
 80a1bde:	f7ff fd51 	bl	80a1684 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1be2:	2211      	movs	r2, #17
 80a1be4:	2100      	movs	r1, #0
 80a1be6:	a803      	add	r0, sp, #12
 80a1be8:	f000 fe97 	bl	80a291a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1bec:	4630      	mov	r0, r6
 80a1bee:	f000 feff 	bl	80a29f0 <strlen>
 80a1bf2:	2500      	movs	r5, #0
 80a1bf4:	4b0a      	ldr	r3, [pc, #40]	; (80a1c20 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1bf6:	9500      	str	r5, [sp, #0]
 80a1bf8:	b281      	uxth	r1, r0
 80a1bfa:	685b      	ldr	r3, [r3, #4]
 80a1bfc:	aa03      	add	r2, sp, #12
 80a1bfe:	4630      	mov	r0, r6
 80a1c00:	f7ff fabc 	bl	80a117c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1c04:	b120      	cbz	r0, 80a1c10 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1c06:	4629      	mov	r1, r5
 80a1c08:	4620      	mov	r0, r4
 80a1c0a:	f7ff fd5b 	bl	80a16c4 <_ZN9IPAddressC1Em>
 80a1c0e:	e003      	b.n	80a1c18 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1c10:	a903      	add	r1, sp, #12
 80a1c12:	4620      	mov	r0, r4
 80a1c14:	f7ff fd44 	bl	80a16a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	b00e      	add	sp, #56	; 0x38
 80a1c1c:	bd70      	pop	{r4, r5, r6, pc}
 80a1c1e:	bf00      	nop
 80a1c20:	20000448 	.word	0x20000448

080a1c24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1c24:	4b02      	ldr	r3, [pc, #8]	; (80a1c30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1c26:	4a03      	ldr	r2, [pc, #12]	; (80a1c34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1c28:	601a      	str	r2, [r3, #0]
 80a1c2a:	2200      	movs	r2, #0
 80a1c2c:	605a      	str	r2, [r3, #4]
 80a1c2e:	4770      	bx	lr
 80a1c30:	20000450 	.word	0x20000450
 80a1c34:	080a2e54 	.word	0x080a2e54

080a1c38 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1c38:	b510      	push	{r4, lr}
 80a1c3a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1c3c:	480f      	ldr	r0, [pc, #60]	; (80a1c7c <pinAvailable+0x44>)
 80a1c3e:	f7ff fbab 	bl	80a1398 <_ZN8SPIClass9isEnabledEv>
 80a1c42:	b128      	cbz	r0, 80a1c50 <pinAvailable+0x18>
 80a1c44:	f1a4 030d 	sub.w	r3, r4, #13
 80a1c48:	2b02      	cmp	r3, #2
 80a1c4a:	d801      	bhi.n	80a1c50 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1c4c:	2000      	movs	r0, #0
 80a1c4e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1c50:	f000 f87a 	bl	80a1d48 <_Z19__fetch_global_Wirev>
 80a1c54:	f7ff ff16 	bl	80a1a84 <_ZN7TwoWire9isEnabledEv>
 80a1c58:	b108      	cbz	r0, 80a1c5e <pinAvailable+0x26>
 80a1c5a:	2c01      	cmp	r4, #1
 80a1c5c:	d9f6      	bls.n	80a1c4c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1c5e:	f7ff fe93 	bl	80a1988 <_Z22__fetch_global_Serial1v>
 80a1c62:	f7ff fe8d 	bl	80a1980 <_ZN11USARTSerial9isEnabledEv>
 80a1c66:	b118      	cbz	r0, 80a1c70 <pinAvailable+0x38>
 80a1c68:	f1a4 0312 	sub.w	r3, r4, #18
 80a1c6c:	2b01      	cmp	r3, #1
 80a1c6e:	d9ed      	bls.n	80a1c4c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1c70:	2c17      	cmp	r4, #23
 80a1c72:	bf8c      	ite	hi
 80a1c74:	2000      	movhi	r0, #0
 80a1c76:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1c78:	bd10      	pop	{r4, pc}
 80a1c7a:	bf00      	nop
 80a1c7c:	20000458 	.word	0x20000458

080a1c80 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c80:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1c82:	b538      	push	{r3, r4, r5, lr}
 80a1c84:	4604      	mov	r4, r0
 80a1c86:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c88:	d80a      	bhi.n	80a1ca0 <pinMode+0x20>
 80a1c8a:	29ff      	cmp	r1, #255	; 0xff
 80a1c8c:	d008      	beq.n	80a1ca0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c8e:	f7ff ffd3 	bl	80a1c38 <pinAvailable>
 80a1c92:	b128      	cbz	r0, 80a1ca0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c94:	4629      	mov	r1, r5
 80a1c96:	4620      	mov	r0, r4
}
 80a1c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c9c:	f7ff b904 	b.w	80a0ea8 <HAL_Pin_Mode>
 80a1ca0:	bd38      	pop	{r3, r4, r5, pc}

080a1ca2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1ca2:	b538      	push	{r3, r4, r5, lr}
 80a1ca4:	4604      	mov	r4, r0
 80a1ca6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1ca8:	f7ff f906 	bl	80a0eb8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1cac:	28ff      	cmp	r0, #255	; 0xff
 80a1cae:	d010      	beq.n	80a1cd2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1cb0:	2806      	cmp	r0, #6
 80a1cb2:	d804      	bhi.n	80a1cbe <digitalWrite+0x1c>
 80a1cb4:	234d      	movs	r3, #77	; 0x4d
 80a1cb6:	fa23 f000 	lsr.w	r0, r3, r0
 80a1cba:	07c3      	lsls	r3, r0, #31
 80a1cbc:	d409      	bmi.n	80a1cd2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	f7ff ffba 	bl	80a1c38 <pinAvailable>
 80a1cc4:	b128      	cbz	r0, 80a1cd2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1cc6:	4629      	mov	r1, r5
 80a1cc8:	4620      	mov	r0, r4
}
 80a1cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1cce:	f7ff b8fb 	b.w	80a0ec8 <HAL_GPIO_Write>
 80a1cd2:	bd38      	pop	{r3, r4, r5, pc}

080a1cd4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1cd4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1cd6:	4c0c      	ldr	r4, [pc, #48]	; (80a1d08 <_GLOBAL__sub_I_SPI+0x34>)
 80a1cd8:	4e0c      	ldr	r6, [pc, #48]	; (80a1d0c <_GLOBAL__sub_I_SPI+0x38>)
 80a1cda:	4d0d      	ldr	r5, [pc, #52]	; (80a1d10 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1cdc:	2100      	movs	r1, #0
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7ff faf0 	bl	80a12c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1ce4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1ce6:	4c0b      	ldr	r4, [pc, #44]	; (80a1d14 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1ce8:	4632      	mov	r2, r6
 80a1cea:	4629      	mov	r1, r5
 80a1cec:	f000 f84c 	bl	80a1d88 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1cf0:	2101      	movs	r1, #1
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	f7ff fae6 	bl	80a12c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1cf8:	4632      	mov	r2, r6
 80a1cfa:	4629      	mov	r1, r5
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1d02:	f000 b841 	b.w	80a1d88 <__aeabi_atexit>
 80a1d06:	bf00      	nop
 80a1d08:	20000458 	.word	0x20000458
 80a1d0c:	20000078 	.word	0x20000078
 80a1d10:	080a12b5 	.word	0x080a12b5
 80a1d14:	20000468 	.word	0x20000468

080a1d18 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1d18:	b513      	push	{r0, r1, r4, lr}
 80a1d1a:	4c08      	ldr	r4, [pc, #32]	; (80a1d3c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1d1c:	2300      	movs	r3, #0
 80a1d1e:	461a      	mov	r2, r3
 80a1d20:	4619      	mov	r1, r3
 80a1d22:	9300      	str	r3, [sp, #0]
 80a1d24:	4620      	mov	r0, r4
 80a1d26:	f7ff fce3 	bl	80a16f0 <_ZN9IPAddressC1Ehhhh>
 80a1d2a:	4620      	mov	r0, r4
 80a1d2c:	4a04      	ldr	r2, [pc, #16]	; (80a1d40 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1d2e:	4905      	ldr	r1, [pc, #20]	; (80a1d44 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1d30:	b002      	add	sp, #8
 80a1d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d36:	f000 b827 	b.w	80a1d88 <__aeabi_atexit>
 80a1d3a:	bf00      	nop
 80a1d3c:	2000047c 	.word	0x2000047c
 80a1d40:	20000078 	.word	0x20000078
 80a1d44:	080a1641 	.word	0x080a1641

080a1d48 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1d48:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1d4a:	4d0b      	ldr	r5, [pc, #44]	; (80a1d78 <_Z19__fetch_global_Wirev+0x30>)
 80a1d4c:	6829      	ldr	r1, [r5, #0]
 80a1d4e:	f011 0401 	ands.w	r4, r1, #1
 80a1d52:	d10f      	bne.n	80a1d74 <_Z19__fetch_global_Wirev+0x2c>
 80a1d54:	4628      	mov	r0, r5
 80a1d56:	f7fe f9b1 	bl	80a00bc <__cxa_guard_acquire>
 80a1d5a:	b158      	cbz	r0, 80a1d74 <_Z19__fetch_global_Wirev+0x2c>
 80a1d5c:	4621      	mov	r1, r4
 80a1d5e:	4807      	ldr	r0, [pc, #28]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d60:	f7ff fe7e 	bl	80a1a60 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1d64:	4628      	mov	r0, r5
 80a1d66:	f7fe f9ae 	bl	80a00c6 <__cxa_guard_release>
 80a1d6a:	4a05      	ldr	r2, [pc, #20]	; (80a1d80 <_Z19__fetch_global_Wirev+0x38>)
 80a1d6c:	4905      	ldr	r1, [pc, #20]	; (80a1d84 <_Z19__fetch_global_Wirev+0x3c>)
 80a1d6e:	4803      	ldr	r0, [pc, #12]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d70:	f000 f80a 	bl	80a1d88 <__aeabi_atexit>
	return wire;
}
 80a1d74:	4801      	ldr	r0, [pc, #4]	; (80a1d7c <_Z19__fetch_global_Wirev+0x34>)
 80a1d76:	bd38      	pop	{r3, r4, r5, pc}
 80a1d78:	20000494 	.word	0x20000494
 80a1d7c:	20000498 	.word	0x20000498
 80a1d80:	20000078 	.word	0x20000078
 80a1d84:	080a1a09 	.word	0x080a1a09

080a1d88 <__aeabi_atexit>:
 80a1d88:	460b      	mov	r3, r1
 80a1d8a:	4601      	mov	r1, r0
 80a1d8c:	4618      	mov	r0, r3
 80a1d8e:	f000 bdab 	b.w	80a28e8 <__cxa_atexit>

080a1d92 <_ZdlPvj>:
 80a1d92:	f7fe b986 	b.w	80a00a2 <_ZdlPv>
	...

080a1d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1d98:	4b18      	ldr	r3, [pc, #96]	; (80a1dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1d9a:	681a      	ldr	r2, [r3, #0]
 80a1d9c:	07d1      	lsls	r1, r2, #31
 80a1d9e:	bf5c      	itt	pl
 80a1da0:	2201      	movpl	r2, #1
 80a1da2:	601a      	strpl	r2, [r3, #0]
 80a1da4:	4b16      	ldr	r3, [pc, #88]	; (80a1e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1da6:	681a      	ldr	r2, [r3, #0]
 80a1da8:	07d2      	lsls	r2, r2, #31
 80a1daa:	bf5c      	itt	pl
 80a1dac:	2201      	movpl	r2, #1
 80a1dae:	601a      	strpl	r2, [r3, #0]
 80a1db0:	4b14      	ldr	r3, [pc, #80]	; (80a1e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1db2:	681a      	ldr	r2, [r3, #0]
 80a1db4:	07d0      	lsls	r0, r2, #31
 80a1db6:	bf5c      	itt	pl
 80a1db8:	2201      	movpl	r2, #1
 80a1dba:	601a      	strpl	r2, [r3, #0]
 80a1dbc:	4b12      	ldr	r3, [pc, #72]	; (80a1e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1dbe:	681a      	ldr	r2, [r3, #0]
 80a1dc0:	07d1      	lsls	r1, r2, #31
 80a1dc2:	bf5c      	itt	pl
 80a1dc4:	2201      	movpl	r2, #1
 80a1dc6:	601a      	strpl	r2, [r3, #0]
 80a1dc8:	4b10      	ldr	r3, [pc, #64]	; (80a1e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1dca:	681a      	ldr	r2, [r3, #0]
 80a1dcc:	07d2      	lsls	r2, r2, #31
 80a1dce:	bf5c      	itt	pl
 80a1dd0:	2201      	movpl	r2, #1
 80a1dd2:	601a      	strpl	r2, [r3, #0]
 80a1dd4:	4b0e      	ldr	r3, [pc, #56]	; (80a1e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1dd6:	681a      	ldr	r2, [r3, #0]
 80a1dd8:	07d0      	lsls	r0, r2, #31
 80a1dda:	bf5c      	itt	pl
 80a1ddc:	2201      	movpl	r2, #1
 80a1dde:	601a      	strpl	r2, [r3, #0]
 80a1de0:	4b0c      	ldr	r3, [pc, #48]	; (80a1e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1de2:	681a      	ldr	r2, [r3, #0]
 80a1de4:	07d1      	lsls	r1, r2, #31
 80a1de6:	bf5c      	itt	pl
 80a1de8:	2201      	movpl	r2, #1
 80a1dea:	601a      	strpl	r2, [r3, #0]
 80a1dec:	4b0a      	ldr	r3, [pc, #40]	; (80a1e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1dee:	681a      	ldr	r2, [r3, #0]
 80a1df0:	07d2      	lsls	r2, r2, #31
 80a1df2:	bf5c      	itt	pl
 80a1df4:	2201      	movpl	r2, #1
 80a1df6:	601a      	strpl	r2, [r3, #0]
 80a1df8:	4770      	bx	lr
 80a1dfa:	bf00      	nop
 80a1dfc:	200004c8 	.word	0x200004c8
 80a1e00:	200004c4 	.word	0x200004c4
 80a1e04:	200004c0 	.word	0x200004c0
 80a1e08:	200004bc 	.word	0x200004bc
 80a1e0c:	200004b8 	.word	0x200004b8
 80a1e10:	200004b4 	.word	0x200004b4
 80a1e14:	200004b0 	.word	0x200004b0
 80a1e18:	200004ac 	.word	0x200004ac

080a1e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1e1c:	4b24      	ldr	r3, [pc, #144]	; (80a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1e1e:	681a      	ldr	r2, [r3, #0]
 80a1e20:	07d0      	lsls	r0, r2, #31
 80a1e22:	bf5c      	itt	pl
 80a1e24:	2201      	movpl	r2, #1
 80a1e26:	601a      	strpl	r2, [r3, #0]
 80a1e28:	4b22      	ldr	r3, [pc, #136]	; (80a1eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1e2a:	681a      	ldr	r2, [r3, #0]
 80a1e2c:	07d1      	lsls	r1, r2, #31
 80a1e2e:	bf5c      	itt	pl
 80a1e30:	2201      	movpl	r2, #1
 80a1e32:	601a      	strpl	r2, [r3, #0]
 80a1e34:	4b20      	ldr	r3, [pc, #128]	; (80a1eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1e36:	681a      	ldr	r2, [r3, #0]
 80a1e38:	07d2      	lsls	r2, r2, #31
 80a1e3a:	bf5c      	itt	pl
 80a1e3c:	2201      	movpl	r2, #1
 80a1e3e:	601a      	strpl	r2, [r3, #0]
 80a1e40:	4b1e      	ldr	r3, [pc, #120]	; (80a1ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1e42:	681a      	ldr	r2, [r3, #0]
 80a1e44:	07d0      	lsls	r0, r2, #31
 80a1e46:	bf5c      	itt	pl
 80a1e48:	2201      	movpl	r2, #1
 80a1e4a:	601a      	strpl	r2, [r3, #0]
 80a1e4c:	4b1c      	ldr	r3, [pc, #112]	; (80a1ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1e4e:	681a      	ldr	r2, [r3, #0]
 80a1e50:	07d1      	lsls	r1, r2, #31
 80a1e52:	bf5c      	itt	pl
 80a1e54:	2201      	movpl	r2, #1
 80a1e56:	601a      	strpl	r2, [r3, #0]
 80a1e58:	4b1a      	ldr	r3, [pc, #104]	; (80a1ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1e5a:	681a      	ldr	r2, [r3, #0]
 80a1e5c:	07d2      	lsls	r2, r2, #31
 80a1e5e:	bf5c      	itt	pl
 80a1e60:	2201      	movpl	r2, #1
 80a1e62:	601a      	strpl	r2, [r3, #0]
 80a1e64:	4b18      	ldr	r3, [pc, #96]	; (80a1ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1e66:	681a      	ldr	r2, [r3, #0]
 80a1e68:	07d0      	lsls	r0, r2, #31
 80a1e6a:	bf5c      	itt	pl
 80a1e6c:	2201      	movpl	r2, #1
 80a1e6e:	601a      	strpl	r2, [r3, #0]
 80a1e70:	4b16      	ldr	r3, [pc, #88]	; (80a1ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1e72:	681a      	ldr	r2, [r3, #0]
 80a1e74:	07d1      	lsls	r1, r2, #31
 80a1e76:	bf5c      	itt	pl
 80a1e78:	2201      	movpl	r2, #1
 80a1e7a:	601a      	strpl	r2, [r3, #0]
 80a1e7c:	4b14      	ldr	r3, [pc, #80]	; (80a1ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1e7e:	681a      	ldr	r2, [r3, #0]
 80a1e80:	07d2      	lsls	r2, r2, #31
 80a1e82:	bf5c      	itt	pl
 80a1e84:	2201      	movpl	r2, #1
 80a1e86:	601a      	strpl	r2, [r3, #0]
 80a1e88:	4b12      	ldr	r3, [pc, #72]	; (80a1ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1e8a:	681a      	ldr	r2, [r3, #0]
 80a1e8c:	07d0      	lsls	r0, r2, #31
 80a1e8e:	bf5c      	itt	pl
 80a1e90:	2201      	movpl	r2, #1
 80a1e92:	601a      	strpl	r2, [r3, #0]
 80a1e94:	4b10      	ldr	r3, [pc, #64]	; (80a1ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1e96:	681a      	ldr	r2, [r3, #0]
 80a1e98:	07d1      	lsls	r1, r2, #31
 80a1e9a:	bf5c      	itt	pl
 80a1e9c:	2201      	movpl	r2, #1
 80a1e9e:	601a      	strpl	r2, [r3, #0]
 80a1ea0:	4b0e      	ldr	r3, [pc, #56]	; (80a1edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1ea2:	681a      	ldr	r2, [r3, #0]
 80a1ea4:	07d2      	lsls	r2, r2, #31
 80a1ea6:	bf5c      	itt	pl
 80a1ea8:	2201      	movpl	r2, #1
 80a1eaa:	601a      	strpl	r2, [r3, #0]
 80a1eac:	4770      	bx	lr
 80a1eae:	bf00      	nop
 80a1eb0:	200004f8 	.word	0x200004f8
 80a1eb4:	200004f4 	.word	0x200004f4
 80a1eb8:	200004f0 	.word	0x200004f0
 80a1ebc:	200004ec 	.word	0x200004ec
 80a1ec0:	200004e8 	.word	0x200004e8
 80a1ec4:	200004e4 	.word	0x200004e4
 80a1ec8:	200004e0 	.word	0x200004e0
 80a1ecc:	200004dc 	.word	0x200004dc
 80a1ed0:	200004d8 	.word	0x200004d8
 80a1ed4:	200004d4 	.word	0x200004d4
 80a1ed8:	200004d0 	.word	0x200004d0
 80a1edc:	200004cc 	.word	0x200004cc

080a1ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1ee0:	4b24      	ldr	r3, [pc, #144]	; (80a1f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d0      	lsls	r0, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b22      	ldr	r3, [pc, #136]	; (80a1f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d1      	lsls	r1, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b20      	ldr	r3, [pc, #128]	; (80a1f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d2      	lsls	r2, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b1e      	ldr	r3, [pc, #120]	; (80a1f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d0      	lsls	r0, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b1c      	ldr	r3, [pc, #112]	; (80a1f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d1      	lsls	r1, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b1a      	ldr	r3, [pc, #104]	; (80a1f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d2      	lsls	r2, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4b18      	ldr	r3, [pc, #96]	; (80a1f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1f2a:	681a      	ldr	r2, [r3, #0]
 80a1f2c:	07d0      	lsls	r0, r2, #31
 80a1f2e:	bf5c      	itt	pl
 80a1f30:	2201      	movpl	r2, #1
 80a1f32:	601a      	strpl	r2, [r3, #0]
 80a1f34:	4b16      	ldr	r3, [pc, #88]	; (80a1f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1f36:	681a      	ldr	r2, [r3, #0]
 80a1f38:	07d1      	lsls	r1, r2, #31
 80a1f3a:	bf5c      	itt	pl
 80a1f3c:	2201      	movpl	r2, #1
 80a1f3e:	601a      	strpl	r2, [r3, #0]
 80a1f40:	4b14      	ldr	r3, [pc, #80]	; (80a1f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1f42:	681a      	ldr	r2, [r3, #0]
 80a1f44:	07d2      	lsls	r2, r2, #31
 80a1f46:	bf5c      	itt	pl
 80a1f48:	2201      	movpl	r2, #1
 80a1f4a:	601a      	strpl	r2, [r3, #0]
 80a1f4c:	4b12      	ldr	r3, [pc, #72]	; (80a1f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1f4e:	681a      	ldr	r2, [r3, #0]
 80a1f50:	07d0      	lsls	r0, r2, #31
 80a1f52:	bf5c      	itt	pl
 80a1f54:	2201      	movpl	r2, #1
 80a1f56:	601a      	strpl	r2, [r3, #0]
 80a1f58:	4b10      	ldr	r3, [pc, #64]	; (80a1f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1f5a:	681a      	ldr	r2, [r3, #0]
 80a1f5c:	07d1      	lsls	r1, r2, #31
 80a1f5e:	bf5c      	itt	pl
 80a1f60:	2201      	movpl	r2, #1
 80a1f62:	601a      	strpl	r2, [r3, #0]
 80a1f64:	4b0e      	ldr	r3, [pc, #56]	; (80a1fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1f66:	681a      	ldr	r2, [r3, #0]
 80a1f68:	07d2      	lsls	r2, r2, #31
 80a1f6a:	bf5c      	itt	pl
 80a1f6c:	2201      	movpl	r2, #1
 80a1f6e:	601a      	strpl	r2, [r3, #0]
 80a1f70:	4770      	bx	lr
 80a1f72:	bf00      	nop
 80a1f74:	20000528 	.word	0x20000528
 80a1f78:	20000524 	.word	0x20000524
 80a1f7c:	20000520 	.word	0x20000520
 80a1f80:	2000051c 	.word	0x2000051c
 80a1f84:	20000518 	.word	0x20000518
 80a1f88:	20000514 	.word	0x20000514
 80a1f8c:	20000510 	.word	0x20000510
 80a1f90:	2000050c 	.word	0x2000050c
 80a1f94:	20000508 	.word	0x20000508
 80a1f98:	20000504 	.word	0x20000504
 80a1f9c:	20000500 	.word	0x20000500
 80a1fa0:	200004fc 	.word	0x200004fc

080a1fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1fa4:	4b18      	ldr	r3, [pc, #96]	; (80a2008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d1      	lsls	r1, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b16      	ldr	r3, [pc, #88]	; (80a200c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d2      	lsls	r2, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4b14      	ldr	r3, [pc, #80]	; (80a2010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1fbe:	681a      	ldr	r2, [r3, #0]
 80a1fc0:	07d0      	lsls	r0, r2, #31
 80a1fc2:	bf5c      	itt	pl
 80a1fc4:	2201      	movpl	r2, #1
 80a1fc6:	601a      	strpl	r2, [r3, #0]
 80a1fc8:	4b12      	ldr	r3, [pc, #72]	; (80a2014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1fca:	681a      	ldr	r2, [r3, #0]
 80a1fcc:	07d1      	lsls	r1, r2, #31
 80a1fce:	bf5c      	itt	pl
 80a1fd0:	2201      	movpl	r2, #1
 80a1fd2:	601a      	strpl	r2, [r3, #0]
 80a1fd4:	4b10      	ldr	r3, [pc, #64]	; (80a2018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1fd6:	681a      	ldr	r2, [r3, #0]
 80a1fd8:	07d2      	lsls	r2, r2, #31
 80a1fda:	bf5c      	itt	pl
 80a1fdc:	2201      	movpl	r2, #1
 80a1fde:	601a      	strpl	r2, [r3, #0]
 80a1fe0:	4b0e      	ldr	r3, [pc, #56]	; (80a201c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1fe2:	681a      	ldr	r2, [r3, #0]
 80a1fe4:	07d0      	lsls	r0, r2, #31
 80a1fe6:	bf5c      	itt	pl
 80a1fe8:	2201      	movpl	r2, #1
 80a1fea:	601a      	strpl	r2, [r3, #0]
 80a1fec:	4b0c      	ldr	r3, [pc, #48]	; (80a2020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1fee:	681a      	ldr	r2, [r3, #0]
 80a1ff0:	07d1      	lsls	r1, r2, #31
 80a1ff2:	bf5c      	itt	pl
 80a1ff4:	2201      	movpl	r2, #1
 80a1ff6:	601a      	strpl	r2, [r3, #0]
 80a1ff8:	4b0a      	ldr	r3, [pc, #40]	; (80a2024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1ffa:	681a      	ldr	r2, [r3, #0]
 80a1ffc:	07d2      	lsls	r2, r2, #31
 80a1ffe:	bf5c      	itt	pl
 80a2000:	2201      	movpl	r2, #1
 80a2002:	601a      	strpl	r2, [r3, #0]
 80a2004:	4770      	bx	lr
 80a2006:	bf00      	nop
 80a2008:	20000548 	.word	0x20000548
 80a200c:	20000544 	.word	0x20000544
 80a2010:	20000540 	.word	0x20000540
 80a2014:	2000053c 	.word	0x2000053c
 80a2018:	20000538 	.word	0x20000538
 80a201c:	20000534 	.word	0x20000534
 80a2020:	20000530 	.word	0x20000530
 80a2024:	2000052c 	.word	0x2000052c

080a2028 <__aeabi_drsub>:
 80a2028:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a202c:	e002      	b.n	80a2034 <__adddf3>
 80a202e:	bf00      	nop

080a2030 <__aeabi_dsub>:
 80a2030:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2034 <__adddf3>:
 80a2034:	b530      	push	{r4, r5, lr}
 80a2036:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a203a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a203e:	ea94 0f05 	teq	r4, r5
 80a2042:	bf08      	it	eq
 80a2044:	ea90 0f02 	teqeq	r0, r2
 80a2048:	bf1f      	itttt	ne
 80a204a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a204e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2052:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2056:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a205a:	f000 80e2 	beq.w	80a2222 <__adddf3+0x1ee>
 80a205e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2062:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2066:	bfb8      	it	lt
 80a2068:	426d      	neglt	r5, r5
 80a206a:	dd0c      	ble.n	80a2086 <__adddf3+0x52>
 80a206c:	442c      	add	r4, r5
 80a206e:	ea80 0202 	eor.w	r2, r0, r2
 80a2072:	ea81 0303 	eor.w	r3, r1, r3
 80a2076:	ea82 0000 	eor.w	r0, r2, r0
 80a207a:	ea83 0101 	eor.w	r1, r3, r1
 80a207e:	ea80 0202 	eor.w	r2, r0, r2
 80a2082:	ea81 0303 	eor.w	r3, r1, r3
 80a2086:	2d36      	cmp	r5, #54	; 0x36
 80a2088:	bf88      	it	hi
 80a208a:	bd30      	pophi	{r4, r5, pc}
 80a208c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2090:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2094:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2098:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a209c:	d002      	beq.n	80a20a4 <__adddf3+0x70>
 80a209e:	4240      	negs	r0, r0
 80a20a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a20a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a20a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a20ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a20b0:	d002      	beq.n	80a20b8 <__adddf3+0x84>
 80a20b2:	4252      	negs	r2, r2
 80a20b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a20b8:	ea94 0f05 	teq	r4, r5
 80a20bc:	f000 80a7 	beq.w	80a220e <__adddf3+0x1da>
 80a20c0:	f1a4 0401 	sub.w	r4, r4, #1
 80a20c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a20c8:	db0d      	blt.n	80a20e6 <__adddf3+0xb2>
 80a20ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a20ce:	fa22 f205 	lsr.w	r2, r2, r5
 80a20d2:	1880      	adds	r0, r0, r2
 80a20d4:	f141 0100 	adc.w	r1, r1, #0
 80a20d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a20dc:	1880      	adds	r0, r0, r2
 80a20de:	fa43 f305 	asr.w	r3, r3, r5
 80a20e2:	4159      	adcs	r1, r3
 80a20e4:	e00e      	b.n	80a2104 <__adddf3+0xd0>
 80a20e6:	f1a5 0520 	sub.w	r5, r5, #32
 80a20ea:	f10e 0e20 	add.w	lr, lr, #32
 80a20ee:	2a01      	cmp	r2, #1
 80a20f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a20f4:	bf28      	it	cs
 80a20f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a20fa:	fa43 f305 	asr.w	r3, r3, r5
 80a20fe:	18c0      	adds	r0, r0, r3
 80a2100:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2104:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2108:	d507      	bpl.n	80a211a <__adddf3+0xe6>
 80a210a:	f04f 0e00 	mov.w	lr, #0
 80a210e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2112:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2116:	eb6e 0101 	sbc.w	r1, lr, r1
 80a211a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a211e:	d31b      	bcc.n	80a2158 <__adddf3+0x124>
 80a2120:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2124:	d30c      	bcc.n	80a2140 <__adddf3+0x10c>
 80a2126:	0849      	lsrs	r1, r1, #1
 80a2128:	ea5f 0030 	movs.w	r0, r0, rrx
 80a212c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2130:	f104 0401 	add.w	r4, r4, #1
 80a2134:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2138:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a213c:	f080 809a 	bcs.w	80a2274 <__adddf3+0x240>
 80a2140:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2144:	bf08      	it	eq
 80a2146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a214a:	f150 0000 	adcs.w	r0, r0, #0
 80a214e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2152:	ea41 0105 	orr.w	r1, r1, r5
 80a2156:	bd30      	pop	{r4, r5, pc}
 80a2158:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a215c:	4140      	adcs	r0, r0
 80a215e:	eb41 0101 	adc.w	r1, r1, r1
 80a2162:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2166:	f1a4 0401 	sub.w	r4, r4, #1
 80a216a:	d1e9      	bne.n	80a2140 <__adddf3+0x10c>
 80a216c:	f091 0f00 	teq	r1, #0
 80a2170:	bf04      	itt	eq
 80a2172:	4601      	moveq	r1, r0
 80a2174:	2000      	moveq	r0, #0
 80a2176:	fab1 f381 	clz	r3, r1
 80a217a:	bf08      	it	eq
 80a217c:	3320      	addeq	r3, #32
 80a217e:	f1a3 030b 	sub.w	r3, r3, #11
 80a2182:	f1b3 0220 	subs.w	r2, r3, #32
 80a2186:	da0c      	bge.n	80a21a2 <__adddf3+0x16e>
 80a2188:	320c      	adds	r2, #12
 80a218a:	dd08      	ble.n	80a219e <__adddf3+0x16a>
 80a218c:	f102 0c14 	add.w	ip, r2, #20
 80a2190:	f1c2 020c 	rsb	r2, r2, #12
 80a2194:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2198:	fa21 f102 	lsr.w	r1, r1, r2
 80a219c:	e00c      	b.n	80a21b8 <__adddf3+0x184>
 80a219e:	f102 0214 	add.w	r2, r2, #20
 80a21a2:	bfd8      	it	le
 80a21a4:	f1c2 0c20 	rsble	ip, r2, #32
 80a21a8:	fa01 f102 	lsl.w	r1, r1, r2
 80a21ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a21b0:	bfdc      	itt	le
 80a21b2:	ea41 010c 	orrle.w	r1, r1, ip
 80a21b6:	4090      	lslle	r0, r2
 80a21b8:	1ae4      	subs	r4, r4, r3
 80a21ba:	bfa2      	ittt	ge
 80a21bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a21c0:	4329      	orrge	r1, r5
 80a21c2:	bd30      	popge	{r4, r5, pc}
 80a21c4:	ea6f 0404 	mvn.w	r4, r4
 80a21c8:	3c1f      	subs	r4, #31
 80a21ca:	da1c      	bge.n	80a2206 <__adddf3+0x1d2>
 80a21cc:	340c      	adds	r4, #12
 80a21ce:	dc0e      	bgt.n	80a21ee <__adddf3+0x1ba>
 80a21d0:	f104 0414 	add.w	r4, r4, #20
 80a21d4:	f1c4 0220 	rsb	r2, r4, #32
 80a21d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a21dc:	fa01 f302 	lsl.w	r3, r1, r2
 80a21e0:	ea40 0003 	orr.w	r0, r0, r3
 80a21e4:	fa21 f304 	lsr.w	r3, r1, r4
 80a21e8:	ea45 0103 	orr.w	r1, r5, r3
 80a21ec:	bd30      	pop	{r4, r5, pc}
 80a21ee:	f1c4 040c 	rsb	r4, r4, #12
 80a21f2:	f1c4 0220 	rsb	r2, r4, #32
 80a21f6:	fa20 f002 	lsr.w	r0, r0, r2
 80a21fa:	fa01 f304 	lsl.w	r3, r1, r4
 80a21fe:	ea40 0003 	orr.w	r0, r0, r3
 80a2202:	4629      	mov	r1, r5
 80a2204:	bd30      	pop	{r4, r5, pc}
 80a2206:	fa21 f004 	lsr.w	r0, r1, r4
 80a220a:	4629      	mov	r1, r5
 80a220c:	bd30      	pop	{r4, r5, pc}
 80a220e:	f094 0f00 	teq	r4, #0
 80a2212:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2216:	bf06      	itte	eq
 80a2218:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a221c:	3401      	addeq	r4, #1
 80a221e:	3d01      	subne	r5, #1
 80a2220:	e74e      	b.n	80a20c0 <__adddf3+0x8c>
 80a2222:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2226:	bf18      	it	ne
 80a2228:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a222c:	d029      	beq.n	80a2282 <__adddf3+0x24e>
 80a222e:	ea94 0f05 	teq	r4, r5
 80a2232:	bf08      	it	eq
 80a2234:	ea90 0f02 	teqeq	r0, r2
 80a2238:	d005      	beq.n	80a2246 <__adddf3+0x212>
 80a223a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a223e:	bf04      	itt	eq
 80a2240:	4619      	moveq	r1, r3
 80a2242:	4610      	moveq	r0, r2
 80a2244:	bd30      	pop	{r4, r5, pc}
 80a2246:	ea91 0f03 	teq	r1, r3
 80a224a:	bf1e      	ittt	ne
 80a224c:	2100      	movne	r1, #0
 80a224e:	2000      	movne	r0, #0
 80a2250:	bd30      	popne	{r4, r5, pc}
 80a2252:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2256:	d105      	bne.n	80a2264 <__adddf3+0x230>
 80a2258:	0040      	lsls	r0, r0, #1
 80a225a:	4149      	adcs	r1, r1
 80a225c:	bf28      	it	cs
 80a225e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2262:	bd30      	pop	{r4, r5, pc}
 80a2264:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2268:	bf3c      	itt	cc
 80a226a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a226e:	bd30      	popcc	{r4, r5, pc}
 80a2270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2274:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2278:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a227c:	f04f 0000 	mov.w	r0, #0
 80a2280:	bd30      	pop	{r4, r5, pc}
 80a2282:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2286:	bf1a      	itte	ne
 80a2288:	4619      	movne	r1, r3
 80a228a:	4610      	movne	r0, r2
 80a228c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2290:	bf1c      	itt	ne
 80a2292:	460b      	movne	r3, r1
 80a2294:	4602      	movne	r2, r0
 80a2296:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a229a:	bf06      	itte	eq
 80a229c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a22a0:	ea91 0f03 	teqeq	r1, r3
 80a22a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a22a8:	bd30      	pop	{r4, r5, pc}
 80a22aa:	bf00      	nop

080a22ac <__aeabi_ui2d>:
 80a22ac:	f090 0f00 	teq	r0, #0
 80a22b0:	bf04      	itt	eq
 80a22b2:	2100      	moveq	r1, #0
 80a22b4:	4770      	bxeq	lr
 80a22b6:	b530      	push	{r4, r5, lr}
 80a22b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a22bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a22c0:	f04f 0500 	mov.w	r5, #0
 80a22c4:	f04f 0100 	mov.w	r1, #0
 80a22c8:	e750      	b.n	80a216c <__adddf3+0x138>
 80a22ca:	bf00      	nop

080a22cc <__aeabi_i2d>:
 80a22cc:	f090 0f00 	teq	r0, #0
 80a22d0:	bf04      	itt	eq
 80a22d2:	2100      	moveq	r1, #0
 80a22d4:	4770      	bxeq	lr
 80a22d6:	b530      	push	{r4, r5, lr}
 80a22d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a22dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a22e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a22e4:	bf48      	it	mi
 80a22e6:	4240      	negmi	r0, r0
 80a22e8:	f04f 0100 	mov.w	r1, #0
 80a22ec:	e73e      	b.n	80a216c <__adddf3+0x138>
 80a22ee:	bf00      	nop

080a22f0 <__aeabi_f2d>:
 80a22f0:	0042      	lsls	r2, r0, #1
 80a22f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a22f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a22fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a22fe:	bf1f      	itttt	ne
 80a2300:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2304:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2308:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a230c:	4770      	bxne	lr
 80a230e:	f092 0f00 	teq	r2, #0
 80a2312:	bf14      	ite	ne
 80a2314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2318:	4770      	bxeq	lr
 80a231a:	b530      	push	{r4, r5, lr}
 80a231c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2328:	e720      	b.n	80a216c <__adddf3+0x138>
 80a232a:	bf00      	nop

080a232c <__aeabi_ul2d>:
 80a232c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2330:	bf08      	it	eq
 80a2332:	4770      	bxeq	lr
 80a2334:	b530      	push	{r4, r5, lr}
 80a2336:	f04f 0500 	mov.w	r5, #0
 80a233a:	e00a      	b.n	80a2352 <__aeabi_l2d+0x16>

080a233c <__aeabi_l2d>:
 80a233c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2340:	bf08      	it	eq
 80a2342:	4770      	bxeq	lr
 80a2344:	b530      	push	{r4, r5, lr}
 80a2346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a234a:	d502      	bpl.n	80a2352 <__aeabi_l2d+0x16>
 80a234c:	4240      	negs	r0, r0
 80a234e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2352:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2356:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a235a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a235e:	f43f aedc 	beq.w	80a211a <__adddf3+0xe6>
 80a2362:	f04f 0203 	mov.w	r2, #3
 80a2366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a236a:	bf18      	it	ne
 80a236c:	3203      	addne	r2, #3
 80a236e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2372:	bf18      	it	ne
 80a2374:	3203      	addne	r2, #3
 80a2376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a237a:	f1c2 0320 	rsb	r3, r2, #32
 80a237e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2382:	fa20 f002 	lsr.w	r0, r0, r2
 80a2386:	fa01 fe03 	lsl.w	lr, r1, r3
 80a238a:	ea40 000e 	orr.w	r0, r0, lr
 80a238e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2392:	4414      	add	r4, r2
 80a2394:	e6c1      	b.n	80a211a <__adddf3+0xe6>
 80a2396:	bf00      	nop

080a2398 <__aeabi_dmul>:
 80a2398:	b570      	push	{r4, r5, r6, lr}
 80a239a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a239e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a23a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a23a6:	bf1d      	ittte	ne
 80a23a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a23ac:	ea94 0f0c 	teqne	r4, ip
 80a23b0:	ea95 0f0c 	teqne	r5, ip
 80a23b4:	f000 f8de 	bleq	80a2574 <__aeabi_dmul+0x1dc>
 80a23b8:	442c      	add	r4, r5
 80a23ba:	ea81 0603 	eor.w	r6, r1, r3
 80a23be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a23c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a23c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a23ca:	bf18      	it	ne
 80a23cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a23d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a23d8:	d038      	beq.n	80a244c <__aeabi_dmul+0xb4>
 80a23da:	fba0 ce02 	umull	ip, lr, r0, r2
 80a23de:	f04f 0500 	mov.w	r5, #0
 80a23e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a23e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a23ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a23ee:	f04f 0600 	mov.w	r6, #0
 80a23f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a23f6:	f09c 0f00 	teq	ip, #0
 80a23fa:	bf18      	it	ne
 80a23fc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a240c:	d204      	bcs.n	80a2418 <__aeabi_dmul+0x80>
 80a240e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2412:	416d      	adcs	r5, r5
 80a2414:	eb46 0606 	adc.w	r6, r6, r6
 80a2418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a241c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a242c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2430:	bf88      	it	hi
 80a2432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2436:	d81e      	bhi.n	80a2476 <__aeabi_dmul+0xde>
 80a2438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a243c:	bf08      	it	eq
 80a243e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2442:	f150 0000 	adcs.w	r0, r0, #0
 80a2446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a244a:	bd70      	pop	{r4, r5, r6, pc}
 80a244c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2450:	ea46 0101 	orr.w	r1, r6, r1
 80a2454:	ea40 0002 	orr.w	r0, r0, r2
 80a2458:	ea81 0103 	eor.w	r1, r1, r3
 80a245c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2460:	bfc2      	ittt	gt
 80a2462:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a246a:	bd70      	popgt	{r4, r5, r6, pc}
 80a246c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2470:	f04f 0e00 	mov.w	lr, #0
 80a2474:	3c01      	subs	r4, #1
 80a2476:	f300 80ab 	bgt.w	80a25d0 <__aeabi_dmul+0x238>
 80a247a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a247e:	bfde      	ittt	le
 80a2480:	2000      	movle	r0, #0
 80a2482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2486:	bd70      	pople	{r4, r5, r6, pc}
 80a2488:	f1c4 0400 	rsb	r4, r4, #0
 80a248c:	3c20      	subs	r4, #32
 80a248e:	da35      	bge.n	80a24fc <__aeabi_dmul+0x164>
 80a2490:	340c      	adds	r4, #12
 80a2492:	dc1b      	bgt.n	80a24cc <__aeabi_dmul+0x134>
 80a2494:	f104 0414 	add.w	r4, r4, #20
 80a2498:	f1c4 0520 	rsb	r5, r4, #32
 80a249c:	fa00 f305 	lsl.w	r3, r0, r5
 80a24a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a24a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a24a8:	ea40 0002 	orr.w	r0, r0, r2
 80a24ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a24b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a24b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a24b8:	fa21 f604 	lsr.w	r6, r1, r4
 80a24bc:	eb42 0106 	adc.w	r1, r2, r6
 80a24c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a24c4:	bf08      	it	eq
 80a24c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a24ca:	bd70      	pop	{r4, r5, r6, pc}
 80a24cc:	f1c4 040c 	rsb	r4, r4, #12
 80a24d0:	f1c4 0520 	rsb	r5, r4, #32
 80a24d4:	fa00 f304 	lsl.w	r3, r0, r4
 80a24d8:	fa20 f005 	lsr.w	r0, r0, r5
 80a24dc:	fa01 f204 	lsl.w	r2, r1, r4
 80a24e0:	ea40 0002 	orr.w	r0, r0, r2
 80a24e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a24e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a24ec:	f141 0100 	adc.w	r1, r1, #0
 80a24f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a24f4:	bf08      	it	eq
 80a24f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a24fa:	bd70      	pop	{r4, r5, r6, pc}
 80a24fc:	f1c4 0520 	rsb	r5, r4, #32
 80a2500:	fa00 f205 	lsl.w	r2, r0, r5
 80a2504:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2508:	fa20 f304 	lsr.w	r3, r0, r4
 80a250c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2510:	ea43 0302 	orr.w	r3, r3, r2
 80a2514:	fa21 f004 	lsr.w	r0, r1, r4
 80a2518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a251c:	fa21 f204 	lsr.w	r2, r1, r4
 80a2520:	ea20 0002 	bic.w	r0, r0, r2
 80a2524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a252c:	bf08      	it	eq
 80a252e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2532:	bd70      	pop	{r4, r5, r6, pc}
 80a2534:	f094 0f00 	teq	r4, #0
 80a2538:	d10f      	bne.n	80a255a <__aeabi_dmul+0x1c2>
 80a253a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a253e:	0040      	lsls	r0, r0, #1
 80a2540:	eb41 0101 	adc.w	r1, r1, r1
 80a2544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2548:	bf08      	it	eq
 80a254a:	3c01      	subeq	r4, #1
 80a254c:	d0f7      	beq.n	80a253e <__aeabi_dmul+0x1a6>
 80a254e:	ea41 0106 	orr.w	r1, r1, r6
 80a2552:	f095 0f00 	teq	r5, #0
 80a2556:	bf18      	it	ne
 80a2558:	4770      	bxne	lr
 80a255a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a255e:	0052      	lsls	r2, r2, #1
 80a2560:	eb43 0303 	adc.w	r3, r3, r3
 80a2564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2568:	bf08      	it	eq
 80a256a:	3d01      	subeq	r5, #1
 80a256c:	d0f7      	beq.n	80a255e <__aeabi_dmul+0x1c6>
 80a256e:	ea43 0306 	orr.w	r3, r3, r6
 80a2572:	4770      	bx	lr
 80a2574:	ea94 0f0c 	teq	r4, ip
 80a2578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a257c:	bf18      	it	ne
 80a257e:	ea95 0f0c 	teqne	r5, ip
 80a2582:	d00c      	beq.n	80a259e <__aeabi_dmul+0x206>
 80a2584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2588:	bf18      	it	ne
 80a258a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a258e:	d1d1      	bne.n	80a2534 <__aeabi_dmul+0x19c>
 80a2590:	ea81 0103 	eor.w	r1, r1, r3
 80a2594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2598:	f04f 0000 	mov.w	r0, #0
 80a259c:	bd70      	pop	{r4, r5, r6, pc}
 80a259e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a25a2:	bf06      	itte	eq
 80a25a4:	4610      	moveq	r0, r2
 80a25a6:	4619      	moveq	r1, r3
 80a25a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a25ac:	d019      	beq.n	80a25e2 <__aeabi_dmul+0x24a>
 80a25ae:	ea94 0f0c 	teq	r4, ip
 80a25b2:	d102      	bne.n	80a25ba <__aeabi_dmul+0x222>
 80a25b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a25b8:	d113      	bne.n	80a25e2 <__aeabi_dmul+0x24a>
 80a25ba:	ea95 0f0c 	teq	r5, ip
 80a25be:	d105      	bne.n	80a25cc <__aeabi_dmul+0x234>
 80a25c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a25c4:	bf1c      	itt	ne
 80a25c6:	4610      	movne	r0, r2
 80a25c8:	4619      	movne	r1, r3
 80a25ca:	d10a      	bne.n	80a25e2 <__aeabi_dmul+0x24a>
 80a25cc:	ea81 0103 	eor.w	r1, r1, r3
 80a25d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a25d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a25d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a25dc:	f04f 0000 	mov.w	r0, #0
 80a25e0:	bd70      	pop	{r4, r5, r6, pc}
 80a25e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a25e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a25ea:	bd70      	pop	{r4, r5, r6, pc}

080a25ec <__aeabi_ddiv>:
 80a25ec:	b570      	push	{r4, r5, r6, lr}
 80a25ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a25f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a25f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a25fa:	bf1d      	ittte	ne
 80a25fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2600:	ea94 0f0c 	teqne	r4, ip
 80a2604:	ea95 0f0c 	teqne	r5, ip
 80a2608:	f000 f8a7 	bleq	80a275a <__aeabi_ddiv+0x16e>
 80a260c:	eba4 0405 	sub.w	r4, r4, r5
 80a2610:	ea81 0e03 	eor.w	lr, r1, r3
 80a2614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2618:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a261c:	f000 8088 	beq.w	80a2730 <__aeabi_ddiv+0x144>
 80a2620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a262c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2630:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a263c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2644:	429d      	cmp	r5, r3
 80a2646:	bf08      	it	eq
 80a2648:	4296      	cmpeq	r6, r2
 80a264a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a264e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2652:	d202      	bcs.n	80a265a <__aeabi_ddiv+0x6e>
 80a2654:	085b      	lsrs	r3, r3, #1
 80a2656:	ea4f 0232 	mov.w	r2, r2, rrx
 80a265a:	1ab6      	subs	r6, r6, r2
 80a265c:	eb65 0503 	sbc.w	r5, r5, r3
 80a2660:	085b      	lsrs	r3, r3, #1
 80a2662:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a266a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a266e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2672:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2676:	bf22      	ittt	cs
 80a2678:	1ab6      	subcs	r6, r6, r2
 80a267a:	4675      	movcs	r5, lr
 80a267c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2680:	085b      	lsrs	r3, r3, #1
 80a2682:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2686:	ebb6 0e02 	subs.w	lr, r6, r2
 80a268a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a268e:	bf22      	ittt	cs
 80a2690:	1ab6      	subcs	r6, r6, r2
 80a2692:	4675      	movcs	r5, lr
 80a2694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2698:	085b      	lsrs	r3, r3, #1
 80a269a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a269e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a26a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a26a6:	bf22      	ittt	cs
 80a26a8:	1ab6      	subcs	r6, r6, r2
 80a26aa:	4675      	movcs	r5, lr
 80a26ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a26b0:	085b      	lsrs	r3, r3, #1
 80a26b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a26b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a26ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a26be:	bf22      	ittt	cs
 80a26c0:	1ab6      	subcs	r6, r6, r2
 80a26c2:	4675      	movcs	r5, lr
 80a26c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a26c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a26cc:	d018      	beq.n	80a2700 <__aeabi_ddiv+0x114>
 80a26ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a26d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a26d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a26da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a26de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a26e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a26e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a26ea:	d1c0      	bne.n	80a266e <__aeabi_ddiv+0x82>
 80a26ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a26f0:	d10b      	bne.n	80a270a <__aeabi_ddiv+0x11e>
 80a26f2:	ea41 0100 	orr.w	r1, r1, r0
 80a26f6:	f04f 0000 	mov.w	r0, #0
 80a26fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a26fe:	e7b6      	b.n	80a266e <__aeabi_ddiv+0x82>
 80a2700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2704:	bf04      	itt	eq
 80a2706:	4301      	orreq	r1, r0
 80a2708:	2000      	moveq	r0, #0
 80a270a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a270e:	bf88      	it	hi
 80a2710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2714:	f63f aeaf 	bhi.w	80a2476 <__aeabi_dmul+0xde>
 80a2718:	ebb5 0c03 	subs.w	ip, r5, r3
 80a271c:	bf04      	itt	eq
 80a271e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2726:	f150 0000 	adcs.w	r0, r0, #0
 80a272a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a272e:	bd70      	pop	{r4, r5, r6, pc}
 80a2730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a273c:	bfc2      	ittt	gt
 80a273e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2746:	bd70      	popgt	{r4, r5, r6, pc}
 80a2748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a274c:	f04f 0e00 	mov.w	lr, #0
 80a2750:	3c01      	subs	r4, #1
 80a2752:	e690      	b.n	80a2476 <__aeabi_dmul+0xde>
 80a2754:	ea45 0e06 	orr.w	lr, r5, r6
 80a2758:	e68d      	b.n	80a2476 <__aeabi_dmul+0xde>
 80a275a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a275e:	ea94 0f0c 	teq	r4, ip
 80a2762:	bf08      	it	eq
 80a2764:	ea95 0f0c 	teqeq	r5, ip
 80a2768:	f43f af3b 	beq.w	80a25e2 <__aeabi_dmul+0x24a>
 80a276c:	ea94 0f0c 	teq	r4, ip
 80a2770:	d10a      	bne.n	80a2788 <__aeabi_ddiv+0x19c>
 80a2772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2776:	f47f af34 	bne.w	80a25e2 <__aeabi_dmul+0x24a>
 80a277a:	ea95 0f0c 	teq	r5, ip
 80a277e:	f47f af25 	bne.w	80a25cc <__aeabi_dmul+0x234>
 80a2782:	4610      	mov	r0, r2
 80a2784:	4619      	mov	r1, r3
 80a2786:	e72c      	b.n	80a25e2 <__aeabi_dmul+0x24a>
 80a2788:	ea95 0f0c 	teq	r5, ip
 80a278c:	d106      	bne.n	80a279c <__aeabi_ddiv+0x1b0>
 80a278e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2792:	f43f aefd 	beq.w	80a2590 <__aeabi_dmul+0x1f8>
 80a2796:	4610      	mov	r0, r2
 80a2798:	4619      	mov	r1, r3
 80a279a:	e722      	b.n	80a25e2 <__aeabi_dmul+0x24a>
 80a279c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a27a0:	bf18      	it	ne
 80a27a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a27a6:	f47f aec5 	bne.w	80a2534 <__aeabi_dmul+0x19c>
 80a27aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a27ae:	f47f af0d 	bne.w	80a25cc <__aeabi_dmul+0x234>
 80a27b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a27b6:	f47f aeeb 	bne.w	80a2590 <__aeabi_dmul+0x1f8>
 80a27ba:	e712      	b.n	80a25e2 <__aeabi_dmul+0x24a>

080a27bc <__aeabi_d2uiz>:
 80a27bc:	004a      	lsls	r2, r1, #1
 80a27be:	d211      	bcs.n	80a27e4 <__aeabi_d2uiz+0x28>
 80a27c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a27c4:	d211      	bcs.n	80a27ea <__aeabi_d2uiz+0x2e>
 80a27c6:	d50d      	bpl.n	80a27e4 <__aeabi_d2uiz+0x28>
 80a27c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a27cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a27d0:	d40e      	bmi.n	80a27f0 <__aeabi_d2uiz+0x34>
 80a27d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a27d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a27da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a27de:	fa23 f002 	lsr.w	r0, r3, r2
 80a27e2:	4770      	bx	lr
 80a27e4:	f04f 0000 	mov.w	r0, #0
 80a27e8:	4770      	bx	lr
 80a27ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a27ee:	d102      	bne.n	80a27f6 <__aeabi_d2uiz+0x3a>
 80a27f0:	f04f 30ff 	mov.w	r0, #4294967295
 80a27f4:	4770      	bx	lr
 80a27f6:	f04f 0000 	mov.w	r0, #0
 80a27fa:	4770      	bx	lr

080a27fc <__gesf2>:
 80a27fc:	f04f 3cff 	mov.w	ip, #4294967295
 80a2800:	e006      	b.n	80a2810 <__cmpsf2+0x4>
 80a2802:	bf00      	nop

080a2804 <__lesf2>:
 80a2804:	f04f 0c01 	mov.w	ip, #1
 80a2808:	e002      	b.n	80a2810 <__cmpsf2+0x4>
 80a280a:	bf00      	nop

080a280c <__cmpsf2>:
 80a280c:	f04f 0c01 	mov.w	ip, #1
 80a2810:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2814:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a2818:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a281c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2820:	bf18      	it	ne
 80a2822:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2826:	d011      	beq.n	80a284c <__cmpsf2+0x40>
 80a2828:	b001      	add	sp, #4
 80a282a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a282e:	bf18      	it	ne
 80a2830:	ea90 0f01 	teqne	r0, r1
 80a2834:	bf58      	it	pl
 80a2836:	ebb2 0003 	subspl.w	r0, r2, r3
 80a283a:	bf88      	it	hi
 80a283c:	17c8      	asrhi	r0, r1, #31
 80a283e:	bf38      	it	cc
 80a2840:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a2844:	bf18      	it	ne
 80a2846:	f040 0001 	orrne.w	r0, r0, #1
 80a284a:	4770      	bx	lr
 80a284c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2850:	d102      	bne.n	80a2858 <__cmpsf2+0x4c>
 80a2852:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a2856:	d105      	bne.n	80a2864 <__cmpsf2+0x58>
 80a2858:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a285c:	d1e4      	bne.n	80a2828 <__cmpsf2+0x1c>
 80a285e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a2862:	d0e1      	beq.n	80a2828 <__cmpsf2+0x1c>
 80a2864:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2868:	4770      	bx	lr
 80a286a:	bf00      	nop

080a286c <__aeabi_cfrcmple>:
 80a286c:	4684      	mov	ip, r0
 80a286e:	4608      	mov	r0, r1
 80a2870:	4661      	mov	r1, ip
 80a2872:	e7ff      	b.n	80a2874 <__aeabi_cfcmpeq>

080a2874 <__aeabi_cfcmpeq>:
 80a2874:	b50f      	push	{r0, r1, r2, r3, lr}
 80a2876:	f7ff ffc9 	bl	80a280c <__cmpsf2>
 80a287a:	2800      	cmp	r0, #0
 80a287c:	bf48      	it	mi
 80a287e:	f110 0f00 	cmnmi.w	r0, #0
 80a2882:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a2884 <__aeabi_fcmpeq>:
 80a2884:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2888:	f7ff fff4 	bl	80a2874 <__aeabi_cfcmpeq>
 80a288c:	bf0c      	ite	eq
 80a288e:	2001      	moveq	r0, #1
 80a2890:	2000      	movne	r0, #0
 80a2892:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2896:	bf00      	nop

080a2898 <__aeabi_fcmplt>:
 80a2898:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a289c:	f7ff ffea 	bl	80a2874 <__aeabi_cfcmpeq>
 80a28a0:	bf34      	ite	cc
 80a28a2:	2001      	movcc	r0, #1
 80a28a4:	2000      	movcs	r0, #0
 80a28a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28aa:	bf00      	nop

080a28ac <__aeabi_fcmple>:
 80a28ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28b0:	f7ff ffe0 	bl	80a2874 <__aeabi_cfcmpeq>
 80a28b4:	bf94      	ite	ls
 80a28b6:	2001      	movls	r0, #1
 80a28b8:	2000      	movhi	r0, #0
 80a28ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28be:	bf00      	nop

080a28c0 <__aeabi_fcmpge>:
 80a28c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28c4:	f7ff ffd2 	bl	80a286c <__aeabi_cfrcmple>
 80a28c8:	bf94      	ite	ls
 80a28ca:	2001      	movls	r0, #1
 80a28cc:	2000      	movhi	r0, #0
 80a28ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28d2:	bf00      	nop

080a28d4 <__aeabi_fcmpgt>:
 80a28d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a28d8:	f7ff ffc8 	bl	80a286c <__aeabi_cfrcmple>
 80a28dc:	bf34      	ite	cc
 80a28de:	2001      	movcc	r0, #1
 80a28e0:	2000      	movcs	r0, #0
 80a28e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a28e6:	bf00      	nop

080a28e8 <__cxa_atexit>:
 80a28e8:	b510      	push	{r4, lr}
 80a28ea:	4c05      	ldr	r4, [pc, #20]	; (80a2900 <__cxa_atexit+0x18>)
 80a28ec:	4613      	mov	r3, r2
 80a28ee:	b12c      	cbz	r4, 80a28fc <__cxa_atexit+0x14>
 80a28f0:	460a      	mov	r2, r1
 80a28f2:	4601      	mov	r1, r0
 80a28f4:	2002      	movs	r0, #2
 80a28f6:	f3af 8000 	nop.w
 80a28fa:	bd10      	pop	{r4, pc}
 80a28fc:	4620      	mov	r0, r4
 80a28fe:	bd10      	pop	{r4, pc}
 80a2900:	00000000 	.word	0x00000000

080a2904 <memcpy>:
 80a2904:	b510      	push	{r4, lr}
 80a2906:	1e43      	subs	r3, r0, #1
 80a2908:	440a      	add	r2, r1
 80a290a:	4291      	cmp	r1, r2
 80a290c:	d004      	beq.n	80a2918 <memcpy+0x14>
 80a290e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2912:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2916:	e7f8      	b.n	80a290a <memcpy+0x6>
 80a2918:	bd10      	pop	{r4, pc}

080a291a <memset>:
 80a291a:	4603      	mov	r3, r0
 80a291c:	4402      	add	r2, r0
 80a291e:	4293      	cmp	r3, r2
 80a2920:	d002      	beq.n	80a2928 <memset+0xe>
 80a2922:	f803 1b01 	strb.w	r1, [r3], #1
 80a2926:	e7fa      	b.n	80a291e <memset+0x4>
 80a2928:	4770      	bx	lr
	...

080a292c <srand>:
 80a292c:	b538      	push	{r3, r4, r5, lr}
 80a292e:	4b12      	ldr	r3, [pc, #72]	; (80a2978 <srand+0x4c>)
 80a2930:	4605      	mov	r5, r0
 80a2932:	681c      	ldr	r4, [r3, #0]
 80a2934:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2936:	b9d3      	cbnz	r3, 80a296e <srand+0x42>
 80a2938:	2018      	movs	r0, #24
 80a293a:	f7fe fcab 	bl	80a1294 <malloc>
 80a293e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2942:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2944:	8003      	strh	r3, [r0, #0]
 80a2946:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a294a:	8043      	strh	r3, [r0, #2]
 80a294c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2950:	8083      	strh	r3, [r0, #4]
 80a2952:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2956:	80c3      	strh	r3, [r0, #6]
 80a2958:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a295c:	8103      	strh	r3, [r0, #8]
 80a295e:	2305      	movs	r3, #5
 80a2960:	8143      	strh	r3, [r0, #10]
 80a2962:	230b      	movs	r3, #11
 80a2964:	8183      	strh	r3, [r0, #12]
 80a2966:	2201      	movs	r2, #1
 80a2968:	2300      	movs	r3, #0
 80a296a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a296e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2970:	2200      	movs	r2, #0
 80a2972:	611d      	str	r5, [r3, #16]
 80a2974:	615a      	str	r2, [r3, #20]
 80a2976:	bd38      	pop	{r3, r4, r5, pc}
 80a2978:	20000074 	.word	0x20000074

080a297c <rand>:
 80a297c:	4b19      	ldr	r3, [pc, #100]	; (80a29e4 <rand+0x68>)
 80a297e:	b510      	push	{r4, lr}
 80a2980:	681c      	ldr	r4, [r3, #0]
 80a2982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2984:	b9d3      	cbnz	r3, 80a29bc <rand+0x40>
 80a2986:	2018      	movs	r0, #24
 80a2988:	f7fe fc84 	bl	80a1294 <malloc>
 80a298c:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2990:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2992:	8003      	strh	r3, [r0, #0]
 80a2994:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2998:	8043      	strh	r3, [r0, #2]
 80a299a:	f241 2334 	movw	r3, #4660	; 0x1234
 80a299e:	8083      	strh	r3, [r0, #4]
 80a29a0:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a29a4:	80c3      	strh	r3, [r0, #6]
 80a29a6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a29aa:	8103      	strh	r3, [r0, #8]
 80a29ac:	2305      	movs	r3, #5
 80a29ae:	8143      	strh	r3, [r0, #10]
 80a29b0:	230b      	movs	r3, #11
 80a29b2:	8183      	strh	r3, [r0, #12]
 80a29b4:	2201      	movs	r2, #1
 80a29b6:	2300      	movs	r3, #0
 80a29b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a29bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a29be:	4c0a      	ldr	r4, [pc, #40]	; (80a29e8 <rand+0x6c>)
 80a29c0:	690b      	ldr	r3, [r1, #16]
 80a29c2:	6948      	ldr	r0, [r1, #20]
 80a29c4:	435c      	muls	r4, r3
 80a29c6:	4a09      	ldr	r2, [pc, #36]	; (80a29ec <rand+0x70>)
 80a29c8:	fb02 4000 	mla	r0, r2, r0, r4
 80a29cc:	fba3 2302 	umull	r2, r3, r3, r2
 80a29d0:	3201      	adds	r2, #1
 80a29d2:	4403      	add	r3, r0
 80a29d4:	f143 0300 	adc.w	r3, r3, #0
 80a29d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a29dc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a29e0:	bd10      	pop	{r4, pc}
 80a29e2:	bf00      	nop
 80a29e4:	20000074 	.word	0x20000074
 80a29e8:	5851f42d 	.word	0x5851f42d
 80a29ec:	4c957f2d 	.word	0x4c957f2d

080a29f0 <strlen>:
 80a29f0:	4603      	mov	r3, r0
 80a29f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a29f6:	2a00      	cmp	r2, #0
 80a29f8:	d1fb      	bne.n	80a29f2 <strlen+0x2>
 80a29fa:	1a18      	subs	r0, r3, r0
 80a29fc:	3801      	subs	r0, #1
 80a29fe:	4770      	bx	lr

080a2a00 <dynalib_user>:
 80a2a00:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2a10:	0000 0000                                   ....

080a2a14 <_ZTV15RHGenericDriver>:
	...
 80a2a1c:	00cd 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a2a2c:	00a9 080a 00d1 080a 00e3 080a 0149 080a     ............I...
 80a2a3c:	0121 080a 016d 080a 011d 080a 00f1 080a     !...m...........
 80a2a4c:	00f5 080a 00f9 080a 00fd 080a 0101 080a     ................
 80a2a5c:	00ed 080a 010d 080a 0111 080a 0115 080a     ................
 80a2a6c:	0119 080a 011d 080a 4548 4552 0000 0000     ........HERE....

080a2a7c <_ZTV13RHHardwareSPI>:
	...
 80a2a84:	01e5 080a 01e1 080a 01e1 080a 01f1 080a     ................
 80a2a94:	0271 080a 02b5 080a 02b9 080a 02bd 080a     q...............

080a2aa4 <_ZTV12RHGenericSPI>:
	...
 80a2aac:	00a9 080a 02b1 080a 02b3 080a 00a9 080a     ................
 80a2abc:	00a9 080a 02b5 080a 02b9 080a 02bd 080a     ................
 80a2acc:	6e69 7469 6620 6961 656c 0064 6553 646e     init failed.Send
 80a2adc:	6e69 2067 6f74 7220 3966 5f35 6572 696c     ing to rf95_reli
 80a2aec:	6261 656c 645f 7461 6761 6172 5f6d 6573     able_datagram_se
 80a2afc:	7672 7265 6700 746f 7220 7065 796c 6620     rver.got reply f
 80a2b0c:	6f72 206d 203a 7830 4e00 206f 6572 6c70     rom : 0x.No repl
 80a2b1c:	2c79 6920 2073 6672 3539 725f 6c65 6169     y, is rf95_relia
 80a2b2c:	6c62 5f65 6164 6174 7267 6d61 735f 7265     ble_datagram_ser
 80a2b3c:	6576 2072 7572 6e6e 6e69 3f67 7300 6e65     ver running?.sen
 80a2b4c:	7464 576f 6961 2074 6166 6c69 6465 7200          dtoWait failed.

080a2b5b <_ZL18MODEM_CONFIG_TABLE>:
 80a2b5b:	7472 9200 0074 9448 7800 00c4 9452 5200     rt..t.H..x..R..R
 80a2b6b:	00a4 9452 8200 0074 7072 6200 0070 9074     ..R...t.rp.bp.t.
 80a2b7b:	6200 0084 a464 6300 00b4 b473 7300 0074     .b..d..c..s..st.
 80a2b8b:	8442 5200 0084 0000 0000                         B..R.....

080a2b94 <_ZTV7RH_RF95>:
	...
 80a2b9c:	08cd 080a 0777 080a 0545 080a 07b3 080a     ....w...E.......
 80a2bac:	0431 080a 00d1 080a 00e3 080a 0149 080a     1...........I...
 80a2bbc:	0121 080a 016d 080a 0435 080a 00f1 080a     !...m...5.......
 80a2bcc:	00f5 080a 00f9 080a 00fd 080a 0101 080a     ................
 80a2bdc:	00ed 080a 010d 080a 0111 080a 0115 080a     ................
 80a2bec:	0119 080a 04a5 080a                         ........

080a2bf4 <_ZTV11RHSPIDriver>:
	...
 80a2bfc:	0d17 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a2c0c:	00a9 080a 00d1 080a 00e3 080a 0149 080a     ............I...
 80a2c1c:	0121 080a 016d 080a 011d 080a 00f1 080a     !...m...........
 80a2c2c:	00f5 080a 00f9 080a 00fd 080a 0101 080a     ................
 80a2c3c:	00ed 080a 010d 080a 0111 080a 0115 080a     ................
 80a2c4c:	0119 080a 011d 080a                         ........

080a2c54 <_ZTV8SPIClass>:
	...
 80a2c5c:	12b5 080a 12b7 080a                         ........

080a2c64 <_ZL14clock_divisors>:
 80a2c64:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 80a2c74:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a2c84:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a2c94:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a2ca4:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a2cb4:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a2cc4:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a2cd4:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a2ce4:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a2cf4:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a2d04:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a2d14:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a2d24:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a2d34:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a2d44:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a2d54:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a2d64:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a2d74:	6974 656d 0000 0000                         time....

080a2d7c <_ZTV9IPAddress>:
	...
 80a2d84:	1651 080a 1641 080a 1643 080a               Q...A...C...

080a2d90 <_ZTV9USBSerial>:
	...
 80a2d98:	170d 080a 175d 080a 176b 080a 13b9 080a     ....]...k.......
 80a2da8:	1749 080a 170f 080a 1725 080a 1757 080a     I.......%...W...
 80a2db8:	173b 080a 1709 080a                         ;.......

080a2dc0 <_ZTV11USARTSerial>:
	...
 80a2dc8:	18d1 080a 1921 080a 192f 080a 13b9 080a     ....!.../.......
 80a2dd8:	18e5 080a 1907 080a 18f3 080a 191b 080a     ................
 80a2de8:	18d3 080a 18d7 080a                         ........

080a2df0 <_ZTV7TwoWire>:
	...
 80a2df8:	1a09 080a 1a53 080a 1a2b 080a 1a0b 080a     ....S...+.......
 80a2e08:	1a33 080a 1a3b 080a 1a43 080a 1a4b 080a     3...;...C...K...

080a2e18 <_ZTVN5spark9WiFiClassE>:
	...
 80a2e20:	1b4d 080a 1b43 080a 1b39 080a 1ab7 080a     M...C...9.......
 80a2e30:	1497 080a 1b2d 080a 1b21 080a 1b19 080a     ....-...!.......
 80a2e40:	1b0f 080a 1b05 080a 1ac1 080a               ............

080a2e4c <_ZTVN5spark12NetworkClassE>:
	...
 80a2e54:	1b6d 080a 1b77 080a 1b81 080a 1b8b 080a     m...w...........
 80a2e64:	1b95 080a 1ba1 080a 1bad 080a 1bb9 080a     ................
 80a2e74:	1bc1 080a 1bcb 080a 1bd5 080a               ............

080a2e80 <__sf_fake_stdin>:
	...

080a2ea0 <__sf_fake_stdout>:
	...

080a2ec0 <__sf_fake_stderr>:
	...
 80a2ee0:	0043                                        C.

080a2ee2 <link_const_variable_data_end>:
	...

080a2ee4 <link_constructors_location>:
 80a2ee4:	080a01d1 	.word	0x080a01d1
 80a2ee8:	080a01d5 	.word	0x080a01d5
 80a2eec:	080a01d9 	.word	0x080a01d9
 80a2ef0:	080a01dd 	.word	0x080a01dd
 80a2ef4:	080a0291 	.word	0x080a0291
 80a2ef8:	080a02ad 	.word	0x080a02ad
 80a2efc:	080a02d5 	.word	0x080a02d5
 80a2f00:	080a03d5 	.word	0x080a03d5
 80a2f04:	080a041d 	.word	0x080a041d
 80a2f08:	080a0421 	.word	0x080a0421
 80a2f0c:	080a0425 	.word	0x080a0425
 80a2f10:	080a0429 	.word	0x080a0429
 80a2f14:	080a042d 	.word	0x080a042d
 80a2f18:	080a08c9 	.word	0x080a08c9
 80a2f1c:	080a0abd 	.word	0x080a0abd
 80a2f20:	080a0ac1 	.word	0x080a0ac1
 80a2f24:	080a0cff 	.word	0x080a0cff
 80a2f28:	080a0d03 	.word	0x080a0d03
 80a2f2c:	080a0d07 	.word	0x080a0d07
 80a2f30:	080a0d0b 	.word	0x080a0d0b
 80a2f34:	080a0d0f 	.word	0x080a0d0f
 80a2f38:	080a0d13 	.word	0x080a0d13
 80a2f3c:	080a0e91 	.word	0x080a0e91
 80a2f40:	080a0e95 	.word	0x080a0e95
 80a2f44:	080a13a1 	.word	0x080a13a1
 80a2f48:	080a14a5 	.word	0x080a14a5
 80a2f4c:	080a14b5 	.word	0x080a14b5
 80a2f50:	080a14ed 	.word	0x080a14ed
 80a2f54:	080a1b59 	.word	0x080a1b59
 80a2f58:	080a1c25 	.word	0x080a1c25
 80a2f5c:	080a1cd5 	.word	0x080a1cd5
 80a2f60:	080a1d19 	.word	0x080a1d19
 80a2f64:	080a1d99 	.word	0x080a1d99
 80a2f68:	080a1e1d 	.word	0x080a1e1d
 80a2f6c:	080a1ee1 	.word	0x080a1ee1
 80a2f70:	080a1fa5 	.word	0x080a1fa5

080a2f74 <link_constructors_end>:
	...
