
c:/Users/julia/Documents/Particle/projects/simplePIR/SimplePIR/target/SimplePIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a16f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000070  20000300  080a16f4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000198  20000370  20000370  00030370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1764  080a1764  00021764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a178c  080a178c  0002178c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00099afb  00000000  00000000  00021790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e6d8  00000000  00000000  000bb28b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011689  00000000  00000000  000c9963  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001dc8  00000000  00000000  000dafec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d40  00000000  00000000  000dcdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000243ee  00000000  00000000  000dfaf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000201f9  00000000  00000000  00103ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009fac0  00000000  00000000  001240db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b2f0  00000000  00000000  001c3b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	fc 13 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f999 	bl	80a1364 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f99e 	bl	80a137a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a16f4 	.word	0x080a16f4
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	20000508 	.word	0x20000508
 80a0058:	20000508 	.word	0x20000508

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc9d 	bl	80a099c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a16b0 	.word	0x080a16b0
 80a0084:	080a16e4 	.word	0x080a16e4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f82f 	bl	80a00f0 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bc43 	b.w	80a0920 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 ba25 	b.w	80a04e8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba2b 	b.w	80a04f8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int pBoth = D2;

int right, left, both;
// setup() runs once, when the device is first turned on.
void setup()
{
 80a00b4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 80a00b6:	f000 fd63 	bl	80a0b80 <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f000 fd53 	bl	80a0b68 <_ZN9USBSerial5beginEl>
  pinMode(pRightPIR, INPUT);
 80a00c2:	4b08      	ldr	r3, [pc, #32]	; (80a00e4 <setup+0x30>)
 80a00c4:	2100      	movs	r1, #0
 80a00c6:	8818      	ldrh	r0, [r3, #0]
 80a00c8:	f000 ff70 	bl	80a0fac <pinMode>
  pinMode(pLeftPIR, INPUT);
 80a00cc:	4b06      	ldr	r3, [pc, #24]	; (80a00e8 <setup+0x34>)
 80a00ce:	2100      	movs	r1, #0
 80a00d0:	8818      	ldrh	r0, [r3, #0]
 80a00d2:	f000 ff6b 	bl	80a0fac <pinMode>
  pinMode(pBoth, INPUT);
 80a00d6:	4b05      	ldr	r3, [pc, #20]	; (80a00ec <setup+0x38>)
 80a00d8:	2100      	movs	r1, #0
 80a00da:	8818      	ldrh	r0, [r3, #0]
}
 80a00dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  pinMode(pRightPIR, INPUT);
  pinMode(pLeftPIR, INPUT);
  pinMode(pBoth, INPUT);
 80a00e0:	f000 bf64 	b.w	80a0fac <pinMode>
 80a00e4:	20000300 	.word	0x20000300
 80a00e8:	20000388 	.word	0x20000388
 80a00ec:	20000304 	.word	0x20000304

080a00f0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a00f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // The core of your code will likely live here.
  right = digitalRead(pRightPIR);  delay(10);
 80a00f2:	4b2c      	ldr	r3, [pc, #176]	; (80a01a4 <loop+0xb4>)
  pinMode(pBoth, INPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a00f4:	b091      	sub	sp, #68	; 0x44
  // The core of your code will likely live here.
  right = digitalRead(pRightPIR);  delay(10);
 80a00f6:	8818      	ldrh	r0, [r3, #0]
 80a00f8:	f000 ff69 	bl	80a0fce <digitalRead>
 80a00fc:	4e2a      	ldr	r6, [pc, #168]	; (80a01a8 <loop+0xb8>)
  left = digitalRead(pLeftPIR);  delay(10);
 80a00fe:	4d2b      	ldr	r5, [pc, #172]	; (80a01ac <loop+0xbc>)

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
  // The core of your code will likely live here.
  right = digitalRead(pRightPIR);  delay(10);
 80a0100:	6030      	str	r0, [r6, #0]
 80a0102:	200a      	movs	r0, #10
 80a0104:	f000 fbba 	bl	80a087c <delay>
  left = digitalRead(pLeftPIR);  delay(10);
 80a0108:	4b29      	ldr	r3, [pc, #164]	; (80a01b0 <loop+0xc0>)
  both = digitalRead(pBoth);  delay(10);
 80a010a:	4c2a      	ldr	r4, [pc, #168]	; (80a01b4 <loop+0xc4>)
// loop() runs over and over again, as quickly as it can execute.
void loop()
{
  // The core of your code will likely live here.
  right = digitalRead(pRightPIR);  delay(10);
  left = digitalRead(pLeftPIR);  delay(10);
 80a010c:	8818      	ldrh	r0, [r3, #0]
 80a010e:	f000 ff5e 	bl	80a0fce <digitalRead>
 80a0112:	6028      	str	r0, [r5, #0]
 80a0114:	200a      	movs	r0, #10
 80a0116:	f000 fbb1 	bl	80a087c <delay>
  both = digitalRead(pBoth);  delay(10);
 80a011a:	4b27      	ldr	r3, [pc, #156]	; (80a01b8 <loop+0xc8>)
 80a011c:	8818      	ldrh	r0, [r3, #0]
 80a011e:	f000 ff56 	bl	80a0fce <digitalRead>
 80a0122:	6020      	str	r0, [r4, #0]
 80a0124:	200a      	movs	r0, #10
 80a0126:	f000 fba9 	bl	80a087c <delay>
  Serial.println("Right: "+ String(right) + "\tLeft: " + String(left)+"\tBoth: "+ String(both));
 80a012a:	f000 fd29 	bl	80a0b80 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a012e:	4923      	ldr	r1, [pc, #140]	; (80a01bc <loop+0xcc>)
 80a0130:	4607      	mov	r7, r0
 80a0132:	a804      	add	r0, sp, #16
 80a0134:	f000 fab2 	bl	80a069c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0138:	220a      	movs	r2, #10
 80a013a:	6831      	ldr	r1, [r6, #0]
 80a013c:	4668      	mov	r0, sp
 80a013e:	f000 fad1 	bl	80a06e4 <_ZN6StringC1Eih>
 80a0142:	4669      	mov	r1, sp
 80a0144:	a804      	add	r0, sp, #16
 80a0146:	f000 faf7 	bl	80a0738 <_ZplRK15StringSumHelperRK6String>
 80a014a:	491d      	ldr	r1, [pc, #116]	; (80a01c0 <loop+0xd0>)
 80a014c:	f000 fb00 	bl	80a0750 <_ZplRK15StringSumHelperPKc>
 80a0150:	4606      	mov	r6, r0
 80a0152:	220a      	movs	r2, #10
 80a0154:	6829      	ldr	r1, [r5, #0]
 80a0156:	a808      	add	r0, sp, #32
 80a0158:	f000 fac4 	bl	80a06e4 <_ZN6StringC1Eih>
 80a015c:	a908      	add	r1, sp, #32
 80a015e:	4630      	mov	r0, r6
 80a0160:	f000 faea 	bl	80a0738 <_ZplRK15StringSumHelperRK6String>
 80a0164:	4917      	ldr	r1, [pc, #92]	; (80a01c4 <loop+0xd4>)
 80a0166:	f000 faf3 	bl	80a0750 <_ZplRK15StringSumHelperPKc>
 80a016a:	4605      	mov	r5, r0
 80a016c:	220a      	movs	r2, #10
 80a016e:	6821      	ldr	r1, [r4, #0]
 80a0170:	a80c      	add	r0, sp, #48	; 0x30
 80a0172:	f000 fab7 	bl	80a06e4 <_ZN6StringC1Eih>
 80a0176:	a90c      	add	r1, sp, #48	; 0x30
 80a0178:	4628      	mov	r0, r5
 80a017a:	f000 fadd 	bl	80a0738 <_ZplRK15StringSumHelperRK6String>
 80a017e:	6801      	ldr	r1, [r0, #0]
 80a0180:	4638      	mov	r0, r7
 80a0182:	f000 fb2c 	bl	80a07de <_ZN5Print7printlnEPKc>
 80a0186:	a80c      	add	r0, sp, #48	; 0x30
 80a0188:	f000 fa41 	bl	80a060e <_ZN6StringD1Ev>
 80a018c:	a808      	add	r0, sp, #32
 80a018e:	f000 fa3e 	bl	80a060e <_ZN6StringD1Ev>
 80a0192:	4668      	mov	r0, sp
 80a0194:	f000 fa3b 	bl	80a060e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0198:	a804      	add	r0, sp, #16
 80a019a:	f000 fa38 	bl	80a060e <_ZN6StringD1Ev>
 80a019e:	b011      	add	sp, #68	; 0x44
 80a01a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a01a2:	bf00      	nop
 80a01a4:	20000300 	.word	0x20000300
 80a01a8:	20000378 	.word	0x20000378
 80a01ac:	2000037c 	.word	0x2000037c
 80a01b0:	20000388 	.word	0x20000388
 80a01b4:	20000374 	.word	0x20000374
 80a01b8:	20000304 	.word	0x20000304
 80a01bc:	080a1410 	.word	0x080a1410
 80a01c0:	080a1418 	.word	0x080a1418
 80a01c4:	080a1420 	.word	0x080a1420

080a01c8 <_GLOBAL__sub_I_SystemMode>:
 80a01c8:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01ca:	f000 f80f 	bl	80a01ec <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a01ce:	4b06      	ldr	r3, [pc, #24]	; (80a01e8 <_GLOBAL__sub_I_SystemMode+0x20>)
 80a01d0:	2200      	movs	r2, #0
 80a01d2:	701a      	strb	r2, [r3, #0]
 80a01d4:	805a      	strh	r2, [r3, #2]
 80a01d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a01da:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a01dc:	2002      	movs	r0, #2
 80a01de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a01e2:	f000 b905 	b.w	80a03f0 <set_system_mode>
 80a01e6:	bf00      	nop
 80a01e8:	20000380 	.word	0x20000380

080a01ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <HAL_Pin_Map+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	681b      	ldr	r3, [r3, #0]
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601b0 	.word	0x080601b0

080a01fc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <HAL_Pin_Mode+0xc>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	689b      	ldr	r3, [r3, #8]
 80a0204:	9301      	str	r3, [sp, #4]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	080601b0 	.word	0x080601b0

080a020c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <HAL_Get_Pin_Mode+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	68db      	ldr	r3, [r3, #12]
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601b0 	.word	0x080601b0

080a021c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_GPIO_Read+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	695b      	ldr	r3, [r3, #20]
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	080601b0 	.word	0x080601b0

080a022c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_SPI_Init+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	69db      	ldr	r3, [r3, #28]
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	080601b4 	.word	0x080601b4

080a023c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <HAL_SPI_Is_Enabled+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	6a1b      	ldr	r3, [r3, #32]
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601b4 	.word	0x080601b4

080a024c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_RNG_GetRandomNumber+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	685b      	ldr	r3, [r3, #4]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	0806019c 	.word	0x0806019c

080a025c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	695b      	ldr	r3, [r3, #20]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	0806019c 	.word	0x0806019c

080a026c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <os_mutex_create+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601d0 	.word	0x080601d0

080a027c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <HAL_USART_Init+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	699b      	ldr	r3, [r3, #24]
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	080601c4 	.word	0x080601c4

080a028c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <HAL_USART_Write_Data+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	080601c4 	.word	0x080601c4

080a029c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <HAL_USART_Available_Data+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601c4 	.word	0x080601c4

080a02ac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <HAL_USART_Read_Data+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601c4 	.word	0x080601c4

080a02bc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_USART_Peek_Data+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601c4 	.word	0x080601c4

080a02cc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <HAL_USART_Flush_Data+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601c4 	.word	0x080601c4

080a02dc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_USART_Is_Enabled+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601c4 	.word	0x080601c4

080a02ec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601c4 	.word	0x080601c4

080a02fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <HAL_I2C_Write_Data+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601ac 	.word	0x080601ac

080a030c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <HAL_I2C_Available_Data+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601ac 	.word	0x080601ac

080a031c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <HAL_I2C_Read_Data+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601ac 	.word	0x080601ac

080a032c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <HAL_I2C_Peek_Data+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601ac 	.word	0x080601ac

080a033c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <HAL_I2C_Flush_Data+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601ac 	.word	0x080601ac

080a034c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <HAL_I2C_Is_Enabled+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601ac 	.word	0x080601ac

080a035c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b03      	ldr	r3, [pc, #12]	; (80a036c <HAL_I2C_Init+0x10>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0366:	9301      	str	r3, [sp, #4]
 80a0368:	bd08      	pop	{r3, pc}
 80a036a:	0000      	.short	0x0000
 80a036c:	080601ac 	.word	0x080601ac

080a0370 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_USB_USART_Init+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	681b      	ldr	r3, [r3, #0]
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601d8 	.word	0x080601d8

080a0380 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <HAL_USB_USART_Begin+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	685b      	ldr	r3, [r3, #4]
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601d8 	.word	0x080601d8

080a0390 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_USB_USART_Available_Data+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	691b      	ldr	r3, [r3, #16]
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601d8 	.word	0x080601d8

080a03a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	695b      	ldr	r3, [r3, #20]
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601d8 	.word	0x080601d8

080a03b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_USB_USART_Receive_Data+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	699b      	ldr	r3, [r3, #24]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601d8 	.word	0x080601d8

080a03c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_USB_USART_Send_Data+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	69db      	ldr	r3, [r3, #28]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601d8 	.word	0x080601d8

080a03d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_USB_USART_Flush_Data+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	6a1b      	ldr	r3, [r3, #32]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601d8 	.word	0x080601d8

080a03e0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <inet_gethostbyname+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601c0 	.word	0x080601c0

080a03f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <set_system_mode+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	685b      	ldr	r3, [r3, #4]
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601a4 	.word	0x080601a4

080a0400 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <system_delay_ms+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	695b      	ldr	r3, [r3, #20]
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601a4 	.word	0x080601a4

080a0410 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b03      	ldr	r3, [pc, #12]	; (80a0420 <system_ctrl_set_app_request_handler+0x10>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a041a:	9301      	str	r3, [sp, #4]
 80a041c:	bd08      	pop	{r3, pc}
 80a041e:	0000      	.short	0x0000
 80a0420:	080601a4 	.word	0x080601a4

080a0424 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b03      	ldr	r3, [pc, #12]	; (80a0434 <system_ctrl_set_result+0x10>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a042e:	9301      	str	r3, [sp, #4]
 80a0430:	bd08      	pop	{r3, pc}
 80a0432:	0000      	.short	0x0000
 80a0434:	080601a4 	.word	0x080601a4

080a0438 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0438:	b508      	push	{r3, lr}
 80a043a:	4b02      	ldr	r3, [pc, #8]	; (80a0444 <network_connect+0xc>)
 80a043c:	681b      	ldr	r3, [r3, #0]
 80a043e:	685b      	ldr	r3, [r3, #4]
 80a0440:	9301      	str	r3, [sp, #4]
 80a0442:	bd08      	pop	{r3, pc}
 80a0444:	080601c8 	.word	0x080601c8

080a0448 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0448:	b508      	push	{r3, lr}
 80a044a:	4b02      	ldr	r3, [pc, #8]	; (80a0454 <network_connecting+0xc>)
 80a044c:	681b      	ldr	r3, [r3, #0]
 80a044e:	689b      	ldr	r3, [r3, #8]
 80a0450:	9301      	str	r3, [sp, #4]
 80a0452:	bd08      	pop	{r3, pc}
 80a0454:	080601c8 	.word	0x080601c8

080a0458 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <network_disconnect+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	68db      	ldr	r3, [r3, #12]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601c8 	.word	0x080601c8

080a0468 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <network_ready+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	691b      	ldr	r3, [r3, #16]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601c8 	.word	0x080601c8

080a0478 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <network_on+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	695b      	ldr	r3, [r3, #20]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601c8 	.word	0x080601c8

080a0488 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <network_off+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	699b      	ldr	r3, [r3, #24]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c8 	.word	0x080601c8

080a0498 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <network_listen+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	69db      	ldr	r3, [r3, #28]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c8 	.word	0x080601c8

080a04a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <network_listening+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	6a1b      	ldr	r3, [r3, #32]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c8 	.word	0x080601c8

080a04b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <network_set_listen_timeout+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c8 	.word	0x080601c8

080a04c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <network_get_listen_timeout+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c8 	.word	0x080601c8

080a04d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601cc 	.word	0x080601cc

080a04e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <malloc+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	681b      	ldr	r3, [r3, #0]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601a0 	.word	0x080601a0

080a04f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <free+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	685b      	ldr	r3, [r3, #4]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601a0 	.word	0x080601a0

080a0508 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <realloc+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	689b      	ldr	r3, [r3, #8]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601a0 	.word	0x080601a0

080a0518 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0518:	4770      	bx	lr

080a051a <_ZN8SPIClassD0Ev>:
 80a051a:	b510      	push	{r4, lr}
 80a051c:	4604      	mov	r4, r0
 80a051e:	2110      	movs	r1, #16
 80a0520:	f000 fdc7 	bl	80a10b2 <_ZdlPvj>
 80a0524:	4620      	mov	r0, r4
 80a0526:	bd10      	pop	{r4, pc}

080a0528 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0528:	b570      	push	{r4, r5, r6, lr}
 80a052a:	4604      	mov	r4, r0
 80a052c:	460e      	mov	r6, r1
 80a052e:	4b07      	ldr	r3, [pc, #28]	; (80a054c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0530:	2500      	movs	r5, #0
 80a0532:	6003      	str	r3, [r0, #0]
 80a0534:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0538:	f7ff fe98 	bl	80a026c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a053c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a053e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0540:	f7ff fe74 	bl	80a022c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0544:	60a5      	str	r5, [r4, #8]
}
 80a0546:	4620      	mov	r0, r4
 80a0548:	bd70      	pop	{r4, r5, r6, pc}
 80a054a:	bf00      	nop
 80a054c:	080a1430 	.word	0x080a1430

080a0550 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0550:	7900      	ldrb	r0, [r0, #4]
 80a0552:	f7ff be73 	b.w	80a023c <HAL_SPI_Is_Enabled>
	...

080a0558 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a055c:	4b03      	ldr	r3, [pc, #12]	; (80a056c <_GLOBAL__sub_I_System+0x14>)
 80a055e:	2000      	movs	r0, #0
 80a0560:	7018      	strb	r0, [r3, #0]
 80a0562:	8058      	strh	r0, [r3, #2]
 80a0564:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0566:	f7ff bf43 	b.w	80a03f0 <set_system_mode>
 80a056a:	bf00      	nop
 80a056c:	2000038c 	.word	0x2000038c

080a0570 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0570:	b510      	push	{r4, lr}
 80a0572:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0574:	f000 ff3a 	bl	80a13ec <strlen>
 80a0578:	3801      	subs	r0, #1
 80a057a:	1823      	adds	r3, r4, r0
 80a057c:	4620      	mov	r0, r4
	while(i<j){
 80a057e:	4298      	cmp	r0, r3
 80a0580:	d206      	bcs.n	80a0590 <_Z11str_reversePc+0x20>
		c = *i;
 80a0582:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0584:	7819      	ldrb	r1, [r3, #0]
 80a0586:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a058a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a058e:	e7f6      	b.n	80a057e <_Z11str_reversePc+0xe>
 80a0590:	bd10      	pop	{r4, pc}

080a0592 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0592:	b570      	push	{r4, r5, r6, lr}
 80a0594:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0596:	1e91      	subs	r1, r2, #2
 80a0598:	2922      	cmp	r1, #34	; 0x22
 80a059a:	d820      	bhi.n	80a05de <ultoa+0x4c>
 80a059c:	4625      	mov	r5, r4
 80a059e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a05a0:	b910      	cbnz	r0, 80a05a8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a05a2:	4423      	add	r3, r4
            *ptr++ = '0';
 80a05a4:	2230      	movs	r2, #48	; 0x30
 80a05a6:	e00e      	b.n	80a05c6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a05a8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a05ac:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a05b0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a05b2:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a05b4:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a05b8:	bf94      	ite	ls
 80a05ba:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a05bc:	3157      	addhi	r1, #87	; 0x57
 80a05be:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a05c2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a05c4:	e7eb      	b.n	80a059e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a05c6:	4299      	cmp	r1, r3
 80a05c8:	d202      	bcs.n	80a05d0 <ultoa+0x3e>
            *ptr++ = '0';
 80a05ca:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a05ce:	e7fa      	b.n	80a05c6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a05d0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a05d2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a05d4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a05d6:	f7ff ffcb 	bl	80a0570 <_Z11str_reversePc>
	return buffer;
 80a05da:	4620      	mov	r0, r4
 80a05dc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a05de:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a05e0:	bd70      	pop	{r4, r5, r6, pc}

080a05e2 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a05e2:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a05e4:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a05e6:	460c      	mov	r4, r1
 80a05e8:	4615      	mov	r5, r2
	if(a<0){
 80a05ea:	da0b      	bge.n	80a0604 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a05ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a05f0:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a05f4:	bf14      	ite	ne
 80a05f6:	4258      	negne	r0, r3
 80a05f8:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a05fa:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a05fc:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a05fe:	462a      	mov	r2, r5
 80a0600:	4419      	add	r1, r3
 80a0602:	e000      	b.n	80a0606 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a0604:	2301      	movs	r3, #1
 80a0606:	f7ff ffc4 	bl	80a0592 <ultoa>
	}
	return buffer;
}
 80a060a:	4620      	mov	r0, r4
 80a060c:	bd38      	pop	{r3, r4, r5, pc}

080a060e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a060e:	b510      	push	{r4, lr}
 80a0610:	4604      	mov	r4, r0
{
	free(buffer);
 80a0612:	6800      	ldr	r0, [r0, #0]
 80a0614:	f7ff ff70 	bl	80a04f8 <free>
}
 80a0618:	4620      	mov	r0, r4
 80a061a:	bd10      	pop	{r4, pc}

080a061c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a061c:	b510      	push	{r4, lr}
 80a061e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0620:	6800      	ldr	r0, [r0, #0]
 80a0622:	b108      	cbz	r0, 80a0628 <_ZN6String10invalidateEv+0xc>
 80a0624:	f7ff ff68 	bl	80a04f8 <free>
	buffer = NULL;
 80a0628:	2300      	movs	r3, #0
 80a062a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a062c:	60a3      	str	r3, [r4, #8]
 80a062e:	6063      	str	r3, [r4, #4]
 80a0630:	bd10      	pop	{r4, pc}

080a0632 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0632:	b538      	push	{r3, r4, r5, lr}
 80a0634:	4604      	mov	r4, r0
 80a0636:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0638:	6800      	ldr	r0, [r0, #0]
 80a063a:	3101      	adds	r1, #1
 80a063c:	f7ff ff64 	bl	80a0508 <realloc>
	if (newbuffer) {
 80a0640:	b110      	cbz	r0, 80a0648 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0642:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0646:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0648:	bd38      	pop	{r3, r4, r5, pc}

080a064a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a064a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a064c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a064e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0650:	b113      	cbz	r3, 80a0658 <_ZN6String7reserveEj+0xe>
 80a0652:	6843      	ldr	r3, [r0, #4]
 80a0654:	428b      	cmp	r3, r1
 80a0656:	d207      	bcs.n	80a0668 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0658:	4620      	mov	r0, r4
 80a065a:	f7ff ffea 	bl	80a0632 <_ZN6String12changeBufferEj>
 80a065e:	b120      	cbz	r0, 80a066a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0660:	68a3      	ldr	r3, [r4, #8]
 80a0662:	b90b      	cbnz	r3, 80a0668 <_ZN6String7reserveEj+0x1e>
 80a0664:	6822      	ldr	r2, [r4, #0]
 80a0666:	7013      	strb	r3, [r2, #0]
 80a0668:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a066a:	bd10      	pop	{r4, pc}

080a066c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a066c:	b570      	push	{r4, r5, r6, lr}
 80a066e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0670:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0672:	4604      	mov	r4, r0
 80a0674:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0676:	f7ff ffe8 	bl	80a064a <_ZN6String7reserveEj>
 80a067a:	b918      	cbnz	r0, 80a0684 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a067c:	4620      	mov	r0, r4
 80a067e:	f7ff ffcd 	bl	80a061c <_ZN6String10invalidateEv>
		return *this;
 80a0682:	e009      	b.n	80a0698 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0684:	462a      	mov	r2, r5
 80a0686:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0688:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a068a:	6820      	ldr	r0, [r4, #0]
 80a068c:	f000 fe6a 	bl	80a1364 <memcpy>
	buffer[len] = 0;
 80a0690:	6822      	ldr	r2, [r4, #0]
 80a0692:	68a3      	ldr	r3, [r4, #8]
 80a0694:	2100      	movs	r1, #0
 80a0696:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0698:	4620      	mov	r0, r4
 80a069a:	bd70      	pop	{r4, r5, r6, pc}

080a069c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a069c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a069e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a06a0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a06a2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a06a4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a06a6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a06a8:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a06aa:	460d      	mov	r5, r1
 80a06ac:	b139      	cbz	r1, 80a06be <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a06ae:	4608      	mov	r0, r1
 80a06b0:	f000 fe9c 	bl	80a13ec <strlen>
 80a06b4:	4629      	mov	r1, r5
 80a06b6:	4602      	mov	r2, r0
 80a06b8:	4620      	mov	r0, r4
 80a06ba:	f7ff ffd7 	bl	80a066c <_ZN6String4copyEPKcj>
}
 80a06be:	4620      	mov	r0, r4
 80a06c0:	bd38      	pop	{r3, r4, r5, pc}

080a06c2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a06c2:	b538      	push	{r3, r4, r5, lr}
 80a06c4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a06c6:	460c      	mov	r4, r1
 80a06c8:	b141      	cbz	r1, 80a06dc <_ZN6StringaSEPKc+0x1a>
 80a06ca:	4608      	mov	r0, r1
 80a06cc:	f000 fe8e 	bl	80a13ec <strlen>
 80a06d0:	4621      	mov	r1, r4
 80a06d2:	4602      	mov	r2, r0
 80a06d4:	4628      	mov	r0, r5
 80a06d6:	f7ff ffc9 	bl	80a066c <_ZN6String4copyEPKcj>
 80a06da:	e001      	b.n	80a06e0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a06dc:	f7ff ff9e 	bl	80a061c <_ZN6String10invalidateEv>

	return *this;
}
 80a06e0:	4628      	mov	r0, r5
 80a06e2:	bd38      	pop	{r3, r4, r5, pc}

080a06e4 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a06e4:	b510      	push	{r4, lr}
 80a06e6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a06e8:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a06ea:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a06ec:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a06ee:	6063      	str	r3, [r4, #4]
	len = 0;
 80a06f0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a06f2:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a06f4:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a06f6:	a901      	add	r1, sp, #4
 80a06f8:	f7ff ff73 	bl	80a05e2 <itoa>
	*this = buf;
 80a06fc:	a901      	add	r1, sp, #4
 80a06fe:	4620      	mov	r0, r4
 80a0700:	f7ff ffdf 	bl	80a06c2 <_ZN6StringaSEPKc>
}
 80a0704:	4620      	mov	r0, r4
 80a0706:	b00a      	add	sp, #40	; 0x28
 80a0708:	bd10      	pop	{r4, pc}

080a070a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a070a:	b570      	push	{r4, r5, r6, lr}
 80a070c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a070e:	460e      	mov	r6, r1
 80a0710:	b909      	cbnz	r1, 80a0716 <_ZN6String6concatEPKcj+0xc>
 80a0712:	2000      	movs	r0, #0
 80a0714:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a0716:	b16a      	cbz	r2, 80a0734 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a0718:	6883      	ldr	r3, [r0, #8]
 80a071a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a071c:	4629      	mov	r1, r5
 80a071e:	f7ff ff94 	bl	80a064a <_ZN6String7reserveEj>
 80a0722:	2800      	cmp	r0, #0
 80a0724:	d0f5      	beq.n	80a0712 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0726:	6820      	ldr	r0, [r4, #0]
 80a0728:	68a3      	ldr	r3, [r4, #8]
 80a072a:	4631      	mov	r1, r6
 80a072c:	4418      	add	r0, r3
 80a072e:	f000 fe55 	bl	80a13dc <strcpy>
	len = newlen;
 80a0732:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a0734:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0736:	bd70      	pop	{r4, r5, r6, pc}

080a0738 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a0738:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a073a:	688a      	ldr	r2, [r1, #8]
 80a073c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a073e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a0740:	f7ff ffe3 	bl	80a070a <_ZN6String6concatEPKcj>
 80a0744:	b910      	cbnz	r0, 80a074c <_ZplRK15StringSumHelperRK6String+0x14>
 80a0746:	4620      	mov	r0, r4
 80a0748:	f7ff ff68 	bl	80a061c <_ZN6String10invalidateEv>
	return a;
}
 80a074c:	4620      	mov	r0, r4
 80a074e:	bd10      	pop	{r4, pc}

080a0750 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a0750:	b538      	push	{r3, r4, r5, lr}
 80a0752:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a0754:	460d      	mov	r5, r1
 80a0756:	b141      	cbz	r1, 80a076a <_ZplRK15StringSumHelperPKc+0x1a>
 80a0758:	4608      	mov	r0, r1
 80a075a:	f000 fe47 	bl	80a13ec <strlen>
 80a075e:	4629      	mov	r1, r5
 80a0760:	4602      	mov	r2, r0
 80a0762:	4620      	mov	r0, r4
 80a0764:	f7ff ffd1 	bl	80a070a <_ZN6String6concatEPKcj>
 80a0768:	b910      	cbnz	r0, 80a0770 <_ZplRK15StringSumHelperPKc+0x20>
 80a076a:	4620      	mov	r0, r4
 80a076c:	f7ff ff56 	bl	80a061c <_ZN6String10invalidateEv>
	return a;
}
 80a0770:	4620      	mov	r0, r4
 80a0772:	bd38      	pop	{r3, r4, r5, pc}

080a0774 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0776:	4606      	mov	r6, r0
 80a0778:	460d      	mov	r5, r1
 80a077a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a077c:	2400      	movs	r4, #0
  while (size--) {
 80a077e:	42bd      	cmp	r5, r7
 80a0780:	d00c      	beq.n	80a079c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0782:	6833      	ldr	r3, [r6, #0]
 80a0784:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0788:	689b      	ldr	r3, [r3, #8]
 80a078a:	4630      	mov	r0, r6
 80a078c:	4798      	blx	r3
     if (chunk>=0)
 80a078e:	2800      	cmp	r0, #0
 80a0790:	db01      	blt.n	80a0796 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0792:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0794:	e7f3      	b.n	80a077e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0796:	2c00      	cmp	r4, #0
 80a0798:	bf08      	it	eq
 80a079a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a079c:	4620      	mov	r0, r4
 80a079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07a0:	b570      	push	{r4, r5, r6, lr}
 80a07a2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07a4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07a6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07a8:	b149      	cbz	r1, 80a07be <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07aa:	f000 fe1f 	bl	80a13ec <strlen>
 80a07ae:	682b      	ldr	r3, [r5, #0]
 80a07b0:	4602      	mov	r2, r0
 80a07b2:	4621      	mov	r1, r4
 80a07b4:	4628      	mov	r0, r5
    }
 80a07b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07ba:	68db      	ldr	r3, [r3, #12]
 80a07bc:	4718      	bx	r3
    }
 80a07be:	bd70      	pop	{r4, r5, r6, pc}

080a07c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07c0:	6803      	ldr	r3, [r0, #0]
 80a07c2:	689b      	ldr	r3, [r3, #8]
 80a07c4:	4718      	bx	r3

080a07c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a07c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07ca:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a07cc:	f7ff fff8 	bl	80a07c0 <_ZN5Print5printEc>
  n += print('\n');
 80a07d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a07d2:	4604      	mov	r4, r0
  n += print('\n');
 80a07d4:	4628      	mov	r0, r5
 80a07d6:	f7ff fff3 	bl	80a07c0 <_ZN5Print5printEc>
  return n;
}
 80a07da:	4420      	add	r0, r4
 80a07dc:	bd38      	pop	{r3, r4, r5, pc}

080a07de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a07de:	b538      	push	{r3, r4, r5, lr}
 80a07e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07e2:	f7ff ffdd 	bl	80a07a0 <_ZN5Print5writeEPKc>
 80a07e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a07e8:	4628      	mov	r0, r5
 80a07ea:	f7ff ffec 	bl	80a07c6 <_ZN5Print7printlnEv>
  return n;
}
 80a07ee:	4420      	add	r0, r4
 80a07f0:	bd38      	pop	{r3, r4, r5, pc}

080a07f2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07f2:	2a01      	cmp	r2, #1
 80a07f4:	bf98      	it	ls
 80a07f6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a07f8:	b530      	push	{r4, r5, lr}
 80a07fa:	460b      	mov	r3, r1
 80a07fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a07fe:	2100      	movs	r1, #0
 80a0800:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0804:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0808:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a080c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0810:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0812:	2b09      	cmp	r3, #9
 80a0814:	bf94      	ite	ls
 80a0816:	3330      	addls	r3, #48	; 0x30
 80a0818:	3337      	addhi	r3, #55	; 0x37
 80a081a:	b2db      	uxtb	r3, r3
 80a081c:	4621      	mov	r1, r4
 80a081e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0822:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0824:	2d00      	cmp	r5, #0
 80a0826:	d1ef      	bne.n	80a0808 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0828:	f7ff ffba 	bl	80a07a0 <_ZN5Print5writeEPKc>
}
 80a082c:	b00b      	add	sp, #44	; 0x2c
 80a082e:	bd30      	pop	{r4, r5, pc}

080a0830 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0830:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0832:	b922      	cbnz	r2, 80a083e <_ZN5Print5printEmi+0xe>
 80a0834:	6803      	ldr	r3, [r0, #0]
 80a0836:	b2c9      	uxtb	r1, r1
 80a0838:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a083a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a083c:	4718      	bx	r3
  else return printNumber(n, base);
 80a083e:	b2d2      	uxtb	r2, r2
}
 80a0840:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0842:	f7ff bfd6 	b.w	80a07f2 <_ZN5Print11printNumberEmh>

080a0846 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0846:	f7ff bff3 	b.w	80a0830 <_ZN5Print5printEmi>

080a084a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a084a:	2300      	movs	r3, #0
 80a084c:	461a      	mov	r2, r3
 80a084e:	4619      	mov	r1, r3
 80a0850:	6840      	ldr	r0, [r0, #4]
 80a0852:	f7ff be11 	b.w	80a0478 <network_on>
	...

080a0858 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0858:	4a01      	ldr	r2, [pc, #4]	; (80a0860 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a085c:	601a      	str	r2, [r3, #0]
 80a085e:	4770      	bx	lr
 80a0860:	080a14f3 	.word	0x080a14f3
 80a0864:	20000394 	.word	0x20000394

080a0868 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0868:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a086a:	681a      	ldr	r2, [r3, #0]
 80a086c:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a086e:	601a      	str	r2, [r3, #0]
 80a0870:	4770      	bx	lr
 80a0872:	bf00      	nop
 80a0874:	20000308 	.word	0x20000308
 80a0878:	20000398 	.word	0x20000398

080a087c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a087c:	2100      	movs	r1, #0
 80a087e:	f7ff bdbf 	b.w	80a0400 <system_delay_ms>

080a0882 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0882:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0884:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0886:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0888:	b113      	cbz	r3, 80a0890 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a088a:	2203      	movs	r2, #3
 80a088c:	4601      	mov	r1, r0
 80a088e:	4798      	blx	r3
    }
 80a0890:	4620      	mov	r0, r4
 80a0892:	bd10      	pop	{r4, pc}

080a0894 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0894:	b510      	push	{r4, lr}
 80a0896:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0898:	f7ff fff3 	bl	80a0882 <_ZNSt14_Function_baseD1Ev>
 80a089c:	4620      	mov	r0, r4
 80a089e:	bd10      	pop	{r4, pc}

080a08a0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08a0:	4803      	ldr	r0, [pc, #12]	; (80a08b0 <_GLOBAL__sub_I_RGB+0x10>)
 80a08a2:	2300      	movs	r3, #0
 80a08a4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a08a6:	4a03      	ldr	r2, [pc, #12]	; (80a08b4 <_GLOBAL__sub_I_RGB+0x14>)
 80a08a8:	4903      	ldr	r1, [pc, #12]	; (80a08b8 <_GLOBAL__sub_I_RGB+0x18>)
 80a08aa:	f000 bbfd 	b.w	80a10a8 <__aeabi_atexit>
 80a08ae:	bf00      	nop
 80a08b0:	2000039c 	.word	0x2000039c
 80a08b4:	20000370 	.word	0x20000370
 80a08b8:	080a0895 	.word	0x080a0895

080a08bc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a08bc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a08be:	4b14      	ldr	r3, [pc, #80]	; (80a0910 <serialEventRun+0x54>)
 80a08c0:	b133      	cbz	r3, 80a08d0 <serialEventRun+0x14>
 80a08c2:	f000 f95d 	bl	80a0b80 <_Z16_fetch_usbserialv>
 80a08c6:	6803      	ldr	r3, [r0, #0]
 80a08c8:	691b      	ldr	r3, [r3, #16]
 80a08ca:	4798      	blx	r3
 80a08cc:	2800      	cmp	r0, #0
 80a08ce:	dc16      	bgt.n	80a08fe <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a08d0:	4b10      	ldr	r3, [pc, #64]	; (80a0914 <serialEventRun+0x58>)
 80a08d2:	b133      	cbz	r3, 80a08e2 <serialEventRun+0x26>
 80a08d4:	f000 fa04 	bl	80a0ce0 <_Z22__fetch_global_Serial1v>
 80a08d8:	6803      	ldr	r3, [r0, #0]
 80a08da:	691b      	ldr	r3, [r3, #16]
 80a08dc:	4798      	blx	r3
 80a08de:	2800      	cmp	r0, #0
 80a08e0:	dc10      	bgt.n	80a0904 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a08e2:	4b0d      	ldr	r3, [pc, #52]	; (80a0918 <serialEventRun+0x5c>)
 80a08e4:	b10b      	cbz	r3, 80a08ea <serialEventRun+0x2e>
 80a08e6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a08ea:	4b0c      	ldr	r3, [pc, #48]	; (80a091c <serialEventRun+0x60>)
 80a08ec:	b17b      	cbz	r3, 80a090e <serialEventRun+0x52>
 80a08ee:	f000 f975 	bl	80a0bdc <_Z17_fetch_usbserial1v>
 80a08f2:	6803      	ldr	r3, [r0, #0]
 80a08f4:	691b      	ldr	r3, [r3, #16]
 80a08f6:	4798      	blx	r3
 80a08f8:	2800      	cmp	r0, #0
 80a08fa:	dc06      	bgt.n	80a090a <serialEventRun+0x4e>
 80a08fc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a08fe:	f3af 8000 	nop.w
 80a0902:	e7e5      	b.n	80a08d0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0904:	f3af 8000 	nop.w
 80a0908:	e7eb      	b.n	80a08e2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a090a:	f3af 8000 	nop.w
 80a090e:	bd08      	pop	{r3, pc}
	...

080a0920 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0920:	b508      	push	{r3, lr}
	serialEventRun();
 80a0922:	f7ff ffcb 	bl	80a08bc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0926:	f7ff fc99 	bl	80a025c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a092a:	4b01      	ldr	r3, [pc, #4]	; (80a0930 <_post_loop+0x10>)
 80a092c:	6018      	str	r0, [r3, #0]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	20000434 	.word	0x20000434

080a0934 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0934:	4802      	ldr	r0, [pc, #8]	; (80a0940 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0936:	4a03      	ldr	r2, [pc, #12]	; (80a0944 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0938:	4903      	ldr	r1, [pc, #12]	; (80a0948 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a093a:	1a12      	subs	r2, r2, r0
 80a093c:	f000 bd12 	b.w	80a1364 <memcpy>
 80a0940:	40024000 	.word	0x40024000
 80a0944:	40024004 	.word	0x40024004
 80a0948:	080a16f0 	.word	0x080a16f0

080a094c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a094c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a094e:	2300      	movs	r3, #0
 80a0950:	9300      	str	r3, [sp, #0]
 80a0952:	461a      	mov	r2, r3
 80a0954:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0958:	f7ff fd64 	bl	80a0424 <system_ctrl_set_result>
}
 80a095c:	b003      	add	sp, #12
 80a095e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0964 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0964:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0966:	8843      	ldrh	r3, [r0, #2]
 80a0968:	2b0a      	cmp	r3, #10
 80a096a:	d008      	beq.n	80a097e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a096c:	2b50      	cmp	r3, #80	; 0x50
 80a096e:	d109      	bne.n	80a0984 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0970:	4b09      	ldr	r3, [pc, #36]	; (80a0998 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0972:	681b      	ldr	r3, [r3, #0]
 80a0974:	b13b      	cbz	r3, 80a0986 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0976:	b003      	add	sp, #12
 80a0978:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a097c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a097e:	f7ff ffe5 	bl	80a094c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0982:	e006      	b.n	80a0992 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0984:	2300      	movs	r3, #0
 80a0986:	9300      	str	r3, [sp, #0]
 80a0988:	461a      	mov	r2, r3
 80a098a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a098e:	f7ff fd49 	bl	80a0424 <system_ctrl_set_result>
        break;
    }
}
 80a0992:	b003      	add	sp, #12
 80a0994:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0998:	200003ac 	.word	0x200003ac

080a099c <module_user_init_hook>:

void module_user_init_hook()
{
 80a099c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a099e:	4c10      	ldr	r4, [pc, #64]	; (80a09e0 <module_user_init_hook+0x44>)
 80a09a0:	4d10      	ldr	r5, [pc, #64]	; (80a09e4 <module_user_init_hook+0x48>)
 80a09a2:	6823      	ldr	r3, [r4, #0]
 80a09a4:	42ab      	cmp	r3, r5
 80a09a6:	4b10      	ldr	r3, [pc, #64]	; (80a09e8 <module_user_init_hook+0x4c>)
 80a09a8:	bf0c      	ite	eq
 80a09aa:	2201      	moveq	r2, #1
 80a09ac:	2200      	movne	r2, #0
 80a09ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a09b0:	d002      	beq.n	80a09b8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a09b2:	f7ff ffbf 	bl	80a0934 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a09b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a09b8:	f7ff fc48 	bl	80a024c <HAL_RNG_GetRandomNumber>
 80a09bc:	4604      	mov	r4, r0
    srand(seed);
 80a09be:	f000 fce5 	bl	80a138c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a09c2:	4b0a      	ldr	r3, [pc, #40]	; (80a09ec <module_user_init_hook+0x50>)
 80a09c4:	b113      	cbz	r3, 80a09cc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a09c6:	4620      	mov	r0, r4
 80a09c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a09cc:	2100      	movs	r1, #0
 80a09ce:	4807      	ldr	r0, [pc, #28]	; (80a09ec <module_user_init_hook+0x50>)
 80a09d0:	f7ff fd82 	bl	80a04d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a09d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a09d8:	2100      	movs	r1, #0
 80a09da:	4805      	ldr	r0, [pc, #20]	; (80a09f0 <module_user_init_hook+0x54>)
 80a09dc:	f7ff bd18 	b.w	80a0410 <system_ctrl_set_app_request_handler>
 80a09e0:	40024000 	.word	0x40024000
 80a09e4:	9a271c1e 	.word	0x9a271c1e
 80a09e8:	200003b0 	.word	0x200003b0
 80a09ec:	00000000 	.word	0x00000000
 80a09f0:	080a0965 	.word	0x080a0965

080a09f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a09f4:	4770      	bx	lr

080a09f6 <_ZN9IPAddressD0Ev>:
 80a09f6:	b510      	push	{r4, lr}
 80a09f8:	4604      	mov	r4, r0
 80a09fa:	2118      	movs	r1, #24
 80a09fc:	f000 fb59 	bl	80a10b2 <_ZdlPvj>
 80a0a00:	4620      	mov	r0, r4
 80a0a02:	bd10      	pop	{r4, pc}

080a0a04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a06:	460f      	mov	r7, r1
 80a0a08:	f100 0608 	add.w	r6, r0, #8
 80a0a0c:	1d05      	adds	r5, r0, #4
 80a0a0e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0a14:	220a      	movs	r2, #10
 80a0a16:	4638      	mov	r0, r7
 80a0a18:	f7ff ff15 	bl	80a0846 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a1c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a1e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a20:	d007      	beq.n	80a0a32 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0a22:	2c00      	cmp	r4, #0
 80a0a24:	d0f4      	beq.n	80a0a10 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0a26:	212e      	movs	r1, #46	; 0x2e
 80a0a28:	4638      	mov	r0, r7
 80a0a2a:	f7ff fec9 	bl	80a07c0 <_ZN5Print5printEc>
 80a0a2e:	4404      	add	r4, r0
 80a0a30:	e7ee      	b.n	80a0a10 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0a38 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0a38:	b510      	push	{r4, lr}
 80a0a3a:	4604      	mov	r4, r0
 80a0a3c:	4b04      	ldr	r3, [pc, #16]	; (80a0a50 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0a3e:	2211      	movs	r2, #17
 80a0a40:	f840 3b04 	str.w	r3, [r0], #4
 80a0a44:	2100      	movs	r1, #0
 80a0a46:	f000 fc98 	bl	80a137a <memset>
{
    clear();
}
 80a0a4a:	4620      	mov	r0, r4
 80a0a4c:	bd10      	pop	{r4, pc}
 80a0a4e:	bf00      	nop
 80a0a50:	080a1550 	.word	0x080a1550

080a0a54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0a54:	4603      	mov	r3, r0
 80a0a56:	4a07      	ldr	r2, [pc, #28]	; (80a0a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0a58:	b510      	push	{r4, lr}
 80a0a5a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0a5e:	f101 0210 	add.w	r2, r1, #16
 80a0a62:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0a66:	4291      	cmp	r1, r2
 80a0a68:	f843 4b04 	str.w	r4, [r3], #4
 80a0a6c:	d1f9      	bne.n	80a0a62 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0a6e:	780a      	ldrb	r2, [r1, #0]
 80a0a70:	701a      	strb	r2, [r3, #0]
}
 80a0a72:	bd10      	pop	{r4, pc}
 80a0a74:	080a1550 	.word	0x080a1550

080a0a78 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a78:	4a02      	ldr	r2, [pc, #8]	; (80a0a84 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0a7a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a7c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0a7e:	2204      	movs	r2, #4
 80a0a80:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0a82:	4770      	bx	lr
 80a0a84:	080a1550 	.word	0x080a1550

080a0a88 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0a88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0a8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0a8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0a92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0a96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0a9a:	2304      	movs	r3, #4
 80a0a9c:	6041      	str	r1, [r0, #4]
 80a0a9e:	7503      	strb	r3, [r0, #20]
 80a0aa0:	bd10      	pop	{r4, pc}
	...

080a0aa4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0aa6:	4d04      	ldr	r5, [pc, #16]	; (80a0ab8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0aa8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0aaa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0aae:	9500      	str	r5, [sp, #0]
 80a0ab0:	f7ff ffea 	bl	80a0a88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ab4:	b003      	add	sp, #12
 80a0ab6:	bd30      	pop	{r4, r5, pc}
 80a0ab8:	080a1550 	.word	0x080a1550

080a0abc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0abc:	7441      	strb	r1, [r0, #17]
 80a0abe:	4770      	bx	lr

080a0ac0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0ac0:	4770      	bx	lr

080a0ac2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0ac2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0ac4:	2100      	movs	r1, #0
 80a0ac6:	7c00      	ldrb	r0, [r0, #16]
 80a0ac8:	f7ff fc72 	bl	80a03b0 <HAL_USB_USART_Receive_Data>
}
 80a0acc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ad0:	bf28      	it	cs
 80a0ad2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ad6:	bd08      	pop	{r3, pc}

080a0ad8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0ad8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0ada:	2101      	movs	r1, #1
 80a0adc:	7c00      	ldrb	r0, [r0, #16]
 80a0ade:	f7ff fc67 	bl	80a03b0 <HAL_USB_USART_Receive_Data>
}
 80a0ae2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ae6:	bf28      	it	cs
 80a0ae8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0aec:	bd08      	pop	{r3, pc}

080a0aee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0aee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0af0:	7c00      	ldrb	r0, [r0, #16]
 80a0af2:	f7ff fc55 	bl	80a03a0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0afa:	bd08      	pop	{r3, pc}

080a0afc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0afc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0afe:	7c00      	ldrb	r0, [r0, #16]
 80a0b00:	f7ff fc46 	bl	80a0390 <HAL_USB_USART_Available_Data>
}
 80a0b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b08:	bd08      	pop	{r3, pc}

080a0b0a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0b0a:	7c00      	ldrb	r0, [r0, #16]
 80a0b0c:	f7ff bc60 	b.w	80a03d0 <HAL_USB_USART_Flush_Data>

080a0b10 <_ZN9USBSerialD0Ev>:
 80a0b10:	b510      	push	{r4, lr}
 80a0b12:	4604      	mov	r4, r0
 80a0b14:	2114      	movs	r1, #20
 80a0b16:	f000 facc 	bl	80a10b2 <_ZdlPvj>
 80a0b1a:	4620      	mov	r0, r4
 80a0b1c:	bd10      	pop	{r4, pc}

080a0b1e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b1e:	b538      	push	{r3, r4, r5, lr}
 80a0b20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b22:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b26:	f7ff fc3b 	bl	80a03a0 <HAL_USB_USART_Available_Data_For_Write>
 80a0b2a:	2800      	cmp	r0, #0
 80a0b2c:	dc01      	bgt.n	80a0b32 <_ZN9USBSerial5writeEh+0x14>
 80a0b2e:	7c60      	ldrb	r0, [r4, #17]
 80a0b30:	b128      	cbz	r0, 80a0b3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0b32:	4629      	mov	r1, r5
 80a0b34:	7c20      	ldrb	r0, [r4, #16]
 80a0b36:	f7ff fc43 	bl	80a03c0 <HAL_USB_USART_Send_Data>
 80a0b3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0b3e:	bd38      	pop	{r3, r4, r5, pc}

080a0b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0b40:	b510      	push	{r4, lr}
 80a0b42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0b44:	2300      	movs	r3, #0
 80a0b46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0b4c:	60a3      	str	r3, [r4, #8]
 80a0b4e:	4b05      	ldr	r3, [pc, #20]	; (80a0b64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0b50:	4608      	mov	r0, r1
 80a0b52:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0b54:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0b56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0b58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0b5a:	4611      	mov	r1, r2
 80a0b5c:	f7ff fc08 	bl	80a0370 <HAL_USB_USART_Init>
}
 80a0b60:	4620      	mov	r0, r4
 80a0b62:	bd10      	pop	{r4, pc}
 80a0b64:	080a1564 	.word	0x080a1564

080a0b68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0b68:	2200      	movs	r2, #0
 80a0b6a:	7c00      	ldrb	r0, [r0, #16]
 80a0b6c:	f7ff bc08 	b.w	80a0380 <HAL_USB_USART_Begin>

080a0b70 <_Z19acquireSerialBufferv>:
 80a0b70:	b510      	push	{r4, lr}
 80a0b72:	4604      	mov	r4, r0
 80a0b74:	2214      	movs	r2, #20
 80a0b76:	2100      	movs	r1, #0
 80a0b78:	f000 fbff 	bl	80a137a <memset>
 80a0b7c:	4620      	mov	r0, r4
 80a0b7e:	bd10      	pop	{r4, pc}

080a0b80 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0b80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b82:	4d0e      	ldr	r5, [pc, #56]	; (80a0bbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0b84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0b86:	a801      	add	r0, sp, #4
 80a0b88:	f7ff fff2 	bl	80a0b70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b8c:	6829      	ldr	r1, [r5, #0]
 80a0b8e:	f011 0401 	ands.w	r4, r1, #1
 80a0b92:	d110      	bne.n	80a0bb6 <_Z16_fetch_usbserialv+0x36>
 80a0b94:	4628      	mov	r0, r5
 80a0b96:	f7ff fa84 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b9a:	b160      	cbz	r0, 80a0bb6 <_Z16_fetch_usbserialv+0x36>
 80a0b9c:	aa01      	add	r2, sp, #4
 80a0b9e:	4621      	mov	r1, r4
 80a0ba0:	4807      	ldr	r0, [pc, #28]	; (80a0bc0 <_Z16_fetch_usbserialv+0x40>)
 80a0ba2:	f7ff ffcd 	bl	80a0b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0ba6:	4628      	mov	r0, r5
 80a0ba8:	f7ff fa80 	bl	80a00ac <__cxa_guard_release>
 80a0bac:	4a05      	ldr	r2, [pc, #20]	; (80a0bc4 <_Z16_fetch_usbserialv+0x44>)
 80a0bae:	4906      	ldr	r1, [pc, #24]	; (80a0bc8 <_Z16_fetch_usbserialv+0x48>)
 80a0bb0:	4803      	ldr	r0, [pc, #12]	; (80a0bc0 <_Z16_fetch_usbserialv+0x40>)
 80a0bb2:	f000 fa79 	bl	80a10a8 <__aeabi_atexit>
	return _usbserial;
}
 80a0bb6:	4802      	ldr	r0, [pc, #8]	; (80a0bc0 <_Z16_fetch_usbserialv+0x40>)
 80a0bb8:	b007      	add	sp, #28
 80a0bba:	bd30      	pop	{r4, r5, pc}
 80a0bbc:	200003b4 	.word	0x200003b4
 80a0bc0:	200003bc 	.word	0x200003bc
 80a0bc4:	20000370 	.word	0x20000370
 80a0bc8:	080a0ac1 	.word	0x080a0ac1

080a0bcc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0bcc:	b510      	push	{r4, lr}
 80a0bce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0bd0:	2214      	movs	r2, #20
 80a0bd2:	2100      	movs	r1, #0
 80a0bd4:	f000 fbd1 	bl	80a137a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	bd10      	pop	{r4, pc}

080a0bdc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0bdc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0bde:	4c0e      	ldr	r4, [pc, #56]	; (80a0c18 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0be0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0be2:	a801      	add	r0, sp, #4
 80a0be4:	f7ff fff2 	bl	80a0bcc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0be8:	6823      	ldr	r3, [r4, #0]
 80a0bea:	07db      	lsls	r3, r3, #31
 80a0bec:	d410      	bmi.n	80a0c10 <_Z17_fetch_usbserial1v+0x34>
 80a0bee:	4620      	mov	r0, r4
 80a0bf0:	f7ff fa57 	bl	80a00a2 <__cxa_guard_acquire>
 80a0bf4:	b160      	cbz	r0, 80a0c10 <_Z17_fetch_usbserial1v+0x34>
 80a0bf6:	aa01      	add	r2, sp, #4
 80a0bf8:	2101      	movs	r1, #1
 80a0bfa:	4808      	ldr	r0, [pc, #32]	; (80a0c1c <_Z17_fetch_usbserial1v+0x40>)
 80a0bfc:	f7ff ffa0 	bl	80a0b40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	f7ff fa53 	bl	80a00ac <__cxa_guard_release>
 80a0c06:	4a06      	ldr	r2, [pc, #24]	; (80a0c20 <_Z17_fetch_usbserial1v+0x44>)
 80a0c08:	4906      	ldr	r1, [pc, #24]	; (80a0c24 <_Z17_fetch_usbserial1v+0x48>)
 80a0c0a:	4804      	ldr	r0, [pc, #16]	; (80a0c1c <_Z17_fetch_usbserial1v+0x40>)
 80a0c0c:	f000 fa4c 	bl	80a10a8 <__aeabi_atexit>
  return _usbserial1;
}
 80a0c10:	4802      	ldr	r0, [pc, #8]	; (80a0c1c <_Z17_fetch_usbserial1v+0x40>)
 80a0c12:	b006      	add	sp, #24
 80a0c14:	bd10      	pop	{r4, pc}
 80a0c16:	bf00      	nop
 80a0c18:	200003b8 	.word	0x200003b8
 80a0c1c:	200003d0 	.word	0x200003d0
 80a0c20:	20000370 	.word	0x20000370
 80a0c24:	080a0ac1 	.word	0x080a0ac1

080a0c28 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0c28:	4770      	bx	lr

080a0c2a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c2a:	7441      	strb	r1, [r0, #17]
 80a0c2c:	4770      	bx	lr

080a0c2e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0c2e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0c30:	7c00      	ldrb	r0, [r0, #16]
 80a0c32:	f7ff fb5b 	bl	80a02ec <HAL_USART_Available_Data_For_Write>
}
 80a0c36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c3a:	bd08      	pop	{r3, pc}

080a0c3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0c3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0c3e:	7c00      	ldrb	r0, [r0, #16]
 80a0c40:	f7ff fb2c 	bl	80a029c <HAL_USART_Available_Data>
}
 80a0c44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c48:	bd08      	pop	{r3, pc}

080a0c4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0c4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0c4c:	7c00      	ldrb	r0, [r0, #16]
 80a0c4e:	f7ff fb35 	bl	80a02bc <HAL_USART_Peek_Data>
}
 80a0c52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c56:	bf28      	it	cs
 80a0c58:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0c5c:	bd08      	pop	{r3, pc}

080a0c5e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0c5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0c60:	7c00      	ldrb	r0, [r0, #16]
 80a0c62:	f7ff fb23 	bl	80a02ac <HAL_USART_Read_Data>
}
 80a0c66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c6a:	bf28      	it	cs
 80a0c6c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0c70:	bd08      	pop	{r3, pc}

080a0c72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0c72:	7c00      	ldrb	r0, [r0, #16]
 80a0c74:	f7ff bb2a 	b.w	80a02cc <HAL_USART_Flush_Data>

080a0c78 <_ZN11USARTSerialD0Ev>:
 80a0c78:	b510      	push	{r4, lr}
 80a0c7a:	4604      	mov	r4, r0
 80a0c7c:	2114      	movs	r1, #20
 80a0c7e:	f000 fa18 	bl	80a10b2 <_ZdlPvj>
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	bd10      	pop	{r4, pc}

080a0c86 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0c86:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0c88:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0c8a:	4604      	mov	r4, r0
 80a0c8c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0c8e:	b925      	cbnz	r5, 80a0c9a <_ZN11USARTSerial5writeEh+0x14>
 80a0c90:	7c00      	ldrb	r0, [r0, #16]
 80a0c92:	f7ff fb2b 	bl	80a02ec <HAL_USART_Available_Data_For_Write>
 80a0c96:	2800      	cmp	r0, #0
 80a0c98:	dd05      	ble.n	80a0ca6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0c9a:	4631      	mov	r1, r6
 80a0c9c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0ca2:	f7ff baf3 	b.w	80a028c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0ca6:	4628      	mov	r0, r5
 80a0ca8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0cac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0cac:	b510      	push	{r4, lr}
 80a0cae:	4604      	mov	r4, r0
 80a0cb0:	4608      	mov	r0, r1
 80a0cb2:	4611      	mov	r1, r2
 80a0cb4:	2200      	movs	r2, #0
 80a0cb6:	6062      	str	r2, [r4, #4]
 80a0cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0cbc:	60a2      	str	r2, [r4, #8]
 80a0cbe:	4a05      	ldr	r2, [pc, #20]	; (80a0cd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0cc0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0cc2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0cc4:	2201      	movs	r2, #1
 80a0cc6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0cc8:	461a      	mov	r2, r3
 80a0cca:	f7ff fad7 	bl	80a027c <HAL_USART_Init>
}
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	bd10      	pop	{r4, pc}
 80a0cd2:	bf00      	nop
 80a0cd4:	080a1594 	.word	0x080a1594

080a0cd8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0cd8:	7c00      	ldrb	r0, [r0, #16]
 80a0cda:	f7ff baff 	b.w	80a02dc <HAL_USART_Is_Enabled>
	...

080a0ce0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a0ce2:	4c19      	ldr	r4, [pc, #100]	; (80a0d48 <_Z22__fetch_global_Serial1v+0x68>)
 80a0ce4:	6825      	ldr	r5, [r4, #0]
 80a0ce6:	b94d      	cbnz	r5, 80a0cfc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a0ce8:	2084      	movs	r0, #132	; 0x84
 80a0cea:	f7ff f9d6 	bl	80a009a <_Znwj>
 80a0cee:	4606      	mov	r6, r0
 80a0cf0:	b118      	cbz	r0, 80a0cfa <_Z22__fetch_global_Serial1v+0x1a>
 80a0cf2:	2284      	movs	r2, #132	; 0x84
 80a0cf4:	4629      	mov	r1, r5
 80a0cf6:	f000 fb40 	bl	80a137a <memset>
 80a0cfa:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a0cfc:	4d13      	ldr	r5, [pc, #76]	; (80a0d4c <_Z22__fetch_global_Serial1v+0x6c>)
 80a0cfe:	682e      	ldr	r6, [r5, #0]
 80a0d00:	b94e      	cbnz	r6, 80a0d16 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a0d02:	2084      	movs	r0, #132	; 0x84
 80a0d04:	f7ff f9c9 	bl	80a009a <_Znwj>
 80a0d08:	4607      	mov	r7, r0
 80a0d0a:	b118      	cbz	r0, 80a0d14 <_Z22__fetch_global_Serial1v+0x34>
 80a0d0c:	2284      	movs	r2, #132	; 0x84
 80a0d0e:	4631      	mov	r1, r6
 80a0d10:	f000 fb33 	bl	80a137a <memset>
 80a0d14:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a0d16:	4f0e      	ldr	r7, [pc, #56]	; (80a0d50 <_Z22__fetch_global_Serial1v+0x70>)
 80a0d18:	6839      	ldr	r1, [r7, #0]
 80a0d1a:	f011 0601 	ands.w	r6, r1, #1
 80a0d1e:	d111      	bne.n	80a0d44 <_Z22__fetch_global_Serial1v+0x64>
 80a0d20:	4638      	mov	r0, r7
 80a0d22:	f7ff f9be 	bl	80a00a2 <__cxa_guard_acquire>
 80a0d26:	b168      	cbz	r0, 80a0d44 <_Z22__fetch_global_Serial1v+0x64>
 80a0d28:	6822      	ldr	r2, [r4, #0]
 80a0d2a:	4631      	mov	r1, r6
 80a0d2c:	682b      	ldr	r3, [r5, #0]
 80a0d2e:	4809      	ldr	r0, [pc, #36]	; (80a0d54 <_Z22__fetch_global_Serial1v+0x74>)
 80a0d30:	f7ff ffbc 	bl	80a0cac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0d34:	4638      	mov	r0, r7
 80a0d36:	f7ff f9b9 	bl	80a00ac <__cxa_guard_release>
 80a0d3a:	4a07      	ldr	r2, [pc, #28]	; (80a0d58 <_Z22__fetch_global_Serial1v+0x78>)
 80a0d3c:	4907      	ldr	r1, [pc, #28]	; (80a0d5c <_Z22__fetch_global_Serial1v+0x7c>)
 80a0d3e:	4805      	ldr	r0, [pc, #20]	; (80a0d54 <_Z22__fetch_global_Serial1v+0x74>)
 80a0d40:	f000 f9b2 	bl	80a10a8 <__aeabi_atexit>
#endif
	return serial1;
}
 80a0d44:	4803      	ldr	r0, [pc, #12]	; (80a0d54 <_Z22__fetch_global_Serial1v+0x74>)
 80a0d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0d48:	20000400 	.word	0x20000400
 80a0d4c:	200003f8 	.word	0x200003f8
 80a0d50:	200003fc 	.word	0x200003fc
 80a0d54:	200003e4 	.word	0x200003e4
 80a0d58:	20000370 	.word	0x20000370
 80a0d5c:	080a0c29 	.word	0x080a0c29

080a0d60 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0d60:	4770      	bx	lr

080a0d62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d64:	4606      	mov	r6, r0
 80a0d66:	4615      	mov	r5, r2
 80a0d68:	460c      	mov	r4, r1
 80a0d6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0d6c:	42bc      	cmp	r4, r7
 80a0d6e:	d006      	beq.n	80a0d7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0d70:	6833      	ldr	r3, [r6, #0]
 80a0d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0d76:	689b      	ldr	r3, [r3, #8]
 80a0d78:	4630      	mov	r0, r6
 80a0d7a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0d7c:	e7f6      	b.n	80a0d6c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0d7e:	4628      	mov	r0, r5
 80a0d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d82 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0d82:	2200      	movs	r2, #0
 80a0d84:	7c00      	ldrb	r0, [r0, #16]
 80a0d86:	f7ff bab9 	b.w	80a02fc <HAL_I2C_Write_Data>

080a0d8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0d8a:	2100      	movs	r1, #0
 80a0d8c:	7c00      	ldrb	r0, [r0, #16]
 80a0d8e:	f7ff babd 	b.w	80a030c <HAL_I2C_Available_Data>

080a0d92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0d92:	2100      	movs	r1, #0
 80a0d94:	7c00      	ldrb	r0, [r0, #16]
 80a0d96:	f7ff bac1 	b.w	80a031c <HAL_I2C_Read_Data>

080a0d9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0d9a:	2100      	movs	r1, #0
 80a0d9c:	7c00      	ldrb	r0, [r0, #16]
 80a0d9e:	f7ff bac5 	b.w	80a032c <HAL_I2C_Peek_Data>

080a0da2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0da2:	2100      	movs	r1, #0
 80a0da4:	7c00      	ldrb	r0, [r0, #16]
 80a0da6:	f7ff bac9 	b.w	80a033c <HAL_I2C_Flush_Data>

080a0daa <_ZN7TwoWireD0Ev>:
 80a0daa:	b510      	push	{r4, lr}
 80a0dac:	4604      	mov	r4, r0
 80a0dae:	2114      	movs	r1, #20
 80a0db0:	f000 f97f 	bl	80a10b2 <_ZdlPvj>
 80a0db4:	4620      	mov	r0, r4
 80a0db6:	bd10      	pop	{r4, pc}

080a0db8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0db8:	b510      	push	{r4, lr}
 80a0dba:	4604      	mov	r4, r0
 80a0dbc:	4608      	mov	r0, r1
 80a0dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0dc2:	60a3      	str	r3, [r4, #8]
 80a0dc4:	4b04      	ldr	r3, [pc, #16]	; (80a0dd8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0dc6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0dc8:	7420      	strb	r0, [r4, #16]
 80a0dca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0dcc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0dce:	f7ff fac5 	bl	80a035c <HAL_I2C_Init>

}
 80a0dd2:	4620      	mov	r0, r4
 80a0dd4:	bd10      	pop	{r4, pc}
 80a0dd6:	bf00      	nop
 80a0dd8:	080a15c4 	.word	0x080a15c4

080a0ddc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0ddc:	2100      	movs	r1, #0
 80a0dde:	7c00      	ldrb	r0, [r0, #16]
 80a0de0:	f7ff bab4 	b.w	80a034c <HAL_I2C_Is_Enabled>

080a0de4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0de4:	2200      	movs	r2, #0
 80a0de6:	4611      	mov	r1, r2
 80a0de8:	6840      	ldr	r0, [r0, #4]
 80a0dea:	f7ff bb3d 	b.w	80a0468 <network_ready>

080a0dee <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0df0:	4616      	mov	r6, r2
 80a0df2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0df4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0df6:	460f      	mov	r7, r1
 80a0df8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0dfa:	2100      	movs	r1, #0
 80a0dfc:	a803      	add	r0, sp, #12
 80a0dfe:	f000 fabc 	bl	80a137a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e02:	4630      	mov	r0, r6
 80a0e04:	f000 faf2 	bl	80a13ec <strlen>
 80a0e08:	2500      	movs	r5, #0
 80a0e0a:	9500      	str	r5, [sp, #0]
 80a0e0c:	b281      	uxth	r1, r0
 80a0e0e:	687b      	ldr	r3, [r7, #4]
 80a0e10:	aa03      	add	r2, sp, #12
 80a0e12:	4630      	mov	r0, r6
 80a0e14:	f7ff fae4 	bl	80a03e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e18:	b120      	cbz	r0, 80a0e24 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0e1a:	4629      	mov	r1, r5
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	f7ff fe2b 	bl	80a0a78 <_ZN9IPAddressC1Em>
 80a0e22:	e003      	b.n	80a0e2c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0e24:	a903      	add	r1, sp, #12
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	f7ff fe14 	bl	80a0a54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0e2c:	4620      	mov	r0, r4
 80a0e2e:	b009      	add	sp, #36	; 0x24
 80a0e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0e32:	2200      	movs	r2, #0
 80a0e34:	4611      	mov	r1, r2
 80a0e36:	6840      	ldr	r0, [r0, #4]
 80a0e38:	f7ff bb36 	b.w	80a04a8 <network_listening>

080a0e3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0e3c:	2200      	movs	r2, #0
 80a0e3e:	4611      	mov	r1, r2
 80a0e40:	6840      	ldr	r0, [r0, #4]
 80a0e42:	f7ff bb41 	b.w	80a04c8 <network_get_listen_timeout>

080a0e46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0e46:	2200      	movs	r2, #0
 80a0e48:	6840      	ldr	r0, [r0, #4]
 80a0e4a:	f7ff bb35 	b.w	80a04b8 <network_set_listen_timeout>

080a0e4e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0e4e:	2200      	movs	r2, #0
 80a0e50:	f081 0101 	eor.w	r1, r1, #1
 80a0e54:	6840      	ldr	r0, [r0, #4]
 80a0e56:	f7ff bb1f 	b.w	80a0498 <network_listen>

080a0e5a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0e5a:	2300      	movs	r3, #0
 80a0e5c:	461a      	mov	r2, r3
 80a0e5e:	4619      	mov	r1, r3
 80a0e60:	6840      	ldr	r0, [r0, #4]
 80a0e62:	f7ff bb11 	b.w	80a0488 <network_off>

080a0e66 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0e66:	2200      	movs	r2, #0
 80a0e68:	4611      	mov	r1, r2
 80a0e6a:	6840      	ldr	r0, [r0, #4]
 80a0e6c:	f7ff baec 	b.w	80a0448 <network_connecting>

080a0e70 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0e70:	2200      	movs	r2, #0
 80a0e72:	2102      	movs	r1, #2
 80a0e74:	6840      	ldr	r0, [r0, #4]
 80a0e76:	f7ff baef 	b.w	80a0458 <network_disconnect>

080a0e7a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0e7a:	2300      	movs	r3, #0
 80a0e7c:	461a      	mov	r2, r3
 80a0e7e:	6840      	ldr	r0, [r0, #4]
 80a0e80:	f7ff bada 	b.w	80a0438 <network_connect>

080a0e84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0e84:	4b02      	ldr	r3, [pc, #8]	; (80a0e90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0e86:	2204      	movs	r2, #4
 80a0e88:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0e8a:	4a02      	ldr	r2, [pc, #8]	; (80a0e94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0e8c:	601a      	str	r2, [r3, #0]
 80a0e8e:	4770      	bx	lr
 80a0e90:	20000404 	.word	0x20000404
 80a0e94:	080a15ec 	.word	0x080a15ec

080a0e98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0e98:	2300      	movs	r3, #0
 80a0e9a:	461a      	mov	r2, r3
 80a0e9c:	6840      	ldr	r0, [r0, #4]
 80a0e9e:	f7ff bacb 	b.w	80a0438 <network_connect>

080a0ea2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0ea2:	2200      	movs	r2, #0
 80a0ea4:	2102      	movs	r1, #2
 80a0ea6:	6840      	ldr	r0, [r0, #4]
 80a0ea8:	f7ff bad6 	b.w	80a0458 <network_disconnect>

080a0eac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0eac:	2200      	movs	r2, #0
 80a0eae:	4611      	mov	r1, r2
 80a0eb0:	6840      	ldr	r0, [r0, #4]
 80a0eb2:	f7ff bac9 	b.w	80a0448 <network_connecting>

080a0eb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0eb6:	2200      	movs	r2, #0
 80a0eb8:	4611      	mov	r1, r2
 80a0eba:	6840      	ldr	r0, [r0, #4]
 80a0ebc:	f7ff bad4 	b.w	80a0468 <network_ready>

080a0ec0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0ec0:	2300      	movs	r3, #0
 80a0ec2:	461a      	mov	r2, r3
 80a0ec4:	4619      	mov	r1, r3
 80a0ec6:	6840      	ldr	r0, [r0, #4]
 80a0ec8:	f7ff bad6 	b.w	80a0478 <network_on>

080a0ecc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0ecc:	2300      	movs	r3, #0
 80a0ece:	461a      	mov	r2, r3
 80a0ed0:	4619      	mov	r1, r3
 80a0ed2:	6840      	ldr	r0, [r0, #4]
 80a0ed4:	f7ff bad8 	b.w	80a0488 <network_off>

080a0ed8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0ed8:	2200      	movs	r2, #0
 80a0eda:	f081 0101 	eor.w	r1, r1, #1
 80a0ede:	6840      	ldr	r0, [r0, #4]
 80a0ee0:	f7ff bada 	b.w	80a0498 <network_listen>

080a0ee4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0ee4:	2200      	movs	r2, #0
 80a0ee6:	6840      	ldr	r0, [r0, #4]
 80a0ee8:	f7ff bae6 	b.w	80a04b8 <network_set_listen_timeout>

080a0eec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0eec:	2200      	movs	r2, #0
 80a0eee:	4611      	mov	r1, r2
 80a0ef0:	6840      	ldr	r0, [r0, #4]
 80a0ef2:	f7ff bae9 	b.w	80a04c8 <network_get_listen_timeout>

080a0ef6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0ef6:	2200      	movs	r2, #0
 80a0ef8:	4611      	mov	r1, r2
 80a0efa:	6840      	ldr	r0, [r0, #4]
 80a0efc:	f7ff bad4 	b.w	80a04a8 <network_listening>

080a0f00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0f00:	b570      	push	{r4, r5, r6, lr}
 80a0f02:	4616      	mov	r6, r2
 80a0f04:	b08e      	sub	sp, #56	; 0x38
 80a0f06:	4604      	mov	r4, r0
    IPAddress addr;
 80a0f08:	a808      	add	r0, sp, #32
 80a0f0a:	f7ff fd95 	bl	80a0a38 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0f0e:	2211      	movs	r2, #17
 80a0f10:	2100      	movs	r1, #0
 80a0f12:	a803      	add	r0, sp, #12
 80a0f14:	f000 fa31 	bl	80a137a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0f18:	4630      	mov	r0, r6
 80a0f1a:	f000 fa67 	bl	80a13ec <strlen>
 80a0f1e:	2500      	movs	r5, #0
 80a0f20:	4b0a      	ldr	r3, [pc, #40]	; (80a0f4c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0f22:	9500      	str	r5, [sp, #0]
 80a0f24:	b281      	uxth	r1, r0
 80a0f26:	685b      	ldr	r3, [r3, #4]
 80a0f28:	aa03      	add	r2, sp, #12
 80a0f2a:	4630      	mov	r0, r6
 80a0f2c:	f7ff fa58 	bl	80a03e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0f30:	b120      	cbz	r0, 80a0f3c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0f32:	4629      	mov	r1, r5
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	f7ff fd9f 	bl	80a0a78 <_ZN9IPAddressC1Em>
 80a0f3a:	e003      	b.n	80a0f44 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0f3c:	a903      	add	r1, sp, #12
 80a0f3e:	4620      	mov	r0, r4
 80a0f40:	f7ff fd88 	bl	80a0a54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0f44:	4620      	mov	r0, r4
 80a0f46:	b00e      	add	sp, #56	; 0x38
 80a0f48:	bd70      	pop	{r4, r5, r6, pc}
 80a0f4a:	bf00      	nop
 80a0f4c:	20000404 	.word	0x20000404

080a0f50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0f50:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0f52:	4a03      	ldr	r2, [pc, #12]	; (80a0f60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0f54:	601a      	str	r2, [r3, #0]
 80a0f56:	2200      	movs	r2, #0
 80a0f58:	605a      	str	r2, [r3, #4]
 80a0f5a:	4770      	bx	lr
 80a0f5c:	2000040c 	.word	0x2000040c
 80a0f60:	080a1620 	.word	0x080a1620

080a0f64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0f64:	b510      	push	{r4, lr}
 80a0f66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0f68:	480f      	ldr	r0, [pc, #60]	; (80a0fa8 <pinAvailable+0x44>)
 80a0f6a:	f7ff faf1 	bl	80a0550 <_ZN8SPIClass9isEnabledEv>
 80a0f6e:	b128      	cbz	r0, 80a0f7c <pinAvailable+0x18>
 80a0f70:	f1a4 030d 	sub.w	r3, r4, #13
 80a0f74:	2b02      	cmp	r3, #2
 80a0f76:	d801      	bhi.n	80a0f7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0f78:	2000      	movs	r0, #0
 80a0f7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0f7c:	f000 f874 	bl	80a1068 <_Z19__fetch_global_Wirev>
 80a0f80:	f7ff ff2c 	bl	80a0ddc <_ZN7TwoWire9isEnabledEv>
 80a0f84:	b108      	cbz	r0, 80a0f8a <pinAvailable+0x26>
 80a0f86:	2c01      	cmp	r4, #1
 80a0f88:	d9f6      	bls.n	80a0f78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0f8a:	f7ff fea9 	bl	80a0ce0 <_Z22__fetch_global_Serial1v>
 80a0f8e:	f7ff fea3 	bl	80a0cd8 <_ZN11USARTSerial9isEnabledEv>
 80a0f92:	b118      	cbz	r0, 80a0f9c <pinAvailable+0x38>
 80a0f94:	f1a4 0312 	sub.w	r3, r4, #18
 80a0f98:	2b01      	cmp	r3, #1
 80a0f9a:	d9ed      	bls.n	80a0f78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0f9c:	2c17      	cmp	r4, #23
 80a0f9e:	bf8c      	ite	hi
 80a0fa0:	2000      	movhi	r0, #0
 80a0fa2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0fa4:	bd10      	pop	{r4, pc}
 80a0fa6:	bf00      	nop
 80a0fa8:	20000414 	.word	0x20000414

080a0fac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0fac:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0fae:	b538      	push	{r3, r4, r5, lr}
 80a0fb0:	4604      	mov	r4, r0
 80a0fb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0fb4:	d80a      	bhi.n	80a0fcc <pinMode+0x20>
 80a0fb6:	29ff      	cmp	r1, #255	; 0xff
 80a0fb8:	d008      	beq.n	80a0fcc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0fba:	f7ff ffd3 	bl	80a0f64 <pinAvailable>
 80a0fbe:	b128      	cbz	r0, 80a0fcc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0fc0:	4629      	mov	r1, r5
 80a0fc2:	4620      	mov	r0, r4
}
 80a0fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0fc8:	f7ff b918 	b.w	80a01fc <HAL_Pin_Mode>
 80a0fcc:	bd38      	pop	{r3, r4, r5, pc}

080a0fce <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0fce:	b510      	push	{r4, lr}
 80a0fd0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0fd2:	f7ff f91b 	bl	80a020c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0fd6:	3804      	subs	r0, #4
 80a0fd8:	b2c0      	uxtb	r0, r0
 80a0fda:	2801      	cmp	r0, #1
 80a0fdc:	d908      	bls.n	80a0ff0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	f7ff ffc0 	bl	80a0f64 <pinAvailable>
 80a0fe4:	b120      	cbz	r0, 80a0ff0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0fe6:	4620      	mov	r0, r4
}
 80a0fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0fec:	f7ff b916 	b.w	80a021c <HAL_GPIO_Read>
}
 80a0ff0:	2000      	movs	r0, #0
 80a0ff2:	bd10      	pop	{r4, pc}

080a0ff4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0ff4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0ff6:	4c0c      	ldr	r4, [pc, #48]	; (80a1028 <_GLOBAL__sub_I_SPI+0x34>)
 80a0ff8:	4e0c      	ldr	r6, [pc, #48]	; (80a102c <_GLOBAL__sub_I_SPI+0x38>)
 80a0ffa:	4d0d      	ldr	r5, [pc, #52]	; (80a1030 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0ffc:	2100      	movs	r1, #0
 80a0ffe:	4620      	mov	r0, r4
 80a1000:	f7ff fa92 	bl	80a0528 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1004:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1006:	4c0b      	ldr	r4, [pc, #44]	; (80a1034 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1008:	4632      	mov	r2, r6
 80a100a:	4629      	mov	r1, r5
 80a100c:	f000 f84c 	bl	80a10a8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1010:	2101      	movs	r1, #1
 80a1012:	4620      	mov	r0, r4
 80a1014:	f7ff fa88 	bl	80a0528 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1018:	4632      	mov	r2, r6
 80a101a:	4629      	mov	r1, r5
 80a101c:	4620      	mov	r0, r4
 80a101e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1022:	f000 b841 	b.w	80a10a8 <__aeabi_atexit>
 80a1026:	bf00      	nop
 80a1028:	20000414 	.word	0x20000414
 80a102c:	20000370 	.word	0x20000370
 80a1030:	080a0519 	.word	0x080a0519
 80a1034:	20000424 	.word	0x20000424

080a1038 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1038:	b513      	push	{r0, r1, r4, lr}
 80a103a:	4c08      	ldr	r4, [pc, #32]	; (80a105c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a103c:	2300      	movs	r3, #0
 80a103e:	461a      	mov	r2, r3
 80a1040:	4619      	mov	r1, r3
 80a1042:	9300      	str	r3, [sp, #0]
 80a1044:	4620      	mov	r0, r4
 80a1046:	f7ff fd2d 	bl	80a0aa4 <_ZN9IPAddressC1Ehhhh>
 80a104a:	4620      	mov	r0, r4
 80a104c:	4a04      	ldr	r2, [pc, #16]	; (80a1060 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a104e:	4905      	ldr	r1, [pc, #20]	; (80a1064 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1050:	b002      	add	sp, #8
 80a1052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1056:	f000 b827 	b.w	80a10a8 <__aeabi_atexit>
 80a105a:	bf00      	nop
 80a105c:	20000438 	.word	0x20000438
 80a1060:	20000370 	.word	0x20000370
 80a1064:	080a09f5 	.word	0x080a09f5

080a1068 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1068:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a106a:	4d0b      	ldr	r5, [pc, #44]	; (80a1098 <_Z19__fetch_global_Wirev+0x30>)
 80a106c:	6829      	ldr	r1, [r5, #0]
 80a106e:	f011 0401 	ands.w	r4, r1, #1
 80a1072:	d10f      	bne.n	80a1094 <_Z19__fetch_global_Wirev+0x2c>
 80a1074:	4628      	mov	r0, r5
 80a1076:	f7ff f814 	bl	80a00a2 <__cxa_guard_acquire>
 80a107a:	b158      	cbz	r0, 80a1094 <_Z19__fetch_global_Wirev+0x2c>
 80a107c:	4621      	mov	r1, r4
 80a107e:	4807      	ldr	r0, [pc, #28]	; (80a109c <_Z19__fetch_global_Wirev+0x34>)
 80a1080:	f7ff fe9a 	bl	80a0db8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1084:	4628      	mov	r0, r5
 80a1086:	f7ff f811 	bl	80a00ac <__cxa_guard_release>
 80a108a:	4a05      	ldr	r2, [pc, #20]	; (80a10a0 <_Z19__fetch_global_Wirev+0x38>)
 80a108c:	4905      	ldr	r1, [pc, #20]	; (80a10a4 <_Z19__fetch_global_Wirev+0x3c>)
 80a108e:	4803      	ldr	r0, [pc, #12]	; (80a109c <_Z19__fetch_global_Wirev+0x34>)
 80a1090:	f000 f80a 	bl	80a10a8 <__aeabi_atexit>
	return wire;
}
 80a1094:	4801      	ldr	r0, [pc, #4]	; (80a109c <_Z19__fetch_global_Wirev+0x34>)
 80a1096:	bd38      	pop	{r3, r4, r5, pc}
 80a1098:	20000450 	.word	0x20000450
 80a109c:	20000454 	.word	0x20000454
 80a10a0:	20000370 	.word	0x20000370
 80a10a4:	080a0d61 	.word	0x080a0d61

080a10a8 <__aeabi_atexit>:
 80a10a8:	460b      	mov	r3, r1
 80a10aa:	4601      	mov	r1, r0
 80a10ac:	4618      	mov	r0, r3
 80a10ae:	f000 b94b 	b.w	80a1348 <__cxa_atexit>

080a10b2 <_ZdlPvj>:
 80a10b2:	f7fe bff4 	b.w	80a009e <_ZdlPv>
	...

080a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a10b8:	4b18      	ldr	r3, [pc, #96]	; (80a111c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a10ba:	681a      	ldr	r2, [r3, #0]
 80a10bc:	07d1      	lsls	r1, r2, #31
 80a10be:	bf5c      	itt	pl
 80a10c0:	2201      	movpl	r2, #1
 80a10c2:	601a      	strpl	r2, [r3, #0]
 80a10c4:	4b16      	ldr	r3, [pc, #88]	; (80a1120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a10c6:	681a      	ldr	r2, [r3, #0]
 80a10c8:	07d2      	lsls	r2, r2, #31
 80a10ca:	bf5c      	itt	pl
 80a10cc:	2201      	movpl	r2, #1
 80a10ce:	601a      	strpl	r2, [r3, #0]
 80a10d0:	4b14      	ldr	r3, [pc, #80]	; (80a1124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a10d2:	681a      	ldr	r2, [r3, #0]
 80a10d4:	07d0      	lsls	r0, r2, #31
 80a10d6:	bf5c      	itt	pl
 80a10d8:	2201      	movpl	r2, #1
 80a10da:	601a      	strpl	r2, [r3, #0]
 80a10dc:	4b12      	ldr	r3, [pc, #72]	; (80a1128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a10de:	681a      	ldr	r2, [r3, #0]
 80a10e0:	07d1      	lsls	r1, r2, #31
 80a10e2:	bf5c      	itt	pl
 80a10e4:	2201      	movpl	r2, #1
 80a10e6:	601a      	strpl	r2, [r3, #0]
 80a10e8:	4b10      	ldr	r3, [pc, #64]	; (80a112c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a10ea:	681a      	ldr	r2, [r3, #0]
 80a10ec:	07d2      	lsls	r2, r2, #31
 80a10ee:	bf5c      	itt	pl
 80a10f0:	2201      	movpl	r2, #1
 80a10f2:	601a      	strpl	r2, [r3, #0]
 80a10f4:	4b0e      	ldr	r3, [pc, #56]	; (80a1130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a10f6:	681a      	ldr	r2, [r3, #0]
 80a10f8:	07d0      	lsls	r0, r2, #31
 80a10fa:	bf5c      	itt	pl
 80a10fc:	2201      	movpl	r2, #1
 80a10fe:	601a      	strpl	r2, [r3, #0]
 80a1100:	4b0c      	ldr	r3, [pc, #48]	; (80a1134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1102:	681a      	ldr	r2, [r3, #0]
 80a1104:	07d1      	lsls	r1, r2, #31
 80a1106:	bf5c      	itt	pl
 80a1108:	2201      	movpl	r2, #1
 80a110a:	601a      	strpl	r2, [r3, #0]
 80a110c:	4b0a      	ldr	r3, [pc, #40]	; (80a1138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a110e:	681a      	ldr	r2, [r3, #0]
 80a1110:	07d2      	lsls	r2, r2, #31
 80a1112:	bf5c      	itt	pl
 80a1114:	2201      	movpl	r2, #1
 80a1116:	601a      	strpl	r2, [r3, #0]
 80a1118:	4770      	bx	lr
 80a111a:	bf00      	nop
 80a111c:	20000484 	.word	0x20000484
 80a1120:	20000480 	.word	0x20000480
 80a1124:	2000047c 	.word	0x2000047c
 80a1128:	20000478 	.word	0x20000478
 80a112c:	20000474 	.word	0x20000474
 80a1130:	20000470 	.word	0x20000470
 80a1134:	2000046c 	.word	0x2000046c
 80a1138:	20000468 	.word	0x20000468

080a113c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a113c:	4b24      	ldr	r3, [pc, #144]	; (80a11d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a113e:	681a      	ldr	r2, [r3, #0]
 80a1140:	07d0      	lsls	r0, r2, #31
 80a1142:	bf5c      	itt	pl
 80a1144:	2201      	movpl	r2, #1
 80a1146:	601a      	strpl	r2, [r3, #0]
 80a1148:	4b22      	ldr	r3, [pc, #136]	; (80a11d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a114a:	681a      	ldr	r2, [r3, #0]
 80a114c:	07d1      	lsls	r1, r2, #31
 80a114e:	bf5c      	itt	pl
 80a1150:	2201      	movpl	r2, #1
 80a1152:	601a      	strpl	r2, [r3, #0]
 80a1154:	4b20      	ldr	r3, [pc, #128]	; (80a11d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1156:	681a      	ldr	r2, [r3, #0]
 80a1158:	07d2      	lsls	r2, r2, #31
 80a115a:	bf5c      	itt	pl
 80a115c:	2201      	movpl	r2, #1
 80a115e:	601a      	strpl	r2, [r3, #0]
 80a1160:	4b1e      	ldr	r3, [pc, #120]	; (80a11dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1162:	681a      	ldr	r2, [r3, #0]
 80a1164:	07d0      	lsls	r0, r2, #31
 80a1166:	bf5c      	itt	pl
 80a1168:	2201      	movpl	r2, #1
 80a116a:	601a      	strpl	r2, [r3, #0]
 80a116c:	4b1c      	ldr	r3, [pc, #112]	; (80a11e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a116e:	681a      	ldr	r2, [r3, #0]
 80a1170:	07d1      	lsls	r1, r2, #31
 80a1172:	bf5c      	itt	pl
 80a1174:	2201      	movpl	r2, #1
 80a1176:	601a      	strpl	r2, [r3, #0]
 80a1178:	4b1a      	ldr	r3, [pc, #104]	; (80a11e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a117a:	681a      	ldr	r2, [r3, #0]
 80a117c:	07d2      	lsls	r2, r2, #31
 80a117e:	bf5c      	itt	pl
 80a1180:	2201      	movpl	r2, #1
 80a1182:	601a      	strpl	r2, [r3, #0]
 80a1184:	4b18      	ldr	r3, [pc, #96]	; (80a11e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1186:	681a      	ldr	r2, [r3, #0]
 80a1188:	07d0      	lsls	r0, r2, #31
 80a118a:	bf5c      	itt	pl
 80a118c:	2201      	movpl	r2, #1
 80a118e:	601a      	strpl	r2, [r3, #0]
 80a1190:	4b16      	ldr	r3, [pc, #88]	; (80a11ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1192:	681a      	ldr	r2, [r3, #0]
 80a1194:	07d1      	lsls	r1, r2, #31
 80a1196:	bf5c      	itt	pl
 80a1198:	2201      	movpl	r2, #1
 80a119a:	601a      	strpl	r2, [r3, #0]
 80a119c:	4b14      	ldr	r3, [pc, #80]	; (80a11f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	07d2      	lsls	r2, r2, #31
 80a11a2:	bf5c      	itt	pl
 80a11a4:	2201      	movpl	r2, #1
 80a11a6:	601a      	strpl	r2, [r3, #0]
 80a11a8:	4b12      	ldr	r3, [pc, #72]	; (80a11f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	07d0      	lsls	r0, r2, #31
 80a11ae:	bf5c      	itt	pl
 80a11b0:	2201      	movpl	r2, #1
 80a11b2:	601a      	strpl	r2, [r3, #0]
 80a11b4:	4b10      	ldr	r3, [pc, #64]	; (80a11f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a11b6:	681a      	ldr	r2, [r3, #0]
 80a11b8:	07d1      	lsls	r1, r2, #31
 80a11ba:	bf5c      	itt	pl
 80a11bc:	2201      	movpl	r2, #1
 80a11be:	601a      	strpl	r2, [r3, #0]
 80a11c0:	4b0e      	ldr	r3, [pc, #56]	; (80a11fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a11c2:	681a      	ldr	r2, [r3, #0]
 80a11c4:	07d2      	lsls	r2, r2, #31
 80a11c6:	bf5c      	itt	pl
 80a11c8:	2201      	movpl	r2, #1
 80a11ca:	601a      	strpl	r2, [r3, #0]
 80a11cc:	4770      	bx	lr
 80a11ce:	bf00      	nop
 80a11d0:	200004b4 	.word	0x200004b4
 80a11d4:	200004b0 	.word	0x200004b0
 80a11d8:	200004ac 	.word	0x200004ac
 80a11dc:	200004a8 	.word	0x200004a8
 80a11e0:	200004a4 	.word	0x200004a4
 80a11e4:	200004a0 	.word	0x200004a0
 80a11e8:	2000049c 	.word	0x2000049c
 80a11ec:	20000498 	.word	0x20000498
 80a11f0:	20000494 	.word	0x20000494
 80a11f4:	20000490 	.word	0x20000490
 80a11f8:	2000048c 	.word	0x2000048c
 80a11fc:	20000488 	.word	0x20000488

080a1200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1200:	4b24      	ldr	r3, [pc, #144]	; (80a1294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1202:	681a      	ldr	r2, [r3, #0]
 80a1204:	07d0      	lsls	r0, r2, #31
 80a1206:	bf5c      	itt	pl
 80a1208:	2201      	movpl	r2, #1
 80a120a:	601a      	strpl	r2, [r3, #0]
 80a120c:	4b22      	ldr	r3, [pc, #136]	; (80a1298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a120e:	681a      	ldr	r2, [r3, #0]
 80a1210:	07d1      	lsls	r1, r2, #31
 80a1212:	bf5c      	itt	pl
 80a1214:	2201      	movpl	r2, #1
 80a1216:	601a      	strpl	r2, [r3, #0]
 80a1218:	4b20      	ldr	r3, [pc, #128]	; (80a129c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a121a:	681a      	ldr	r2, [r3, #0]
 80a121c:	07d2      	lsls	r2, r2, #31
 80a121e:	bf5c      	itt	pl
 80a1220:	2201      	movpl	r2, #1
 80a1222:	601a      	strpl	r2, [r3, #0]
 80a1224:	4b1e      	ldr	r3, [pc, #120]	; (80a12a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1226:	681a      	ldr	r2, [r3, #0]
 80a1228:	07d0      	lsls	r0, r2, #31
 80a122a:	bf5c      	itt	pl
 80a122c:	2201      	movpl	r2, #1
 80a122e:	601a      	strpl	r2, [r3, #0]
 80a1230:	4b1c      	ldr	r3, [pc, #112]	; (80a12a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1232:	681a      	ldr	r2, [r3, #0]
 80a1234:	07d1      	lsls	r1, r2, #31
 80a1236:	bf5c      	itt	pl
 80a1238:	2201      	movpl	r2, #1
 80a123a:	601a      	strpl	r2, [r3, #0]
 80a123c:	4b1a      	ldr	r3, [pc, #104]	; (80a12a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a123e:	681a      	ldr	r2, [r3, #0]
 80a1240:	07d2      	lsls	r2, r2, #31
 80a1242:	bf5c      	itt	pl
 80a1244:	2201      	movpl	r2, #1
 80a1246:	601a      	strpl	r2, [r3, #0]
 80a1248:	4b18      	ldr	r3, [pc, #96]	; (80a12ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a124a:	681a      	ldr	r2, [r3, #0]
 80a124c:	07d0      	lsls	r0, r2, #31
 80a124e:	bf5c      	itt	pl
 80a1250:	2201      	movpl	r2, #1
 80a1252:	601a      	strpl	r2, [r3, #0]
 80a1254:	4b16      	ldr	r3, [pc, #88]	; (80a12b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1256:	681a      	ldr	r2, [r3, #0]
 80a1258:	07d1      	lsls	r1, r2, #31
 80a125a:	bf5c      	itt	pl
 80a125c:	2201      	movpl	r2, #1
 80a125e:	601a      	strpl	r2, [r3, #0]
 80a1260:	4b14      	ldr	r3, [pc, #80]	; (80a12b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1262:	681a      	ldr	r2, [r3, #0]
 80a1264:	07d2      	lsls	r2, r2, #31
 80a1266:	bf5c      	itt	pl
 80a1268:	2201      	movpl	r2, #1
 80a126a:	601a      	strpl	r2, [r3, #0]
 80a126c:	4b12      	ldr	r3, [pc, #72]	; (80a12b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a126e:	681a      	ldr	r2, [r3, #0]
 80a1270:	07d0      	lsls	r0, r2, #31
 80a1272:	bf5c      	itt	pl
 80a1274:	2201      	movpl	r2, #1
 80a1276:	601a      	strpl	r2, [r3, #0]
 80a1278:	4b10      	ldr	r3, [pc, #64]	; (80a12bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a127a:	681a      	ldr	r2, [r3, #0]
 80a127c:	07d1      	lsls	r1, r2, #31
 80a127e:	bf5c      	itt	pl
 80a1280:	2201      	movpl	r2, #1
 80a1282:	601a      	strpl	r2, [r3, #0]
 80a1284:	4b0e      	ldr	r3, [pc, #56]	; (80a12c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1286:	681a      	ldr	r2, [r3, #0]
 80a1288:	07d2      	lsls	r2, r2, #31
 80a128a:	bf5c      	itt	pl
 80a128c:	2201      	movpl	r2, #1
 80a128e:	601a      	strpl	r2, [r3, #0]
 80a1290:	4770      	bx	lr
 80a1292:	bf00      	nop
 80a1294:	200004e4 	.word	0x200004e4
 80a1298:	200004e0 	.word	0x200004e0
 80a129c:	200004dc 	.word	0x200004dc
 80a12a0:	200004d8 	.word	0x200004d8
 80a12a4:	200004d4 	.word	0x200004d4
 80a12a8:	200004d0 	.word	0x200004d0
 80a12ac:	200004cc 	.word	0x200004cc
 80a12b0:	200004c8 	.word	0x200004c8
 80a12b4:	200004c4 	.word	0x200004c4
 80a12b8:	200004c0 	.word	0x200004c0
 80a12bc:	200004bc 	.word	0x200004bc
 80a12c0:	200004b8 	.word	0x200004b8

080a12c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a12c4:	4b18      	ldr	r3, [pc, #96]	; (80a1328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a12c6:	681a      	ldr	r2, [r3, #0]
 80a12c8:	07d1      	lsls	r1, r2, #31
 80a12ca:	bf5c      	itt	pl
 80a12cc:	2201      	movpl	r2, #1
 80a12ce:	601a      	strpl	r2, [r3, #0]
 80a12d0:	4b16      	ldr	r3, [pc, #88]	; (80a132c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a12d2:	681a      	ldr	r2, [r3, #0]
 80a12d4:	07d2      	lsls	r2, r2, #31
 80a12d6:	bf5c      	itt	pl
 80a12d8:	2201      	movpl	r2, #1
 80a12da:	601a      	strpl	r2, [r3, #0]
 80a12dc:	4b14      	ldr	r3, [pc, #80]	; (80a1330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a12de:	681a      	ldr	r2, [r3, #0]
 80a12e0:	07d0      	lsls	r0, r2, #31
 80a12e2:	bf5c      	itt	pl
 80a12e4:	2201      	movpl	r2, #1
 80a12e6:	601a      	strpl	r2, [r3, #0]
 80a12e8:	4b12      	ldr	r3, [pc, #72]	; (80a1334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a12ea:	681a      	ldr	r2, [r3, #0]
 80a12ec:	07d1      	lsls	r1, r2, #31
 80a12ee:	bf5c      	itt	pl
 80a12f0:	2201      	movpl	r2, #1
 80a12f2:	601a      	strpl	r2, [r3, #0]
 80a12f4:	4b10      	ldr	r3, [pc, #64]	; (80a1338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a12f6:	681a      	ldr	r2, [r3, #0]
 80a12f8:	07d2      	lsls	r2, r2, #31
 80a12fa:	bf5c      	itt	pl
 80a12fc:	2201      	movpl	r2, #1
 80a12fe:	601a      	strpl	r2, [r3, #0]
 80a1300:	4b0e      	ldr	r3, [pc, #56]	; (80a133c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1302:	681a      	ldr	r2, [r3, #0]
 80a1304:	07d0      	lsls	r0, r2, #31
 80a1306:	bf5c      	itt	pl
 80a1308:	2201      	movpl	r2, #1
 80a130a:	601a      	strpl	r2, [r3, #0]
 80a130c:	4b0c      	ldr	r3, [pc, #48]	; (80a1340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a130e:	681a      	ldr	r2, [r3, #0]
 80a1310:	07d1      	lsls	r1, r2, #31
 80a1312:	bf5c      	itt	pl
 80a1314:	2201      	movpl	r2, #1
 80a1316:	601a      	strpl	r2, [r3, #0]
 80a1318:	4b0a      	ldr	r3, [pc, #40]	; (80a1344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a131a:	681a      	ldr	r2, [r3, #0]
 80a131c:	07d2      	lsls	r2, r2, #31
 80a131e:	bf5c      	itt	pl
 80a1320:	2201      	movpl	r2, #1
 80a1322:	601a      	strpl	r2, [r3, #0]
 80a1324:	4770      	bx	lr
 80a1326:	bf00      	nop
 80a1328:	20000504 	.word	0x20000504
 80a132c:	20000500 	.word	0x20000500
 80a1330:	200004fc 	.word	0x200004fc
 80a1334:	200004f8 	.word	0x200004f8
 80a1338:	200004f4 	.word	0x200004f4
 80a133c:	200004f0 	.word	0x200004f0
 80a1340:	200004ec 	.word	0x200004ec
 80a1344:	200004e8 	.word	0x200004e8

080a1348 <__cxa_atexit>:
 80a1348:	b510      	push	{r4, lr}
 80a134a:	4c05      	ldr	r4, [pc, #20]	; (80a1360 <__cxa_atexit+0x18>)
 80a134c:	4613      	mov	r3, r2
 80a134e:	b12c      	cbz	r4, 80a135c <__cxa_atexit+0x14>
 80a1350:	460a      	mov	r2, r1
 80a1352:	4601      	mov	r1, r0
 80a1354:	2002      	movs	r0, #2
 80a1356:	f3af 8000 	nop.w
 80a135a:	bd10      	pop	{r4, pc}
 80a135c:	4620      	mov	r0, r4
 80a135e:	bd10      	pop	{r4, pc}
 80a1360:	00000000 	.word	0x00000000

080a1364 <memcpy>:
 80a1364:	b510      	push	{r4, lr}
 80a1366:	1e43      	subs	r3, r0, #1
 80a1368:	440a      	add	r2, r1
 80a136a:	4291      	cmp	r1, r2
 80a136c:	d004      	beq.n	80a1378 <memcpy+0x14>
 80a136e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1372:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1376:	e7f8      	b.n	80a136a <memcpy+0x6>
 80a1378:	bd10      	pop	{r4, pc}

080a137a <memset>:
 80a137a:	4603      	mov	r3, r0
 80a137c:	4402      	add	r2, r0
 80a137e:	4293      	cmp	r3, r2
 80a1380:	d002      	beq.n	80a1388 <memset+0xe>
 80a1382:	f803 1b01 	strb.w	r1, [r3], #1
 80a1386:	e7fa      	b.n	80a137e <memset+0x4>
 80a1388:	4770      	bx	lr
	...

080a138c <srand>:
 80a138c:	b538      	push	{r3, r4, r5, lr}
 80a138e:	4b12      	ldr	r3, [pc, #72]	; (80a13d8 <srand+0x4c>)
 80a1390:	4605      	mov	r5, r0
 80a1392:	681c      	ldr	r4, [r3, #0]
 80a1394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1396:	b9d3      	cbnz	r3, 80a13ce <srand+0x42>
 80a1398:	2018      	movs	r0, #24
 80a139a:	f7ff f8a5 	bl	80a04e8 <malloc>
 80a139e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a13a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a13a4:	8003      	strh	r3, [r0, #0]
 80a13a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a13aa:	8043      	strh	r3, [r0, #2]
 80a13ac:	f241 2334 	movw	r3, #4660	; 0x1234
 80a13b0:	8083      	strh	r3, [r0, #4]
 80a13b2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a13b6:	80c3      	strh	r3, [r0, #6]
 80a13b8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a13bc:	8103      	strh	r3, [r0, #8]
 80a13be:	2305      	movs	r3, #5
 80a13c0:	8143      	strh	r3, [r0, #10]
 80a13c2:	230b      	movs	r3, #11
 80a13c4:	8183      	strh	r3, [r0, #12]
 80a13c6:	2201      	movs	r2, #1
 80a13c8:	2300      	movs	r3, #0
 80a13ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a13ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a13d0:	2200      	movs	r2, #0
 80a13d2:	611d      	str	r5, [r3, #16]
 80a13d4:	615a      	str	r2, [r3, #20]
 80a13d6:	bd38      	pop	{r3, r4, r5, pc}
 80a13d8:	2000036c 	.word	0x2000036c

080a13dc <strcpy>:
 80a13dc:	4603      	mov	r3, r0
 80a13de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a13e2:	f803 2b01 	strb.w	r2, [r3], #1
 80a13e6:	2a00      	cmp	r2, #0
 80a13e8:	d1f9      	bne.n	80a13de <strcpy+0x2>
 80a13ea:	4770      	bx	lr

080a13ec <strlen>:
 80a13ec:	4603      	mov	r3, r0
 80a13ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a13f2:	2a00      	cmp	r2, #0
 80a13f4:	d1fb      	bne.n	80a13ee <strlen+0x2>
 80a13f6:	1a18      	subs	r0, r3, r0
 80a13f8:	3801      	subs	r0, #1
 80a13fa:	4770      	bx	lr

080a13fc <dynalib_user>:
 80a13fc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a140c:	0000 0000 6952 6867 3a74 0020 4c09 6665     ....Right: ..Lef
 80a141c:	3a74 0020 4209 746f 3a68 0020               t: ..Both: .

080a1428 <_ZTV8SPIClass>:
	...
 80a1430:	0519 080a 051b 080a 0066 6e6c 6600 006e     ........f.ln.fn.
 80a1440:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a1450:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a1460:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a1470:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a1480:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a1490:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a14a0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a14b0:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a14c0:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a14d0:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a14e0:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a14f0:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a1500:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a1510:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a1520:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a1530:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a1540:	6974 656d 0000 0000                         time....

080a1548 <_ZTV9IPAddress>:
	...
 80a1550:	0a05 080a 09f5 080a 09f7 080a               ............

080a155c <_ZTV9USBSerial>:
	...
 80a1564:	0ac1 080a 0b11 080a 0b1f 080a 0775 080a     ............u...
 80a1574:	0afd 080a 0ac3 080a 0ad9 080a 0b0b 080a     ................
 80a1584:	0aef 080a 0abd 080a                         ........

080a158c <_ZTV11USARTSerial>:
	...
 80a1594:	0c29 080a 0c79 080a 0c87 080a 0775 080a     )...y.......u...
 80a15a4:	0c3d 080a 0c5f 080a 0c4b 080a 0c73 080a     =..._...K...s...
 80a15b4:	0c2b 080a 0c2f 080a                         +.../...

080a15bc <_ZTV7TwoWire>:
	...
 80a15c4:	0d61 080a 0dab 080a 0d83 080a 0d63 080a     a...........c...
 80a15d4:	0d8b 080a 0d93 080a 0d9b 080a 0da3 080a     ................

080a15e4 <_ZTVN5spark9WiFiClassE>:
	...
 80a15ec:	0e7b 080a 0e71 080a 0e67 080a 0de5 080a     {...q...g.......
 80a15fc:	084b 080a 0e5b 080a 0e4f 080a 0e47 080a     K...[...O...G...
 80a160c:	0e3d 080a 0e33 080a 0def 080a               =...3.......

080a1618 <_ZTVN5spark12NetworkClassE>:
	...
 80a1620:	0e99 080a 0ea3 080a 0ead 080a 0eb7 080a     ................
 80a1630:	0ec1 080a 0ecd 080a 0ed9 080a 0ee5 080a     ................
 80a1640:	0eed 080a 0ef7 080a 0f01 080a               ............

080a164c <__sf_fake_stdin>:
	...

080a166c <__sf_fake_stdout>:
	...

080a168c <__sf_fake_stderr>:
	...
 80a16ac:	0043                                        C.

080a16ae <link_const_variable_data_end>:
	...

080a16b0 <link_constructors_location>:
 80a16b0:	080a01c9 	.word	0x080a01c9
 80a16b4:	080a0559 	.word	0x080a0559
 80a16b8:	080a0859 	.word	0x080a0859
 80a16bc:	080a0869 	.word	0x080a0869
 80a16c0:	080a08a1 	.word	0x080a08a1
 80a16c4:	080a0e85 	.word	0x080a0e85
 80a16c8:	080a0f51 	.word	0x080a0f51
 80a16cc:	080a0ff5 	.word	0x080a0ff5
 80a16d0:	080a1039 	.word	0x080a1039
 80a16d4:	080a10b9 	.word	0x080a10b9
 80a16d8:	080a113d 	.word	0x080a113d
 80a16dc:	080a1201 	.word	0x080a1201
 80a16e0:	080a12c5 	.word	0x080a12c5

080a16e4 <link_constructors_end>:
	...
