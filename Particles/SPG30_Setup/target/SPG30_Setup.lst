
c:/Users/julia/Documents/Particle/projects/SPG30_Setup/target/SPG30_Setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000030  40024000  080a47f0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000078  20000300  080a4820  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000027c  20000378  20000378  00040378  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a4898  080a4898  00034898  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a48c0  080a48c0  000348c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   001f2c78  00000000  00000000  000348c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0002b578  00000000  00000000  0022753c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00027107  00000000  00000000  00252ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003398  00000000  00000000  00279bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004ff0  00000000  00000000  0027cf53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004ec85  00000000  00000000  00281f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0006ee08  00000000  00000000  002d0bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b8890  00000000  00000000  0033f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000f13c  00000000  00000000  003f8260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	5c 3b 0a 08                                         \;..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fc55 	bl	80a38dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fc75 	bl	80a3928 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4820 	.word	0x080a4820
 80a004c:	20000378 	.word	0x20000378
 80a0050:	20000378 	.word	0x20000378
 80a0054:	200005f4 	.word	0x200005f4
 80a0058:	200005f4 	.word	0x200005f4

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fd6d 	bl	80a2b3c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4720 	.word	0x080a4720
 80a0084:	080a47e8 	.word	0x080a47e8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bcce 	b.w	80a0a28 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fd2d 	bl	80a0aec <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bd13 	b.w	80a2ac0 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 ba87 	b.w	80a15ac <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 ba8d 	b.w	80a15bc <free>
	...

080a00a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a6:	4a03      	ldr	r2, [pc, #12]	; (80a00b4 <__cxa_pure_virtual+0x10>)
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
 80a00ac:	f001 f9da 	bl	80a1464 <panic_>
 80a00b0:	e7fe      	b.n	80a00b0 <__cxa_pure_virtual+0xc>
 80a00b2:	bf00      	nop
 80a00b4:	080a1171 	.word	0x080a1171

080a00b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b8:	7800      	ldrb	r0, [r0, #0]
 80a00ba:	fab0 f080 	clz	r0, r0
 80a00be:	0940      	lsrs	r0, r0, #5
 80a00c0:	4770      	bx	lr

080a00c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c2:	2301      	movs	r3, #1
 80a00c4:	7003      	strb	r3, [r0, #0]
 80a00c6:	4770      	bx	lr

080a00c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80a00c8:	4770      	bx	lr

080a00ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ca:	6a00      	ldr	r0, [r0, #32]
 80a00cc:	6803      	ldr	r3, [r0, #0]
 80a00ce:	68db      	ldr	r3, [r3, #12]
 80a00d0:	4718      	bx	r3

080a00d2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00d2:	6803      	ldr	r3, [r0, #0]
 80a00d4:	4718      	bx	r3

080a00d6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00d6:	2a01      	cmp	r2, #1
 80a00d8:	d002      	beq.n	80a00e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00da:	2a02      	cmp	r2, #2
 80a00dc:	d002      	beq.n	80a00e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00de:	e004      	b.n	80a00ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00e0:	6001      	str	r1, [r0, #0]
	      break;
 80a00e2:	e002      	b.n	80a00ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00e4:	680b      	ldr	r3, [r1, #0]
 80a00e6:	b100      	cbz	r0, 80a00ea <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00e8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ea:	2000      	movs	r0, #0
 80a00ec:	4770      	bx	lr

080a00ee <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a00ee:	6943      	ldr	r3, [r0, #20]
 80a00f0:	b113      	cbz	r3, 80a00f8 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a00f2:	6983      	ldr	r3, [r0, #24]
 80a00f4:	300c      	adds	r0, #12
 80a00f6:	4718      	bx	r3
 80a00f8:	4770      	bx	lr

080a00fa <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a00fa:	b513      	push	{r0, r1, r4, lr}
 80a00fc:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a00fe:	2100      	movs	r1, #0
 80a0100:	4608      	mov	r0, r1
 80a0102:	f001 f86d 	bl	80a11e0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a0106:	a902      	add	r1, sp, #8
 80a0108:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a010a:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a010c:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 80a0110:	f001 f87e 	bl	80a1210 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0114:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0116:	b10c      	cbz	r4, 80a011c <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 80a0118:	2301      	movs	r3, #1
 80a011a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a011c:	2100      	movs	r1, #0
 80a011e:	2001      	movs	r0, #1
 80a0120:	f001 f85e 	bl	80a11e0 <os_thread_scheduling>
            }
        }
        if (t) {
 80a0124:	b12c      	cbz	r4, 80a0132 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 80a0126:	6823      	ldr	r3, [r4, #0]
 80a0128:	4620      	mov	r0, r4
 80a012a:	689b      	ldr	r3, [r3, #8]
 80a012c:	4798      	blx	r3
            t->running = false;
 80a012e:	2300      	movs	r3, #0
 80a0130:	7123      	strb	r3, [r4, #4]
        }
    }
 80a0132:	b002      	add	sp, #8
 80a0134:	bd10      	pop	{r4, pc}
	...

080a0138 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0138:	b510      	push	{r4, lr}
 80a013a:	4604      	mov	r4, r0
 80a013c:	4b09      	ldr	r3, [pc, #36]	; (80a0164 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a013e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0140:	f001 ff58 	bl	80a1ff4 <_ZN5spark10LogManager8instanceEv>
 80a0144:	4621      	mov	r1, r4
 80a0146:	f002 f972 	bl	80a242e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a014a:	f002 fdef 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a014e:	f002 fddf 	bl	80a2d10 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a0152:	4620      	mov	r0, r4
 80a0154:	4b04      	ldr	r3, [pc, #16]	; (80a0168 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a0156:	f840 3b04 	str.w	r3, [r0], #4
 80a015a:	f002 f86f 	bl	80a223c <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a015e:	4620      	mov	r0, r4
 80a0160:	bd10      	pop	{r4, pc}
 80a0162:	bf00      	nop
 80a0164:	080a3ba4 	.word	0x080a3ba4
 80a0168:	080a3b8c 	.word	0x080a3b8c

080a016c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a016c:	b510      	push	{r4, lr}
 80a016e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 80a0170:	f7ff ffe2 	bl	80a0138 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0174:	4620      	mov	r0, r4
 80a0176:	2124      	movs	r1, #36	; 0x24
 80a0178:	f003 fa48 	bl	80a360c <_ZdlPvj>
 80a017c:	4620      	mov	r0, r4
 80a017e:	bd10      	pop	{r4, pc}

080a0180 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0180:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0182:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0184:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0186:	b113      	cbz	r3, 80a018e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0188:	2203      	movs	r2, #3
 80a018a:	4601      	mov	r1, r0
 80a018c:	4798      	blx	r3
    }
 80a018e:	4620      	mov	r0, r4
 80a0190:	bd10      	pop	{r4, pc}

080a0192 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0192:	2200      	movs	r2, #0
 80a0194:	4611      	mov	r1, r2
 80a0196:	6840      	ldr	r0, [r0, #4]
 80a0198:	f001 b9b0 	b.w	80a14fc <network_connecting>

080a019c <_ZN5spark9WiFiClass5readyEv>:
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a019c:	2200      	movs	r2, #0
 80a019e:	4611      	mov	r1, r2
 80a01a0:	6840      	ldr	r0, [r0, #4]
 80a01a2:	f001 b9bb 	b.w	80a151c <network_ready>

080a01a6 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 80a01a6:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a01a8:	6880      	ldr	r0, [r0, #8]
 80a01aa:	2300      	movs	r3, #0
 80a01ac:	b138      	cbz	r0, 80a01be <_ZN5Timer5_stopEjb+0x18>
 80a01ae:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a01b2:	2102      	movs	r1, #2
 80a01b4:	f001 f834 	bl	80a1220 <os_timer_change>
 80a01b8:	fab0 f080 	clz	r0, r0
 80a01bc:	0940      	lsrs	r0, r0, #5
    }
 80a01be:	b003      	add	sp, #12
 80a01c0:	f85d fb04 	ldr.w	pc, [sp], #4

080a01c4 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a01c4:	b538      	push	{r3, r4, r5, lr}
 80a01c6:	4b10      	ldr	r3, [pc, #64]	; (80a0208 <_ZN5TimerD1Ev+0x44>)
 80a01c8:	4604      	mov	r4, r0
 80a01ca:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 80a01cc:	6883      	ldr	r3, [r0, #8]
 80a01ce:	b1a3      	cbz	r3, 80a01fa <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a01d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a01d4:	2200      	movs	r2, #0
 80a01d6:	f7ff ffe6 	bl	80a01a6 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 80a01da:	2100      	movs	r1, #0
 80a01dc:	68a0      	ldr	r0, [r4, #8]
 80a01de:	f001 f847 	bl	80a1270 <os_timer_set_id>
            while (running) {
 80a01e2:	7923      	ldrb	r3, [r4, #4]
 80a01e4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a01e8:	b113      	cbz	r3, 80a01f0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80a01ea:	f000 fff1 	bl	80a11d0 <os_thread_yield>
 80a01ee:	e7f8      	b.n	80a01e2 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
 80a01f0:	4629      	mov	r1, r5
 80a01f2:	68a0      	ldr	r0, [r4, #8]
 80a01f4:	f001 f804 	bl	80a1200 <os_timer_destroy>
            handle = nullptr;
 80a01f8:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a01fa:	f104 000c 	add.w	r0, r4, #12
 80a01fe:	f7ff ffbf 	bl	80a0180 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0202:	4620      	mov	r0, r4
 80a0204:	bd38      	pop	{r3, r4, r5, pc}
 80a0206:	bf00      	nop
 80a0208:	080a3b78 	.word	0x080a3b78

080a020c <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80a020c:	b510      	push	{r4, lr}
 80a020e:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80a0210:	f7ff ffd8 	bl	80a01c4 <_ZN5TimerD1Ev>
 80a0214:	4620      	mov	r0, r4
 80a0216:	211c      	movs	r1, #28
 80a0218:	f003 f9f8 	bl	80a360c <_ZdlPvj>
 80a021c:	4620      	mov	r0, r4
 80a021e:	bd10      	pop	{r4, pc}

080a0220 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a0220:	b40e      	push	{r1, r2, r3}
 80a0222:	b500      	push	{lr}
 80a0224:	b08c      	sub	sp, #48	; 0x30
 80a0226:	aa0d      	add	r2, sp, #52	; 0x34
 80a0228:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a022c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a022e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a0232:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0234:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0236:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0238:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a023a:	aa04      	add	r2, sp, #16
 80a023c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a023e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0240:	f001 f918 	bl	80a1474 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80a0244:	b00c      	add	sp, #48	; 0x30
 80a0246:	f85d eb04 	ldr.w	lr, [sp], #4
 80a024a:	b003      	add	sp, #12
 80a024c:	4770      	bx	lr

080a024e <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 80a024e:	b40e      	push	{r1, r2, r3}
 80a0250:	b500      	push	{lr}
 80a0252:	b08c      	sub	sp, #48	; 0x30
 80a0254:	aa0d      	add	r2, sp, #52	; 0x34
 80a0256:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a025a:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a025c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a0260:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0262:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0264:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0266:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0268:	aa04      	add	r2, sp, #16
 80a026a:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a026c:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a026e:	f001 f901 	bl	80a1474 <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
 80a0272:	b00c      	add	sp, #48	; 0x30
 80a0274:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0278:	b003      	add	sp, #12
 80a027a:	4770      	bx	lr

080a027c <_Z13setup_Optionsv>:

int cloudConnectionDuration = 5000; //ms --will turn off wifi and set isCloudLoop = false
Timer cloudConnectionTimer(5000, cancelWiFiCallback, true);

void setup_Options()
{
 80a027c:	b508      	push	{r3, lr}
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a027e:	2003      	movs	r0, #3
 80a0280:	f001 f8e8 	bl	80a1454 <wlan_select_antenna>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a0284:	2101      	movs	r1, #1
 80a0286:	4608      	mov	r0, r1
 80a0288:	f000 ff9a 	bl	80a11c0 <HAL_Feature_Set>
  WiFi.selectAntenna(ANT_AUTO);
  System.enableFeature(FEATURE_RETAINED_MEMORY);
  System.enableFeature(FEATURE_RESET_INFO);
  // System.enableFeature(FEATURE_WIFI_POWERSAVE_CLOCK);
}
 80a028c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0290:	2101      	movs	r1, #1
 80a0292:	2004      	movs	r0, #4
 80a0294:	f000 bf94 	b.w	80a11c0 <HAL_Feature_Set>

080a0298 <_Z14trySetupSensorv>:
  //tryPowerDown();

  delay(500);
}
void trySetupSensor()
{
 80a0298:	b530      	push	{r4, r5, lr}
  if (!haveSetup)
 80a029a:	4c61      	ldr	r4, [pc, #388]	; (80a0420 <_Z14trySetupSensorv+0x188>)
  //tryPowerDown();

  delay(500);
}
void trySetupSensor()
{
 80a029c:	b08f      	sub	sp, #60	; 0x3c
  if (!haveSetup)
 80a029e:	7823      	ldrb	r3, [r4, #0]
 80a02a0:	2b00      	cmp	r3, #0
 80a02a2:	f040 80ba 	bne.w	80a041a <_Z14trySetupSensorv+0x182>
  {
    if (!sgp.IAQinit())
 80a02a6:	485f      	ldr	r0, [pc, #380]	; (80a0424 <_Z14trySetupSensorv+0x18c>)
 80a02a8:	f000 fe5a 	bl	80a0f60 <_ZN14Adafruit_SGP307IAQinitEv>
 80a02ac:	b908      	cbnz	r0, 80a02b2 <_Z14trySetupSensorv+0x1a>
    {
      Log.error("failed to initialize sensor.");
 80a02ae:	495e      	ldr	r1, [pc, #376]	; (80a0428 <_Z14trySetupSensorv+0x190>)
 80a02b0:	e085      	b.n	80a03be <_Z14trySetupSensorv+0x126>
    }
    else
    {
      haveSetup = true;
 80a02b2:	2301      	movs	r3, #1
      Log.info("Sensor is initialized.");
 80a02b4:	495d      	ldr	r1, [pc, #372]	; (80a042c <_Z14trySetupSensorv+0x194>)
 80a02b6:	485e      	ldr	r0, [pc, #376]	; (80a0430 <_Z14trySetupSensorv+0x198>)
    {
      Log.error("failed to initialize sensor.");
    }
    else
    {
      haveSetup = true;
 80a02b8:	7023      	strb	r3, [r4, #0]
      Log.info("Sensor is initialized.");
 80a02ba:	f7ff ffb1 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
      if (haveReadEEPROM)
 80a02be:	4b5d      	ldr	r3, [pc, #372]	; (80a0434 <_Z14trySetupSensorv+0x19c>)
 80a02c0:	781b      	ldrb	r3, [r3, #0]
 80a02c2:	2b00      	cmp	r3, #0
 80a02c4:	d072      	beq.n	80a03ac <_Z14trySetupSensorv+0x114>
      {
        Log.info("Setting Base values from EEPROM.");
 80a02c6:	495c      	ldr	r1, [pc, #368]	; (80a0438 <_Z14trySetupSensorv+0x1a0>)
 80a02c8:	4859      	ldr	r0, [pc, #356]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a02ca:	f7ff ffa9 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
        delay(100);
 80a02ce:	2064      	movs	r0, #100	; 0x64
 80a02d0:	f002 fbac 	bl	80a2a2c <delay>
        uint16_t TVOC_base, eCO2_base;
      if (!sgp.getIAQBaseline(&eCO2_base, &TVOC_base))
 80a02d4:	aa01      	add	r2, sp, #4
 80a02d6:	f10d 0106 	add.w	r1, sp, #6
 80a02da:	4852      	ldr	r0, [pc, #328]	; (80a0424 <_Z14trySetupSensorv+0x18c>)
 80a02dc:	f000 fea7 	bl	80a102e <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>
 80a02e0:	b920      	cbnz	r0, 80a02ec <_Z14trySetupSensorv+0x54>
      {
        Log.error("Failed to get baseline readings");
 80a02e2:	4956      	ldr	r1, [pc, #344]	; (80a043c <_Z14trySetupSensorv+0x1a4>)
 80a02e4:	4852      	ldr	r0, [pc, #328]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a02e6:	f7ff ffb2 	bl	80a024e <_ZNK5spark6Logger5errorEPKcz>
 80a02ea:	e02b      	b.n	80a0344 <_Z14trySetupSensorv+0xac>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a02ec:	4954      	ldr	r1, [pc, #336]	; (80a0440 <_Z14trySetupSensorv+0x1a8>)
 80a02ee:	a802      	add	r0, sp, #8
 80a02f0:	f001 fa4f 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        Log.info("Sensor Chip base values: \teCO2: " + String(eCO2_base) + " \tTvoc: " + String(TVOC_base));
 80a02f4:	220a      	movs	r2, #10
 80a02f6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80a02fa:	a806      	add	r0, sp, #24
 80a02fc:	f001 fa99 	bl	80a1832 <_ZN6StringC1Eih>
 80a0300:	a906      	add	r1, sp, #24
 80a0302:	a802      	add	r0, sp, #8
 80a0304:	f001 fad0 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0308:	494e      	ldr	r1, [pc, #312]	; (80a0444 <_Z14trySetupSensorv+0x1ac>)
 80a030a:	f001 fad9 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a030e:	4604      	mov	r4, r0
 80a0310:	220a      	movs	r2, #10
 80a0312:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0316:	a80a      	add	r0, sp, #40	; 0x28
 80a0318:	f001 fa8b 	bl	80a1832 <_ZN6StringC1Eih>
 80a031c:	a90a      	add	r1, sp, #40	; 0x28
 80a031e:	4620      	mov	r0, r4
 80a0320:	f001 fac2 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0324:	6801      	ldr	r1, [r0, #0]
 80a0326:	4842      	ldr	r0, [pc, #264]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a0328:	f7ff ff7a 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a032c:	a80a      	add	r0, sp, #40	; 0x28
 80a032e:	f001 f9e9 	bl	80a1704 <_ZN6StringD1Ev>
 80a0332:	a806      	add	r0, sp, #24
 80a0334:	f001 f9e6 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0338:	a802      	add	r0, sp, #8
 80a033a:	f001 f9e3 	bl	80a1704 <_ZN6StringD1Ev>
        delay(100);
 80a033e:	2064      	movs	r0, #100	; 0x64
 80a0340:	f002 fb74 	bl	80a2a2c <delay>
      }
      
      if (!sgp.setIAQBaseline(ActiveEEPROMData.eCO2_base, ActiveEEPROMData.TVOC_base))
 80a0344:	4c40      	ldr	r4, [pc, #256]	; (80a0448 <_Z14trySetupSensorv+0x1b0>)
 80a0346:	4837      	ldr	r0, [pc, #220]	; (80a0424 <_Z14trySetupSensorv+0x18c>)
 80a0348:	8b62      	ldrh	r2, [r4, #26]
 80a034a:	8ba1      	ldrh	r1, [r4, #28]
 80a034c:	f000 fe8a 	bl	80a1064 <_ZN14Adafruit_SGP3014setIAQBaselineEtt>
 80a0350:	b928      	cbnz	r0, 80a035e <_Z14trySetupSensorv+0xc6>
      {
        Serial.println("Failed to set baseline readings");
 80a0352:	f002 fceb 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a0356:	493d      	ldr	r1, [pc, #244]	; (80a044c <_Z14trySetupSensorv+0x1b4>)
 80a0358:	f001 fb16 	bl	80a1988 <_ZN5Print7printlnEPKc>
 80a035c:	e026      	b.n	80a03ac <_Z14trySetupSensorv+0x114>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a035e:	493c      	ldr	r1, [pc, #240]	; (80a0450 <_Z14trySetupSensorv+0x1b8>)
 80a0360:	a802      	add	r0, sp, #8
 80a0362:	f001 fa16 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      }else{
        Log.info("EEPROM base values: \teCO2: " + String(ActiveEEPROMData.eCO2_base) + " \tTvoc: " + String(ActiveEEPROMData.TVOC_base));
 80a0366:	220a      	movs	r2, #10
 80a0368:	8ba1      	ldrh	r1, [r4, #28]
 80a036a:	a806      	add	r0, sp, #24
 80a036c:	f001 fa61 	bl	80a1832 <_ZN6StringC1Eih>
 80a0370:	a906      	add	r1, sp, #24
 80a0372:	a802      	add	r0, sp, #8
 80a0374:	f001 fa98 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0378:	4932      	ldr	r1, [pc, #200]	; (80a0444 <_Z14trySetupSensorv+0x1ac>)
 80a037a:	f001 faa1 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a037e:	4605      	mov	r5, r0
 80a0380:	220a      	movs	r2, #10
 80a0382:	8b61      	ldrh	r1, [r4, #26]
 80a0384:	a80a      	add	r0, sp, #40	; 0x28
 80a0386:	f001 fa54 	bl	80a1832 <_ZN6StringC1Eih>
 80a038a:	a90a      	add	r1, sp, #40	; 0x28
 80a038c:	4628      	mov	r0, r5
 80a038e:	f001 fa8b 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0392:	6801      	ldr	r1, [r0, #0]
 80a0394:	4826      	ldr	r0, [pc, #152]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a0396:	f7ff ff43 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a039a:	a80a      	add	r0, sp, #40	; 0x28
 80a039c:	f001 f9b2 	bl	80a1704 <_ZN6StringD1Ev>
 80a03a0:	a806      	add	r0, sp, #24
 80a03a2:	f001 f9af 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03a6:	a802      	add	r0, sp, #8
 80a03a8:	f001 f9ac 	bl	80a1704 <_ZN6StringD1Ev>
      }
      }
      delay(100);
      if (!sgp.IAQmeasure())
 80a03ac:	4c1d      	ldr	r4, [pc, #116]	; (80a0424 <_Z14trySetupSensorv+0x18c>)
        Serial.println("Failed to set baseline readings");
      }else{
        Log.info("EEPROM base values: \teCO2: " + String(ActiveEEPROMData.eCO2_base) + " \tTvoc: " + String(ActiveEEPROMData.TVOC_base));
      }
      }
      delay(100);
 80a03ae:	2064      	movs	r0, #100	; 0x64
 80a03b0:	f002 fb3c 	bl	80a2a2c <delay>
      if (!sgp.IAQmeasure())
 80a03b4:	4620      	mov	r0, r4
 80a03b6:	f000 fe21 	bl	80a0ffc <_ZN14Adafruit_SGP3010IAQmeasureEv>
 80a03ba:	b920      	cbnz	r0, 80a03c6 <_Z14trySetupSensorv+0x12e>
      {
        Log.error("Measurement failed");
 80a03bc:	4925      	ldr	r1, [pc, #148]	; (80a0454 <_Z14trySetupSensorv+0x1bc>)
 80a03be:	481c      	ldr	r0, [pc, #112]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a03c0:	f7ff ff45 	bl	80a024e <_ZNK5spark6Logger5errorEPKcz>
 80a03c4:	e029      	b.n	80a041a <_Z14trySetupSensorv+0x182>
      }
      else
      {
        delay(100);
 80a03c6:	2064      	movs	r0, #100	; 0x64
 80a03c8:	f002 fb30 	bl	80a2a2c <delay>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03cc:	4922      	ldr	r1, [pc, #136]	; (80a0458 <_Z14trySetupSensorv+0x1c0>)
 80a03ce:	a802      	add	r0, sp, #8
 80a03d0:	f001 f9df 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
        Log.info("SGP30 reading: \teCO2: " + String(sgp.eCO2) + " \tTvoc: " + String(sgp.TVOC));
 80a03d4:	220a      	movs	r2, #10
 80a03d6:	8861      	ldrh	r1, [r4, #2]
 80a03d8:	a806      	add	r0, sp, #24
 80a03da:	f001 fa2a 	bl	80a1832 <_ZN6StringC1Eih>
 80a03de:	a906      	add	r1, sp, #24
 80a03e0:	a802      	add	r0, sp, #8
 80a03e2:	f001 fa61 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a03e6:	4917      	ldr	r1, [pc, #92]	; (80a0444 <_Z14trySetupSensorv+0x1ac>)
 80a03e8:	f001 fa6a 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a03ec:	4605      	mov	r5, r0
 80a03ee:	220a      	movs	r2, #10
 80a03f0:	8821      	ldrh	r1, [r4, #0]
 80a03f2:	a80a      	add	r0, sp, #40	; 0x28
 80a03f4:	f001 fa1d 	bl	80a1832 <_ZN6StringC1Eih>
 80a03f8:	a90a      	add	r1, sp, #40	; 0x28
 80a03fa:	4628      	mov	r0, r5
 80a03fc:	f001 fa54 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0400:	6801      	ldr	r1, [r0, #0]
 80a0402:	480b      	ldr	r0, [pc, #44]	; (80a0430 <_Z14trySetupSensorv+0x198>)
 80a0404:	f7ff ff0c 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a0408:	a80a      	add	r0, sp, #40	; 0x28
 80a040a:	f001 f97b 	bl	80a1704 <_ZN6StringD1Ev>
 80a040e:	a806      	add	r0, sp, #24
 80a0410:	f001 f978 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0414:	a802      	add	r0, sp, #8
 80a0416:	f001 f975 	bl	80a1704 <_ZN6StringD1Ev>
      }
    }
  }
}
 80a041a:	b00f      	add	sp, #60	; 0x3c
 80a041c:	bd30      	pop	{r4, r5, pc}
 80a041e:	bf00      	nop
 80a0420:	20000434 	.word	0x20000434
 80a0424:	200003d0 	.word	0x200003d0
 80a0428:	080a3bc3 	.word	0x080a3bc3
 80a042c:	080a3be0 	.word	0x080a3be0
 80a0430:	20000474 	.word	0x20000474
 80a0434:	200003c6 	.word	0x200003c6
 80a0438:	080a3bf7 	.word	0x080a3bf7
 80a043c:	080a3c18 	.word	0x080a3c18
 80a0440:	080a3c38 	.word	0x080a3c38
 80a0444:	080a3c59 	.word	0x080a3c59
 80a0448:	200003e4 	.word	0x200003e4
 80a044c:	080a3c62 	.word	0x080a3c62
 80a0450:	080a3c82 	.word	0x080a3c82
 80a0454:	080a3c9e 	.word	0x080a3c9e
 80a0458:	080a3cb1 	.word	0x080a3cb1

080a045c <_Z10tryMeasurev>:
void tryMeasure()
{
 80a045c:	b530      	push	{r4, r5, lr}
  if (haveSetup)
 80a045e:	4b1d      	ldr	r3, [pc, #116]	; (80a04d4 <_Z10tryMeasurev+0x78>)
      }
    }
  }
}
void tryMeasure()
{
 80a0460:	b08d      	sub	sp, #52	; 0x34
  if (haveSetup)
 80a0462:	781b      	ldrb	r3, [r3, #0]
 80a0464:	2b00      	cmp	r3, #0
 80a0466:	d033      	beq.n	80a04d0 <_Z10tryMeasurev+0x74>
  {
    if (!sgp.IAQmeasure())
 80a0468:	4c1b      	ldr	r4, [pc, #108]	; (80a04d8 <_Z10tryMeasurev+0x7c>)
 80a046a:	4620      	mov	r0, r4
 80a046c:	f000 fdc6 	bl	80a0ffc <_ZN14Adafruit_SGP3010IAQmeasureEv>
 80a0470:	b920      	cbnz	r0, 80a047c <_Z10tryMeasurev+0x20>
    {
      Log.error("Measurement failed");
 80a0472:	491a      	ldr	r1, [pc, #104]	; (80a04dc <_Z10tryMeasurev+0x80>)
 80a0474:	481a      	ldr	r0, [pc, #104]	; (80a04e0 <_Z10tryMeasurev+0x84>)
 80a0476:	f7ff feea 	bl	80a024e <_ZNK5spark6Logger5errorEPKcz>
 80a047a:	e029      	b.n	80a04d0 <_Z10tryMeasurev+0x74>
    }
    else
    {
      delay(100);
 80a047c:	2064      	movs	r0, #100	; 0x64
 80a047e:	f002 fad5 	bl	80a2a2c <delay>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0482:	4918      	ldr	r1, [pc, #96]	; (80a04e4 <_Z10tryMeasurev+0x88>)
 80a0484:	4668      	mov	r0, sp
 80a0486:	f001 f984 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("SGP30 reading: " + String(sgp.eCO2) + " : " + String(sgp.TVOC));
 80a048a:	220a      	movs	r2, #10
 80a048c:	8861      	ldrh	r1, [r4, #2]
 80a048e:	a804      	add	r0, sp, #16
 80a0490:	f001 f9cf 	bl	80a1832 <_ZN6StringC1Eih>
 80a0494:	a904      	add	r1, sp, #16
 80a0496:	4668      	mov	r0, sp
 80a0498:	f001 fa06 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a049c:	4912      	ldr	r1, [pc, #72]	; (80a04e8 <_Z10tryMeasurev+0x8c>)
 80a049e:	f001 fa0f 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a04a2:	4605      	mov	r5, r0
 80a04a4:	220a      	movs	r2, #10
 80a04a6:	8821      	ldrh	r1, [r4, #0]
 80a04a8:	a808      	add	r0, sp, #32
 80a04aa:	f001 f9c2 	bl	80a1832 <_ZN6StringC1Eih>
 80a04ae:	a908      	add	r1, sp, #32
 80a04b0:	4628      	mov	r0, r5
 80a04b2:	f001 f9f9 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a04b6:	6801      	ldr	r1, [r0, #0]
 80a04b8:	4809      	ldr	r0, [pc, #36]	; (80a04e0 <_Z10tryMeasurev+0x84>)
 80a04ba:	f7ff feb1 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a04be:	a808      	add	r0, sp, #32
 80a04c0:	f001 f920 	bl	80a1704 <_ZN6StringD1Ev>
 80a04c4:	a804      	add	r0, sp, #16
 80a04c6:	f001 f91d 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04ca:	4668      	mov	r0, sp
 80a04cc:	f001 f91a 	bl	80a1704 <_ZN6StringD1Ev>
    }
  }
}
 80a04d0:	b00d      	add	sp, #52	; 0x34
 80a04d2:	bd30      	pop	{r4, r5, pc}
 80a04d4:	20000434 	.word	0x20000434
 80a04d8:	200003d0 	.word	0x200003d0
 80a04dc:	080a3c9e 	.word	0x080a3c9e
 80a04e0:	20000474 	.word	0x20000474
 80a04e4:	080a3cc8 	.word	0x080a3cc8
 80a04e8:	080a3d89 	.word	0x080a3d89

080a04ec <_Z12updateEEPROM10EEPROMinfo>:


void updateEEPROM(EEPROMinfo newData)
{
 80a04ec:	b084      	sub	sp, #16
 80a04ee:	b530      	push	{r4, r5, lr}
 80a04f0:	b095      	sub	sp, #84	; 0x54
 80a04f2:	ac18      	add	r4, sp, #96	; 0x60
 80a04f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  EEPROMinfo EEPROMdata;
  EEPROM.get(deviceNumberEEPROMAddress, EEPROMdata);
 80a04f8:	4c9b      	ldr	r4, [pc, #620]	; (80a0768 <_Z12updateEEPROM10EEPROMinfo+0x27c>)
        name[i] = newname.charAt(i);
      }
    }
  }

  EEPROMinfo() : flag(0), TVOC_base(0), eCO2_base(0), setGas(false)
 80a04fa:	2300      	movs	r3, #0
 80a04fc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80a0500:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80a0504:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80a0508:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
  {
    name[0] = '\0';
 80a050c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31


void updateEEPROM(EEPROMinfo newData)
{
  EEPROMinfo EEPROMdata;
  EEPROM.get(deviceNumberEEPROMAddress, EEPROMdata);
 80a0510:	f003 f822 	bl	80a3558 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0514:	2220      	movs	r2, #32
 80a0516:	a90c      	add	r1, sp, #48	; 0x30
 80a0518:	6820      	ldr	r0, [r4, #0]
 80a051a:	f000 fe41 	bl	80a11a0 <HAL_EEPROM_Get>

  Log.info("Got info from EEPROM. Now checking.");
 80a051e:	4993      	ldr	r1, [pc, #588]	; (80a076c <_Z12updateEEPROM10EEPROMinfo+0x280>)
 80a0520:	4893      	ldr	r0, [pc, #588]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0522:	f7ff fe7d 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
  if (EEPROMdata.flag != 0)
 80a0526:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80a052a:	4625      	mov	r5, r4
 80a052c:	b14b      	cbz	r3, 80a0542 <_Z12updateEEPROM10EEPROMinfo+0x56>
  {
    // EEPROM was empty -> initialize myObj

    Log.info("Data in EEPROM is not initialized. Putting new data.");
 80a052e:	4991      	ldr	r1, [pc, #580]	; (80a0774 <_Z12updateEEPROM10EEPROMinfo+0x288>)
 80a0530:	488f      	ldr	r0, [pc, #572]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0532:	f7ff fe75 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>

    EEPROM.put(deviceNumberEEPROMAddress, newData);
 80a0536:	f003 f80f 	bl	80a3558 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a053a:	2220      	movs	r2, #32
 80a053c:	a918      	add	r1, sp, #96	; 0x60
 80a053e:	6820      	ldr	r0, [r4, #0]
 80a0540:	e0af      	b.n	80a06a2 <_Z12updateEEPROM10EEPROMinfo+0x1b6>
    Log.info("Data Put...");
  }
  else
  {
    if (String(newData.name) != String(EEPROMdata.name) || newData.eCO2_base != EEPROMdata.eCO2_base || newData.TVOC_base != EEPROMdata.TVOC_base)
 80a0542:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 80a0546:	a804      	add	r0, sp, #16
 80a0548:	f001 f923 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a054c:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80a0550:	a808      	add	r0, sp, #32
 80a0552:	f001 f91e 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 80a0556:	a908      	add	r1, sp, #32
 80a0558:	a804      	add	r0, sp, #16
 80a055a:	f001 f9e3 	bl	80a1924 <_ZNK6String6equalsERKS_>
 80a055e:	b168      	cbz	r0, 80a057c <_Z12updateEEPROM10EEPROMinfo+0x90>
 80a0560:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 80a0564:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80a0568:	429a      	cmp	r2, r3
 80a056a:	d107      	bne.n	80a057c <_Z12updateEEPROM10EEPROMinfo+0x90>
 80a056c:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
 80a0570:	f8bd 404a 	ldrh.w	r4, [sp, #74]	; 0x4a
 80a0574:	1b1c      	subs	r4, r3, r4
 80a0576:	bf18      	it	ne
 80a0578:	2401      	movne	r4, #1
 80a057a:	e000      	b.n	80a057e <_Z12updateEEPROM10EEPROMinfo+0x92>
 80a057c:	2401      	movs	r4, #1
 80a057e:	a808      	add	r0, sp, #32
 80a0580:	f001 f8c0 	bl	80a1704 <_ZN6StringD1Ev>
 80a0584:	a804      	add	r0, sp, #16
 80a0586:	f001 f8bd 	bl	80a1704 <_ZN6StringD1Ev>
 80a058a:	2c00      	cmp	r4, #0
 80a058c:	f000 808f 	beq.w	80a06ae <_Z12updateEEPROM10EEPROMinfo+0x1c2>
    {
      Log.info("Data exists but not the same as current name.");
 80a0590:	4979      	ldr	r1, [pc, #484]	; (80a0778 <_Z12updateEEPROM10EEPROMinfo+0x28c>)
 80a0592:	4877      	ldr	r0, [pc, #476]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0594:	f7ff fe44 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0598:	4978      	ldr	r1, [pc, #480]	; (80a077c <_Z12updateEEPROM10EEPROMinfo+0x290>)
 80a059a:	a808      	add	r0, sp, #32
 80a059c:	f001 f8f9 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("Name in EEPROM: " + String(EEPROMdata.name));
 80a05a0:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80a05a4:	a804      	add	r0, sp, #16
 80a05a6:	f001 f8f4 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05aa:	a904      	add	r1, sp, #16
 80a05ac:	a808      	add	r0, sp, #32
 80a05ae:	f001 f97b 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a05b2:	6801      	ldr	r1, [r0, #0]
 80a05b4:	486e      	ldr	r0, [pc, #440]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a05b6:	f7ff fe33 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a05ba:	a804      	add	r0, sp, #16
 80a05bc:	f001 f8a2 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a05c0:	a808      	add	r0, sp, #32
 80a05c2:	f001 f89f 	bl	80a1704 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a05c6:	496e      	ldr	r1, [pc, #440]	; (80a0780 <_Z12updateEEPROM10EEPROMinfo+0x294>)
 80a05c8:	a808      	add	r0, sp, #32
 80a05ca:	f001 f8e2 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("new name      : " + String(newData.name));
 80a05ce:	f10d 0161 	add.w	r1, sp, #97	; 0x61
 80a05d2:	a804      	add	r0, sp, #16
 80a05d4:	f001 f8dd 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05d8:	a904      	add	r1, sp, #16
 80a05da:	a808      	add	r0, sp, #32
 80a05dc:	f001 f964 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a05e0:	6801      	ldr	r1, [r0, #0]
 80a05e2:	4863      	ldr	r0, [pc, #396]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a05e4:	f7ff fe1c 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a05e8:	a804      	add	r0, sp, #16
 80a05ea:	f001 f88b 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a05ee:	a808      	add	r0, sp, #32
 80a05f0:	f001 f888 	bl	80a1704 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a05f4:	4963      	ldr	r1, [pc, #396]	; (80a0784 <_Z12updateEEPROM10EEPROMinfo+0x298>)
 80a05f6:	a804      	add	r0, sp, #16
 80a05f8:	f001 f8cb 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("Base values in EEPROM  : " + String(EEPROMdata.eCO2_base) + " : " + String(EEPROMdata.TVOC_base));
 80a05fc:	220a      	movs	r2, #10
 80a05fe:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80a0602:	4668      	mov	r0, sp
 80a0604:	f001 f915 	bl	80a1832 <_ZN6StringC1Eih>
 80a0608:	4669      	mov	r1, sp
 80a060a:	a804      	add	r0, sp, #16
 80a060c:	f001 f94c 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0610:	495d      	ldr	r1, [pc, #372]	; (80a0788 <_Z12updateEEPROM10EEPROMinfo+0x29c>)
 80a0612:	f001 f955 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a0616:	4604      	mov	r4, r0
 80a0618:	220a      	movs	r2, #10
 80a061a:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 80a061e:	a808      	add	r0, sp, #32
 80a0620:	f001 f907 	bl	80a1832 <_ZN6StringC1Eih>
 80a0624:	a908      	add	r1, sp, #32
 80a0626:	4620      	mov	r0, r4
 80a0628:	f001 f93e 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a062c:	6801      	ldr	r1, [r0, #0]
 80a062e:	4850      	ldr	r0, [pc, #320]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0630:	f7ff fdf6 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a0634:	a808      	add	r0, sp, #32
 80a0636:	f001 f865 	bl	80a1704 <_ZN6StringD1Ev>
 80a063a:	4668      	mov	r0, sp
 80a063c:	f001 f862 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0640:	a804      	add	r0, sp, #16
 80a0642:	f001 f85f 	bl	80a1704 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0646:	4951      	ldr	r1, [pc, #324]	; (80a078c <_Z12updateEEPROM10EEPROMinfo+0x2a0>)
 80a0648:	a804      	add	r0, sp, #16
 80a064a:	f001 f8a2 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Log.info("Base values in new data: " + String(newData.eCO2_base) + " : " + String(newData.TVOC_base));
 80a064e:	220a      	movs	r2, #10
 80a0650:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 80a0654:	4668      	mov	r0, sp
 80a0656:	f001 f8ec 	bl	80a1832 <_ZN6StringC1Eih>
 80a065a:	4669      	mov	r1, sp
 80a065c:	a804      	add	r0, sp, #16
 80a065e:	f001 f923 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0662:	4949      	ldr	r1, [pc, #292]	; (80a0788 <_Z12updateEEPROM10EEPROMinfo+0x29c>)
 80a0664:	f001 f92c 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a0668:	4604      	mov	r4, r0
 80a066a:	220a      	movs	r2, #10
 80a066c:	f8bd 107a 	ldrh.w	r1, [sp, #122]	; 0x7a
 80a0670:	a808      	add	r0, sp, #32
 80a0672:	f001 f8de 	bl	80a1832 <_ZN6StringC1Eih>
 80a0676:	a908      	add	r1, sp, #32
 80a0678:	4620      	mov	r0, r4
 80a067a:	f001 f915 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a067e:	6801      	ldr	r1, [r0, #0]
 80a0680:	483b      	ldr	r0, [pc, #236]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0682:	f7ff fdcd 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a0686:	a808      	add	r0, sp, #32
 80a0688:	f001 f83c 	bl	80a1704 <_ZN6StringD1Ev>
 80a068c:	4668      	mov	r0, sp
 80a068e:	f001 f839 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0692:	a804      	add	r0, sp, #16
 80a0694:	f001 f836 	bl	80a1704 <_ZN6StringD1Ev>

      EEPROM.put(deviceNumberEEPROMAddress, newData);
 80a0698:	f002 ff5e 	bl	80a3558 <_Z21__fetch_global_EEPROMv>
 80a069c:	6828      	ldr	r0, [r5, #0]
 80a069e:	2220      	movs	r2, #32
 80a06a0:	a918      	add	r1, sp, #96	; 0x60
 80a06a2:	f000 fd85 	bl	80a11b0 <HAL_EEPROM_Put>
      Log.info("Data Put...");
 80a06a6:	493a      	ldr	r1, [pc, #232]	; (80a0790 <_Z12updateEEPROM10EEPROMinfo+0x2a4>)
 80a06a8:	4831      	ldr	r0, [pc, #196]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a06aa:	f7ff fdb9 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a06ae:	4939      	ldr	r1, [pc, #228]	; (80a0794 <_Z12updateEEPROM10EEPROMinfo+0x2a8>)
 80a06b0:	a808      	add	r0, sp, #32
 80a06b2:	f001 f86e 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
    }
  }
  Log.info("EEPROM data, " + String(EEPROMdata.flag) + ": " + EEPROMdata.name);
 80a06b6:	220a      	movs	r2, #10
 80a06b8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80a06bc:	a804      	add	r0, sp, #16
 80a06be:	f001 f8a6 	bl	80a180e <_ZN6StringC1Ehh>
 80a06c2:	a904      	add	r1, sp, #16
 80a06c4:	a808      	add	r0, sp, #32
 80a06c6:	f001 f8ef 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a06ca:	4933      	ldr	r1, [pc, #204]	; (80a0798 <_Z12updateEEPROM10EEPROMinfo+0x2ac>)
 80a06cc:	f001 f8f8 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a06d0:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 80a06d4:	f001 f8f4 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a06d8:	6801      	ldr	r1, [r0, #0]
 80a06da:	4825      	ldr	r0, [pc, #148]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a06dc:	f7ff fda0 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a06e0:	a804      	add	r0, sp, #16
 80a06e2:	f001 f80f 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a06e6:	a808      	add	r0, sp, #32
 80a06e8:	f001 f80c 	bl	80a1704 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a06ec:	4925      	ldr	r1, [pc, #148]	; (80a0784 <_Z12updateEEPROM10EEPROMinfo+0x298>)
 80a06ee:	a804      	add	r0, sp, #16
 80a06f0:	f001 f84f 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Base values in EEPROM  : " + String(EEPROMdata.eCO2_base) + " : " + String(EEPROMdata.TVOC_base));
 80a06f4:	220a      	movs	r2, #10
 80a06f6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80a06fa:	4668      	mov	r0, sp
 80a06fc:	f001 f899 	bl	80a1832 <_ZN6StringC1Eih>
 80a0700:	4669      	mov	r1, sp
 80a0702:	a804      	add	r0, sp, #16
 80a0704:	f001 f8d0 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0708:	491f      	ldr	r1, [pc, #124]	; (80a0788 <_Z12updateEEPROM10EEPROMinfo+0x29c>)
 80a070a:	f001 f8d9 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a070e:	4604      	mov	r4, r0
 80a0710:	220a      	movs	r2, #10
 80a0712:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 80a0716:	a808      	add	r0, sp, #32
 80a0718:	f001 f88b 	bl	80a1832 <_ZN6StringC1Eih>
 80a071c:	a908      	add	r1, sp, #32
 80a071e:	4620      	mov	r0, r4
 80a0720:	f001 f8c2 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0724:	6801      	ldr	r1, [r0, #0]
 80a0726:	4812      	ldr	r0, [pc, #72]	; (80a0770 <_Z12updateEEPROM10EEPROMinfo+0x284>)
 80a0728:	f7ff fd7a 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a072c:	a808      	add	r0, sp, #32
 80a072e:	f000 ffe9 	bl	80a1704 <_ZN6StringD1Ev>
 80a0732:	4668      	mov	r0, sp
 80a0734:	f000 ffe6 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0738:	a804      	add	r0, sp, #16
 80a073a:	f000 ffe3 	bl	80a1704 <_ZN6StringD1Ev>
  ActiveEEPROMData = newData;
 80a073e:	4a17      	ldr	r2, [pc, #92]	; (80a079c <_Z12updateEEPROM10EEPROMinfo+0x2b0>)
 80a0740:	ab18      	add	r3, sp, #96	; 0x60
 80a0742:	a91f      	add	r1, sp, #124	; 0x7c
 80a0744:	f853 0b04 	ldr.w	r0, [r3], #4
 80a0748:	428b      	cmp	r3, r1
 80a074a:	f842 0b04 	str.w	r0, [r2], #4
 80a074e:	d1f9      	bne.n	80a0744 <_Z12updateEEPROM10EEPROMinfo+0x258>
 80a0750:	8819      	ldrh	r1, [r3, #0]
 80a0752:	8011      	strh	r1, [r2, #0]
 80a0754:	789b      	ldrb	r3, [r3, #2]
 80a0756:	7093      	strb	r3, [r2, #2]
  haveReadEEPROM = true;
 80a0758:	4b11      	ldr	r3, [pc, #68]	; (80a07a0 <_Z12updateEEPROM10EEPROMinfo+0x2b4>)
 80a075a:	2201      	movs	r2, #1
 80a075c:	701a      	strb	r2, [r3, #0]
}
 80a075e:	b015      	add	sp, #84	; 0x54
 80a0760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a0764:	b004      	add	sp, #16
 80a0766:	4770      	bx	lr
 80a0768:	20000390 	.word	0x20000390
 80a076c:	080a3cd8 	.word	0x080a3cd8
 80a0770:	20000474 	.word	0x20000474
 80a0774:	080a3cfc 	.word	0x080a3cfc
 80a0778:	080a3d3d 	.word	0x080a3d3d
 80a077c:	080a3d6b 	.word	0x080a3d6b
 80a0780:	080a3d7c 	.word	0x080a3d7c
 80a0784:	080a3d8d 	.word	0x080a3d8d
 80a0788:	080a3d89 	.word	0x080a3d89
 80a078c:	080a3da7 	.word	0x080a3da7
 80a0790:	080a3d31 	.word	0x080a3d31
 80a0794:	080a3e07 	.word	0x080a3e07
 80a0798:	080a3d8a 	.word	0x080a3d8a
 80a079c:	200003e4 	.word	0x200003e4
 80a07a0:	200003c6 	.word	0x200003c6

080a07a4 <_Z11trySaveBasev>:

void trySaveBase()
{
 80a07a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a07a8:	b093      	sub	sp, #76	; 0x4c
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a07aa:	f000 fce9 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - timeLoop> 600000)
 80a07ae:	4c41      	ldr	r4, [pc, #260]	; (80a08b4 <_Z11trySaveBasev+0x110>)
 80a07b0:	4f41      	ldr	r7, [pc, #260]	; (80a08b8 <_Z11trySaveBasev+0x114>)
 80a07b2:	6823      	ldr	r3, [r4, #0]
 80a07b4:	1ac0      	subs	r0, r0, r3
 80a07b6:	4b41      	ldr	r3, [pc, #260]	; (80a08bc <_Z11trySaveBasev+0x118>)
 80a07b8:	4298      	cmp	r0, r3
 80a07ba:	d904      	bls.n	80a07c6 <_Z11trySaveBasev+0x22>
  {
    isWaitingForBaseValues = true;
 80a07bc:	2301      	movs	r3, #1
 80a07be:	707b      	strb	r3, [r7, #1]
 80a07c0:	f000 fcde 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
    timeLoop = millis();
 80a07c4:	6020      	str	r0, [r4, #0]
  }
  
  if (isWaitingForBaseValues && haveReadEEPROM)
 80a07c6:	787b      	ldrb	r3, [r7, #1]
 80a07c8:	2b00      	cmp	r3, #0
 80a07ca:	d06f      	beq.n	80a08ac <_Z11trySaveBasev+0x108>
 80a07cc:	4b3c      	ldr	r3, [pc, #240]	; (80a08c0 <_Z11trySaveBasev+0x11c>)
 80a07ce:	781b      	ldrb	r3, [r3, #0]
 80a07d0:	2b00      	cmp	r3, #0
 80a07d2:	d06b      	beq.n	80a08ac <_Z11trySaveBasev+0x108>
  {
    delay(100);
 80a07d4:	2064      	movs	r0, #100	; 0x64
 80a07d6:	f002 f929 	bl	80a2a2c <delay>
    Log.info("getting Base values");
 80a07da:	493a      	ldr	r1, [pc, #232]	; (80a08c4 <_Z11trySaveBasev+0x120>)
 80a07dc:	483a      	ldr	r0, [pc, #232]	; (80a08c8 <_Z11trySaveBasev+0x124>)
 80a07de:	f7ff fd1f 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
    uint16_t TVOC_base, eCO2_base;
      if (!sgp.getIAQBaseline(&eCO2_base, &TVOC_base))
 80a07e2:	aa05      	add	r2, sp, #20
 80a07e4:	f10d 0116 	add.w	r1, sp, #22
 80a07e8:	4838      	ldr	r0, [pc, #224]	; (80a08cc <_Z11trySaveBasev+0x128>)
 80a07ea:	f000 fc20 	bl	80a102e <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>
 80a07ee:	b920      	cbnz	r0, 80a07fa <_Z11trySaveBasev+0x56>
      {
        Log.error("Failed to get baseline readings");
 80a07f0:	4937      	ldr	r1, [pc, #220]	; (80a08d0 <_Z11trySaveBasev+0x12c>)
 80a07f2:	4835      	ldr	r0, [pc, #212]	; (80a08c8 <_Z11trySaveBasev+0x124>)
 80a07f4:	f7ff fd2b 	bl	80a024e <_ZNK5spark6Logger5errorEPKcz>
 80a07f8:	e02c      	b.n	80a0854 <_Z11trySaveBasev+0xb0>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a07fa:	4936      	ldr	r1, [pc, #216]	; (80a08d4 <_Z11trySaveBasev+0x130>)
 80a07fc:	a806      	add	r0, sp, #24
 80a07fe:	f000 ffc8 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      }
      else
      {
        Log.info("Got base values: " + String(eCO2_base) + " : " + String(TVOC_base));
 80a0802:	220a      	movs	r2, #10
 80a0804:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80a0808:	a80a      	add	r0, sp, #40	; 0x28
 80a080a:	f001 f812 	bl	80a1832 <_ZN6StringC1Eih>
 80a080e:	a90a      	add	r1, sp, #40	; 0x28
 80a0810:	a806      	add	r0, sp, #24
 80a0812:	f001 f849 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0816:	4930      	ldr	r1, [pc, #192]	; (80a08d8 <_Z11trySaveBasev+0x134>)
 80a0818:	f001 f852 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a081c:	4604      	mov	r4, r0
 80a081e:	220a      	movs	r2, #10
 80a0820:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a0824:	a80e      	add	r0, sp, #56	; 0x38
 80a0826:	f001 f804 	bl	80a1832 <_ZN6StringC1Eih>
 80a082a:	a90e      	add	r1, sp, #56	; 0x38
 80a082c:	4620      	mov	r0, r4
 80a082e:	f001 f83b 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0832:	6801      	ldr	r1, [r0, #0]
 80a0834:	4824      	ldr	r0, [pc, #144]	; (80a08c8 <_Z11trySaveBasev+0x124>)
 80a0836:	f7ff fcf3 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a083a:	a80e      	add	r0, sp, #56	; 0x38
 80a083c:	f000 ff62 	bl	80a1704 <_ZN6StringD1Ev>
 80a0840:	a80a      	add	r0, sp, #40	; 0x28
 80a0842:	f000 ff5f 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0846:	a806      	add	r0, sp, #24
 80a0848:	f000 ff5c 	bl	80a1704 <_ZN6StringD1Ev>
        delay(1000);
 80a084c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0850:	f002 f8ec 	bl	80a2a2c <delay>
      }
    ActiveEEPROMData.eCO2_base = eCO2_base;
 80a0854:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80a0858:	4c20      	ldr	r4, [pc, #128]	; (80a08dc <_Z11trySaveBasev+0x138>)
 80a085a:	83a3      	strh	r3, [r4, #28]
    ActiveEEPROMData.TVOC_base = TVOC_base;
 80a085c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0860:	8363      	strh	r3, [r4, #26]
 80a0862:	f000 fc8d 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - timeStart > 43200000)
 80a0866:	4a1e      	ldr	r2, [pc, #120]	; (80a08e0 <_Z11trySaveBasev+0x13c>)
 80a0868:	6813      	ldr	r3, [r2, #0]
 80a086a:	4690      	mov	r8, r2
 80a086c:	1ac0      	subs	r0, r0, r3
 80a086e:	4b1d      	ldr	r3, [pc, #116]	; (80a08e4 <_Z11trySaveBasev+0x140>)
 80a0870:	4298      	cmp	r0, r3
 80a0872:	d919      	bls.n	80a08a8 <_Z11trySaveBasev+0x104>
    {
    updateEEPROM(ActiveEEPROMData);
 80a0874:	46ee      	mov	lr, sp
 80a0876:	f8d4 9000 	ldr.w	r9, [r4]
 80a087a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80a087e:	68a2      	ldr	r2, [r4, #8]
 80a0880:	68e3      	ldr	r3, [r4, #12]
 80a0882:	f104 0510 	add.w	r5, r4, #16
 80a0886:	3420      	adds	r4, #32
 80a0888:	4676      	mov	r6, lr
 80a088a:	6828      	ldr	r0, [r5, #0]
 80a088c:	6869      	ldr	r1, [r5, #4]
 80a088e:	3508      	adds	r5, #8
 80a0890:	c603      	stmia	r6!, {r0, r1}
 80a0892:	42a5      	cmp	r5, r4
 80a0894:	46b6      	mov	lr, r6
 80a0896:	d1f7      	bne.n	80a0888 <_Z11trySaveBasev+0xe4>
 80a0898:	4648      	mov	r0, r9
 80a089a:	4661      	mov	r1, ip
 80a089c:	f7ff fe26 	bl	80a04ec <_Z12updateEEPROM10EEPROMinfo>
 80a08a0:	f000 fc6e 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
    timeStart = millis();
 80a08a4:	f8c8 0000 	str.w	r0, [r8]
    }
    
    isWaitingForBaseValues = false;
 80a08a8:	2300      	movs	r3, #0
 80a08aa:	707b      	strb	r3, [r7, #1]
  }
}
 80a08ac:	b013      	add	sp, #76	; 0x4c
 80a08ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a08b2:	bf00      	nop
 80a08b4:	20000408 	.word	0x20000408
 80a08b8:	40024000 	.word	0x40024000
 80a08bc:	000927c0 	.word	0x000927c0
 80a08c0:	200003c6 	.word	0x200003c6
 80a08c4:	080a3dc1 	.word	0x080a3dc1
 80a08c8:	20000474 	.word	0x20000474
 80a08cc:	200003d0 	.word	0x200003d0
 80a08d0:	080a3c18 	.word	0x080a3c18
 80a08d4:	080a3dd5 	.word	0x080a3dd5
 80a08d8:	080a3d89 	.word	0x080a3d89
 80a08dc:	200003e4 	.word	0x200003e4
 80a08e0:	200003a4 	.word	0x200003a4
 80a08e4:	02932e00 	.word	0x02932e00

080a08e8 <_Z13getEEPROMdatav>:
}
//////////////////////////////////////////////////////////////
//            EEPROM AND DEVICE NAME FUNCTIONS
//////////////////////////////////////////////////////////////
bool getEEPROMdata()
{
 80a08e8:	b570      	push	{r4, r5, r6, lr}
  if (!haveReadEEPROM)
 80a08ea:	4b43      	ldr	r3, [pc, #268]	; (80a09f8 <_Z13getEEPROMdatav+0x110>)
}
//////////////////////////////////////////////////////////////
//            EEPROM AND DEVICE NAME FUNCTIONS
//////////////////////////////////////////////////////////////
bool getEEPROMdata()
{
 80a08ec:	b090      	sub	sp, #64	; 0x40
  if (!haveReadEEPROM)
 80a08ee:	781c      	ldrb	r4, [r3, #0]
 80a08f0:	461d      	mov	r5, r3
 80a08f2:	2c00      	cmp	r4, #0
 80a08f4:	d14c      	bne.n	80a0990 <_Z13getEEPROMdatav+0xa8>
        name[i] = newname.charAt(i);
      }
    }
  }

  EEPROMinfo() : flag(0), TVOC_base(0), eCO2_base(0), setGas(false)
 80a08f6:	f88d 4020 	strb.w	r4, [sp, #32]
 80a08fa:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
 80a08fe:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 80a0902:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  {
    name[0] = '\0';
 80a0906:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
bool getEEPROMdata()
{
  if (!haveReadEEPROM)
  {
    EEPROMinfo EEPROMdata;
    EEPROM.get(deviceNumberEEPROMAddress, EEPROMdata);
 80a090a:	f002 fe25 	bl	80a3558 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a090e:	4b3b      	ldr	r3, [pc, #236]	; (80a09fc <_Z13getEEPROMdatav+0x114>)
 80a0910:	2220      	movs	r2, #32
 80a0912:	6818      	ldr	r0, [r3, #0]
 80a0914:	eb0d 0102 	add.w	r1, sp, r2
 80a0918:	f000 fc42 	bl	80a11a0 <HAL_EEPROM_Get>
    if (EEPROMdata.flag != 0)
 80a091c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80a0920:	b123      	cbz	r3, 80a092c <_Z13getEEPROMdatav+0x44>
    {
      //// EEPROM was empty
      Log.info("EEPROM was empty");
 80a0922:	4937      	ldr	r1, [pc, #220]	; (80a0a00 <_Z13getEEPROMdatav+0x118>)
 80a0924:	4837      	ldr	r0, [pc, #220]	; (80a0a04 <_Z13getEEPROMdatav+0x11c>)
 80a0926:	f7ff fc7b 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
      return false;
 80a092a:	e061      	b.n	80a09f0 <_Z13getEEPROMdatav+0x108>
    }
    ActiveEEPROMData = EEPROMdata;
 80a092c:	4b36      	ldr	r3, [pc, #216]	; (80a0a08 <_Z13getEEPROMdatav+0x120>)
 80a092e:	aa08      	add	r2, sp, #32
 80a0930:	ae0e      	add	r6, sp, #56	; 0x38
 80a0932:	4614      	mov	r4, r2
 80a0934:	cc03      	ldmia	r4!, {r0, r1}
 80a0936:	42b4      	cmp	r4, r6
 80a0938:	6018      	str	r0, [r3, #0]
 80a093a:	6059      	str	r1, [r3, #4]
 80a093c:	4622      	mov	r2, r4
 80a093e:	f103 0308 	add.w	r3, r3, #8
 80a0942:	d1f6      	bne.n	80a0932 <_Z13getEEPROMdatav+0x4a>
 80a0944:	6820      	ldr	r0, [r4, #0]
 80a0946:	6018      	str	r0, [r3, #0]
 80a0948:	88a1      	ldrh	r1, [r4, #4]
 80a094a:	79a2      	ldrb	r2, [r4, #6]
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a094c:	a804      	add	r0, sp, #16
 80a094e:	8099      	strh	r1, [r3, #4]
 80a0950:	719a      	strb	r2, [r3, #6]
 80a0952:	492e      	ldr	r1, [pc, #184]	; (80a0a0c <_Z13getEEPROMdatav+0x124>)
    haveReadEEPROM = true;
 80a0954:	2401      	movs	r4, #1
 80a0956:	702c      	strb	r4, [r5, #0]
 80a0958:	f000 ff1b 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Found EEPROM data, " + String(EEPROMdata.flag) + ": " + EEPROMdata.name);
 80a095c:	220a      	movs	r2, #10
 80a095e:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80a0962:	4668      	mov	r0, sp
 80a0964:	f000 ff53 	bl	80a180e <_ZN6StringC1Ehh>
 80a0968:	4669      	mov	r1, sp
 80a096a:	a804      	add	r0, sp, #16
 80a096c:	f000 ff9c 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0970:	4927      	ldr	r1, [pc, #156]	; (80a0a10 <_Z13getEEPROMdatav+0x128>)
 80a0972:	f000 ffa5 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a0976:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 80a097a:	f000 ffa1 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a097e:	6801      	ldr	r1, [r0, #0]
 80a0980:	4820      	ldr	r0, [pc, #128]	; (80a0a04 <_Z13getEEPROMdatav+0x11c>)
 80a0982:	f7ff fc4d 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a0986:	4668      	mov	r0, sp
 80a0988:	f000 febc 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a098c:	a804      	add	r0, sp, #16
 80a098e:	e02d      	b.n	80a09ec <_Z13getEEPROMdatav+0x104>
    return true;
  }
  Log.info("Already loaded EEPROM data. " + String(ActiveEEPROMData.flag) + "\nName: \t" + ActiveEEPROMData.name + "\nSet Gas: \t" + ActiveEEPROMData.setGas + "\nVoC: \t" + ActiveEEPROMData.TVOC_base + "\neCo2: \t" + ActiveEEPROMData.eCO2_base);
 80a0990:	4d1d      	ldr	r5, [pc, #116]	; (80a0a08 <_Z13getEEPROMdatav+0x120>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0992:	4920      	ldr	r1, [pc, #128]	; (80a0a14 <_Z13getEEPROMdatav+0x12c>)
 80a0994:	a808      	add	r0, sp, #32
 80a0996:	f000 fefc 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a099a:	220a      	movs	r2, #10
 80a099c:	7829      	ldrb	r1, [r5, #0]
 80a099e:	a804      	add	r0, sp, #16
 80a09a0:	f000 ff35 	bl	80a180e <_ZN6StringC1Ehh>
 80a09a4:	a904      	add	r1, sp, #16
 80a09a6:	a808      	add	r0, sp, #32
 80a09a8:	f000 ff7e 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a09ac:	491a      	ldr	r1, [pc, #104]	; (80a0a18 <_Z13getEEPROMdatav+0x130>)
 80a09ae:	f000 ff87 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a09b2:	1c69      	adds	r1, r5, #1
 80a09b4:	f000 ff84 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a09b8:	4918      	ldr	r1, [pc, #96]	; (80a0a1c <_Z13getEEPROMdatav+0x134>)
 80a09ba:	f000 ff81 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a09be:	7fa9      	ldrb	r1, [r5, #30]
 80a09c0:	f000 ff90 	bl	80a18e4 <_ZplRK15StringSumHelperi>
 80a09c4:	4916      	ldr	r1, [pc, #88]	; (80a0a20 <_Z13getEEPROMdatav+0x138>)
 80a09c6:	f000 ff7b 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a09ca:	8b69      	ldrh	r1, [r5, #26]
 80a09cc:	f000 ff8a 	bl	80a18e4 <_ZplRK15StringSumHelperi>
 80a09d0:	4914      	ldr	r1, [pc, #80]	; (80a0a24 <_Z13getEEPROMdatav+0x13c>)
 80a09d2:	f000 ff75 	bl	80a18c0 <_ZplRK15StringSumHelperPKc>
 80a09d6:	8ba9      	ldrh	r1, [r5, #28]
 80a09d8:	f000 ff84 	bl	80a18e4 <_ZplRK15StringSumHelperi>
 80a09dc:	6801      	ldr	r1, [r0, #0]
 80a09de:	4809      	ldr	r0, [pc, #36]	; (80a0a04 <_Z13getEEPROMdatav+0x11c>)
 80a09e0:	f7ff fc1e 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a09e4:	a804      	add	r0, sp, #16
 80a09e6:	f000 fe8d 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a09ea:	a808      	add	r0, sp, #32
 80a09ec:	f000 fe8a 	bl	80a1704 <_ZN6StringD1Ev>
  return true;
}
 80a09f0:	4620      	mov	r0, r4
 80a09f2:	b010      	add	sp, #64	; 0x40
 80a09f4:	bd70      	pop	{r4, r5, r6, pc}
 80a09f6:	bf00      	nop
 80a09f8:	200003c6 	.word	0x200003c6
 80a09fc:	20000390 	.word	0x20000390
 80a0a00:	080a3df0 	.word	0x080a3df0
 80a0a04:	20000474 	.word	0x20000474
 80a0a08:	200003e4 	.word	0x200003e4
 80a0a0c:	080a3e01 	.word	0x080a3e01
 80a0a10:	080a3d8a 	.word	0x080a3d8a
 80a0a14:	080a3e15 	.word	0x080a3e15
 80a0a18:	080a3e32 	.word	0x080a3e32
 80a0a1c:	080a3e3b 	.word	0x080a3e3b
 80a0a20:	080a3e47 	.word	0x080a3e47
 80a0a24:	080a3e4f 	.word	0x080a3e4f

080a0a28 <setup>:
/*DO NOT CHANGE*/ const char *SSID5 = "3G uFi_9E0";
/*DO NOT CHANGE*/ const char *PASS = "4Qiud29-da";

// setup() runs once, when the device is first turned on.
void setup()
{
 80a0a28:	b510      	push	{r4, lr}
 80a0a2a:	b088      	sub	sp, #32
  Serial.begin(9600);
 80a0a2c:	f002 f97e 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a0a30:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0a34:	f002 f968 	bl	80a2d08 <_ZN9USBSerial5beginEl>
  if (isDebugMode)
 80a0a38:	4b22      	ldr	r3, [pc, #136]	; (80a0ac4 <setup+0x9c>)
 80a0a3a:	781b      	ldrb	r3, [r3, #0]
 80a0a3c:	b15b      	cbz	r3, 80a0a56 <setup+0x2e>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0a3e:	4c22      	ldr	r4, [pc, #136]	; (80a0ac8 <setup+0xa0>)
  {
    while (!Serial.isConnected())
 80a0a40:	f002 f974 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a0a44:	f002 f967 	bl	80a2d16 <_ZN9USBSerial11isConnectedEv>
 80a0a48:	b928      	cbnz	r0, 80a0a56 <setup+0x2e>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0a4a:	f000 fb99 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0a4e:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0a50:	f000 fd9c 	bl	80a158c <spark_process>
 80a0a54:	e7f4      	b.n	80a0a40 <setup+0x18>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0a56:	491d      	ldr	r1, [pc, #116]	; (80a0acc <setup+0xa4>)
 80a0a58:	a804      	add	r0, sp, #16
 80a0a5a:	f000 fe9a 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
      Particle.process();
  }
  Log.info("Running Setup for loop, " + String(nReadingsSaved));
 80a0a5e:	4b1c      	ldr	r3, [pc, #112]	; (80a0ad0 <setup+0xa8>)
 80a0a60:	220a      	movs	r2, #10
 80a0a62:	6819      	ldr	r1, [r3, #0]
 80a0a64:	4668      	mov	r0, sp
 80a0a66:	f000 fee4 	bl	80a1832 <_ZN6StringC1Eih>
 80a0a6a:	4669      	mov	r1, sp
 80a0a6c:	a804      	add	r0, sp, #16
 80a0a6e:	f000 ff1b 	bl	80a18a8 <_ZplRK15StringSumHelperRK6String>
 80a0a72:	6801      	ldr	r1, [r0, #0]
 80a0a74:	4817      	ldr	r0, [pc, #92]	; (80a0ad4 <setup+0xac>)
 80a0a76:	f7ff fbd3 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
 80a0a7a:	4668      	mov	r0, sp
 80a0a7c:	f000 fe42 	bl	80a1704 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a80:	a804      	add	r0, sp, #16
 80a0a82:	f000 fe3f 	bl	80a1704 <_ZN6StringD1Ev>

  //tryConnectCloud();

  // updateName();

  getEEPROMdata();
 80a0a86:	f7ff ff2f 	bl	80a08e8 <_Z13getEEPROMdatav>

  if (!sgp.begin())
 80a0a8a:	2100      	movs	r1, #0
 80a0a8c:	4812      	ldr	r0, [pc, #72]	; (80a0ad8 <setup+0xb0>)
 80a0a8e:	f000 fa79 	bl	80a0f84 <_ZN14Adafruit_SGP305beginEP7TwoWire>
 80a0a92:	b920      	cbnz	r0, 80a0a9e <setup+0x76>
  {
    Log.error("Could not find a valid SGP30 sensor, check wiring!");
 80a0a94:	4911      	ldr	r1, [pc, #68]	; (80a0adc <setup+0xb4>)
 80a0a96:	480f      	ldr	r0, [pc, #60]	; (80a0ad4 <setup+0xac>)
 80a0a98:	f7ff fbd9 	bl	80a024e <_ZNK5spark6Logger5errorEPKcz>
 80a0a9c:	e003      	b.n	80a0aa6 <setup+0x7e>
  }
  else
  {
    Log.info("SGP30 Connected!");
 80a0a9e:	4910      	ldr	r1, [pc, #64]	; (80a0ae0 <setup+0xb8>)
 80a0aa0:	480c      	ldr	r0, [pc, #48]	; (80a0ad4 <setup+0xac>)
 80a0aa2:	f7ff fbbd 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
  }

  delay(1000);
 80a0aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0aaa:	f001 ffbf 	bl	80a2a2c <delay>
 80a0aae:	f000 fb67 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
  //sensors.SetupSensors();

  timeStart = millis();
 80a0ab2:	4b0c      	ldr	r3, [pc, #48]	; (80a0ae4 <setup+0xbc>)
 80a0ab4:	6018      	str	r0, [r3, #0]
 80a0ab6:	f000 fb63 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
  timeLoop = millis();
 80a0aba:	4b0b      	ldr	r3, [pc, #44]	; (80a0ae8 <setup+0xc0>)
 80a0abc:	6018      	str	r0, [r3, #0]
}
 80a0abe:	b008      	add	sp, #32
 80a0ac0:	bd10      	pop	{r4, pc}
 80a0ac2:	bf00      	nop
 80a0ac4:	200003c8 	.word	0x200003c8
 80a0ac8:	20000514 	.word	0x20000514
 80a0acc:	080a3e58 	.word	0x080a3e58
 80a0ad0:	20000430 	.word	0x20000430
 80a0ad4:	20000474 	.word	0x20000474
 80a0ad8:	200003d0 	.word	0x200003d0
 80a0adc:	080a3e71 	.word	0x080a3e71
 80a0ae0:	080a3ea4 	.word	0x080a3ea4
 80a0ae4:	200003a4 	.word	0x200003a4
 80a0ae8:	20000408 	.word	0x20000408

080a0aec <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
 80a0aec:	b508      	push	{r3, lr}

  // tryConnectCloud();

  getEEPROMdata();
 80a0aee:	f7ff fefb 	bl	80a08e8 <_Z13getEEPROMdatav>
  //updateName();
  trySetupSensor();
 80a0af2:	f7ff fbd1 	bl	80a0298 <_Z14trySetupSensorv>
  tryMeasure();
 80a0af6:	f7ff fcb1 	bl	80a045c <_Z10tryMeasurev>

  trySaveBase();
 80a0afa:	f7ff fe53 	bl	80a07a4 <_Z11trySaveBasev>
  //tryPowerDown();

  delay(500);
}
 80a0afe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tryMeasure();

  trySaveBase();
  //tryPowerDown();

  delay(500);
 80a0b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0b06:	f001 bf91 	b.w	80a2a2c <delay>
	...

080a0b0c <_Z10cancelWiFiv>:
    cancelWiFi();
  }
}

void cancelWiFi()
{
 80a0b0c:	b510      	push	{r4, lr}
 80a0b0e:	4c0b      	ldr	r4, [pc, #44]	; (80a0b3c <_Z10cancelWiFiv+0x30>)
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0b10:	2200      	movs	r2, #0
 80a0b12:	2102      	movs	r1, #2
 80a0b14:	6860      	ldr	r0, [r4, #4]
 80a0b16:	f000 fcf9 	bl	80a150c <network_disconnect>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0b1a:	2300      	movs	r3, #0
 80a0b1c:	461a      	mov	r2, r3
 80a0b1e:	4619      	mov	r1, r3
 80a0b20:	6860      	ldr	r0, [r4, #4]
 80a0b22:	f000 fd0b 	bl	80a153c <network_off>
#if (PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION)
  WiFi.disconnect();
  WiFi.off();
#endif

  isCloudLoop = false;
 80a0b26:	4a06      	ldr	r2, [pc, #24]	; (80a0b40 <_Z10cancelWiFiv+0x34>)
 80a0b28:	2300      	movs	r3, #0
 80a0b2a:	7013      	strb	r3, [r2, #0]
  wifiReady = false;
 80a0b2c:	4a05      	ldr	r2, [pc, #20]	; (80a0b44 <_Z10cancelWiFiv+0x38>)
 80a0b2e:	7013      	strb	r3, [r2, #0]
  cloudReady = false;
 80a0b30:	4a05      	ldr	r2, [pc, #20]	; (80a0b48 <_Z10cancelWiFiv+0x3c>)
 80a0b32:	7013      	strb	r3, [r2, #0]
  connectingToCloud = false;
 80a0b34:	4a05      	ldr	r2, [pc, #20]	; (80a0b4c <_Z10cancelWiFiv+0x40>)
 80a0b36:	7013      	strb	r3, [r2, #0]
 80a0b38:	bd10      	pop	{r4, pc}
 80a0b3a:	bf00      	nop
 80a0b3c:	200004e4 	.word	0x200004e4
 80a0b40:	20000300 	.word	0x20000300
 80a0b44:	200003c5 	.word	0x200003c5
 80a0b48:	20000404 	.word	0x20000404
 80a0b4c:	200003c4 	.word	0x200003c4

080a0b50 <_Z18cancelWiFiCallbackv>:

//////////////////////////////////////////////////////////////
//            WIFI AND CONNECTION FUNCTIONS
//////////////////////////////////////////////////////////////
void cancelWiFiCallback()
{
 80a0b50:	b508      	push	{r3, lr}
  if (connectingToCloud && !cloudReady)
 80a0b52:	4b07      	ldr	r3, [pc, #28]	; (80a0b70 <_Z18cancelWiFiCallbackv+0x20>)
 80a0b54:	781b      	ldrb	r3, [r3, #0]
 80a0b56:	b153      	cbz	r3, 80a0b6e <_Z18cancelWiFiCallbackv+0x1e>
 80a0b58:	4b06      	ldr	r3, [pc, #24]	; (80a0b74 <_Z18cancelWiFiCallbackv+0x24>)
 80a0b5a:	781b      	ldrb	r3, [r3, #0]
 80a0b5c:	b93b      	cbnz	r3, 80a0b6e <_Z18cancelWiFiCallbackv+0x1e>
  {
    Log.info("Took too long... will cancel Wifi and the cloud... ");
 80a0b5e:	4906      	ldr	r1, [pc, #24]	; (80a0b78 <_Z18cancelWiFiCallbackv+0x28>)
 80a0b60:	4806      	ldr	r0, [pc, #24]	; (80a0b7c <_Z18cancelWiFiCallbackv+0x2c>)
 80a0b62:	f7ff fb5d 	bl	80a0220 <_ZNK5spark6Logger4infoEPKcz>
    cancelWiFi();
  }
}
 80a0b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void cancelWiFiCallback()
{
  if (connectingToCloud && !cloudReady)
  {
    Log.info("Took too long... will cancel Wifi and the cloud... ");
    cancelWiFi();
 80a0b6a:	f7ff bfcf 	b.w	80a0b0c <_Z10cancelWiFiv>
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	200003c4 	.word	0x200003c4
 80a0b74:	20000404 	.word	0x20000404
 80a0b78:	080a40e4 	.word	0x080a40e4
 80a0b7c:	20000474 	.word	0x20000474

080a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a0b80:	b570      	push	{r4, r5, r6, lr}
 80a0b82:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a0b84:	6804      	ldr	r4, [r0, #0]
 80a0b86:	6843      	ldr	r3, [r0, #4]
 80a0b88:	2614      	movs	r6, #20
 80a0b8a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a0b8e:	42a6      	cmp	r6, r4
 80a0b90:	d004      	beq.n	80a0b9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 80a0b92:	4620      	mov	r0, r4
 80a0b94:	f000 fdb6 	bl	80a1704 <_ZN6StringD1Ev>
 80a0b98:	3414      	adds	r4, #20
 80a0b9a:	e7f8      	b.n	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a0b9c:	6828      	ldr	r0, [r5, #0]
 80a0b9e:	f000 fd0d 	bl	80a15bc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a0ba2:	4628      	mov	r0, r5
 80a0ba4:	bd70      	pop	{r4, r5, r6, pc}

080a0ba6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a0ba6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a0ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0baa:	4606      	mov	r6, r0
 80a0bac:	460c      	mov	r4, r1
 80a0bae:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a0bb0:	d916      	bls.n	80a0be0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0bb2:	4290      	cmp	r0, r2
 80a0bb4:	d215      	bcs.n	80a0be2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 80a0bb6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a0bba:	1a6c      	subs	r4, r5, r1
 80a0bbc:	f1a1 0714 	sub.w	r7, r1, #20
 80a0bc0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a0bc2:	42af      	cmp	r7, r5
 80a0bc4:	d01c      	beq.n	80a0c00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0bc6:	b12c      	cbz	r4, 80a0bd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0bc8:	4629      	mov	r1, r5
 80a0bca:	4620      	mov	r0, r4
 80a0bcc:	f000 fd8a 	bl	80a16e4 <_ZN6StringC1EOS_>
 80a0bd0:	7c2b      	ldrb	r3, [r5, #16]
 80a0bd2:	7423      	strb	r3, [r4, #16]
 80a0bd4:	4628      	mov	r0, r5
 80a0bd6:	f000 fd95 	bl	80a1704 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a0bda:	3d14      	subs	r5, #20
 80a0bdc:	3c14      	subs	r4, #20
 80a0bde:	e7f0      	b.n	80a0bc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a0be0:	d00e      	beq.n	80a0c00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0be2:	42ac      	cmp	r4, r5
 80a0be4:	d00c      	beq.n	80a0c00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0be6:	b12e      	cbz	r6, 80a0bf4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0be8:	4621      	mov	r1, r4
 80a0bea:	4630      	mov	r0, r6
 80a0bec:	f000 fd7a 	bl	80a16e4 <_ZN6StringC1EOS_>
 80a0bf0:	7c23      	ldrb	r3, [r4, #16]
 80a0bf2:	7433      	strb	r3, [r6, #16]
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	f000 fd85 	bl	80a1704 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a0bfa:	3414      	adds	r4, #20
 80a0bfc:	3614      	adds	r6, #20
 80a0bfe:	e7f0      	b.n	80a0be2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 80a0c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a0c06:	2300      	movs	r3, #0
 80a0c08:	6003      	str	r3, [r0, #0]
 80a0c0a:	6043      	str	r3, [r0, #4]
 80a0c0c:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0c0e:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0c10:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0c12:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0c14:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0c16:	dd24      	ble.n	80a0c62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a0c18:	f04f 0814 	mov.w	r8, #20
 80a0c1c:	fb08 f006 	mul.w	r0, r8, r6
 80a0c20:	f000 fcc4 	bl	80a15ac <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a0c24:	4605      	mov	r5, r0
 80a0c26:	b1e0      	cbz	r0, 80a0c62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80a0c28:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0c2c:	fb08 1202 	mla	r2, r8, r2, r1
 80a0c30:	f7ff ffb9 	bl	80a0ba6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a0c34:	6820      	ldr	r0, [r4, #0]
 80a0c36:	f000 fcc1 	bl	80a15bc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a0c3a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a0c3c:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a0c3e:	683e      	ldr	r6, [r7, #0]
 80a0c40:	687b      	ldr	r3, [r7, #4]
 80a0c42:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a0c46:	4546      	cmp	r6, r8
 80a0c48:	d009      	beq.n	80a0c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80a0c4a:	b12d      	cbz	r5, 80a0c58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80a0c4c:	4631      	mov	r1, r6
 80a0c4e:	4628      	mov	r0, r5
 80a0c50:	f000 fdc1 	bl	80a17d6 <_ZN6StringC1ERKS_>
 80a0c54:	7c33      	ldrb	r3, [r6, #16]
 80a0c56:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a0c58:	3614      	adds	r6, #20
 80a0c5a:	3514      	adds	r5, #20
 80a0c5c:	e7f3      	b.n	80a0c46 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80a0c5e:	687b      	ldr	r3, [r7, #4]
 80a0c60:	6063      	str	r3, [r4, #4]
    }
}
 80a0c62:	4620      	mov	r0, r4
 80a0c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0c68 <_GLOBAL__sub_I_SystemMode>:
  haveSavedToCloud = false;
  cloudReady = false;
  wifiReady = false;
  connectingToCloud = false;
  haveGotName = false;
}
 80a0c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0c6c:	4b53      	ldr	r3, [pc, #332]	; (80a0dbc <_GLOBAL__sub_I_SystemMode+0x154>)
 80a0c6e:	2502      	movs	r5, #2
 80a0c70:	601d      	str	r5, [r3, #0]
 80a0c72:	4b53      	ldr	r3, [pc, #332]	; (80a0dc0 <_GLOBAL__sub_I_SystemMode+0x158>)
 80a0c74:	b091      	sub	sp, #68	; 0x44
 80a0c76:	2400      	movs	r4, #0
 80a0c78:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0c7a:	f000 fa61 	bl	80a1140 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0c82:	4b50      	ldr	r3, [pc, #320]	; (80a0dc4 <_GLOBAL__sub_I_SystemMode+0x15c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c84:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0c86:	701c      	strb	r4, [r3, #0]
 80a0c88:	805c      	strh	r4, [r3, #2]
 80a0c8a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c8c:	f000 fc0a 	bl	80a14a4 <set_system_mode>
#include "Adafruit_SGP30.h"
//#include "SensorController.h"
//#include "SensorBase.h"

SYSTEM_MODE(SEMI_AUTOMATIC);
STARTUP(setup_Options());
 80a0c90:	f7ff faf4 	bl	80a027c <_Z13setup_Optionsv>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0c94:	4b4c      	ldr	r3, [pc, #304]	; (80a0dc8 <_GLOBAL__sub_I_SystemMode+0x160>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0c96:	ae0c      	add	r6, sp, #48	; 0x30
 80a0c98:	af09      	add	r7, sp, #36	; 0x24
 80a0c9a:	930c      	str	r3, [sp, #48]	; 0x30
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0c9c:	4d4b      	ldr	r5, [pc, #300]	; (80a0dcc <_GLOBAL__sub_I_SystemMode+0x164>)
 80a0c9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0ca2:	4b4b      	ldr	r3, [pc, #300]	; (80a0dd0 <_GLOBAL__sub_I_SystemMode+0x168>)
 80a0ca4:	e887 0003 	stmia.w	r7, {r0, r1}
 80a0ca8:	602b      	str	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0caa:	f105 030c 	add.w	r3, r5, #12
 80a0cae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0cb2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cb6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80a0cba:	e883 0003 	stmia.w	r3, {r0, r1}
 80a0cbe:	4b45      	ldr	r3, [pc, #276]	; (80a0dd4 <_GLOBAL__sub_I_SystemMode+0x16c>)
 80a0cc0:	712c      	strb	r4, [r5, #4]
 80a0cc2:	616b      	str	r3, [r5, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0cc4:	69ab      	ldr	r3, [r5, #24]
 80a0cc6:	60ac      	str	r4, [r5, #8]
 80a0cc8:	930f      	str	r3, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 80a0cca:	4b43      	ldr	r3, [pc, #268]	; (80a0dd8 <_GLOBAL__sub_I_SystemMode+0x170>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0ccc:	4a43      	ldr	r2, [pc, #268]	; (80a0ddc <_GLOBAL__sub_I_SystemMode+0x174>)
 80a0cce:	61ab      	str	r3, [r5, #24]
 80a0cd0:	2301      	movs	r3, #1
 80a0cd2:	9300      	str	r3, [sp, #0]
 80a0cd4:	f241 3188 	movw	r1, #5000	; 0x1388
 80a0cd8:	462b      	mov	r3, r5
 80a0cda:	9401      	str	r4, [sp, #4]
 80a0cdc:	f105 0008 	add.w	r0, r5, #8
    name[0] = '\0';
  }
};

int cloudConnectionDuration = 5000; //ms --will turn off wifi and set isCloudLoop = false
Timer cloudConnectionTimer(5000, cancelWiFiCallback, true);
 80a0ce0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80a0e10 <_GLOBAL__sub_I_SystemMode+0x1a8>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0ce4:	940e      	str	r4, [sp, #56]	; 0x38
 80a0ce6:	f000 fa83 	bl	80a11f0 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cea:	4630      	mov	r0, r6
 80a0cec:	f7ff fa48 	bl	80a0180 <_ZNSt14_Function_baseD1Ev>
 80a0cf0:	4628      	mov	r0, r5
bool isDebugMode = false;
bool isCloudLoop = true;
retained bool isWaitingForBaseValues = true;
const int nSaves = 1;

String WebHookName = "Burnley";
 80a0cf2:	4d3b      	ldr	r5, [pc, #236]	; (80a0de0 <_GLOBAL__sub_I_SystemMode+0x178>)
    name[0] = '\0';
  }
};

int cloudConnectionDuration = 5000; //ms --will turn off wifi and set isCloudLoop = false
Timer cloudConnectionTimer(5000, cancelWiFiCallback, true);
 80a0cf4:	4642      	mov	r2, r8
bool isDebugMode = false;
bool isCloudLoop = true;
retained bool isWaitingForBaseValues = true;
const int nSaves = 1;

String WebHookName = "Burnley";
 80a0cf6:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80a0e14 <_GLOBAL__sub_I_SystemMode+0x1ac>
    name[0] = '\0';
  }
};

int cloudConnectionDuration = 5000; //ms --will turn off wifi and set isCloudLoop = false
Timer cloudConnectionTimer(5000, cancelWiFiCallback, true);
 80a0cfa:	493a      	ldr	r1, [pc, #232]	; (80a0de4 <_GLOBAL__sub_I_SystemMode+0x17c>)
 80a0cfc:	f002 fc78 	bl	80a35f0 <__aeabi_atexit>
bool isDebugMode = false;
bool isCloudLoop = true;
retained bool isWaitingForBaseValues = true;
const int nSaves = 1;

String WebHookName = "Burnley";
 80a0d00:	4939      	ldr	r1, [pc, #228]	; (80a0de8 <_GLOBAL__sub_I_SystemMode+0x180>)
 80a0d02:	4628      	mov	r0, r5
 80a0d04:	f000 fd45 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d08:	4642      	mov	r2, r8
 80a0d0a:	4651      	mov	r1, sl
 80a0d0c:	4628      	mov	r0, r5
 80a0d0e:	f002 fc6f 	bl	80a35f0 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a0d12:	9403      	str	r4, [sp, #12]
 80a0d14:	9404      	str	r4, [sp, #16]
 80a0d16:	9405      	str	r4, [sp, #20]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 80a0d18:	f002 f808 	bl	80a2d2c <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a0d1c:	4d33      	ldr	r5, [pc, #204]	; (80a0dec <_GLOBAL__sub_I_SystemMode+0x184>)
 80a0d1e:	4683      	mov	fp, r0
 80a0d20:	46a9      	mov	r9, r5
 80a0d22:	a903      	add	r1, sp, #12
 80a0d24:	a806      	add	r0, sp, #24
 80a0d26:	f7ff ff6c 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0d2a:	a906      	add	r1, sp, #24
 80a0d2c:	4638      	mov	r0, r7
 80a0d2e:	f7ff ff68 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a0d32:	4b2f      	ldr	r3, [pc, #188]	; (80a0df0 <_GLOBAL__sub_I_SystemMode+0x188>)
 80a0d34:	4639      	mov	r1, r7
 80a0d36:	f849 3b04 	str.w	r3, [r9], #4
 80a0d3a:	4630      	mov	r0, r6
 80a0d3c:	f7ff ff61 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0d40:	4632      	mov	r2, r6
 80a0d42:	211e      	movs	r1, #30
 80a0d44:	4648      	mov	r0, r9
 80a0d46:	f001 fcd4 	bl	80a26f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0d4a:	4630      	mov	r0, r6
 80a0d4c:	f7ff ff18 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0d50:	4638      	mov	r0, r7
 80a0d52:	f7ff ff15 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0d56:	4b27      	ldr	r3, [pc, #156]	; (80a0df4 <_GLOBAL__sub_I_SystemMode+0x18c>)
 80a0d58:	f8c5 b020 	str.w	fp, [r5, #32]
 80a0d5c:	602b      	str	r3, [r5, #0]
 80a0d5e:	a806      	add	r0, sp, #24
 80a0d60:	f7ff ff0e 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0d64:	4b24      	ldr	r3, [pc, #144]	; (80a0df8 <_GLOBAL__sub_I_SystemMode+0x190>)
 80a0d66:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a0d68:	f001 ffe0 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a0d6c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0d70:	f001 ffca 	bl	80a2d08 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0d74:	f001 f93e 	bl	80a1ff4 <_ZN5spark10LogManager8instanceEv>
 80a0d78:	4629      	mov	r1, r5
 80a0d7a:	f001 fc4e 	bl	80a261a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
//int totalTimeOn = 30000; // ms, total allowed time on before forced shutdown.

//////////////////////////////////////////////////////////////
//           SYSTEM VARIABLES
//////////////////////////////////////////////////////////////
SerialLogHandler logHandler;
 80a0d7e:	a803      	add	r0, sp, #12
 80a0d80:	f7ff fefe 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0d84:	4642      	mov	r2, r8
 80a0d86:	491d      	ldr	r1, [pc, #116]	; (80a0dfc <_GLOBAL__sub_I_SystemMode+0x194>)
 80a0d88:	4628      	mov	r0, r5
//SensorController sensors;
Adafruit_SGP30 sgp;
const int nStaticReadings = 13; // DO NOT EDIT! MUST MATCH SENSORCONTROLLER VALUE
String DeviceName = "";
 80a0d8a:	4d1d      	ldr	r5, [pc, #116]	; (80a0e00 <_GLOBAL__sub_I_SystemMode+0x198>)
//int totalTimeOn = 30000; // ms, total allowed time on before forced shutdown.

//////////////////////////////////////////////////////////////
//           SYSTEM VARIABLES
//////////////////////////////////////////////////////////////
SerialLogHandler logHandler;
 80a0d8c:	f002 fc30 	bl	80a35f0 <__aeabi_atexit>
//SensorController sensors;
Adafruit_SGP30 sgp;
 80a0d90:	481c      	ldr	r0, [pc, #112]	; (80a0e04 <_GLOBAL__sub_I_SystemMode+0x19c>)
 80a0d92:	f000 f867 	bl	80a0e64 <_ZN14Adafruit_SGP30C1Ev>
const int nStaticReadings = 13; // DO NOT EDIT! MUST MATCH SENSORCONTROLLER VALUE
String DeviceName = "";
 80a0d96:	491c      	ldr	r1, [pc, #112]	; (80a0e08 <_GLOBAL__sub_I_SystemMode+0x1a0>)
 80a0d98:	4628      	mov	r0, r5
 80a0d9a:	f000 fcfa 	bl	80a1792 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0d9e:	4642      	mov	r2, r8
 80a0da0:	4651      	mov	r1, sl
 80a0da2:	4628      	mov	r0, r5
 80a0da4:	f002 fc24 	bl	80a35f0 <__aeabi_atexit>
        name[i] = newname.charAt(i);
      }
    }
  }

  EEPROMinfo() : flag(0), TVOC_base(0), eCO2_base(0), setGas(false)
 80a0da8:	4b18      	ldr	r3, [pc, #96]	; (80a0e0c <_GLOBAL__sub_I_SystemMode+0x1a4>)
 80a0daa:	701c      	strb	r4, [r3, #0]
 80a0dac:	835c      	strh	r4, [r3, #26]
 80a0dae:	839c      	strh	r4, [r3, #28]
 80a0db0:	779c      	strb	r4, [r3, #30]
  {
    name[0] = '\0';
 80a0db2:	705c      	strb	r4, [r3, #1]
  haveSavedToCloud = false;
  cloudReady = false;
  wifiReady = false;
  connectingToCloud = false;
  haveGotName = false;
}
 80a0db4:	b011      	add	sp, #68	; 0x44
 80a0db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0dba:	bf00      	nop
 80a0dbc:	2000038c 	.word	0x2000038c
 80a0dc0:	200003c7 	.word	0x200003c7
 80a0dc4:	200003ca 	.word	0x200003ca
 80a0dc8:	080a0b51 	.word	0x080a0b51
 80a0dcc:	200003a8 	.word	0x200003a8
 80a0dd0:	080a3b78 	.word	0x080a3b78
 80a0dd4:	080a00d7 	.word	0x080a00d7
 80a0dd8:	080a00d3 	.word	0x080a00d3
 80a0ddc:	080a00fb 	.word	0x080a00fb
 80a0de0:	20000394 	.word	0x20000394
 80a0de4:	080a01c5 	.word	0x080a01c5
 80a0de8:	080a42b1 	.word	0x080a42b1
 80a0dec:	2000040c 	.word	0x2000040c
 80a0df0:	080a3b8c 	.word	0x080a3b8c
 80a0df4:	080a4440 	.word	0x080a4440
 80a0df8:	080a3ba4 	.word	0x080a3ba4
 80a0dfc:	080a0139 	.word	0x080a0139
 80a0e00:	2000037c 	.word	0x2000037c
 80a0e04:	200003d0 	.word	0x200003d0
 80a0e08:	080a3e57 	.word	0x080a3e57
 80a0e0c:	200003e4 	.word	0x200003e4
 80a0e10:	20000378 	.word	0x20000378
 80a0e14:	080a1705 	.word	0x080a1705

080a0e18 <_GLOBAL__sub_I__ZN16SensorController12SetupSensorsEv>:
 80a0e18:	4b03      	ldr	r3, [pc, #12]	; (80a0e28 <_GLOBAL__sub_I__ZN16SensorController12SetupSensorsEv+0x10>)
 80a0e1a:	2200      	movs	r2, #0
 80a0e1c:	701a      	strb	r2, [r3, #0]
 80a0e1e:	4b03      	ldr	r3, [pc, #12]	; (80a0e2c <_GLOBAL__sub_I__ZN16SensorController12SetupSensorsEv+0x14>)
 80a0e20:	2201      	movs	r2, #1
 80a0e22:	701a      	strb	r2, [r3, #0]
 80a0e24:	f000 b98c 	b.w	80a1140 <HAL_Pin_Map>
 80a0e28:	20000435 	.word	0x20000435
 80a0e2c:	20000436 	.word	0x20000436

080a0e30 <_GLOBAL__sub_I__ZN9MCP9808_jC2Ev>:
 80a0e30:	f000 b986 	b.w	80a1140 <HAL_Pin_Map>

080a0e34 <_GLOBAL__sub_I__ZN6BME280C2Ev>:
 80a0e34:	f000 b984 	b.w	80a1140 <HAL_Pin_Map>

080a0e38 <_GLOBAL__sub_I__ZN8ads1115gC2Ev>:
 80a0e38:	f000 b982 	b.w	80a1140 <HAL_Pin_Map>

080a0e3c <_GLOBAL__sub_I__ZN6CCS811C2Ev>:
 80a0e3c:	f000 b980 	b.w	80a1140 <HAL_Pin_Map>

080a0e40 <_GLOBAL__sub_I__ZN5SGP30C2Ev>:
 80a0e40:	f000 b97e 	b.w	80a1140 <HAL_Pin_Map>

080a0e44 <_GLOBAL__sub_I__ZN8VEML6070C2Ev>:
 80a0e44:	f000 b97c 	b.w	80a1140 <HAL_Pin_Map>

080a0e48 <_GLOBAL__sub_I__ZN5HTU21C2Ev>:
 80a0e48:	f000 b97a 	b.w	80a1140 <HAL_Pin_Map>

080a0e4c <_GLOBAL__sub_I__ZN8ads1115vC2Ev>:
 80a0e4c:	f000 b978 	b.w	80a1140 <HAL_Pin_Map>

080a0e50 <_GLOBAL__sub_I__ZN7TSL2561C2Ev>:
 80a0e50:	f000 b976 	b.w	80a1140 <HAL_Pin_Map>

080a0e54 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
 80a0e54:	f000 b974 	b.w	80a1140 <HAL_Pin_Map>

080a0e58 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 80a0e58:	f000 b972 	b.w	80a1140 <HAL_Pin_Map>

080a0e5c <_GLOBAL__sub_I__ZN7MCP9808C2Eh>:
 80a0e5c:	f000 b970 	b.w	80a1140 <HAL_Pin_Map>

080a0e60 <_GLOBAL__sub_I__ZN17Adafruit_VEML60705beginE24veml6070_integrationtime>:
 80a0e60:	f000 b96e 	b.w	80a1140 <HAL_Pin_Map>

080a0e64 <_ZN14Adafruit_SGP30C1Ev>:
/*!
    @brief  Instantiates a new SGP30 class
*/
/**************************************************************************/
Adafruit_SGP30::Adafruit_SGP30() {
}
 80a0e64:	4770      	bx	lr

080a0e66 <_ZN14Adafruit_SGP3011generateCRCEPhh>:
#endif
  }
  return true;
}

uint8_t Adafruit_SGP30::generateCRC(uint8_t *data, uint8_t datalen) {
 80a0e66:	b510      	push	{r4, lr}
 80a0e68:	460c      	mov	r4, r1
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = 0xFF;//SGP30_CRC8_INIT;
 80a0e6a:	20ff      	movs	r0, #255	; 0xff

  for (uint8_t i=0; i<datalen; i++) {
 80a0e6c:	1a63      	subs	r3, r4, r1
 80a0e6e:	b2db      	uxtb	r3, r3
 80a0e70:	429a      	cmp	r2, r3
 80a0e72:	d911      	bls.n	80a0e98 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x32>
    crc ^= data[i];
 80a0e74:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a0e78:	4058      	eors	r0, r3
 80a0e7a:	2308      	movs	r3, #8
    for (uint8_t b=0; b<8; b++) {
      if (crc & 0x80)
 80a0e7c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a0e80:	f103 33ff 	add.w	r3, r3, #4294967295
 80a0e84:	ea4f 0040 	mov.w	r0, r0, lsl #1
	crc = (crc << 1) ^ 0x31;//SGP30_CRC8_POLYNOMIAL;
 80a0e88:	bf18      	it	ne
 80a0e8a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = 0xFF;//SGP30_CRC8_INIT;

  for (uint8_t i=0; i<datalen; i++) {
    crc ^= data[i];
    for (uint8_t b=0; b<8; b++) {
 80a0e8e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      if (crc & 0x80)
	crc = (crc << 1) ^ 0x31;//SGP30_CRC8_POLYNOMIAL;
      else
	crc <<= 1;
 80a0e92:	b2c0      	uxtb	r0, r0
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = 0xFF;//SGP30_CRC8_INIT;

  for (uint8_t i=0; i<datalen; i++) {
    crc ^= data[i];
    for (uint8_t b=0; b<8; b++) {
 80a0e94:	d1f2      	bne.n	80a0e7c <_ZN14Adafruit_SGP3011generateCRCEPhh+0x16>
 80a0e96:	e7e9      	b.n	80a0e6c <_ZN14Adafruit_SGP3011generateCRCEPhh+0x6>
      else
	crc <<= 1;
    }
  }
  return crc;
}
 80a0e98:	bd10      	pop	{r4, pc}

080a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>:
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a0e9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e9e:	4616      	mov	r6, r2
 80a0ea0:	468a      	mov	sl, r1
 80a0ea2:	af00      	add	r7, sp, #0
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a0ea4:	7c01      	ldrb	r1, [r0, #16]
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a0ea6:	4605      	mov	r5, r0
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a0ea8:	68c0      	ldr	r0, [r0, #12]
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a0eaa:	4699      	mov	r9, r3
 80a0eac:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a0eb0:	f002 f882 	bl	80a2fb8 <_ZN7TwoWire17beginTransmissionEh>
 80a0eb4:	3e01      	subs	r6, #1
 80a0eb6:	f10a 38ff 	add.w	r8, sl, #4294967295
 80a0eba:	4456      	add	r6, sl

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a0ebc:	45b0      	cmp	r8, r6
#endif
  }
#ifdef I2C_DEBUG
  Serial.println();
#endif
  _i2c->endTransmission();
 80a0ebe:	68e8      	ldr	r0, [r5, #12]

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a0ec0:	d005      	beq.n	80a0ece <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x34>
    _i2c->write(command[i]);
 80a0ec2:	6803      	ldr	r3, [r0, #0]
 80a0ec4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80a0ec8:	689b      	ldr	r3, [r3, #8]
 80a0eca:	4798      	blx	r3

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a0ecc:	e7f6      	b.n	80a0ebc <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x22>
#endif
  }
#ifdef I2C_DEBUG
  Serial.println();
#endif
  _i2c->endTransmission();
 80a0ece:	f002 f87b 	bl	80a2fc8 <_ZN7TwoWire15endTransmissionEv>

  delay(delayms);
 80a0ed2:	4648      	mov	r0, r9
 80a0ed4:	f001 fdaa 	bl	80a2a2c <delay>

  if (readlen == 0)
 80a0ed8:	2c00      	cmp	r4, #0
 80a0eda:	d03d      	beq.n	80a0f58 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xbe>
    return true;

  uint8_t replylen = readlen * (2 +1);//SGP30_WORD_LEN+1);
 80a0edc:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80a0ee0:	eb04 080a 	add.w	r8, r4, sl
 80a0ee4:	fa5f f888 	uxtb.w	r8, r8
  if (_i2c->requestFrom(_i2caddr, replylen) != replylen)
 80a0ee8:	4642      	mov	r2, r8
 80a0eea:	7c29      	ldrb	r1, [r5, #16]
 80a0eec:	68e8      	ldr	r0, [r5, #12]
 80a0eee:	f002 f860 	bl	80a2fb2 <_ZN7TwoWire11requestFromEhh>
 80a0ef2:	4580      	cmp	r8, r0
 80a0ef4:	d001      	beq.n	80a0efa <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x60>
    return false;
 80a0ef6:	2000      	movs	r0, #0
 80a0ef8:	e02f      	b.n	80a0f5a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xc0>
  uint8_t replybuffer[replylen];
 80a0efa:	f108 0307 	add.w	r3, r8, #7
 80a0efe:	f023 0307 	bic.w	r3, r3, #7
 80a0f02:	ebad 0d03 	sub.w	sp, sp, r3
 80a0f06:	46eb      	mov	fp, sp
 80a0f08:	466e      	mov	r6, sp
 80a0f0a:	46e9      	mov	r9, sp
#ifdef I2C_DEBUG
  Serial.print("\t\t<- ");
#endif
  for (uint8_t i=0; i<replylen; i++) {
 80a0f0c:	ebcb 0309 	rsb	r3, fp, r9
 80a0f10:	b2db      	uxtb	r3, r3
 80a0f12:	4598      	cmp	r8, r3
 80a0f14:	d906      	bls.n	80a0f24 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8a>
    replybuffer[i] = _i2c->read();
 80a0f16:	68e8      	ldr	r0, [r5, #12]
 80a0f18:	6803      	ldr	r3, [r0, #0]
 80a0f1a:	695b      	ldr	r3, [r3, #20]
 80a0f1c:	4798      	blx	r3
 80a0f1e:	f809 0b01 	strb.w	r0, [r9], #1
    return false;
  uint8_t replybuffer[replylen];
#ifdef I2C_DEBUG
  Serial.print("\t\t<- ");
#endif
  for (uint8_t i=0; i<replylen; i++) {
 80a0f22:	e7f3      	b.n	80a0f0c <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x72>
 80a0f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a0f26:	4454      	add	r4, sl
 80a0f28:	f1a3 0802 	sub.w	r8, r3, #2
 80a0f2c:	445c      	add	r4, fp

#ifdef I2C_DEBUG
  Serial.println();
#endif

  for (uint8_t i=0; i<readlen; i++) {
 80a0f2e:	42a6      	cmp	r6, r4
 80a0f30:	d012      	beq.n	80a0f58 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xbe>
    uint8_t crc = generateCRC(replybuffer+i*3, 2);
 80a0f32:	4631      	mov	r1, r6
 80a0f34:	2202      	movs	r2, #2
 80a0f36:	4628      	mov	r0, r5
 80a0f38:	f7ff ff95 	bl	80a0e66 <_ZN14Adafruit_SGP3011generateCRCEPhh>
 80a0f3c:	3603      	adds	r6, #3
#ifdef I2C_DEBUG
    Serial.print("\t\tCRC calced: 0x"); Serial.print(crc, HEX);
    Serial.print(" vs. 0x"); Serial.println(replybuffer[i * 3 + 2], HEX);
#endif
    if (crc != replybuffer[i * 3 + 2])
 80a0f3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a0f42:	4283      	cmp	r3, r0
 80a0f44:	d1d7      	bne.n	80a0ef6 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x5c>
      return false;
    // success! store it
    readdata[i] = replybuffer[i*3];
    readdata[i] <<= 8;
    readdata[i] |= replybuffer[i*3 + 1];
 80a0f46:	f816 2c03 	ldrb.w	r2, [r6, #-3]
 80a0f4a:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 80a0f4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a0f52:	f828 3f02 	strh.w	r3, [r8, #2]!

#ifdef I2C_DEBUG
  Serial.println();
#endif

  for (uint8_t i=0; i<readlen; i++) {
 80a0f56:	e7ea      	b.n	80a0f2e <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x94>
  _i2c->endTransmission();

  delay(delayms);

  if (readlen == 0)
    return true;
 80a0f58:	2001      	movs	r0, #1
#ifdef I2C_DEBUG
    Serial.print("\t\tRead: 0x"); Serial.println(readdata[i], HEX);
#endif
  }
  return true;
}
 80a0f5a:	46bd      	mov	sp, r7
 80a0f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f60 <_ZN14Adafruit_SGP307IAQinitEv>:
/*!
    @brief  Commands the sensor to begin the IAQ algorithm. Must be called after startup.
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQinit(void) {
 80a0f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t command[2];
  command[0] = 0x20;
 80a0f62:	2320      	movs	r3, #32
 80a0f64:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x03;
 80a0f68:	2303      	movs	r3, #3
 80a0f6a:	f88d 300d 	strb.w	r3, [sp, #13]
  return readWordFromCommand(command, 2, 10);
 80a0f6e:	2300      	movs	r3, #0
 80a0f70:	9301      	str	r3, [sp, #4]
 80a0f72:	9300      	str	r3, [sp, #0]
 80a0f74:	2202      	movs	r2, #2
 80a0f76:	230a      	movs	r3, #10
 80a0f78:	a903      	add	r1, sp, #12
 80a0f7a:	f7ff ff8e 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
 80a0f7e:	b005      	add	sp, #20
 80a0f80:	f85d fb04 	ldr.w	pc, [sp], #4

080a0f84 <_ZN14Adafruit_SGP305beginEP7TwoWire>:
    then reads the serialnumber and checks that we are talking to an SGP30
    @param  theWire Optional pointer to I2C interface, otherwise use Wire
    @returns True if SGP30 found on I2C, False if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::begin(TwoWire *theWire) {
 80a0f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _i2caddr = 0x58;//SGP30_I2CADDR_DEFAULT;
 80a0f86:	2358      	movs	r3, #88	; 0x58
    then reads the serialnumber and checks that we are talking to an SGP30
    @param  theWire Optional pointer to I2C interface, otherwise use Wire
    @returns True if SGP30 found on I2C, False if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::begin(TwoWire *theWire) {
 80a0f88:	4604      	mov	r4, r0
  _i2caddr = 0x58;//SGP30_I2CADDR_DEFAULT;
 80a0f8a:	7403      	strb	r3, [r0, #16]
  if (theWire == NULL) {
 80a0f8c:	b919      	cbnz	r1, 80a0f96 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x12>
    _i2c = &Wire;
 80a0f8e:	f002 fb0f 	bl	80a35b0 <_Z19__fetch_global_Wirev>
 80a0f92:	60e0      	str	r0, [r4, #12]
 80a0f94:	e000      	b.n	80a0f98 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x14>
  } else {
    _i2c = theWire;
 80a0f96:	60c1      	str	r1, [r0, #12]
  }

  _i2c->begin();
 80a0f98:	68e0      	ldr	r0, [r4, #12]
 80a0f9a:	f001 fffb 	bl	80a2f94 <_ZN7TwoWire5beginEv>


  uint8_t command[2];
  command[0] = 0x36;
 80a0f9e:	2336      	movs	r3, #54	; 0x36
 80a0fa0:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x82;
 80a0fa4:	2382      	movs	r3, #130	; 0x82
 80a0fa6:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! readWordFromCommand(command, 2, 10, serialnumber, 3))
 80a0faa:	2303      	movs	r3, #3
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	1d23      	adds	r3, r4, #4
 80a0fb0:	9300      	str	r3, [sp, #0]
 80a0fb2:	2202      	movs	r2, #2
 80a0fb4:	230a      	movs	r3, #10
 80a0fb6:	a903      	add	r1, sp, #12
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	f7ff ff6e 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a0fbe:	b908      	cbnz	r0, 80a0fc4 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x40>
    return false;
 80a0fc0:	2000      	movs	r0, #0
 80a0fc2:	e019      	b.n	80a0ff8 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x74>

  uint16_t featureset;
  command[0] = 0x20;
 80a0fc4:	2320      	movs	r3, #32
 80a0fc6:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x2F;
 80a0fca:	232f      	movs	r3, #47	; 0x2f
 80a0fcc:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! readWordFromCommand(command, 2, 10, &featureset, 1))
 80a0fd0:	2301      	movs	r3, #1
 80a0fd2:	9301      	str	r3, [sp, #4]
 80a0fd4:	f10d 030e 	add.w	r3, sp, #14
 80a0fd8:	9300      	str	r3, [sp, #0]
 80a0fda:	2202      	movs	r2, #2
 80a0fdc:	230a      	movs	r3, #10
 80a0fde:	a903      	add	r1, sp, #12
 80a0fe0:	4620      	mov	r0, r4
 80a0fe2:	f7ff ff5a 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a0fe6:	2800      	cmp	r0, #0
 80a0fe8:	d0ea      	beq.n	80a0fc0 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x3c>
    return false;
  //Serial.print("Featureset 0x"); Serial.println(featureset, HEX);
  if (featureset != 0x0020)//SGP30_FEATURESET)
 80a0fea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a0fee:	2b20      	cmp	r3, #32
 80a0ff0:	d1e6      	bne.n	80a0fc0 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x3c>
    return false;
  if (! IAQinit())
 80a0ff2:	4620      	mov	r0, r4
 80a0ff4:	f7ff ffb4 	bl	80a0f60 <_ZN14Adafruit_SGP307IAQinitEv>
    return false;

  return true;
}
 80a0ff8:	b004      	add	sp, #16
 80a0ffa:	bd10      	pop	{r4, pc}

080a0ffc <_ZN14Adafruit_SGP3010IAQmeasureEv>:
/*!
    @brief  Commands the sensor to take a single eCO2/VOC measurement. Places results in {@link TVOC} and {@link eCO2}
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQmeasure(void) {
 80a0ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t command[2];
  command[0] = 0x20;
 80a0ffe:	2320      	movs	r3, #32
 80a1000:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x08;
 80a1004:	2308      	movs	r3, #8
 80a1006:	f88d 3009 	strb.w	r3, [sp, #9]
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 12, reply, 2))
 80a100a:	2202      	movs	r2, #2
 80a100c:	ab03      	add	r3, sp, #12
 80a100e:	9300      	str	r3, [sp, #0]
 80a1010:	9201      	str	r2, [sp, #4]
 80a1012:	230c      	movs	r3, #12
 80a1014:	a902      	add	r1, sp, #8
/*!
    @brief  Commands the sensor to take a single eCO2/VOC measurement. Places results in {@link TVOC} and {@link eCO2}
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQmeasure(void) {
 80a1016:	4604      	mov	r4, r0
  uint8_t command[2];
  command[0] = 0x20;
  command[1] = 0x08;
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 12, reply, 2))
 80a1018:	f7ff ff3f 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a101c:	b128      	cbz	r0, 80a102a <_ZN14Adafruit_SGP3010IAQmeasureEv+0x2e>
    return false;
  TVOC = reply[1];
 80a101e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1022:	8023      	strh	r3, [r4, #0]
  eCO2 = reply[0];
 80a1024:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80a1028:	8063      	strh	r3, [r4, #2]
  return true;
}
 80a102a:	b004      	add	sp, #16
 80a102c:	bd10      	pop	{r4, pc}

080a102e <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_>:
    @param eco2_base A pointer to a uint16_t which we will save the calibration value to
    @param tvoc_base A pointer to a uint16_t which we will save the calibration value to
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::getIAQBaseline(uint16_t *eco2_base, uint16_t *tvoc_base) {
 80a102e:	b530      	push	{r4, r5, lr}
  uint8_t command[2];
  command[0] = 0x20;
 80a1030:	2320      	movs	r3, #32
    @param eco2_base A pointer to a uint16_t which we will save the calibration value to
    @param tvoc_base A pointer to a uint16_t which we will save the calibration value to
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::getIAQBaseline(uint16_t *eco2_base, uint16_t *tvoc_base) {
 80a1032:	b085      	sub	sp, #20
  uint8_t command[2];
  command[0] = 0x20;
 80a1034:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x15;
 80a1038:	2315      	movs	r3, #21
    @param eco2_base A pointer to a uint16_t which we will save the calibration value to
    @param tvoc_base A pointer to a uint16_t which we will save the calibration value to
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::getIAQBaseline(uint16_t *eco2_base, uint16_t *tvoc_base) {
 80a103a:	4614      	mov	r4, r2
  uint8_t command[2];
  command[0] = 0x20;
  command[1] = 0x15;
 80a103c:	f88d 3009 	strb.w	r3, [sp, #9]
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 10, reply, 2))
 80a1040:	2202      	movs	r2, #2
 80a1042:	ab03      	add	r3, sp, #12
    @param eco2_base A pointer to a uint16_t which we will save the calibration value to
    @param tvoc_base A pointer to a uint16_t which we will save the calibration value to
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::getIAQBaseline(uint16_t *eco2_base, uint16_t *tvoc_base) {
 80a1044:	460d      	mov	r5, r1
  uint8_t command[2];
  command[0] = 0x20;
  command[1] = 0x15;
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 10, reply, 2))
 80a1046:	9300      	str	r3, [sp, #0]
 80a1048:	9201      	str	r2, [sp, #4]
 80a104a:	230a      	movs	r3, #10
 80a104c:	a902      	add	r1, sp, #8
 80a104e:	f7ff ff24 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a1052:	b128      	cbz	r0, 80a1060 <_ZN14Adafruit_SGP3014getIAQBaselineEPtS0_+0x32>
    return false;
  *eco2_base = reply[0];
 80a1054:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80a1058:	802b      	strh	r3, [r5, #0]
  *tvoc_base = reply[1];
 80a105a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a105e:	8023      	strh	r3, [r4, #0]
  return true;
}
 80a1060:	b005      	add	sp, #20
 80a1062:	bd30      	pop	{r4, r5, pc}

080a1064 <_ZN14Adafruit_SGP3014setIAQBaselineEtt>:
    @param eco2_base A uint16_t which we will save the calibration value from
    @param tvoc_base A uint16_t which we will save the calibration value from
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::setIAQBaseline(uint16_t eco2_base, uint16_t tvoc_base) {
 80a1064:	b530      	push	{r4, r5, lr}
  uint8_t command[8];
  command[0] = 0x20;
 80a1066:	2320      	movs	r3, #32
    @param eco2_base A uint16_t which we will save the calibration value from
    @param tvoc_base A uint16_t which we will save the calibration value from
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::setIAQBaseline(uint16_t eco2_base, uint16_t tvoc_base) {
 80a1068:	b085      	sub	sp, #20
  uint8_t command[8];
  command[0] = 0x20;
 80a106a:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x1e;
 80a106e:	231e      	movs	r3, #30
    @param eco2_base A uint16_t which we will save the calibration value from
    @param tvoc_base A uint16_t which we will save the calibration value from
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::setIAQBaseline(uint16_t eco2_base, uint16_t tvoc_base) {
 80a1070:	460d      	mov	r5, r1
  uint8_t command[8];
  command[0] = 0x20;
  command[1] = 0x1e;
 80a1072:	f88d 3009 	strb.w	r3, [sp, #9]
  command[2] = tvoc_base >> 8;
  command[3] = tvoc_base & 0xFF;
 80a1076:	f88d 200b 	strb.w	r2, [sp, #11]
/**************************************************************************/
boolean Adafruit_SGP30::setIAQBaseline(uint16_t eco2_base, uint16_t tvoc_base) {
  uint8_t command[8];
  command[0] = 0x20;
  command[1] = 0x1e;
  command[2] = tvoc_base >> 8;
 80a107a:	1213      	asrs	r3, r2, #8
  command[3] = tvoc_base & 0xFF;
  command[4] = generateCRC(command+2, 2);
 80a107c:	f10d 010a 	add.w	r1, sp, #10
 80a1080:	2202      	movs	r2, #2
    @param eco2_base A uint16_t which we will save the calibration value from
    @param tvoc_base A uint16_t which we will save the calibration value from
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::setIAQBaseline(uint16_t eco2_base, uint16_t tvoc_base) {
 80a1082:	4604      	mov	r4, r0
  uint8_t command[8];
  command[0] = 0x20;
  command[1] = 0x1e;
  command[2] = tvoc_base >> 8;
 80a1084:	f88d 300a 	strb.w	r3, [sp, #10]
  command[3] = tvoc_base & 0xFF;
  command[4] = generateCRC(command+2, 2);
 80a1088:	f7ff feed 	bl	80a0e66 <_ZN14Adafruit_SGP3011generateCRCEPhh>
  command[5] = eco2_base >> 8;
 80a108c:	122b      	asrs	r3, r5, #8
  uint8_t command[8];
  command[0] = 0x20;
  command[1] = 0x1e;
  command[2] = tvoc_base >> 8;
  command[3] = tvoc_base & 0xFF;
  command[4] = generateCRC(command+2, 2);
 80a108e:	f88d 000c 	strb.w	r0, [sp, #12]
  command[5] = eco2_base >> 8;
  command[6] = eco2_base & 0xFF;
  command[7] = generateCRC(command+5, 2);
 80a1092:	f10d 010d 	add.w	r1, sp, #13
 80a1096:	2202      	movs	r2, #2
 80a1098:	4620      	mov	r0, r4
  command[0] = 0x20;
  command[1] = 0x1e;
  command[2] = tvoc_base >> 8;
  command[3] = tvoc_base & 0xFF;
  command[4] = generateCRC(command+2, 2);
  command[5] = eco2_base >> 8;
 80a109a:	f88d 300d 	strb.w	r3, [sp, #13]
  command[6] = eco2_base & 0xFF;
 80a109e:	f88d 500e 	strb.w	r5, [sp, #14]
  command[7] = generateCRC(command+5, 2);
 80a10a2:	f7ff fee0 	bl	80a0e66 <_ZN14Adafruit_SGP3011generateCRCEPhh>

  return readWordFromCommand(command, 8, 10);
 80a10a6:	2300      	movs	r3, #0
 80a10a8:	2208      	movs	r2, #8
  command[2] = tvoc_base >> 8;
  command[3] = tvoc_base & 0xFF;
  command[4] = generateCRC(command+2, 2);
  command[5] = eco2_base >> 8;
  command[6] = eco2_base & 0xFF;
  command[7] = generateCRC(command+5, 2);
 80a10aa:	f88d 000f 	strb.w	r0, [sp, #15]

  return readWordFromCommand(command, 8, 10);
 80a10ae:	9301      	str	r3, [sp, #4]
 80a10b0:	9300      	str	r3, [sp, #0]
 80a10b2:	eb0d 0102 	add.w	r1, sp, r2
 80a10b6:	230a      	movs	r3, #10
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	f7ff feee 	bl	80a0e9a <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
 80a10be:	b005      	add	sp, #20
 80a10c0:	bd30      	pop	{r4, r5, pc}

080a10c2 <_GLOBAL__sub_I__ZN14Adafruit_SGP30C2Ev>:
 80a10c2:	f000 b83d 	b.w	80a1140 <HAL_Pin_Map>

080a10c6 <_GLOBAL__sub_I__ZN16Adafruit_TSL2591C2El>:
 80a10c6:	f000 b83b 	b.w	80a1140 <HAL_Pin_Map>

080a10ca <_GLOBAL__sub_I__ZN15Adafruit_CCS8115beginEh>:
 80a10ca:	f000 b839 	b.w	80a1140 <HAL_Pin_Map>

080a10ce <_GLOBAL__sub_I_MinimumSerial.cpp>:
 80a10ce:	f000 b837 	b.w	80a1140 <HAL_Pin_Map>

080a10d2 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80a10d2:	f000 b835 	b.w	80a1140 <HAL_Pin_Map>

080a10d6 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80a10d6:	f000 b833 	b.w	80a1140 <HAL_Pin_Map>

080a10da <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80a10da:	f000 b831 	b.w	80a1140 <HAL_Pin_Map>

080a10de <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80a10de:	f000 b82f 	b.w	80a1140 <HAL_Pin_Map>

080a10e2 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80a10e2:	f000 b82d 	b.w	80a1140 <HAL_Pin_Map>

080a10e6 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80a10e6:	f000 b82b 	b.w	80a1140 <HAL_Pin_Map>

080a10ea <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a10ea:	b570      	push	{r4, r5, r6, lr}
 80a10ec:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a10ee:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a10f0:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a10f2:	b149      	cbz	r1, 80a1108 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a10f4:	f002 fc72 	bl	80a39dc <strlen>
 80a10f8:	682b      	ldr	r3, [r5, #0]
 80a10fa:	4602      	mov	r2, r0
 80a10fc:	4621      	mov	r1, r4
 80a10fe:	4628      	mov	r0, r5
    }
 80a1100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1104:	68db      	ldr	r3, [r3, #12]
 80a1106:	4718      	bx	r3
    }
 80a1108:	bd70      	pop	{r4, r5, r6, pc}

080a110a <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80a110a:	f000 b819 	b.w	80a1140 <HAL_Pin_Map>

080a110e <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80a110e:	f000 b817 	b.w	80a1140 <HAL_Pin_Map>

080a1112 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80a1112:	f000 b815 	b.w	80a1140 <HAL_Pin_Map>

080a1116 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 80a1116:	f000 b813 	b.w	80a1140 <HAL_Pin_Map>

080a111a <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 80a111a:	f000 b811 	b.w	80a1140 <HAL_Pin_Map>

080a111e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80a111e:	f000 b80f 	b.w	80a1140 <HAL_Pin_Map>

080a1122 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80a1122:	f000 b80d 	b.w	80a1140 <HAL_Pin_Map>

080a1126 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80a1126:	f000 b80b 	b.w	80a1140 <HAL_Pin_Map>

080a112a <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 80a112a:	f000 b809 	b.w	80a1140 <HAL_Pin_Map>

080a112e <_GLOBAL__sub_I__ZN14RunningAverageC2Eh>:
 80a112e:	f000 b807 	b.w	80a1140 <HAL_Pin_Map>

080a1132 <_GLOBAL__sub_I__ZN15Adafruit_Sensor11constructorEv>:
 80a1132:	f000 b805 	b.w	80a1140 <HAL_Pin_Map>

080a1136 <_GLOBAL__sub_I__ZN24Adafruit_TSL2561_Unified6write8Ehm>:
 80a1136:	f000 b803 	b.w	80a1140 <HAL_Pin_Map>

080a113a <_GLOBAL__sub_I__ZN16Adafruit_HTU21DFC2Ev>:
 80a113a:	f000 b801 	b.w	80a1140 <HAL_Pin_Map>
	...

080a1140 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1140:	b508      	push	{r3, lr}
 80a1142:	4b02      	ldr	r3, [pc, #8]	; (80a114c <HAL_Pin_Map+0xc>)
 80a1144:	681b      	ldr	r3, [r3, #0]
 80a1146:	681b      	ldr	r3, [r3, #0]
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	bd08      	pop	{r3, pc}
 80a114c:	080601b0 	.word	0x080601b0

080a1150 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1150:	b508      	push	{r3, lr}
 80a1152:	4b02      	ldr	r3, [pc, #8]	; (80a115c <HAL_SPI_Init+0xc>)
 80a1154:	681b      	ldr	r3, [r3, #0]
 80a1156:	69db      	ldr	r3, [r3, #28]
 80a1158:	9301      	str	r3, [sp, #4]
 80a115a:	bd08      	pop	{r3, pc}
 80a115c:	080601b4 	.word	0x080601b4

080a1160 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1160:	b508      	push	{r3, lr}
 80a1162:	4b02      	ldr	r3, [pc, #8]	; (80a116c <HAL_RNG_GetRandomNumber+0xc>)
 80a1164:	681b      	ldr	r3, [r3, #0]
 80a1166:	685b      	ldr	r3, [r3, #4]
 80a1168:	9301      	str	r3, [sp, #4]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	0806019c 	.word	0x0806019c

080a1170 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1170:	b508      	push	{r3, lr}
 80a1172:	4b02      	ldr	r3, [pc, #8]	; (80a117c <HAL_Delay_Microseconds+0xc>)
 80a1174:	681b      	ldr	r3, [r3, #0]
 80a1176:	68db      	ldr	r3, [r3, #12]
 80a1178:	9301      	str	r3, [sp, #4]
 80a117a:	bd08      	pop	{r3, pc}
 80a117c:	0806019c 	.word	0x0806019c

080a1180 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1180:	b508      	push	{r3, lr}
 80a1182:	4b02      	ldr	r3, [pc, #8]	; (80a118c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1184:	681b      	ldr	r3, [r3, #0]
 80a1186:	695b      	ldr	r3, [r3, #20]
 80a1188:	9301      	str	r3, [sp, #4]
 80a118a:	bd08      	pop	{r3, pc}
 80a118c:	0806019c 	.word	0x0806019c

080a1190 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a1190:	b508      	push	{r3, lr}
 80a1192:	4b02      	ldr	r3, [pc, #8]	; (80a119c <HAL_EEPROM_Init+0xc>)
 80a1194:	681b      	ldr	r3, [r3, #0]
 80a1196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1198:	9301      	str	r3, [sp, #4]
 80a119a:	bd08      	pop	{r3, pc}
 80a119c:	0806019c 	.word	0x0806019c

080a11a0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a11a0:	b508      	push	{r3, lr}
 80a11a2:	4b02      	ldr	r3, [pc, #8]	; (80a11ac <HAL_EEPROM_Get+0xc>)
 80a11a4:	681b      	ldr	r3, [r3, #0]
 80a11a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a11a8:	9301      	str	r3, [sp, #4]
 80a11aa:	bd08      	pop	{r3, pc}
 80a11ac:	0806019c 	.word	0x0806019c

080a11b0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a11b0:	b508      	push	{r3, lr}
 80a11b2:	4b02      	ldr	r3, [pc, #8]	; (80a11bc <HAL_EEPROM_Put+0xc>)
 80a11b4:	681b      	ldr	r3, [r3, #0]
 80a11b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a11b8:	9301      	str	r3, [sp, #4]
 80a11ba:	bd08      	pop	{r3, pc}
 80a11bc:	0806019c 	.word	0x0806019c

080a11c0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a11c0:	b508      	push	{r3, lr}
 80a11c2:	4b02      	ldr	r3, [pc, #8]	; (80a11cc <HAL_Feature_Set+0xc>)
 80a11c4:	681b      	ldr	r3, [r3, #0]
 80a11c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a11c8:	9301      	str	r3, [sp, #4]
 80a11ca:	bd08      	pop	{r3, pc}
 80a11cc:	080601b8 	.word	0x080601b8

080a11d0 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <os_thread_yield+0xc>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	68db      	ldr	r3, [r3, #12]
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	bd08      	pop	{r3, pc}
 80a11dc:	080601d0 	.word	0x080601d0

080a11e0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a11e0:	b508      	push	{r3, lr}
 80a11e2:	4b02      	ldr	r3, [pc, #8]	; (80a11ec <os_thread_scheduling+0xc>)
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	69db      	ldr	r3, [r3, #28]
 80a11e8:	9301      	str	r3, [sp, #4]
 80a11ea:	bd08      	pop	{r3, pc}
 80a11ec:	080601d0 	.word	0x080601d0

080a11f0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a11f0:	b508      	push	{r3, lr}
 80a11f2:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <os_timer_create+0xc>)
 80a11f4:	681b      	ldr	r3, [r3, #0]
 80a11f6:	6a1b      	ldr	r3, [r3, #32]
 80a11f8:	9301      	str	r3, [sp, #4]
 80a11fa:	bd08      	pop	{r3, pc}
 80a11fc:	080601d0 	.word	0x080601d0

080a1200 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a1200:	b508      	push	{r3, lr}
 80a1202:	4b02      	ldr	r3, [pc, #8]	; (80a120c <os_timer_destroy+0xc>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1208:	9301      	str	r3, [sp, #4]
 80a120a:	bd08      	pop	{r3, pc}
 80a120c:	080601d0 	.word	0x080601d0

080a1210 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <os_timer_get_id+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601d0 	.word	0x080601d0

080a1220 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <os_timer_change+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601d0 	.word	0x080601d0

080a1230 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <os_mutex_create+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601d0 	.word	0x080601d0

080a1240 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <os_mutex_recursive_create+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601d0 	.word	0x080601d0

080a1250 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <os_mutex_recursive_lock+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601d0 	.word	0x080601d0

080a1260 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <os_mutex_recursive_unlock+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601d0 	.word	0x080601d0

080a1270 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <os_timer_set_id+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601d0 	.word	0x080601d0

080a1280 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <HAL_USART_Init+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	699b      	ldr	r3, [r3, #24]
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601c4 	.word	0x080601c4

080a1290 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <HAL_USART_End+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	6a1b      	ldr	r3, [r3, #32]
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601c4 	.word	0x080601c4

080a12a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <HAL_USART_Write_Data+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601c4 	.word	0x080601c4

080a12b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <HAL_USART_Available_Data+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601c4 	.word	0x080601c4

080a12c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <HAL_USART_Read_Data+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601c4 	.word	0x080601c4

080a12d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <HAL_USART_Peek_Data+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601c4 	.word	0x080601c4

080a12e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <HAL_USART_Flush_Data+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601c4 	.word	0x080601c4

080a12f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_USART_Available_Data_For_Write+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601c4 	.word	0x080601c4

080a1300 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <HAL_USART_BeginConfig+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601c4 	.word	0x080601c4

080a1310 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_I2C_Begin+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601ac 	.word	0x080601ac

080a1320 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_I2C_Request_Data+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601ac 	.word	0x080601ac

080a1330 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_I2C_Begin_Transmission+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601ac 	.word	0x080601ac

080a1340 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_I2C_End_Transmission+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601ac 	.word	0x080601ac

080a1350 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_I2C_Write_Data+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601ac 	.word	0x080601ac

080a1360 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_I2C_Available_Data+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601ac 	.word	0x080601ac

080a1370 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_I2C_Read_Data+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601ac 	.word	0x080601ac

080a1380 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_I2C_Peek_Data+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601ac 	.word	0x080601ac

080a1390 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_I2C_Flush_Data+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601ac 	.word	0x080601ac

080a13a0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b03      	ldr	r3, [pc, #12]	; (80a13b0 <HAL_I2C_Init+0x10>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a13aa:	9301      	str	r3, [sp, #4]
 80a13ac:	bd08      	pop	{r3, pc}
 80a13ae:	0000      	.short	0x0000
 80a13b0:	080601ac 	.word	0x080601ac

080a13b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a13b4:	b508      	push	{r3, lr}
 80a13b6:	4b02      	ldr	r3, [pc, #8]	; (80a13c0 <HAL_USB_USART_Init+0xc>)
 80a13b8:	681b      	ldr	r3, [r3, #0]
 80a13ba:	681b      	ldr	r3, [r3, #0]
 80a13bc:	9301      	str	r3, [sp, #4]
 80a13be:	bd08      	pop	{r3, pc}
 80a13c0:	080601d8 	.word	0x080601d8

080a13c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a13c4:	b508      	push	{r3, lr}
 80a13c6:	4b02      	ldr	r3, [pc, #8]	; (80a13d0 <HAL_USB_USART_Begin+0xc>)
 80a13c8:	681b      	ldr	r3, [r3, #0]
 80a13ca:	685b      	ldr	r3, [r3, #4]
 80a13cc:	9301      	str	r3, [sp, #4]
 80a13ce:	bd08      	pop	{r3, pc}
 80a13d0:	080601d8 	.word	0x080601d8

080a13d4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a13d4:	b508      	push	{r3, lr}
 80a13d6:	4b02      	ldr	r3, [pc, #8]	; (80a13e0 <HAL_USB_USART_End+0xc>)
 80a13d8:	681b      	ldr	r3, [r3, #0]
 80a13da:	689b      	ldr	r3, [r3, #8]
 80a13dc:	9301      	str	r3, [sp, #4]
 80a13de:	bd08      	pop	{r3, pc}
 80a13e0:	080601d8 	.word	0x080601d8

080a13e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a13e4:	b508      	push	{r3, lr}
 80a13e6:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <HAL_USB_USART_Available_Data+0xc>)
 80a13e8:	681b      	ldr	r3, [r3, #0]
 80a13ea:	691b      	ldr	r3, [r3, #16]
 80a13ec:	9301      	str	r3, [sp, #4]
 80a13ee:	bd08      	pop	{r3, pc}
 80a13f0:	080601d8 	.word	0x080601d8

080a13f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a13f4:	b508      	push	{r3, lr}
 80a13f6:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a13f8:	681b      	ldr	r3, [r3, #0]
 80a13fa:	695b      	ldr	r3, [r3, #20]
 80a13fc:	9301      	str	r3, [sp, #4]
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	080601d8 	.word	0x080601d8

080a1404 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <HAL_USB_USART_Receive_Data+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	699b      	ldr	r3, [r3, #24]
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601d8 	.word	0x080601d8

080a1414 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <HAL_USB_USART_Send_Data+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	69db      	ldr	r3, [r3, #28]
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601d8 	.word	0x080601d8

080a1424 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <HAL_USB_USART_Flush_Data+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	6a1b      	ldr	r3, [r3, #32]
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601d8 	.word	0x080601d8

080a1434 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <HAL_USB_USART_Is_Connected+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601d8 	.word	0x080601d8

080a1444 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <inet_gethostbyname+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601c0 	.word	0x080601c0

080a1454 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <wlan_select_antenna+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601c0 	.word	0x080601c0

080a1464 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <panic_+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080201a8 	.word	0x080201a8

080a1474 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <log_message_v+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080201a8 	.word	0x080201a8

080a1484 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <log_level_name+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080201a8 	.word	0x080201a8

080a1494 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b02      	ldr	r3, [pc, #8]	; (80a14a0 <log_set_callbacks+0xc>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a149c:	9301      	str	r3, [sp, #4]
 80a149e:	bd08      	pop	{r3, pc}
 80a14a0:	080201a8 	.word	0x080201a8

080a14a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a14a4:	b508      	push	{r3, lr}
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <set_system_mode+0xc>)
 80a14a8:	681b      	ldr	r3, [r3, #0]
 80a14aa:	685b      	ldr	r3, [r3, #4]
 80a14ac:	9301      	str	r3, [sp, #4]
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	080601a4 	.word	0x080601a4

080a14b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <system_delay_ms+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	695b      	ldr	r3, [r3, #20]
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601a4 	.word	0x080601a4

080a14c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b03      	ldr	r3, [pc, #12]	; (80a14d4 <system_ctrl_set_app_request_handler+0x10>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a14ce:	9301      	str	r3, [sp, #4]
 80a14d0:	bd08      	pop	{r3, pc}
 80a14d2:	0000      	.short	0x0000
 80a14d4:	080601a4 	.word	0x080601a4

080a14d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b03      	ldr	r3, [pc, #12]	; (80a14e8 <system_ctrl_set_result+0x10>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a14e2:	9301      	str	r3, [sp, #4]
 80a14e4:	bd08      	pop	{r3, pc}
 80a14e6:	0000      	.short	0x0000
 80a14e8:	080601a4 	.word	0x080601a4

080a14ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14ec:	b508      	push	{r3, lr}
 80a14ee:	4b02      	ldr	r3, [pc, #8]	; (80a14f8 <network_connect+0xc>)
 80a14f0:	681b      	ldr	r3, [r3, #0]
 80a14f2:	685b      	ldr	r3, [r3, #4]
 80a14f4:	9301      	str	r3, [sp, #4]
 80a14f6:	bd08      	pop	{r3, pc}
 80a14f8:	080601c8 	.word	0x080601c8

080a14fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a14fc:	b508      	push	{r3, lr}
 80a14fe:	4b02      	ldr	r3, [pc, #8]	; (80a1508 <network_connecting+0xc>)
 80a1500:	681b      	ldr	r3, [r3, #0]
 80a1502:	689b      	ldr	r3, [r3, #8]
 80a1504:	9301      	str	r3, [sp, #4]
 80a1506:	bd08      	pop	{r3, pc}
 80a1508:	080601c8 	.word	0x080601c8

080a150c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a150c:	b508      	push	{r3, lr}
 80a150e:	4b02      	ldr	r3, [pc, #8]	; (80a1518 <network_disconnect+0xc>)
 80a1510:	681b      	ldr	r3, [r3, #0]
 80a1512:	68db      	ldr	r3, [r3, #12]
 80a1514:	9301      	str	r3, [sp, #4]
 80a1516:	bd08      	pop	{r3, pc}
 80a1518:	080601c8 	.word	0x080601c8

080a151c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a151c:	b508      	push	{r3, lr}
 80a151e:	4b02      	ldr	r3, [pc, #8]	; (80a1528 <network_ready+0xc>)
 80a1520:	681b      	ldr	r3, [r3, #0]
 80a1522:	691b      	ldr	r3, [r3, #16]
 80a1524:	9301      	str	r3, [sp, #4]
 80a1526:	bd08      	pop	{r3, pc}
 80a1528:	080601c8 	.word	0x080601c8

080a152c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a152c:	b508      	push	{r3, lr}
 80a152e:	4b02      	ldr	r3, [pc, #8]	; (80a1538 <network_on+0xc>)
 80a1530:	681b      	ldr	r3, [r3, #0]
 80a1532:	695b      	ldr	r3, [r3, #20]
 80a1534:	9301      	str	r3, [sp, #4]
 80a1536:	bd08      	pop	{r3, pc}
 80a1538:	080601c8 	.word	0x080601c8

080a153c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a153c:	b508      	push	{r3, lr}
 80a153e:	4b02      	ldr	r3, [pc, #8]	; (80a1548 <network_off+0xc>)
 80a1540:	681b      	ldr	r3, [r3, #0]
 80a1542:	699b      	ldr	r3, [r3, #24]
 80a1544:	9301      	str	r3, [sp, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	080601c8 	.word	0x080601c8

080a154c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a154c:	b508      	push	{r3, lr}
 80a154e:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <network_listen+0xc>)
 80a1550:	681b      	ldr	r3, [r3, #0]
 80a1552:	69db      	ldr	r3, [r3, #28]
 80a1554:	9301      	str	r3, [sp, #4]
 80a1556:	bd08      	pop	{r3, pc}
 80a1558:	080601c8 	.word	0x080601c8

080a155c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <network_listening+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	6a1b      	ldr	r3, [r3, #32]
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	080601c8 	.word	0x080601c8

080a156c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <network_set_listen_timeout+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601c8 	.word	0x080601c8

080a157c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <network_get_listen_timeout+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601c8 	.word	0x080601c8

080a158c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <spark_process+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	689b      	ldr	r3, [r3, #8]
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	080601cc 	.word	0x080601cc

080a159c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601cc 	.word	0x080601cc

080a15ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <malloc+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	681b      	ldr	r3, [r3, #0]
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601a0 	.word	0x080601a0

080a15bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <free+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	685b      	ldr	r3, [r3, #4]
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601a0 	.word	0x080601a0

080a15cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <realloc+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	689b      	ldr	r3, [r3, #8]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601a0 	.word	0x080601a0

080a15dc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <vsnprintf+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601a0 	.word	0x080601a0

080a15ec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a15ec:	4770      	bx	lr

080a15ee <_ZN8SPIClassD0Ev>:
 80a15ee:	b510      	push	{r4, lr}
 80a15f0:	4604      	mov	r4, r0
 80a15f2:	2110      	movs	r1, #16
 80a15f4:	f002 f80a 	bl	80a360c <_ZdlPvj>
 80a15f8:	4620      	mov	r0, r4
 80a15fa:	bd10      	pop	{r4, pc}

080a15fc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a15fc:	b570      	push	{r4, r5, r6, lr}
 80a15fe:	4604      	mov	r4, r0
 80a1600:	460e      	mov	r6, r1
 80a1602:	4b07      	ldr	r3, [pc, #28]	; (80a1620 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1604:	2500      	movs	r5, #0
 80a1606:	6003      	str	r3, [r0, #0]
 80a1608:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a160c:	f7ff fe10 	bl	80a1230 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1610:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1612:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1614:	f7ff fd9c 	bl	80a1150 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1618:	60a5      	str	r5, [r4, #8]
}
 80a161a:	4620      	mov	r0, r4
 80a161c:	bd70      	pop	{r4, r5, r6, pc}
 80a161e:	bf00      	nop
 80a1620:	080a4304 	.word	0x080a4304

080a1624 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1628:	4b03      	ldr	r3, [pc, #12]	; (80a1638 <_GLOBAL__sub_I_System+0x14>)
 80a162a:	2000      	movs	r0, #0
 80a162c:	7018      	strb	r0, [r3, #0]
 80a162e:	8058      	strh	r0, [r3, #2]
 80a1630:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1632:	f7ff bf37 	b.w	80a14a4 <set_system_mode>
 80a1636:	bf00      	nop
 80a1638:	20000438 	.word	0x20000438

080a163c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a163c:	b510      	push	{r4, lr}
 80a163e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1640:	f002 f9cc 	bl	80a39dc <strlen>
 80a1644:	3801      	subs	r0, #1
 80a1646:	1823      	adds	r3, r4, r0
 80a1648:	4620      	mov	r0, r4
	while(i<j){
 80a164a:	4298      	cmp	r0, r3
 80a164c:	d206      	bcs.n	80a165c <_Z11str_reversePc+0x20>
		c = *i;
 80a164e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1650:	7819      	ldrb	r1, [r3, #0]
 80a1652:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1656:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a165a:	e7f6      	b.n	80a164a <_Z11str_reversePc+0xe>
 80a165c:	bd10      	pop	{r4, pc}

080a165e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a165e:	b570      	push	{r4, r5, r6, lr}
 80a1660:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1662:	1e91      	subs	r1, r2, #2
 80a1664:	2922      	cmp	r1, #34	; 0x22
 80a1666:	d820      	bhi.n	80a16aa <ultoa+0x4c>
 80a1668:	4625      	mov	r5, r4
 80a166a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a166c:	b910      	cbnz	r0, 80a1674 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a166e:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1670:	2230      	movs	r2, #48	; 0x30
 80a1672:	e00e      	b.n	80a1692 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1674:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1678:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a167c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a167e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1680:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1684:	bf94      	ite	ls
 80a1686:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1688:	3157      	addhi	r1, #87	; 0x57
 80a168a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a168e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1690:	e7eb      	b.n	80a166a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1692:	4299      	cmp	r1, r3
 80a1694:	d202      	bcs.n	80a169c <ultoa+0x3e>
            *ptr++ = '0';
 80a1696:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a169a:	e7fa      	b.n	80a1692 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a169c:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a169e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a16a0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a16a2:	f7ff ffcb 	bl	80a163c <_Z11str_reversePc>
	return buffer;
 80a16a6:	4620      	mov	r0, r4
 80a16a8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a16aa:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a16ac:	bd70      	pop	{r4, r5, r6, pc}

080a16ae <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a16ae:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a16b0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a16b2:	460c      	mov	r4, r1
 80a16b4:	4615      	mov	r5, r2
	if(a<0){
 80a16b6:	da0b      	bge.n	80a16d0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a16b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a16bc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a16c0:	bf14      	ite	ne
 80a16c2:	4258      	negne	r0, r3
 80a16c4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a16c6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a16c8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a16ca:	462a      	mov	r2, r5
 80a16cc:	4419      	add	r1, r3
 80a16ce:	e000      	b.n	80a16d2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a16d0:	2301      	movs	r3, #1
 80a16d2:	f7ff ffc4 	bl	80a165e <ultoa>
	}
	return buffer;
}
 80a16d6:	4620      	mov	r0, r4
 80a16d8:	bd38      	pop	{r3, r4, r5, pc}

080a16da <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a16da:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a16dc:	2301      	movs	r3, #1
 80a16de:	f7ff ffbe 	bl	80a165e <ultoa>
}
 80a16e2:	bd08      	pop	{r3, pc}

080a16e4 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16e4:	2300      	movs	r3, #0
 80a16e6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a16e8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a16ea:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a16ec:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a16ee:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a16f0:	680c      	ldr	r4, [r1, #0]
 80a16f2:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a16f4:	684c      	ldr	r4, [r1, #4]
 80a16f6:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a16f8:	688c      	ldr	r4, [r1, #8]
 80a16fa:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a16fc:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a16fe:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a1700:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a1702:	bd10      	pop	{r4, pc}

080a1704 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1704:	b510      	push	{r4, lr}
 80a1706:	4604      	mov	r4, r0
{
	free(buffer);
 80a1708:	6800      	ldr	r0, [r0, #0]
 80a170a:	f7ff ff57 	bl	80a15bc <free>
}
 80a170e:	4620      	mov	r0, r4
 80a1710:	bd10      	pop	{r4, pc}

080a1712 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1712:	b510      	push	{r4, lr}
 80a1714:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1716:	6800      	ldr	r0, [r0, #0]
 80a1718:	b108      	cbz	r0, 80a171e <_ZN6String10invalidateEv+0xc>
 80a171a:	f7ff ff4f 	bl	80a15bc <free>
	buffer = NULL;
 80a171e:	2300      	movs	r3, #0
 80a1720:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1722:	60a3      	str	r3, [r4, #8]
 80a1724:	6063      	str	r3, [r4, #4]
 80a1726:	bd10      	pop	{r4, pc}

080a1728 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1728:	b538      	push	{r3, r4, r5, lr}
 80a172a:	4604      	mov	r4, r0
 80a172c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a172e:	6800      	ldr	r0, [r0, #0]
 80a1730:	3101      	adds	r1, #1
 80a1732:	f7ff ff4b 	bl	80a15cc <realloc>
	if (newbuffer) {
 80a1736:	b110      	cbz	r0, 80a173e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1738:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a173c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a173e:	bd38      	pop	{r3, r4, r5, pc}

080a1740 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1740:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1742:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1744:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1746:	b113      	cbz	r3, 80a174e <_ZN6String7reserveEj+0xe>
 80a1748:	6843      	ldr	r3, [r0, #4]
 80a174a:	428b      	cmp	r3, r1
 80a174c:	d207      	bcs.n	80a175e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a174e:	4620      	mov	r0, r4
 80a1750:	f7ff ffea 	bl	80a1728 <_ZN6String12changeBufferEj>
 80a1754:	b120      	cbz	r0, 80a1760 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1756:	68a3      	ldr	r3, [r4, #8]
 80a1758:	b90b      	cbnz	r3, 80a175e <_ZN6String7reserveEj+0x1e>
 80a175a:	6822      	ldr	r2, [r4, #0]
 80a175c:	7013      	strb	r3, [r2, #0]
 80a175e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1760:	bd10      	pop	{r4, pc}

080a1762 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1762:	b570      	push	{r4, r5, r6, lr}
 80a1764:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1766:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1768:	4604      	mov	r4, r0
 80a176a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a176c:	f7ff ffe8 	bl	80a1740 <_ZN6String7reserveEj>
 80a1770:	b918      	cbnz	r0, 80a177a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1772:	4620      	mov	r0, r4
 80a1774:	f7ff ffcd 	bl	80a1712 <_ZN6String10invalidateEv>
		return *this;
 80a1778:	e009      	b.n	80a178e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a177a:	462a      	mov	r2, r5
 80a177c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a177e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1780:	6820      	ldr	r0, [r4, #0]
 80a1782:	f002 f8ab 	bl	80a38dc <memcpy>
	buffer[len] = 0;
 80a1786:	6822      	ldr	r2, [r4, #0]
 80a1788:	68a3      	ldr	r3, [r4, #8]
 80a178a:	2100      	movs	r1, #0
 80a178c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a178e:	4620      	mov	r0, r4
 80a1790:	bd70      	pop	{r4, r5, r6, pc}

080a1792 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1792:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1794:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1796:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1798:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a179a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a179c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a179e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a17a0:	460d      	mov	r5, r1
 80a17a2:	b139      	cbz	r1, 80a17b4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a17a4:	4608      	mov	r0, r1
 80a17a6:	f002 f919 	bl	80a39dc <strlen>
 80a17aa:	4629      	mov	r1, r5
 80a17ac:	4602      	mov	r2, r0
 80a17ae:	4620      	mov	r0, r4
 80a17b0:	f7ff ffd7 	bl	80a1762 <_ZN6String4copyEPKcj>
}
 80a17b4:	4620      	mov	r0, r4
 80a17b6:	bd38      	pop	{r3, r4, r5, pc}

080a17b8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a17b8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a17ba:	b510      	push	{r4, lr}
 80a17bc:	460b      	mov	r3, r1
 80a17be:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a17c0:	d007      	beq.n	80a17d2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a17c2:	6809      	ldr	r1, [r1, #0]
 80a17c4:	b119      	cbz	r1, 80a17ce <_ZN6StringaSERKS_+0x16>
 80a17c6:	689a      	ldr	r2, [r3, #8]
 80a17c8:	f7ff ffcb 	bl	80a1762 <_ZN6String4copyEPKcj>
 80a17cc:	e001      	b.n	80a17d2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a17ce:	f7ff ffa0 	bl	80a1712 <_ZN6String10invalidateEv>

	return *this;
}
 80a17d2:	4620      	mov	r0, r4
 80a17d4:	bd10      	pop	{r4, pc}

080a17d6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a17d6:	b510      	push	{r4, lr}
 80a17d8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a17da:	2300      	movs	r3, #0
 80a17dc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a17de:	6043      	str	r3, [r0, #4]
	len = 0;
 80a17e0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a17e2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a17e4:	f7ff ffe8 	bl	80a17b8 <_ZN6StringaSERKS_>
}
 80a17e8:	4620      	mov	r0, r4
 80a17ea:	bd10      	pop	{r4, pc}

080a17ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a17ec:	b538      	push	{r3, r4, r5, lr}
 80a17ee:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a17f0:	460c      	mov	r4, r1
 80a17f2:	b141      	cbz	r1, 80a1806 <_ZN6StringaSEPKc+0x1a>
 80a17f4:	4608      	mov	r0, r1
 80a17f6:	f002 f8f1 	bl	80a39dc <strlen>
 80a17fa:	4621      	mov	r1, r4
 80a17fc:	4602      	mov	r2, r0
 80a17fe:	4628      	mov	r0, r5
 80a1800:	f7ff ffaf 	bl	80a1762 <_ZN6String4copyEPKcj>
 80a1804:	e001      	b.n	80a180a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1806:	f7ff ff84 	bl	80a1712 <_ZN6String10invalidateEv>

	return *this;
}
 80a180a:	4628      	mov	r0, r5
 80a180c:	bd38      	pop	{r3, r4, r5, pc}

080a180e <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a180e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1810:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1812:	2300      	movs	r3, #0
 80a1814:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1816:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1818:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a181a:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a181c:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a181e:	a901      	add	r1, sp, #4
 80a1820:	f7ff ff5b 	bl	80a16da <utoa>
	*this = buf;
 80a1824:	a901      	add	r1, sp, #4
 80a1826:	4620      	mov	r0, r4
 80a1828:	f7ff ffe0 	bl	80a17ec <_ZN6StringaSEPKc>
}
 80a182c:	4620      	mov	r0, r4
 80a182e:	b004      	add	sp, #16
 80a1830:	bd10      	pop	{r4, pc}

080a1832 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
 80a1832:	b510      	push	{r4, lr}
 80a1834:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1836:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1838:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a183a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a183c:	6063      	str	r3, [r4, #4]
	len = 0;
 80a183e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1840:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1842:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a1844:	a901      	add	r1, sp, #4
 80a1846:	f7ff ff32 	bl	80a16ae <itoa>
	*this = buf;
 80a184a:	a901      	add	r1, sp, #4
 80a184c:	4620      	mov	r0, r4
 80a184e:	f7ff ffcd 	bl	80a17ec <_ZN6StringaSEPKc>
}
 80a1852:	4620      	mov	r0, r4
 80a1854:	b00a      	add	sp, #40	; 0x28
 80a1856:	bd10      	pop	{r4, pc}

080a1858 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1858:	b570      	push	{r4, r5, r6, lr}
 80a185a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a185c:	460e      	mov	r6, r1
 80a185e:	b909      	cbnz	r1, 80a1864 <_ZN6String6concatEPKcj+0xc>
 80a1860:	2000      	movs	r0, #0
 80a1862:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1864:	b16a      	cbz	r2, 80a1882 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1866:	6883      	ldr	r3, [r0, #8]
 80a1868:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a186a:	4629      	mov	r1, r5
 80a186c:	f7ff ff68 	bl	80a1740 <_ZN6String7reserveEj>
 80a1870:	2800      	cmp	r0, #0
 80a1872:	d0f5      	beq.n	80a1860 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1874:	6820      	ldr	r0, [r4, #0]
 80a1876:	68a3      	ldr	r3, [r4, #8]
 80a1878:	4631      	mov	r1, r6
 80a187a:	4418      	add	r0, r3
 80a187c:	f002 f8a6 	bl	80a39cc <strcpy>
	len = newlen;
 80a1880:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1882:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1884:	bd70      	pop	{r4, r5, r6, pc}

080a1886 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a1886:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a1888:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a188a:	4604      	mov	r4, r0
 80a188c:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 80a188e:	4669      	mov	r1, sp
 80a1890:	f7ff ff0d 	bl	80a16ae <itoa>
	return concat(buf, strlen(buf));
 80a1894:	4668      	mov	r0, sp
 80a1896:	f002 f8a1 	bl	80a39dc <strlen>
 80a189a:	4669      	mov	r1, sp
 80a189c:	4602      	mov	r2, r0
 80a189e:	4620      	mov	r0, r4
 80a18a0:	f7ff ffda 	bl	80a1858 <_ZN6String6concatEPKcj>
}
 80a18a4:	b002      	add	sp, #8
 80a18a6:	bd10      	pop	{r4, pc}

080a18a8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a18a8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a18aa:	688a      	ldr	r2, [r1, #8]
 80a18ac:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a18ae:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a18b0:	f7ff ffd2 	bl	80a1858 <_ZN6String6concatEPKcj>
 80a18b4:	b910      	cbnz	r0, 80a18bc <_ZplRK15StringSumHelperRK6String+0x14>
 80a18b6:	4620      	mov	r0, r4
 80a18b8:	f7ff ff2b 	bl	80a1712 <_ZN6String10invalidateEv>
	return a;
}
 80a18bc:	4620      	mov	r0, r4
 80a18be:	bd10      	pop	{r4, pc}

080a18c0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a18c0:	b538      	push	{r3, r4, r5, lr}
 80a18c2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a18c4:	460d      	mov	r5, r1
 80a18c6:	b141      	cbz	r1, 80a18da <_ZplRK15StringSumHelperPKc+0x1a>
 80a18c8:	4608      	mov	r0, r1
 80a18ca:	f002 f887 	bl	80a39dc <strlen>
 80a18ce:	4629      	mov	r1, r5
 80a18d0:	4602      	mov	r2, r0
 80a18d2:	4620      	mov	r0, r4
 80a18d4:	f7ff ffc0 	bl	80a1858 <_ZN6String6concatEPKcj>
 80a18d8:	b910      	cbnz	r0, 80a18e0 <_ZplRK15StringSumHelperPKc+0x20>
 80a18da:	4620      	mov	r0, r4
 80a18dc:	f7ff ff19 	bl	80a1712 <_ZN6String10invalidateEv>
	return a;
}
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	bd38      	pop	{r3, r4, r5, pc}

080a18e4 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 80a18e4:	b510      	push	{r4, lr}
 80a18e6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 80a18e8:	f7ff ffcd 	bl	80a1886 <_ZN6String6concatEi>
 80a18ec:	b910      	cbnz	r0, 80a18f4 <_ZplRK15StringSumHelperi+0x10>
 80a18ee:	4620      	mov	r0, r4
 80a18f0:	f7ff ff0f 	bl	80a1712 <_ZN6String10invalidateEv>
	return a;
}
 80a18f4:	4620      	mov	r0, r4
 80a18f6:	bd10      	pop	{r4, pc}

080a18f8 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a18f8:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a18fa:	6800      	ldr	r0, [r0, #0]
 80a18fc:	680b      	ldr	r3, [r1, #0]
 80a18fe:	b108      	cbz	r0, 80a1904 <_ZNK6String9compareToERKS_+0xc>
 80a1900:	b95b      	cbnz	r3, 80a191a <_ZNK6String9compareToERKS_+0x22>
 80a1902:	e005      	b.n	80a1910 <_ZNK6String9compareToERKS_+0x18>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a1904:	b123      	cbz	r3, 80a1910 <_ZNK6String9compareToERKS_+0x18>
 80a1906:	6889      	ldr	r1, [r1, #8]
 80a1908:	b111      	cbz	r1, 80a1910 <_ZNK6String9compareToERKS_+0x18>
 80a190a:	7818      	ldrb	r0, [r3, #0]
 80a190c:	4240      	negs	r0, r0
 80a190e:	4770      	bx	lr
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a1910:	b138      	cbz	r0, 80a1922 <_ZNK6String9compareToERKS_+0x2a>
 80a1912:	6893      	ldr	r3, [r2, #8]
 80a1914:	b123      	cbz	r3, 80a1920 <_ZNK6String9compareToERKS_+0x28>
 80a1916:	7800      	ldrb	r0, [r0, #0]
 80a1918:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a191a:	4619      	mov	r1, r3
 80a191c:	f002 b84c 	b.w	80a39b8 <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
 80a1920:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
 80a1922:	4770      	bx	lr

080a1924 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 80a1924:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 80a1926:	6882      	ldr	r2, [r0, #8]
 80a1928:	688b      	ldr	r3, [r1, #8]
 80a192a:	429a      	cmp	r2, r3
 80a192c:	d105      	bne.n	80a193a <_ZNK6String6equalsERKS_+0x16>
 80a192e:	f7ff ffe3 	bl	80a18f8 <_ZNK6String9compareToERKS_>
 80a1932:	fab0 f080 	clz	r0, r0
 80a1936:	0940      	lsrs	r0, r0, #5
 80a1938:	bd08      	pop	{r3, pc}
 80a193a:	2000      	movs	r0, #0
}
 80a193c:	bd08      	pop	{r3, pc}

080a193e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a193e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1940:	4606      	mov	r6, r0
 80a1942:	460d      	mov	r5, r1
 80a1944:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1946:	2400      	movs	r4, #0
  while (size--) {
 80a1948:	42bd      	cmp	r5, r7
 80a194a:	d00c      	beq.n	80a1966 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a194c:	6833      	ldr	r3, [r6, #0]
 80a194e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1952:	689b      	ldr	r3, [r3, #8]
 80a1954:	4630      	mov	r0, r6
 80a1956:	4798      	blx	r3
     if (chunk>=0)
 80a1958:	2800      	cmp	r0, #0
 80a195a:	db01      	blt.n	80a1960 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a195c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a195e:	e7f3      	b.n	80a1948 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1960:	2c00      	cmp	r4, #0
 80a1962:	bf08      	it	eq
 80a1964:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1966:	4620      	mov	r0, r4
 80a1968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a196a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a196a:	6803      	ldr	r3, [r0, #0]
 80a196c:	689b      	ldr	r3, [r3, #8]
 80a196e:	4718      	bx	r3

080a1970 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1970:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1972:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1974:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1976:	f7ff fff8 	bl	80a196a <_ZN5Print5printEc>
  n += print('\n');
 80a197a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a197c:	4604      	mov	r4, r0
  n += print('\n');
 80a197e:	4628      	mov	r0, r5
 80a1980:	f7ff fff3 	bl	80a196a <_ZN5Print5printEc>
  return n;
}
 80a1984:	4420      	add	r0, r4
 80a1986:	bd38      	pop	{r3, r4, r5, pc}

080a1988 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1988:	b538      	push	{r3, r4, r5, lr}
 80a198a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a198c:	f7ff fbad 	bl	80a10ea <_ZN5Print5writeEPKc>
 80a1990:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1992:	4628      	mov	r0, r5
 80a1994:	f7ff ffec 	bl	80a1970 <_ZN5Print7printlnEv>
  return n;
}
 80a1998:	4420      	add	r0, r4
 80a199a:	bd38      	pop	{r3, r4, r5, pc}

080a199c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a199c:	2a01      	cmp	r2, #1
 80a199e:	bf98      	it	ls
 80a19a0:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a19a2:	b530      	push	{r4, r5, lr}
 80a19a4:	460b      	mov	r3, r1
 80a19a6:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a19a8:	2100      	movs	r1, #0
 80a19aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a19ae:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a19b2:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a19b6:	fb05 3312 	mls	r3, r5, r2, r3
 80a19ba:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a19bc:	2b09      	cmp	r3, #9
 80a19be:	bf94      	ite	ls
 80a19c0:	3330      	addls	r3, #48	; 0x30
 80a19c2:	3337      	addhi	r3, #55	; 0x37
 80a19c4:	b2db      	uxtb	r3, r3
 80a19c6:	4621      	mov	r1, r4
 80a19c8:	f804 3901 	strb.w	r3, [r4], #-1
 80a19cc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a19ce:	2d00      	cmp	r5, #0
 80a19d0:	d1ef      	bne.n	80a19b2 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a19d2:	f7ff fb8a 	bl	80a10ea <_ZN5Print5writeEPKc>
}
 80a19d6:	b00b      	add	sp, #44	; 0x2c
 80a19d8:	bd30      	pop	{r4, r5, pc}

080a19da <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a19da:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a19dc:	b922      	cbnz	r2, 80a19e8 <_ZN5Print5printEmi+0xe>
 80a19de:	6803      	ldr	r3, [r0, #0]
 80a19e0:	b2c9      	uxtb	r1, r1
 80a19e2:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a19e4:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a19e6:	4718      	bx	r3
  else return printNumber(n, base);
 80a19e8:	b2d2      	uxtb	r2, r2
}
 80a19ea:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a19ec:	f7ff bfd6 	b.w	80a199c <_ZN5Print11printNumberEmh>

080a19f0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a19f0:	f7ff bff3 	b.w	80a19da <_ZN5Print5printEmi>

080a19f4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a19f4:	b40c      	push	{r2, r3}
 80a19f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a19fa:	b087      	sub	sp, #28
 80a19fc:	af00      	add	r7, sp, #0
 80a19fe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1a02:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1a06:	4605      	mov	r5, r0
 80a1a08:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1a0a:	4623      	mov	r3, r4
 80a1a0c:	464a      	mov	r2, r9
 80a1a0e:	2114      	movs	r1, #20
 80a1a10:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1a12:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1a14:	f7ff fde2 	bl	80a15dc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1a18:	2813      	cmp	r0, #19
 80a1a1a:	d805      	bhi.n	80a1a28 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a1c:	1d39      	adds	r1, r7, #4
 80a1a1e:	4628      	mov	r0, r5
 80a1a20:	f7ff fb63 	bl	80a10ea <_ZN5Print5writeEPKc>
 80a1a24:	4604      	mov	r4, r0
 80a1a26:	e013      	b.n	80a1a50 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1a28:	f100 0308 	add.w	r3, r0, #8
 80a1a2c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1a30:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1a32:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1a36:	1c41      	adds	r1, r0, #1
 80a1a38:	4623      	mov	r3, r4
 80a1a3a:	464a      	mov	r2, r9
 80a1a3c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1a3e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1a40:	f7ff fdcc 	bl	80a15dc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1a44:	4669      	mov	r1, sp
 80a1a46:	4628      	mov	r0, r5
 80a1a48:	f7ff fb4f 	bl	80a10ea <_ZN5Print5writeEPKc>
 80a1a4c:	4604      	mov	r4, r0
 80a1a4e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1a50:	b11e      	cbz	r6, 80a1a5a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1a52:	4628      	mov	r0, r5
 80a1a54:	f7ff ff8c 	bl	80a1970 <_ZN5Print7printlnEv>
 80a1a58:	4404      	add	r4, r0
    return n;
}
 80a1a5a:	4620      	mov	r0, r4
 80a1a5c:	371c      	adds	r7, #28
 80a1a5e:	46bd      	mov	sp, r7
 80a1a60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1a64:	b002      	add	sp, #8
 80a1a66:	4770      	bx	lr

080a1a68 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1a68:	2300      	movs	r3, #0
 80a1a6a:	461a      	mov	r2, r3
 80a1a6c:	4619      	mov	r1, r3
 80a1a6e:	6840      	ldr	r0, [r0, #4]
 80a1a70:	f7ff bd5c 	b.w	80a152c <network_on>

080a1a74 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1a74:	6880      	ldr	r0, [r0, #8]
 80a1a76:	6803      	ldr	r3, [r0, #0]
 80a1a78:	68db      	ldr	r3, [r3, #12]
 80a1a7a:	4718      	bx	r3

080a1a7c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 80a1a7c:	4770      	bx	lr

080a1a7e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a1a7e:	b119      	cbz	r1, 80a1a88 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a1a80:	680b      	ldr	r3, [r1, #0]
 80a1a82:	4608      	mov	r0, r1
 80a1a84:	685b      	ldr	r3, [r3, #4]
 80a1a86:	4718      	bx	r3
 80a1a88:	4770      	bx	lr

080a1a8a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1a8a:	b119      	cbz	r1, 80a1a94 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 80a1a8c:	680b      	ldr	r3, [r1, #0]
 80a1a8e:	4608      	mov	r0, r1
 80a1a90:	685b      	ldr	r3, [r3, #4]
 80a1a92:	4718      	bx	r3
 80a1a94:	4770      	bx	lr

080a1a96 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1a96:	4770      	bx	lr

080a1a98 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1a98:	4770      	bx	lr

080a1a9a <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 80a1a9a:	4770      	bx	lr

080a1a9c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a1a9c:	b538      	push	{r3, r4, r5, lr}
 80a1a9e:	4604      	mov	r4, r0
 80a1aa0:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a1aa2:	6800      	ldr	r0, [r0, #0]
 80a1aa4:	212e      	movs	r1, #46	; 0x2e
 80a1aa6:	f001 ff7d 	bl	80a39a4 <strchrnul>
    size = s - category;
 80a1aaa:	6823      	ldr	r3, [r4, #0]
 80a1aac:	1ac3      	subs	r3, r0, r3
 80a1aae:	602b      	str	r3, [r5, #0]
    if (size) {
 80a1ab0:	b123      	cbz	r3, 80a1abc <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 80a1ab2:	7803      	ldrb	r3, [r0, #0]
 80a1ab4:	b103      	cbz	r3, 80a1ab8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 80a1ab6:	3001      	adds	r0, #1
 80a1ab8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1aba:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 80a1abc:	4618      	mov	r0, r3
}
 80a1abe:	bd38      	pop	{r3, r4, r5, pc}

080a1ac0 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a1ac0:	b510      	push	{r4, lr}
 80a1ac2:	4604      	mov	r4, r0
 80a1ac4:	210c      	movs	r1, #12
 80a1ac6:	f001 fda1 	bl	80a360c <_ZdlPvj>
 80a1aca:	4620      	mov	r0, r4
 80a1acc:	bd10      	pop	{r4, pc}

080a1ace <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a1ace:	b510      	push	{r4, lr}
 80a1ad0:	4604      	mov	r4, r0
 80a1ad2:	2104      	movs	r1, #4
 80a1ad4:	f001 fd9a 	bl	80a360c <_ZdlPvj>
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	bd10      	pop	{r4, pc}

080a1adc <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1adc:	b510      	push	{r4, lr}
 80a1ade:	4604      	mov	r4, r0
 80a1ae0:	2104      	movs	r1, #4
 80a1ae2:	f001 fd93 	bl	80a360c <_ZdlPvj>
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	bd10      	pop	{r4, pc}

080a1aea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a1aea:	b538      	push	{r3, r4, r5, lr}
 80a1aec:	460c      	mov	r4, r1
 80a1aee:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a1af0:	f001 f91c 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a1af4:	4284      	cmp	r4, r0
 80a1af6:	d102      	bne.n	80a1afe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        Serial.end();
 80a1af8:	f001 f918 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a1afc:	e005      	b.n	80a1b0a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80a1afe:	f001 f943 	bl	80a2d88 <_Z17_fetch_usbserial1v>
 80a1b02:	4284      	cmp	r4, r0
 80a1b04:	d105      	bne.n	80a1b12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 80a1b06:	f001 f93f 	bl	80a2d88 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.end();
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 80a1b0e:	f001 b8ff 	b.w	80a2d10 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 80a1b12:	f001 f9c1 	bl	80a2e98 <_Z22__fetch_global_Serial1v>
 80a1b16:	4284      	cmp	r4, r0
 80a1b18:	d105      	bne.n	80a1b26 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 80a1b1a:	f001 f9bd 	bl	80a2e98 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 80a1b22:	f001 b9b6 	b.w	80a2e92 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 80a1b26:	4621      	mov	r1, r4
 80a1b28:	4628      	mov	r0, r5
 80a1b2a:	f7ff ffae 	bl	80a1a8a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 80a1b2e:	bd38      	pop	{r3, r4, r5, pc}

080a1b30 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 80a1b30:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1b32:	f001 ff41 	bl	80a39b8 <strcmp>
}
 80a1b36:	fab0 f080 	clz	r0, r0
 80a1b3a:	0940      	lsrs	r0, r0, #5
 80a1b3c:	bd08      	pop	{r3, pc}

080a1b3e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1b3e:	b538      	push	{r3, r4, r5, lr}
 80a1b40:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1b42:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1b44:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1b46:	f001 ff49 	bl	80a39dc <strlen>
 80a1b4a:	4621      	mov	r1, r4
 80a1b4c:	4602      	mov	r2, r0
 80a1b4e:	4628      	mov	r0, r5
}
 80a1b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 80a1b54:	f001 bc65 	b.w	80a3422 <_ZN5spark10JSONWriter5valueEPKcj>

080a1b58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b5c:	4691      	mov	r9, r2
 80a1b5e:	b085      	sub	sp, #20
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a1b60:	4a49      	ldr	r2, [pc, #292]	; (80a1c88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x130>)
 80a1b62:	461d      	mov	r5, r3
 80a1b64:	6a03      	ldr	r3, [r0, #32]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a1b66:	f04f 0800 	mov.w	r8, #0
 80a1b6a:	4607      	mov	r7, r0
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80a1b6c:	a801      	add	r0, sp, #4
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1b6e:	460e      	mov	r6, r1
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a1b70:	9201      	str	r2, [sp, #4]
 80a1b72:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a1b74:	f88d 8008 	strb.w	r8, [sp, #8]
 80a1b78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80a1b7a:	f001 fbbe 	bl	80a32fa <_ZN5spark10JSONWriter11beginObjectEv>
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80a1b7e:	4641      	mov	r1, r8
 80a1b80:	4648      	mov	r0, r9
 80a1b82:	f7ff fc7f 	bl	80a1484 <log_level_name>
 80a1b86:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80a1b88:	4940      	ldr	r1, [pc, #256]	; (80a1c8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>)
 80a1b8a:	2201      	movs	r2, #1
 80a1b8c:	a801      	add	r0, sp, #4
 80a1b8e:	f001 fc39 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1b92:	4641      	mov	r1, r8
 80a1b94:	f7ff ffd3 	bl	80a1b3e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80a1b98:	b13e      	cbz	r6, 80a1baa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x52>
        json.name("m", 1).value(msg);
 80a1b9a:	493d      	ldr	r1, [pc, #244]	; (80a1c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x138>)
 80a1b9c:	2201      	movs	r2, #1
 80a1b9e:	a801      	add	r0, sp, #4
 80a1ba0:	f001 fc30 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1ba4:	4631      	mov	r1, r6
 80a1ba6:	f7ff ffca 	bl	80a1b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 80a1baa:	b13d      	cbz	r5, 80a1bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        json.name("c", 1).value(category);
 80a1bac:	4939      	ldr	r1, [pc, #228]	; (80a1c94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>)
 80a1bae:	2201      	movs	r2, #1
 80a1bb0:	a801      	add	r0, sp, #4
 80a1bb2:	f001 fc27 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bb6:	4629      	mov	r1, r5
 80a1bb8:	f7ff ffc1 	bl	80a1b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 80a1bbc:	7923      	ldrb	r3, [r4, #4]
 80a1bbe:	07de      	lsls	r6, r3, #31
 80a1bc0:	d50e      	bpl.n	80a1be0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x88>
        s = extractFileName(attr.file); // Strip directory path
 80a1bc2:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a1bc4:	212f      	movs	r1, #47	; 0x2f
 80a1bc6:	4628      	mov	r0, r5
 80a1bc8:	f001 ff25 	bl	80a3a16 <strrchr>
    if (s1) {
 80a1bcc:	b100      	cbz	r0, 80a1bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x78>
        return s1 + 1;
 80a1bce:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 80a1bd0:	4931      	ldr	r1, [pc, #196]	; (80a1c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>)
 80a1bd2:	2201      	movs	r2, #1
 80a1bd4:	a801      	add	r0, sp, #4
 80a1bd6:	f001 fc15 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bda:	4629      	mov	r1, r5
 80a1bdc:	f7ff ffaf 	bl	80a1b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 80a1be0:	7923      	ldrb	r3, [r4, #4]
 80a1be2:	079d      	lsls	r5, r3, #30
 80a1be4:	d507      	bpl.n	80a1bf6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
        json.name("ln", 2).value(attr.line);
 80a1be6:	492d      	ldr	r1, [pc, #180]	; (80a1c9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 80a1be8:	2202      	movs	r2, #2
 80a1bea:	a801      	add	r0, sp, #4
 80a1bec:	f001 fc0a 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1bf0:	68e1      	ldr	r1, [r4, #12]
 80a1bf2:	f001 fb8f 	bl	80a3314 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 80a1bf6:	7923      	ldrb	r3, [r4, #4]
 80a1bf8:	0758      	lsls	r0, r3, #29
 80a1bfa:	d516      	bpl.n	80a1c2a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1bfc:	6925      	ldr	r5, [r4, #16]
 80a1bfe:	462e      	mov	r6, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a1c00:	4633      	mov	r3, r6
 80a1c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1c06:	b13a      	cbz	r2, 80a1c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        if (*s == ' ') {
 80a1c08:	2a20      	cmp	r2, #32
 80a1c0a:	d101      	bne.n	80a1c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
            s1 = s + 1; // Skip return type
 80a1c0c:	461d      	mov	r5, r3
 80a1c0e:	e001      	b.n	80a1c14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xbc>
        } else if (*s == '(') {
 80a1c10:	2a28      	cmp	r2, #40	; 0x28
 80a1c12:	d001      	beq.n	80a1c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1c14:	461e      	mov	r6, r3
 80a1c16:	e7f3      	b.n	80a1c00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 80a1c18:	2202      	movs	r2, #2
 80a1c1a:	4921      	ldr	r1, [pc, #132]	; (80a1ca0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 80a1c1c:	a801      	add	r0, sp, #4
 80a1c1e:	f001 fbf1 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c22:	1b72      	subs	r2, r6, r5
 80a1c24:	4629      	mov	r1, r5
 80a1c26:	f001 fbfc 	bl	80a3422 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 80a1c2a:	7923      	ldrb	r3, [r4, #4]
 80a1c2c:	0719      	lsls	r1, r3, #28
 80a1c2e:	d507      	bpl.n	80a1c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        json.name("t", 1).value((unsigned)attr.time);
 80a1c30:	491c      	ldr	r1, [pc, #112]	; (80a1ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 80a1c32:	2201      	movs	r2, #1
 80a1c34:	a801      	add	r0, sp, #4
 80a1c36:	f001 fbe5 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c3a:	6961      	ldr	r1, [r4, #20]
 80a1c3c:	f001 fb7c 	bl	80a3338 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80a1c40:	7923      	ldrb	r3, [r4, #4]
 80a1c42:	06da      	lsls	r2, r3, #27
 80a1c44:	d508      	bpl.n	80a1c58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("code", 4).value((int)attr.code);
 80a1c46:	2204      	movs	r2, #4
 80a1c48:	4917      	ldr	r1, [pc, #92]	; (80a1ca8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a1c4a:	eb0d 0002 	add.w	r0, sp, r2
 80a1c4e:	f001 fbd9 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c52:	69a1      	ldr	r1, [r4, #24]
 80a1c54:	f001 fb5e 	bl	80a3314 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80a1c58:	7923      	ldrb	r3, [r4, #4]
 80a1c5a:	069b      	lsls	r3, r3, #26
 80a1c5c:	d507      	bpl.n	80a1c6e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x116>
        json.name("detail", 6).value(attr.details);
 80a1c5e:	4913      	ldr	r1, [pc, #76]	; (80a1cac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a1c60:	2206      	movs	r2, #6
 80a1c62:	a801      	add	r0, sp, #4
 80a1c64:	f001 fbce 	bl	80a3404 <_ZN5spark10JSONWriter4nameEPKcj>
 80a1c68:	69e1      	ldr	r1, [r4, #28]
 80a1c6a:	f7ff ff68 	bl	80a1b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80a1c6e:	a801      	add	r0, sp, #4
 80a1c70:	f001 fb2d 	bl	80a32ce <_ZN5spark10JSONWriter9endObjectEv>
 80a1c74:	6a38      	ldr	r0, [r7, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a1c76:	2202      	movs	r2, #2
 80a1c78:	6803      	ldr	r3, [r0, #0]
 80a1c7a:	490d      	ldr	r1, [pc, #52]	; (80a1cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a1c7c:	68db      	ldr	r3, [r3, #12]
 80a1c7e:	4798      	blx	r3
}
 80a1c80:	b005      	add	sp, #20
 80a1c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1c86:	bf00      	nop
 80a1c88:	080a4314 	.word	0x080a4314
 80a1c8c:	080a43a0 	.word	0x080a43a0
 80a1c90:	080a43b6 	.word	0x080a43b6
 80a1c94:	080a442f 	.word	0x080a442f
 80a1c98:	080a4354 	.word	0x080a4354
 80a1c9c:	080a4356 	.word	0x080a4356
 80a1ca0:	080a4359 	.word	0x080a4359
 80a1ca4:	080a43cb 	.word	0x080a43cb
 80a1ca8:	080a435c 	.word	0x080a435c
 80a1cac:	080a4361 	.word	0x080a4361
 80a1cb0:	080a4368 	.word	0x080a4368

080a1cb4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a1cb4:	6800      	ldr	r0, [r0, #0]
 80a1cb6:	f7ff bacb 	b.w	80a1250 <os_mutex_recursive_lock>

080a1cba <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a1cba:	b570      	push	{r4, r5, r6, lr}
 80a1cbc:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a1cbe:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a1cc0:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a1cc2:	f001 fe8b 	bl	80a39dc <strlen>
 80a1cc6:	6823      	ldr	r3, [r4, #0]
 80a1cc8:	4602      	mov	r2, r0
 80a1cca:	4629      	mov	r1, r5
 80a1ccc:	4620      	mov	r0, r4
}
 80a1cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 80a1cd2:	68db      	ldr	r3, [r3, #12]
 80a1cd4:	4718      	bx	r3

080a1cd6 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 80a1cd6:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a1cd8:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 80a1cda:	ab02      	add	r3, sp, #8
 80a1cdc:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a1ce0:	68d4      	ldr	r4, [r2, #12]
 80a1ce2:	4619      	mov	r1, r3
 80a1ce4:	2201      	movs	r2, #1
 80a1ce6:	47a0      	blx	r4
}
 80a1ce8:	b002      	add	sp, #8
 80a1cea:	bd10      	pop	{r4, pc}

080a1cec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1cf0:	9d06      	ldr	r5, [sp, #24]
 80a1cf2:	4698      	mov	r8, r3
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a1cf4:	792b      	ldrb	r3, [r5, #4]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cf6:	460e      	mov	r6, r1
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a1cf8:	0719      	lsls	r1, r3, #28
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1cfa:	4604      	mov	r4, r0
 80a1cfc:	4617      	mov	r7, r2
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a1cfe:	d505      	bpl.n	80a1d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x20>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a1d00:	696b      	ldr	r3, [r5, #20]
 80a1d02:	4a54      	ldr	r2, [pc, #336]	; (80a1e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a1d04:	2100      	movs	r1, #0
 80a1d06:	6a00      	ldr	r0, [r0, #32]
 80a1d08:	f7ff fe74 	bl	80a19f4 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 80a1d0c:	f1b8 0f00 	cmp.w	r8, #0
 80a1d10:	d00d      	beq.n	80a1d2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x42>
        write('[');
 80a1d12:	215b      	movs	r1, #91	; 0x5b
 80a1d14:	4620      	mov	r0, r4
 80a1d16:	f7ff ffde 	bl	80a1cd6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a1d1a:	4641      	mov	r1, r8
 80a1d1c:	4620      	mov	r0, r4
 80a1d1e:	f7ff ffcc 	bl	80a1cba <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a1d22:	6823      	ldr	r3, [r4, #0]
 80a1d24:	2202      	movs	r2, #2
 80a1d26:	68db      	ldr	r3, [r3, #12]
 80a1d28:	494b      	ldr	r1, [pc, #300]	; (80a1e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a1d2a:	4620      	mov	r0, r4
 80a1d2c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 80a1d2e:	792b      	ldrb	r3, [r5, #4]
 80a1d30:	07da      	lsls	r2, r3, #31
 80a1d32:	d525      	bpl.n	80a1d80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
        s = extractFileName(attr.file); // Strip directory path
 80a1d34:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a1d38:	212f      	movs	r1, #47	; 0x2f
 80a1d3a:	4640      	mov	r0, r8
 80a1d3c:	f001 fe6b 	bl	80a3a16 <strrchr>
    if (s1) {
 80a1d40:	b108      	cbz	r0, 80a1d46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        return s1 + 1;
 80a1d42:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 80a1d46:	4641      	mov	r1, r8
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	f7ff ffb6 	bl	80a1cba <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a1d4e:	792b      	ldrb	r3, [r5, #4]
 80a1d50:	079b      	lsls	r3, r3, #30
 80a1d52:	d509      	bpl.n	80a1d68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
            write(':');
 80a1d54:	213a      	movs	r1, #58	; 0x3a
 80a1d56:	4620      	mov	r0, r4
 80a1d58:	f7ff ffbd 	bl	80a1cd6 <_ZN5spark16StreamLogHandler5writeEc>
 80a1d5c:	68eb      	ldr	r3, [r5, #12]
 80a1d5e:	4a3f      	ldr	r2, [pc, #252]	; (80a1e5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a1d60:	2100      	movs	r1, #0
 80a1d62:	6a20      	ldr	r0, [r4, #32]
 80a1d64:	f7ff fe46 	bl	80a19f4 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a1d68:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 80a1d6a:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a1d6c:	f013 0f04 	tst.w	r3, #4
 80a1d70:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 80a1d72:	bf18      	it	ne
 80a1d74:	493a      	ldrne	r1, [pc, #232]	; (80a1e60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80a1d76:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 80a1d78:	bf08      	it	eq
 80a1d7a:	493a      	ldreq	r1, [pc, #232]	; (80a1e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1d7c:	4620      	mov	r0, r4
 80a1d7e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 80a1d80:	792b      	ldrb	r3, [r5, #4]
 80a1d82:	0758      	lsls	r0, r3, #29
 80a1d84:	d518      	bpl.n	80a1db8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xcc>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a1d86:	6929      	ldr	r1, [r5, #16]
 80a1d88:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a1d8a:	4613      	mov	r3, r2
 80a1d8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1d90:	b138      	cbz	r0, 80a1da2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        if (*s == ' ') {
 80a1d92:	2820      	cmp	r0, #32
 80a1d94:	d101      	bne.n	80a1d9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xae>
            s1 = s + 1; // Skip return type
 80a1d96:	4619      	mov	r1, r3
 80a1d98:	e001      	b.n	80a1d9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb2>
        } else if (*s == '(') {
 80a1d9a:	2828      	cmp	r0, #40	; 0x28
 80a1d9c:	d001      	beq.n	80a1da2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a1d9e:	461a      	mov	r2, r3
 80a1da0:	e7f3      	b.n	80a1d8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 80a1da2:	6823      	ldr	r3, [r4, #0]
 80a1da4:	1a52      	subs	r2, r2, r1
 80a1da6:	68db      	ldr	r3, [r3, #12]
 80a1da8:	4620      	mov	r0, r4
 80a1daa:	4798      	blx	r3
        write("(): ", 4);
 80a1dac:	6823      	ldr	r3, [r4, #0]
 80a1dae:	2204      	movs	r2, #4
 80a1db0:	68db      	ldr	r3, [r3, #12]
 80a1db2:	492d      	ldr	r1, [pc, #180]	; (80a1e68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80a1db8:	2100      	movs	r1, #0
 80a1dba:	4638      	mov	r0, r7
 80a1dbc:	f7ff fb62 	bl	80a1484 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 80a1dc0:	4601      	mov	r1, r0
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	f7ff ff79 	bl	80a1cba <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a1dc8:	6823      	ldr	r3, [r4, #0]
 80a1dca:	2202      	movs	r2, #2
 80a1dcc:	68db      	ldr	r3, [r3, #12]
 80a1dce:	4925      	ldr	r1, [pc, #148]	; (80a1e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 80a1dd0:	4620      	mov	r0, r4
 80a1dd2:	4798      	blx	r3
    // Message
    if (msg) {
 80a1dd4:	b11e      	cbz	r6, 80a1dde <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xf2>
        write(msg);
 80a1dd6:	4631      	mov	r1, r6
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	f7ff ff6e 	bl	80a1cba <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 80a1dde:	792b      	ldrb	r3, [r5, #4]
 80a1de0:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a1de4:	d02d      	beq.n	80a1e42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x156>
        write(" [", 2);
 80a1de6:	6823      	ldr	r3, [r4, #0]
 80a1de8:	4920      	ldr	r1, [pc, #128]	; (80a1e6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 80a1dea:	68db      	ldr	r3, [r3, #12]
 80a1dec:	2202      	movs	r2, #2
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 80a1df2:	792b      	ldrb	r3, [r5, #4]
 80a1df4:	06d9      	lsls	r1, r3, #27
 80a1df6:	d50b      	bpl.n	80a1e10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x124>
            write("code = ", 7);
 80a1df8:	6823      	ldr	r3, [r4, #0]
 80a1dfa:	2207      	movs	r2, #7
 80a1dfc:	68db      	ldr	r3, [r3, #12]
 80a1dfe:	491c      	ldr	r1, [pc, #112]	; (80a1e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a1e00:	4620      	mov	r0, r4
 80a1e02:	4798      	blx	r3
 80a1e04:	69ab      	ldr	r3, [r5, #24]
 80a1e06:	4a1b      	ldr	r2, [pc, #108]	; (80a1e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a1e08:	2100      	movs	r1, #0
 80a1e0a:	6a20      	ldr	r0, [r4, #32]
 80a1e0c:	f7ff fdf2 	bl	80a19f4 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 80a1e10:	792b      	ldrb	r3, [r5, #4]
 80a1e12:	069a      	lsls	r2, r3, #26
 80a1e14:	d511      	bpl.n	80a1e3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14e>
            if (attr.has_code) {
 80a1e16:	06db      	lsls	r3, r3, #27
 80a1e18:	d505      	bpl.n	80a1e26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13a>
                write(", ", 2);
 80a1e1a:	6823      	ldr	r3, [r4, #0]
 80a1e1c:	2202      	movs	r2, #2
 80a1e1e:	68db      	ldr	r3, [r3, #12]
 80a1e20:	490f      	ldr	r1, [pc, #60]	; (80a1e60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80a1e22:	4620      	mov	r0, r4
 80a1e24:	4798      	blx	r3
            }
            write("details = ", 10);
 80a1e26:	6823      	ldr	r3, [r4, #0]
 80a1e28:	4913      	ldr	r1, [pc, #76]	; (80a1e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a1e2a:	4620      	mov	r0, r4
 80a1e2c:	68db      	ldr	r3, [r3, #12]
 80a1e2e:	220a      	movs	r2, #10
 80a1e30:	4798      	blx	r3
            write(attr.details);
 80a1e32:	69e9      	ldr	r1, [r5, #28]
 80a1e34:	4620      	mov	r0, r4
 80a1e36:	f7ff ff40 	bl	80a1cba <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 80a1e3a:	215d      	movs	r1, #93	; 0x5d
 80a1e3c:	4620      	mov	r0, r4
 80a1e3e:	f7ff ff4a 	bl	80a1cd6 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 80a1e42:	6823      	ldr	r3, [r4, #0]
 80a1e44:	4620      	mov	r0, r4
}
 80a1e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 80a1e4a:	68db      	ldr	r3, [r3, #12]
 80a1e4c:	2202      	movs	r2, #2
 80a1e4e:	490b      	ldr	r1, [pc, #44]	; (80a1e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a1e50:	4718      	bx	r3
 80a1e52:	bf00      	nop
 80a1e54:	080a436b 	.word	0x080a436b
 80a1e58:	080a4372 	.word	0x080a4372
 80a1e5c:	080a4375 	.word	0x080a4375
 80a1e60:	080a3e12 	.word	0x080a3e12
 80a1e64:	080a3d8a 	.word	0x080a3d8a
 80a1e68:	080a4378 	.word	0x080a4378
 80a1e6c:	080a437d 	.word	0x080a437d
 80a1e70:	080a4380 	.word	0x080a4380
 80a1e74:	080a4388 	.word	0x080a4388
 80a1e78:	080a438b 	.word	0x080a438b
 80a1e7c:	080a4368 	.word	0x080a4368

080a1e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1e84:	6807      	ldr	r7, [r0, #0]
 80a1e86:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1e88:	463c      	mov	r4, r7
 80a1e8a:	6845      	ldr	r5, [r0, #4]
 80a1e8c:	4691      	mov	r9, r2
 80a1e8e:	2214      	movs	r2, #20
 80a1e90:	4355      	muls	r5, r2
 80a1e92:	b085      	sub	sp, #20
 80a1e94:	9301      	str	r3, [sp, #4]
 80a1e96:	10ab      	asrs	r3, r5, #2
 80a1e98:	4d18      	ldr	r5, [pc, #96]	; (80a1efc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a1e9a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1e9c:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1e9e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a1ea0:	2d00      	cmp	r5, #0
 80a1ea2:	9303      	str	r3, [sp, #12]
 80a1ea4:	dd23      	ble.n	80a1eee <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a1ea6:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 80a1ea8:	106e      	asrs	r6, r5, #1
 80a1eaa:	fb03 f006 	mul.w	r0, r3, r6
 80a1eae:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a1eb2:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 80a1eb6:	464a      	mov	r2, r9
 80a1eb8:	45d1      	cmp	r9, sl
 80a1eba:	bf28      	it	cs
 80a1ebc:	4652      	movcs	r2, sl
 80a1ebe:	4659      	mov	r1, fp
 80a1ec0:	5820      	ldr	r0, [r4, r0]
 80a1ec2:	f001 fd93 	bl	80a39ec <strncmp>
                if (cmp == 0) {
 80a1ec6:	9b03      	ldr	r3, [sp, #12]
 80a1ec8:	b948      	cbnz	r0, 80a1ede <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80a1eca:	45d1      	cmp	r9, sl
 80a1ecc:	d103      	bne.n	80a1ed6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a1ece:	9a01      	ldr	r2, [sp, #4]
 80a1ed0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1ed2:	4635      	mov	r5, r6
 80a1ed4:	e7e4      	b.n	80a1ea0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80a1ed6:	bf8c      	ite	hi
 80a1ed8:	2001      	movhi	r0, #1
 80a1eda:	2000      	movls	r0, #0
 80a1edc:	e000      	b.n	80a1ee0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80a1ede:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a1ee0:	2800      	cmp	r0, #0
 80a1ee2:	d0f6      	beq.n	80a1ed2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a1ee4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80a1ee6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80a1eea:	3e01      	subs	r6, #1
 80a1eec:	e7f1      	b.n	80a1ed2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80a1eee:	1be4      	subs	r4, r4, r7
}
 80a1ef0:	4802      	ldr	r0, [pc, #8]	; (80a1efc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80a1ef2:	10a4      	asrs	r4, r4, #2
}
 80a1ef4:	4360      	muls	r0, r4
 80a1ef6:	b005      	add	sp, #20
 80a1ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1efc:	cccccccd 	.word	0xcccccccd

080a1f00 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 80a1f02:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1f04:	b085      	sub	sp, #20
 80a1f06:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 80a1f08:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 80a1f0a:	b313      	cbz	r3, 80a1f52 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 80a1f0c:	b309      	cbz	r1, 80a1f52 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1f0e:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a1f10:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1f12:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1f14:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1f18:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 80a1f1c:	4639      	mov	r1, r7
 80a1f1e:	a801      	add	r0, sp, #4
 80a1f20:	f7ff fdbc 	bl	80a1a9c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1f24:	4601      	mov	r1, r0
 80a1f26:	b1a0      	cbz	r0, 80a1f52 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 80a1f28:	ab04      	add	r3, sp, #16
 80a1f2a:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1f2e:	9a03      	ldr	r2, [sp, #12]
 80a1f30:	4620      	mov	r0, r4
 80a1f32:	f7ff ffa5 	bl	80a1e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1f36:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1f3a:	b153      	cbz	r3, 80a1f52 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 80a1f3c:	6823      	ldr	r3, [r4, #0]
 80a1f3e:	2414      	movs	r4, #20
 80a1f40:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a1f44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 80a1f48:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a1f4a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1f4c:	bfa8      	it	ge
 80a1f4e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a1f50:	e7e4      	b.n	80a1f1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 80a1f52:	4630      	mov	r0, r6
 80a1f54:	b005      	add	sp, #20
 80a1f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1f58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1f58:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1f5a:	4c09      	ldr	r4, [pc, #36]	; (80a1f80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a1f5c:	6823      	ldr	r3, [r4, #0]
 80a1f5e:	07db      	lsls	r3, r3, #31
 80a1f60:	d40b      	bmi.n	80a1f7a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1f62:	4620      	mov	r0, r4
 80a1f64:	f7fe f8a8 	bl	80a00b8 <__cxa_guard_acquire>
 80a1f68:	b138      	cbz	r0, 80a1f7a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1f6a:	4620      	mov	r0, r4
 80a1f6c:	f7fe f8a9 	bl	80a00c2 <__cxa_guard_release>
 80a1f70:	4a04      	ldr	r2, [pc, #16]	; (80a1f84 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1f72:	4905      	ldr	r1, [pc, #20]	; (80a1f88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1f74:	4805      	ldr	r0, [pc, #20]	; (80a1f8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1f76:	f001 fb3b 	bl	80a35f0 <__aeabi_atexit>
    return &factory;
}
 80a1f7a:	4804      	ldr	r0, [pc, #16]	; (80a1f8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1f7c:	bd10      	pop	{r4, pc}
 80a1f7e:	bf00      	nop
 80a1f80:	20000440 	.word	0x20000440
 80a1f84:	20000378 	.word	0x20000378
 80a1f88:	080a1a99 	.word	0x080a1a99
 80a1f8c:	20000304 	.word	0x20000304

080a1f90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1f90:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1f92:	4c09      	ldr	r4, [pc, #36]	; (80a1fb8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a1f94:	6823      	ldr	r3, [r4, #0]
 80a1f96:	07db      	lsls	r3, r3, #31
 80a1f98:	d40b      	bmi.n	80a1fb2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	f7fe f88c 	bl	80a00b8 <__cxa_guard_acquire>
 80a1fa0:	b138      	cbz	r0, 80a1fb2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1fa2:	4620      	mov	r0, r4
 80a1fa4:	f7fe f88d 	bl	80a00c2 <__cxa_guard_release>
 80a1fa8:	4a04      	ldr	r2, [pc, #16]	; (80a1fbc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1faa:	4905      	ldr	r1, [pc, #20]	; (80a1fc0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1fac:	4805      	ldr	r0, [pc, #20]	; (80a1fc4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1fae:	f001 fb1f 	bl	80a35f0 <__aeabi_atexit>
    return &factory;
}
 80a1fb2:	4804      	ldr	r0, [pc, #16]	; (80a1fc4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1fb4:	bd10      	pop	{r4, pc}
 80a1fb6:	bf00      	nop
 80a1fb8:	20000470 	.word	0x20000470
 80a1fbc:	20000378 	.word	0x20000378
 80a1fc0:	080a1a97 	.word	0x080a1a97
 80a1fc4:	20000308 	.word	0x20000308

080a1fc8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1fc8:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a1fca:	2500      	movs	r5, #0
 80a1fcc:	4604      	mov	r4, r0
 80a1fce:	6005      	str	r5, [r0, #0]
 80a1fd0:	6045      	str	r5, [r0, #4]
 80a1fd2:	6085      	str	r5, [r0, #8]
 80a1fd4:	6105      	str	r5, [r0, #16]
 80a1fd6:	6145      	str	r5, [r0, #20]
 80a1fd8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1fda:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1fde:	f7ff f92f 	bl	80a1240 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1fe2:	f7ff ffb9 	bl	80a1f58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1fe6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1fe8:	f7ff ffd2 	bl	80a1f90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1fec:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1fee:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 80a1ff0:	4620      	mov	r0, r4
 80a1ff2:	bd38      	pop	{r3, r4, r5, pc}

080a1ff4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1ff4:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1ff6:	4c0a      	ldr	r4, [pc, #40]	; (80a2020 <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a1ff8:	6823      	ldr	r3, [r4, #0]
 80a1ffa:	07db      	lsls	r3, r3, #31
 80a1ffc:	d40e      	bmi.n	80a201c <_ZN5spark10LogManager8instanceEv+0x28>
 80a1ffe:	4620      	mov	r0, r4
 80a2000:	f7fe f85a 	bl	80a00b8 <__cxa_guard_acquire>
 80a2004:	b150      	cbz	r0, 80a201c <_ZN5spark10LogManager8instanceEv+0x28>
 80a2006:	4807      	ldr	r0, [pc, #28]	; (80a2024 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a2008:	f7ff ffde 	bl	80a1fc8 <_ZN5spark10LogManagerC1Ev>
 80a200c:	4620      	mov	r0, r4
 80a200e:	f7fe f858 	bl	80a00c2 <__cxa_guard_release>
 80a2012:	4a05      	ldr	r2, [pc, #20]	; (80a2028 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a2014:	4905      	ldr	r1, [pc, #20]	; (80a202c <_ZN5spark10LogManager8instanceEv+0x38>)
 80a2016:	4803      	ldr	r0, [pc, #12]	; (80a2024 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a2018:	f001 faea 	bl	80a35f0 <__aeabi_atexit>
    return &mgr;
}
 80a201c:	4801      	ldr	r0, [pc, #4]	; (80a2024 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a201e:	bd10      	pop	{r4, pc}
 80a2020:	20000444 	.word	0x20000444
 80a2024:	20000448 	.word	0x20000448
 80a2028:	20000378 	.word	0x20000378
 80a202c:	080a24b9 	.word	0x080a24b9

080a2030 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a2030:	2300      	movs	r3, #0
 80a2032:	4a02      	ldr	r2, [pc, #8]	; (80a203c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a2034:	4902      	ldr	r1, [pc, #8]	; (80a2040 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a2036:	4803      	ldr	r0, [pc, #12]	; (80a2044 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a2038:	f7ff ba2c 	b.w	80a1494 <log_set_callbacks>
 80a203c:	080a239d 	.word	0x080a239d
 80a2040:	080a232d 	.word	0x080a232d
 80a2044:	080a22b5 	.word	0x080a22b5

080a2048 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a2048:	2300      	movs	r3, #0
 80a204a:	461a      	mov	r2, r3
 80a204c:	4619      	mov	r1, r3
 80a204e:	4618      	mov	r0, r3
 80a2050:	f7ff ba20 	b.w	80a1494 <log_set_callbacks>

080a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2054:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a2056:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2058:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a205a:	b17c      	cbz	r4, 80a207c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a205c:	6863      	ldr	r3, [r4, #4]
 80a205e:	3b01      	subs	r3, #1
 80a2060:	6063      	str	r3, [r4, #4]
 80a2062:	b95b      	cbnz	r3, 80a207c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a2064:	6823      	ldr	r3, [r4, #0]
 80a2066:	4620      	mov	r0, r4
 80a2068:	689b      	ldr	r3, [r3, #8]
 80a206a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a206c:	68a3      	ldr	r3, [r4, #8]
 80a206e:	3b01      	subs	r3, #1
 80a2070:	60a3      	str	r3, [r4, #8]
 80a2072:	b91b      	cbnz	r3, 80a207c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a2074:	6823      	ldr	r3, [r4, #0]
 80a2076:	4620      	mov	r0, r4
 80a2078:	68db      	ldr	r3, [r3, #12]
 80a207a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a207c:	4628      	mov	r0, r5
 80a207e:	bd38      	pop	{r3, r4, r5, pc}

080a2080 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2080:	680b      	ldr	r3, [r1, #0]
 80a2082:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2084:	b113      	cbz	r3, 80a208c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2086:	685a      	ldr	r2, [r3, #4]
 80a2088:	3201      	adds	r2, #1
 80a208a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a208c:	4770      	bx	lr

080a208e <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a208e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a2090:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80a2092:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2094:	f851 3b04 	ldr.w	r3, [r1], #4
 80a2098:	ac02      	add	r4, sp, #8
 80a209a:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a209e:	a801      	add	r0, sp, #4
 80a20a0:	f7ff ffee 	bl	80a2080 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a20a4:	4622      	mov	r2, r4
 80a20a6:	4631      	mov	r1, r6
 80a20a8:	4628      	mov	r0, r5
 80a20aa:	f001 f9df 	bl	80a346c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a20ae:	a801      	add	r0, sp, #4
 80a20b0:	f7ff ffd0 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a20b4:	4628      	mov	r0, r5
 80a20b6:	b002      	add	sp, #8
 80a20b8:	bd70      	pop	{r4, r5, r6, pc}

080a20ba <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a20ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a20bc:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 80a20be:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a20c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80a20c4:	ac02      	add	r4, sp, #8
 80a20c6:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a20ca:	a801      	add	r0, sp, #4
 80a20cc:	f7ff ffd8 	bl	80a2080 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a20d0:	4622      	mov	r2, r4
 80a20d2:	4631      	mov	r1, r6
 80a20d4:	4628      	mov	r0, r5
 80a20d6:	f001 fa0c 	bl	80a34f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a20da:	a801      	add	r0, sp, #4
 80a20dc:	f7ff ffba 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a20e0:	4628      	mov	r0, r5
 80a20e2:	b002      	add	sp, #8
 80a20e4:	bd70      	pop	{r4, r5, r6, pc}

080a20e6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a20e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a20e8:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a20ea:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a20ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80a20f0:	ac02      	add	r4, sp, #8
 80a20f2:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a20f6:	a801      	add	r0, sp, #4
 80a20f8:	f7ff ffc2 	bl	80a2080 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a20fc:	4622      	mov	r2, r4
 80a20fe:	4631      	mov	r1, r6
 80a2100:	4628      	mov	r0, r5
 80a2102:	f001 f9db 	bl	80a34bc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2106:	a801      	add	r0, sp, #4
 80a2108:	f7ff ffa4 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a210c:	4628      	mov	r0, r5
 80a210e:	b002      	add	sp, #8
 80a2110:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2114 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a2114:	b530      	push	{r4, r5, lr}
 80a2116:	b08b      	sub	sp, #44	; 0x2c
 80a2118:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a211a:	4601      	mov	r1, r0
 80a211c:	a804      	add	r0, sp, #16
 80a211e:	f7ff ffe2 	bl	80a20e6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 80a2122:	a804      	add	r0, sp, #16
 80a2124:	f001 f8bf 	bl	80a32a6 <_ZN5spark18JSONObjectIterator4nextEv>
 80a2128:	b1e8      	cbz	r0, 80a2166 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 80a212a:	a904      	add	r1, sp, #16
 80a212c:	4668      	mov	r0, sp
 80a212e:	f7ff ffae 	bl	80a208e <_ZNK5spark18JSONObjectIterator4nameEv>
 80a2132:	490f      	ldr	r1, [pc, #60]	; (80a2170 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 80a2134:	9802      	ldr	r0, [sp, #8]
 80a2136:	f7ff fcfb 	bl	80a1b30 <_ZNK5spark10JSONStringeqEPKc.isra.7>
 80a213a:	4604      	mov	r4, r0
 80a213c:	b110      	cbz	r0, 80a2144 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 80a213e:	1c2c      	adds	r4, r5, #0
 80a2140:	bf18      	it	ne
 80a2142:	2401      	movne	r4, #1
 80a2144:	a801      	add	r0, sp, #4
 80a2146:	f7ff ff85 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a214a:	2c00      	cmp	r4, #0
 80a214c:	d0e9      	beq.n	80a2122 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 80a214e:	a904      	add	r1, sp, #16
 80a2150:	4668      	mov	r0, sp
 80a2152:	f7ff ffb2 	bl	80a20ba <_ZNK5spark18JSONObjectIterator5valueEv>
 80a2156:	4668      	mov	r0, sp
 80a2158:	f001 f885 	bl	80a3266 <_ZNK5spark9JSONValue5toIntEv>
 80a215c:	6028      	str	r0, [r5, #0]
 80a215e:	a801      	add	r0, sp, #4
 80a2160:	f7ff ff78 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2164:	e7dd      	b.n	80a2122 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 80a2166:	a805      	add	r0, sp, #20
 80a2168:	f7ff ff74 	bl	80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 80a216c:	b00b      	add	sp, #44	; 0x2c
 80a216e:	bd30      	pop	{r4, r5, pc}
 80a2170:	080a4396 	.word	0x080a4396

080a2174 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a2174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2176:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a2178:	491a      	ldr	r1, [pc, #104]	; (80a21e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a217a:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a217c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a217e:	f001 fc1b 	bl	80a39b8 <strcmp>
 80a2182:	b940      	cbnz	r0, 80a2196 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 80a2184:	f000 fdd2 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a2188:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a218c:	f000 fdbc 	bl	80a2d08 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a2190:	f000 fdcc 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a2194:	e023      	b.n	80a21de <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 80a2196:	4914      	ldr	r1, [pc, #80]	; (80a21e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a2198:	4620      	mov	r0, r4
 80a219a:	f001 fc0d 	bl	80a39b8 <strcmp>
 80a219e:	b940      	cbnz	r0, 80a21b2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 80a21a0:	f000 fdf2 	bl	80a2d88 <_Z17_fetch_usbserial1v>
 80a21a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a21a8:	f000 fdae 	bl	80a2d08 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a21ac:	f000 fdec 	bl	80a2d88 <_Z17_fetch_usbserial1v>
 80a21b0:	e015      	b.n	80a21de <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 80a21b2:	490e      	ldr	r1, [pc, #56]	; (80a21ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 80a21b4:	4620      	mov	r0, r4
 80a21b6:	f001 fbff 	bl	80a39b8 <strcmp>
 80a21ba:	b978      	cbnz	r0, 80a21dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a21bc:	a902      	add	r1, sp, #8
 80a21be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80a21c2:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 80a21c6:	4628      	mov	r0, r5
 80a21c8:	f7ff ffa4 	bl	80a2114 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a21cc:	f000 fe64 	bl	80a2e98 <_Z22__fetch_global_Serial1v>
 80a21d0:	9901      	ldr	r1, [sp, #4]
 80a21d2:	f000 fe5b 	bl	80a2e8c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a21d6:	f000 fe5f 	bl	80a2e98 <_Z22__fetch_global_Serial1v>
 80a21da:	e000      	b.n	80a21de <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 80a21dc:	2000      	movs	r0, #0
}
 80a21de:	b003      	add	sp, #12
 80a21e0:	bd30      	pop	{r4, r5, pc}
 80a21e2:	bf00      	nop
 80a21e4:	080a439b 	.word	0x080a439b
 80a21e8:	080a43a2 	.word	0x080a43a2
 80a21ec:	080a43a5 	.word	0x080a43a5

080a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a21f0:	b570      	push	{r4, r5, r6, lr}
 80a21f2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a21f4:	6804      	ldr	r4, [r0, #0]
 80a21f6:	6843      	ldr	r3, [r0, #4]
 80a21f8:	2614      	movs	r6, #20
 80a21fa:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a21fe:	42a6      	cmp	r6, r4
 80a2200:	d005      	beq.n	80a220e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a2202:	f104 0008 	add.w	r0, r4, #8
 80a2206:	f7ff fff3 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a220a:	3414      	adds	r4, #20
 80a220c:	e7f7      	b.n	80a21fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a220e:	6828      	ldr	r0, [r5, #0]
 80a2210:	f7ff f9d4 	bl	80a15bc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a2214:	4628      	mov	r0, r5
 80a2216:	bd70      	pop	{r4, r5, r6, pc}

080a2218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a2218:	b570      	push	{r4, r5, r6, lr}
 80a221a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a221c:	6804      	ldr	r4, [r0, #0]
 80a221e:	6843      	ldr	r3, [r0, #4]
 80a2220:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a2224:	42a6      	cmp	r6, r4
 80a2226:	d004      	beq.n	80a2232 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a2228:	4620      	mov	r0, r4
 80a222a:	f7ff fa6b 	bl	80a1704 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a222e:	3410      	adds	r4, #16
 80a2230:	e7f8      	b.n	80a2224 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a2232:	6828      	ldr	r0, [r5, #0]
 80a2234:	f7ff f9c2 	bl	80a15bc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a2238:	4628      	mov	r0, r5
 80a223a:	bd70      	pop	{r4, r5, r6, pc}

080a223c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 80a223c:	b510      	push	{r4, lr}
 80a223e:	4604      	mov	r4, r0
 80a2240:	300c      	adds	r0, #12
 80a2242:	f7ff ffd5 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a2246:	4620      	mov	r0, r4
 80a2248:	f7ff ffe6 	bl	80a2218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a224c:	4620      	mov	r0, r4
 80a224e:	bd10      	pop	{r4, pc}

080a2250 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a2250:	b510      	push	{r4, lr}
 80a2252:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a2254:	4b03      	ldr	r3, [pc, #12]	; (80a2264 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a2256:	f840 3b04 	str.w	r3, [r0], #4
 80a225a:	f7ff ffef 	bl	80a223c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a225e:	4620      	mov	r0, r4
 80a2260:	bd10      	pop	{r4, pc}
 80a2262:	bf00      	nop
 80a2264:	080a3b8c 	.word	0x080a3b8c

080a2268 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a2268:	b510      	push	{r4, lr}
 80a226a:	4604      	mov	r4, r0
 80a226c:	f7ff fff0 	bl	80a2250 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2270:	4620      	mov	r0, r4
 80a2272:	2124      	movs	r1, #36	; 0x24
 80a2274:	f001 f9ca 	bl	80a360c <_ZdlPvj>
 80a2278:	4620      	mov	r0, r4
 80a227a:	bd10      	pop	{r4, pc}

080a227c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 80a227c:	b510      	push	{r4, lr}
 80a227e:	4604      	mov	r4, r0
 80a2280:	4b02      	ldr	r3, [pc, #8]	; (80a228c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a2282:	6003      	str	r3, [r0, #0]
 80a2284:	f7ff ffe4 	bl	80a2250 <_ZN5spark16StreamLogHandlerD1Ev>
 80a2288:	4620      	mov	r0, r4
 80a228a:	bd10      	pop	{r4, pc}
 80a228c:	080a432c 	.word	0x080a432c

080a2290 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a2290:	b510      	push	{r4, lr}
 80a2292:	4604      	mov	r4, r0
 80a2294:	f7ff fff2 	bl	80a227c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a2298:	4620      	mov	r0, r4
 80a229a:	2124      	movs	r1, #36	; 0x24
 80a229c:	f001 f9b6 	bl	80a360c <_ZdlPvj>
 80a22a0:	4620      	mov	r0, r4
 80a22a2:	bd10      	pop	{r4, pc}

080a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a22a4:	b510      	push	{r4, lr}
 80a22a6:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a22a8:	6803      	ldr	r3, [r0, #0]
 80a22aa:	6818      	ldr	r0, [r3, #0]
 80a22ac:	f7fe ffd8 	bl	80a1260 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80a22b0:	4620      	mov	r0, r4
 80a22b2:	bd10      	pop	{r4, pc}

080a22b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a22b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a22b8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a22ba:	4b1b      	ldr	r3, [pc, #108]	; (80a2328 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 80a22bc:	b085      	sub	sp, #20
 80a22be:	685b      	ldr	r3, [r3, #4]
 80a22c0:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a22c2:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a22c6:	460e      	mov	r6, r1
 80a22c8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a22ca:	bb53      	cbnz	r3, 80a2322 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 80a22cc:	f7ff fe92 	bl	80a1ff4 <_ZN5spark10LogManager8instanceEv>
 80a22d0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a22d2:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a22d4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a22d6:	f7ff fced 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a22da:	7b23      	ldrb	r3, [r4, #12]
 80a22dc:	b9f3      	cbnz	r3, 80a231c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a22de:	2301      	movs	r3, #1
 80a22e0:	7323      	strb	r3, [r4, #12]
 80a22e2:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a22e4:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 80a22e6:	b2f6      	uxtb	r6, r6
 80a22e8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a22ec:	454d      	cmp	r5, r9
 80a22ee:	d013      	beq.n	80a2318 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 80a22f0:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 80a22f4:	4641      	mov	r1, r8
 80a22f6:	1d38      	adds	r0, r7, #4
 80a22f8:	f7ff fe02 	bl	80a1f00 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a22fc:	4286      	cmp	r6, r0
 80a22fe:	d3f5      	bcc.n	80a22ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 80a2300:	683b      	ldr	r3, [r7, #0]
 80a2302:	f8cd b000 	str.w	fp, [sp]
 80a2306:	689b      	ldr	r3, [r3, #8]
 80a2308:	4638      	mov	r0, r7
 80a230a:	469e      	mov	lr, r3
 80a230c:	4632      	mov	r2, r6
 80a230e:	4643      	mov	r3, r8
 80a2310:	4651      	mov	r1, sl
 80a2312:	4677      	mov	r7, lr
 80a2314:	47b8      	blx	r7
 80a2316:	e7e9      	b.n	80a22ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a2318:	2300      	movs	r3, #0
 80a231a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a231c:	a803      	add	r0, sp, #12
 80a231e:	f7ff ffc1 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a2322:	b005      	add	sp, #20
 80a2324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2328:	e000ed00 	.word	0xe000ed00

080a232c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a232c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2330:	4699      	mov	r9, r3
 80a2332:	4b19      	ldr	r3, [pc, #100]	; (80a2398 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 80a2334:	4607      	mov	r7, r0
 80a2336:	685b      	ldr	r3, [r3, #4]
 80a2338:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a233a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a233e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a2340:	bb33      	cbnz	r3, 80a2390 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 80a2342:	f7ff fe57 	bl	80a1ff4 <_ZN5spark10LogManager8instanceEv>
 80a2346:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a2348:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a234a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a234c:	f7ff fcb2 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a2350:	7b23      	ldrb	r3, [r4, #12]
 80a2352:	b9d3      	cbnz	r3, 80a238a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a2354:	2301      	movs	r3, #1
 80a2356:	7323      	strb	r3, [r4, #12]
 80a2358:	6825      	ldr	r5, [r4, #0]
 80a235a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 80a235c:	fa5f fb86 	uxtb.w	fp, r6
 80a2360:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a2364:	4555      	cmp	r5, sl
 80a2366:	d00e      	beq.n	80a2386 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 80a2368:	f855 6b04 	ldr.w	r6, [r5], #4
 80a236c:	4649      	mov	r1, r9
 80a236e:	1d30      	adds	r0, r6, #4
 80a2370:	f7ff fdc6 	bl	80a1f00 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a2374:	4583      	cmp	fp, r0
 80a2376:	d3f5      	bcc.n	80a2364 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 80a2378:	6833      	ldr	r3, [r6, #0]
 80a237a:	4642      	mov	r2, r8
 80a237c:	68db      	ldr	r3, [r3, #12]
 80a237e:	4639      	mov	r1, r7
 80a2380:	4630      	mov	r0, r6
 80a2382:	4798      	blx	r3
 80a2384:	e7ee      	b.n	80a2364 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a2386:	2300      	movs	r3, #0
 80a2388:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a238a:	a801      	add	r0, sp, #4
 80a238c:	f7ff ff8a 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 80a2390:	b003      	add	sp, #12
 80a2392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2396:	bf00      	nop
 80a2398:	e000ed00 	.word	0xe000ed00

080a239c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a239c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a23a0:	4b15      	ldr	r3, [pc, #84]	; (80a23f8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 80a23a2:	4604      	mov	r4, r0
 80a23a4:	685b      	ldr	r3, [r3, #4]
 80a23a6:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a23a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a23ac:	b9fb      	cbnz	r3, 80a23ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 80a23ae:	f7ff fe21 	bl	80a1ff4 <_ZN5spark10LogManager8instanceEv>
 80a23b2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a23b4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a23b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a23b8:	f7ff fc7c 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
 80a23bc:	e896 00a0 	ldmia.w	r6, {r5, r7}
 80a23c0:	2646      	movs	r6, #70	; 0x46
 80a23c2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a23c6:	42af      	cmp	r7, r5
 80a23c8:	d107      	bne.n	80a23da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a23ca:	a801      	add	r0, sp, #4
 80a23cc:	f7ff ff6a 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 80a23d0:	42b4      	cmp	r4, r6
 80a23d2:	bfb4      	ite	lt
 80a23d4:	2000      	movlt	r0, #0
 80a23d6:	2001      	movge	r0, #1
 80a23d8:	e00a      	b.n	80a23f0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 80a23da:	f855 0b04 	ldr.w	r0, [r5], #4
 80a23de:	4641      	mov	r1, r8
 80a23e0:	3004      	adds	r0, #4
 80a23e2:	f7ff fd8d 	bl	80a1f00 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a23e6:	4286      	cmp	r6, r0
 80a23e8:	bfa8      	it	ge
 80a23ea:	4606      	movge	r6, r0
 80a23ec:	e7eb      	b.n	80a23c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 80a23ee:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 80a23f0:	b002      	add	sp, #8
 80a23f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a23f6:	bf00      	nop
 80a23f8:	e000ed00 	.word	0xe000ed00

080a23fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a23fc:	b570      	push	{r4, r5, r6, lr}
 80a23fe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a2400:	6803      	ldr	r3, [r0, #0]
 80a2402:	6842      	ldr	r2, [r0, #4]
 80a2404:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a2408:	429a      	cmp	r2, r3
 80a240a:	4618      	mov	r0, r3
 80a240c:	d00d      	beq.n	80a242a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 80a240e:	6806      	ldr	r6, [r0, #0]
 80a2410:	680d      	ldr	r5, [r1, #0]
 80a2412:	3304      	adds	r3, #4
 80a2414:	42ae      	cmp	r6, r5
 80a2416:	d1f7      	bne.n	80a2408 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 80a2418:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a241a:	1a52      	subs	r2, r2, r1
 80a241c:	f001 fa69 	bl	80a38f2 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a2420:	6863      	ldr	r3, [r4, #4]
    return true;
 80a2422:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a2424:	3b01      	subs	r3, #1
 80a2426:	6063      	str	r3, [r4, #4]
    return true;
}
 80a2428:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 80a242a:	2000      	movs	r0, #0
 80a242c:	bd70      	pop	{r4, r5, r6, pc}

080a242e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a242e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2430:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a2432:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a2434:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2436:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a2438:	f7ff fc3c 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a243c:	a901      	add	r1, sp, #4
 80a243e:	4620      	mov	r0, r4
 80a2440:	f7ff ffdc 	bl	80a23fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a2444:	b920      	cbnz	r0, 80a2450 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a2446:	a803      	add	r0, sp, #12
 80a2448:	f7ff ff2c 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 80a244c:	b004      	add	sp, #16
 80a244e:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a2450:	6863      	ldr	r3, [r4, #4]
 80a2452:	2b00      	cmp	r3, #0
 80a2454:	d1f7      	bne.n	80a2446 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 80a2456:	f7ff fdf7 	bl	80a2048 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 80a245a:	e7f4      	b.n	80a2446 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

080a245c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 80a245c:	b570      	push	{r4, r5, r6, lr}
 80a245e:	4604      	mov	r4, r0
 80a2460:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a2462:	6943      	ldr	r3, [r0, #20]
 80a2464:	2618      	movs	r6, #24
 80a2466:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a246a:	42ae      	cmp	r6, r5
 80a246c:	d015      	beq.n	80a249a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a246e:	f105 0110 	add.w	r1, r5, #16
 80a2472:	4620      	mov	r0, r4
 80a2474:	f7ff ffc2 	bl	80a23fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a2478:	6863      	ldr	r3, [r4, #4]
 80a247a:	b90b      	cbnz	r3, 80a2480 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a247c:	f7ff fde4 	bl	80a2048 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 80a2480:	69e0      	ldr	r0, [r4, #28]
 80a2482:	6929      	ldr	r1, [r5, #16]
 80a2484:	6803      	ldr	r3, [r0, #0]
 80a2486:	68db      	ldr	r3, [r3, #12]
 80a2488:	4798      	blx	r3
        if (h.stream) {
 80a248a:	6969      	ldr	r1, [r5, #20]
 80a248c:	b119      	cbz	r1, 80a2496 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a248e:	6a20      	ldr	r0, [r4, #32]
 80a2490:	6803      	ldr	r3, [r0, #0]
 80a2492:	68db      	ldr	r3, [r3, #12]
 80a2494:	4798      	blx	r3
 80a2496:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 80a2498:	e7e7      	b.n	80a246a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 80a249a:	6925      	ldr	r5, [r4, #16]
 80a249c:	6963      	ldr	r3, [r4, #20]
 80a249e:	2618      	movs	r6, #24
 80a24a0:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a24a4:	42b5      	cmp	r5, r6
 80a24a6:	d004      	beq.n	80a24b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a24a8:	4628      	mov	r0, r5
 80a24aa:	f7ff f92b 	bl	80a1704 <_ZN6StringD1Ev>
 80a24ae:	3518      	adds	r5, #24
 80a24b0:	e7f8      	b.n	80a24a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 80a24b2:	2300      	movs	r3, #0
 80a24b4:	6163      	str	r3, [r4, #20]
 80a24b6:	bd70      	pop	{r4, r5, r6, pc}

080a24b8 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 80a24b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a24ba:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a24bc:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 80a24be:	f7ff fdc3 	bl	80a2048 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a24c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a24c6:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 80a24ca:	f7ff fbf3 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 80a24ce:	4620      	mov	r0, r4
 80a24d0:	f7ff ffc4 	bl	80a245c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a24d4:	4628      	mov	r0, r5
 80a24d6:	f7ff fee5 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 80a24da:	6925      	ldr	r5, [r4, #16]
 80a24dc:	6963      	ldr	r3, [r4, #20]
 80a24de:	2618      	movs	r6, #24
 80a24e0:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a24e4:	42b5      	cmp	r5, r6
 80a24e6:	d004      	beq.n	80a24f2 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a24e8:	4628      	mov	r0, r5
 80a24ea:	f7ff f90b 	bl	80a1704 <_ZN6StringD1Ev>
 80a24ee:	3518      	adds	r5, #24
 80a24f0:	e7f8      	b.n	80a24e4 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a24f2:	6920      	ldr	r0, [r4, #16]
 80a24f4:	f7ff f862 	bl	80a15bc <free>
 80a24f8:	6820      	ldr	r0, [r4, #0]
 80a24fa:	f7ff f85f 	bl	80a15bc <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 80a24fe:	4620      	mov	r0, r4
 80a2500:	b002      	add	sp, #8
 80a2502:	bd70      	pop	{r4, r5, r6, pc}

080a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2504:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2506:	680a      	ldr	r2, [r1, #0]
 80a2508:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a250a:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a250c:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a250e:	684a      	ldr	r2, [r1, #4]
 80a2510:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2512:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2514:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2516:	688a      	ldr	r2, [r1, #8]
 80a2518:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a251a:	608b      	str	r3, [r1, #8]
 80a251c:	4770      	bx	lr

080a251e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a251e:	b510      	push	{r4, lr}
 80a2520:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2522:	2300      	movs	r3, #0
 80a2524:	6003      	str	r3, [r0, #0]
 80a2526:	6043      	str	r3, [r0, #4]
 80a2528:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a252a:	f7ff ffeb 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 80a252e:	4620      	mov	r0, r4
 80a2530:	bd10      	pop	{r4, pc}

080a2532 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a2532:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a2534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2536:	4604      	mov	r4, r0
 80a2538:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a253a:	d925      	bls.n	80a2588 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 80a253c:	4290      	cmp	r0, r2
 80a253e:	d224      	bcs.n	80a258a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 80a2540:	1a55      	subs	r5, r2, r1
 80a2542:	3d14      	subs	r5, #20
 80a2544:	442c      	add	r4, r5
 80a2546:	f1a1 0714 	sub.w	r7, r1, #20
 80a254a:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a254e:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a2550:	f1a5 0308 	sub.w	r3, r5, #8
 80a2554:	429f      	cmp	r7, r3
 80a2556:	d037      	beq.n	80a25c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 80a2558:	b184      	cbz	r4, 80a257c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a255a:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a255e:	4629      	mov	r1, r5
 80a2560:	6023      	str	r3, [r4, #0]
 80a2562:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a2566:	f104 0008 	add.w	r0, r4, #8
 80a256a:	80a3      	strh	r3, [r4, #4]
 80a256c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2570:	60a6      	str	r6, [r4, #8]
 80a2572:	80e3      	strh	r3, [r4, #6]
 80a2574:	60e6      	str	r6, [r4, #12]
 80a2576:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a2578:	f7ff ffc4 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a257c:	4628      	mov	r0, r5
 80a257e:	f7ff fe37 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a2582:	3c14      	subs	r4, #20
 80a2584:	3d14      	subs	r5, #20
 80a2586:	e7e3      	b.n	80a2550 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a2588:	d01e      	beq.n	80a25c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 80a258a:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a258e:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a2590:	f1a5 0308 	sub.w	r3, r5, #8
 80a2594:	429e      	cmp	r6, r3
 80a2596:	d017      	beq.n	80a25c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 80a2598:	b184      	cbz	r4, 80a25bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 80a259a:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a259e:	4629      	mov	r1, r5
 80a25a0:	6023      	str	r3, [r4, #0]
 80a25a2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a25a6:	f104 0008 	add.w	r0, r4, #8
 80a25aa:	80a3      	strh	r3, [r4, #4]
 80a25ac:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a25b0:	60a7      	str	r7, [r4, #8]
 80a25b2:	80e3      	strh	r3, [r4, #6]
 80a25b4:	60e7      	str	r7, [r4, #12]
 80a25b6:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a25b8:	f7ff ffa4 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a25bc:	4628      	mov	r0, r5
 80a25be:	f7ff fe17 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a25c2:	3414      	adds	r4, #20
 80a25c4:	3514      	adds	r5, #20
 80a25c6:	e7e3      	b.n	80a2590 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 80a25c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a25ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a25ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25cc:	6845      	ldr	r5, [r0, #4]
 80a25ce:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a25d0:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25d2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a25d4:	460e      	mov	r6, r1
 80a25d6:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a25d8:	db0e      	blt.n	80a25f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 80a25da:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a25dc:	2d00      	cmp	r5, #0
 80a25de:	dd05      	ble.n	80a25ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80a25e0:	00a9      	lsls	r1, r5, #2
 80a25e2:	6800      	ldr	r0, [r0, #0]
 80a25e4:	f7fe fff2 	bl	80a15cc <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80a25e8:	b920      	cbnz	r0, 80a25f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80a25ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a25ec:	6800      	ldr	r0, [r0, #0]
 80a25ee:	f7fe ffe5 	bl	80a15bc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a25f2:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80a25f4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a25f6:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a25f8:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a25fa:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a25fc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a2600:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80a2604:	1a52      	subs	r2, r2, r1
 80a2606:	1d08      	adds	r0, r1, #4
 80a2608:	f001 f973 	bl	80a38f2 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80a260c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a2610:	6863      	ldr	r3, [r4, #4]
 80a2612:	2001      	movs	r0, #1
 80a2614:	3301      	adds	r3, #1
 80a2616:	6063      	str	r3, [r4, #4]
    return true;
}
 80a2618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a261a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a261a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a261c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a261e:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a2620:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2622:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a2624:	f7ff fb46 	bl	80a1cb4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 80a2628:	6823      	ldr	r3, [r4, #0]
 80a262a:	6861      	ldr	r1, [r4, #4]
 80a262c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a2630:	4283      	cmp	r3, r0
 80a2632:	461a      	mov	r2, r3
 80a2634:	d008      	beq.n	80a2648 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 80a2636:	6812      	ldr	r2, [r2, #0]
 80a2638:	3304      	adds	r3, #4
 80a263a:	42aa      	cmp	r2, r5
 80a263c:	d1f8      	bne.n	80a2630 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 80a263e:	a801      	add	r0, sp, #4
 80a2640:	f7ff fe30 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a2644:	2500      	movs	r5, #0
 80a2646:	e00e      	b.n	80a2666 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2648:	462a      	mov	r2, r5
 80a264a:	4620      	mov	r0, r4
 80a264c:	f7ff ffbd 	bl	80a25ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a2650:	4605      	mov	r5, r0
 80a2652:	2800      	cmp	r0, #0
 80a2654:	d0f3      	beq.n	80a263e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 80a2656:	6863      	ldr	r3, [r4, #4]
 80a2658:	2b01      	cmp	r3, #1
 80a265a:	d101      	bne.n	80a2660 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 80a265c:	f7ff fce8 	bl	80a2030 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a2660:	a801      	add	r0, sp, #4
 80a2662:	f7ff fe1f 	bl	80a22a4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 80a2666:	4628      	mov	r0, r5
 80a2668:	b003      	add	sp, #12
 80a266a:	bd30      	pop	{r4, r5, pc}

080a266c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a266c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a266e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2670:	4606      	mov	r6, r0
 80a2672:	460c      	mov	r4, r1
 80a2674:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a2676:	d914      	bls.n	80a26a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a2678:	4290      	cmp	r0, r2
 80a267a:	d213      	bcs.n	80a26a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 80a267c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 80a2680:	1a6c      	subs	r4, r5, r1
 80a2682:	f1a1 0710 	sub.w	r7, r1, #16
 80a2686:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a2688:	42af      	cmp	r7, r5
 80a268a:	d018      	beq.n	80a26be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a268c:	b11c      	cbz	r4, 80a2696 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a268e:	4629      	mov	r1, r5
 80a2690:	4620      	mov	r0, r4
 80a2692:	f7ff f827 	bl	80a16e4 <_ZN6StringC1EOS_>
                end->~T();
 80a2696:	4628      	mov	r0, r5
 80a2698:	f7ff f834 	bl	80a1704 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a269c:	3d10      	subs	r5, #16
 80a269e:	3c10      	subs	r4, #16
 80a26a0:	e7f2      	b.n	80a2688 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a26a2:	d00c      	beq.n	80a26be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a26a4:	42ac      	cmp	r4, r5
 80a26a6:	d00a      	beq.n	80a26be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a26a8:	b11e      	cbz	r6, 80a26b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a26aa:	4621      	mov	r1, r4
 80a26ac:	4630      	mov	r0, r6
 80a26ae:	f7ff f819 	bl	80a16e4 <_ZN6StringC1EOS_>
                p->~T();
 80a26b2:	4620      	mov	r0, r4
 80a26b4:	f7ff f826 	bl	80a1704 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a26b8:	3410      	adds	r4, #16
 80a26ba:	3610      	adds	r6, #16
 80a26bc:	e7f2      	b.n	80a26a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 80a26be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a26c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a26c0:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 80a26c2:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a26c4:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 80a26c6:	dd0b      	ble.n	80a26e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a26c8:	0130      	lsls	r0, r6, #4
 80a26ca:	f7fe ff6f 	bl	80a15ac <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a26ce:	4604      	mov	r4, r0
 80a26d0:	b170      	cbz	r0, 80a26f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 80a26d2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a26d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a26da:	f7ff ffc7 	bl	80a266c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 80a26de:	e000      	b.n	80a26e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a26e0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a26e2:	6828      	ldr	r0, [r5, #0]
 80a26e4:	f7fe ff6a 	bl	80a15bc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a26e8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a26ea:	60ae      	str	r6, [r5, #8]
        return true;
 80a26ec:	2001      	movs	r0, #1
 80a26ee:	bd70      	pop	{r4, r5, r6, pc}
    }
 80a26f0:	bd70      	pop	{r4, r5, r6, pc}

080a26f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a26f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26f6:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a26f8:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a26fa:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a26fc:	b095      	sub	sp, #84	; 0x54
 80a26fe:	6003      	str	r3, [r0, #0]
 80a2700:	6043      	str	r3, [r0, #4]
 80a2702:	6083      	str	r3, [r0, #8]
 80a2704:	60c3      	str	r3, [r0, #12]
 80a2706:	6103      	str	r3, [r0, #16]
 80a2708:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a270a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a270c:	9102      	str	r1, [sp, #8]
 80a270e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a2712:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a2714:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2716:	9308      	str	r3, [sp, #32]
 80a2718:	9309      	str	r3, [sp, #36]	; 0x24
 80a271a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a271c:	f340 809d 	ble.w	80a285a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a2720:	a808      	add	r0, sp, #32
 80a2722:	f7ff ffcd 	bl	80a26c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2726:	2800      	cmp	r0, #0
 80a2728:	f040 8097 	bne.w	80a285a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a272c:	e08e      	b.n	80a284c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 80a272e:	4621      	mov	r1, r4
 80a2730:	a80b      	add	r0, sp, #44	; 0x2c
 80a2732:	f7fe ffd7 	bl	80a16e4 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2736:	a90b      	add	r1, sp, #44	; 0x2c
 80a2738:	a80f      	add	r0, sp, #60	; 0x3c
 80a273a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a273c:	f7fe ffd2 	bl	80a16e4 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2740:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2744:	4299      	cmp	r1, r3
 80a2746:	f2c0 80ce 	blt.w	80a28e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 80a274a:	3101      	adds	r1, #1
 80a274c:	a808      	add	r0, sp, #32
 80a274e:	f7ff ffb7 	bl	80a26c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2752:	2800      	cmp	r0, #0
 80a2754:	f040 80c7 	bne.w	80a28e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2758:	a80f      	add	r0, sp, #60	; 0x3c
 80a275a:	f7fe ffd3 	bl	80a1704 <_ZN6StringD1Ev>
 80a275e:	a80b      	add	r0, sp, #44	; 0x2c
 80a2760:	f7fe ffd0 	bl	80a1704 <_ZN6StringD1Ev>
 80a2764:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 80a2766:	42a7      	cmp	r7, r4
 80a2768:	d1e1      	bne.n	80a272e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a276a:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a276c:	46b1      	mov	r9, r6
 80a276e:	960b      	str	r6, [sp, #44]	; 0x2c
 80a2770:	960c      	str	r6, [sp, #48]	; 0x30
 80a2772:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a2774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2776:	429e      	cmp	r6, r3
 80a2778:	f280 80a8 	bge.w	80a28cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a277c:	9a08      	ldr	r2, [sp, #32]
 80a277e:	0133      	lsls	r3, r6, #4
 80a2780:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80a2782:	9306      	str	r3, [sp, #24]
        if (!category) {
 80a2784:	2b00      	cmp	r3, #0
 80a2786:	f000 809f 	beq.w	80a28c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 80a278a:	2314      	movs	r3, #20
 80a278c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a278e:	f8cd 901c 	str.w	r9, [sp, #28]
 80a2792:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a2794:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a2796:	a907      	add	r1, sp, #28
 80a2798:	a806      	add	r0, sp, #24
 80a279a:	f7ff f97f 	bl	80a1a9c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a279e:	4607      	mov	r7, r0
 80a27a0:	2800      	cmp	r0, #0
 80a27a2:	f000 8091 	beq.w	80a28c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 80a27a6:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 80a27a8:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a27aa:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a27ae:	9a07      	ldr	r2, [sp, #28]
 80a27b0:	4620      	mov	r0, r4
 80a27b2:	f7ff fb65 	bl	80a1e80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a27b6:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 80a27ba:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a27bc:	f1b8 0f00 	cmp.w	r8, #0
 80a27c0:	d153      	bne.n	80a286a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 80a27c2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 80a27c6:	970f      	str	r7, [sp, #60]	; 0x3c
 80a27c8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80a27cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a27d0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80a27d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80a27d8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80a27dc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a27e0:	6867      	ldr	r7, [r4, #4]
 80a27e2:	68a3      	ldr	r3, [r4, #8]
 80a27e4:	429f      	cmp	r7, r3
 80a27e6:	da4f      	bge.n	80a2888 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 80a27e8:	9b00      	ldr	r3, [sp, #0]
 80a27ea:	2214      	movs	r2, #20
 80a27ec:	4353      	muls	r3, r2
 80a27ee:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 80a27f2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a27f4:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 80a27f8:	fb02 b201 	mla	r2, r2, r1, fp
 80a27fc:	f107 0014 	add.w	r0, r7, #20
 80a2800:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a2802:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 80a2804:	f7ff fe95 	bl	80a2532 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a2808:	b1a7      	cbz	r7, 80a2834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a280a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a280c:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a280e:	a911      	add	r1, sp, #68	; 0x44
 80a2810:	f84b 2003 	str.w	r2, [fp, r3]
 80a2814:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80a2818:	f107 0008 	add.w	r0, r7, #8
 80a281c:	80bb      	strh	r3, [r7, #4]
 80a281e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2822:	f8c7 9008 	str.w	r9, [r7, #8]
 80a2826:	80fb      	strh	r3, [r7, #6]
 80a2828:	f8c7 900c 	str.w	r9, [r7, #12]
 80a282c:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a2830:	f7ff fe68 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 80a2834:	6863      	ldr	r3, [r4, #4]
 80a2836:	3301      	adds	r3, #1
 80a2838:	6063      	str	r3, [r4, #4]
 80a283a:	a811      	add	r0, sp, #68	; 0x44
 80a283c:	f7ff fcd8 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2840:	f1b8 0f00 	cmp.w	r8, #0
 80a2844:	d011      	beq.n	80a286a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 80a2846:	a80b      	add	r0, sp, #44	; 0x2c
 80a2848:	f7ff fcd2 	bl	80a21f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a284c:	a808      	add	r0, sp, #32
 80a284e:	f7ff fce3 	bl	80a2218 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 80a2852:	4628      	mov	r0, r5
 80a2854:	b015      	add	sp, #84	; 0x54
 80a2856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a285a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a285e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80a2862:	2714      	movs	r7, #20
 80a2864:	fb07 4703 	mla	r7, r7, r3, r4
 80a2868:	e77d      	b.n	80a2766 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 80a286a:	6823      	ldr	r3, [r4, #0]
 80a286c:	9a00      	ldr	r2, [sp, #0]
 80a286e:	2414      	movs	r4, #20
 80a2870:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 80a2874:	9b06      	ldr	r3, [sp, #24]
 80a2876:	781b      	ldrb	r3, [r3, #0]
 80a2878:	bb23      	cbnz	r3, 80a28c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 80a287a:	f8da 3000 	ldr.w	r3, [sl]
 80a287e:	9a01      	ldr	r2, [sp, #4]
 80a2880:	4413      	add	r3, r2
 80a2882:	7c1b      	ldrb	r3, [r3, #16]
 80a2884:	80e3      	strh	r3, [r4, #6]
 80a2886:	e01d      	b.n	80a28c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2888:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a288a:	2f00      	cmp	r7, #0
 80a288c:	dd0f      	ble.n	80a28ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a288e:	2314      	movs	r3, #20
 80a2890:	fb03 f007 	mul.w	r0, r3, r7
 80a2894:	9303      	str	r3, [sp, #12]
 80a2896:	f7fe fe89 	bl	80a15ac <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a289a:	4683      	mov	fp, r0
 80a289c:	b178      	cbz	r0, 80a28be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 80a289e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a28a2:	9b03      	ldr	r3, [sp, #12]
 80a28a4:	fb03 1202 	mla	r2, r3, r2, r1
 80a28a8:	f7ff fe43 	bl	80a2532 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a28ac:	e000      	b.n	80a28b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a28ae:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a28b0:	6820      	ldr	r0, [r4, #0]
 80a28b2:	f7fe fe83 	bl	80a15bc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a28b6:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 80a28ba:	60a7      	str	r7, [r4, #8]
 80a28bc:	e794      	b.n	80a27e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a28be:	f04f 0801 	mov.w	r8, #1
 80a28c2:	e7ba      	b.n	80a283a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 80a28c4:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a28c6:	e766      	b.n	80a2796 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a28c8:	3601      	adds	r6, #1
 80a28ca:	e753      	b.n	80a2774 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 80a28cc:	a908      	add	r1, sp, #32
 80a28ce:	4628      	mov	r0, r5
 80a28d0:	f7ff fe18 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 80a28d4:	a90b      	add	r1, sp, #44	; 0x2c
 80a28d6:	f105 000c 	add.w	r0, r5, #12
 80a28da:	f7ff fe13 	bl	80a2504 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 80a28de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a28e2:	762b      	strb	r3, [r5, #24]
 80a28e4:	e7af      	b.n	80a2846 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a28e6:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80a28e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a28ea:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a28ee:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a28f2:	4631      	mov	r1, r6
 80a28f4:	f106 0010 	add.w	r0, r6, #16
 80a28f8:	f7ff feb8 	bl	80a266c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a28fc:	b11e      	cbz	r6, 80a2906 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 80a28fe:	a90f      	add	r1, sp, #60	; 0x3c
 80a2900:	4630      	mov	r0, r6
 80a2902:	f7fe feef 	bl	80a16e4 <_ZN6StringC1EOS_>
    ++size_;
 80a2906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2908:	3301      	adds	r3, #1
 80a290a:	9309      	str	r3, [sp, #36]	; 0x24
 80a290c:	e724      	b.n	80a2758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

080a2910 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2910:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a2912:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2914:	460e      	mov	r6, r1
 80a2916:	4605      	mov	r5, r0
        filter_(level, filters) {
 80a2918:	4b08      	ldr	r3, [pc, #32]	; (80a293c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a291a:	4611      	mov	r1, r2
 80a291c:	f844 3b04 	str.w	r3, [r4], #4
 80a2920:	a801      	add	r0, sp, #4
 80a2922:	f7fe f96e 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2926:	aa01      	add	r2, sp, #4
 80a2928:	4631      	mov	r1, r6
 80a292a:	4620      	mov	r0, r4
 80a292c:	f7ff fee1 	bl	80a26f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2930:	a801      	add	r0, sp, #4
 80a2932:	f7fe f925 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a2936:	4628      	mov	r0, r5
 80a2938:	b004      	add	sp, #16
 80a293a:	bd70      	pop	{r4, r5, r6, pc}
 80a293c:	080a3b8c 	.word	0x080a3b8c

080a2940 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a2940:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2942:	460f      	mov	r7, r1
 80a2944:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2946:	492b      	ldr	r1, [pc, #172]	; (80a29f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 80a2948:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a294a:	4616      	mov	r6, r2
 80a294c:	461d      	mov	r5, r3
 80a294e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2950:	f001 f832 	bl	80a39b8 <strcmp>
 80a2954:	bb28      	cbnz	r0, 80a29a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 80a2956:	2c00      	cmp	r4, #0
 80a2958:	d049      	beq.n	80a29ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a295a:	4629      	mov	r1, r5
 80a295c:	a801      	add	r0, sp, #4
 80a295e:	f7ff fdde 	bl	80a251e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2962:	4925      	ldr	r1, [pc, #148]	; (80a29f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a2964:	2024      	movs	r0, #36	; 0x24
 80a2966:	f000 fe53 	bl	80a3610 <_ZnwjRKSt9nothrow_t>
 80a296a:	4605      	mov	r5, r0
 80a296c:	b1b8      	cbz	r0, 80a299e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a296e:	a901      	add	r1, sp, #4
 80a2970:	a804      	add	r0, sp, #16
 80a2972:	f7ff fdd4 	bl	80a251e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a2976:	a904      	add	r1, sp, #16
 80a2978:	a807      	add	r0, sp, #28
 80a297a:	f7fe f942 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a297e:	aa07      	add	r2, sp, #28
 80a2980:	4631      	mov	r1, r6
 80a2982:	4628      	mov	r0, r5
 80a2984:	f7ff ffc4 	bl	80a2910 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2988:	a807      	add	r0, sp, #28
 80a298a:	f7fe f8f9 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a298e:	4b1b      	ldr	r3, [pc, #108]	; (80a29fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a2990:	622c      	str	r4, [r5, #32]
 80a2992:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a2994:	a804      	add	r0, sp, #16
 80a2996:	f7fe f8f3 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a299a:	4b19      	ldr	r3, [pc, #100]	; (80a2a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 80a299c:	602b      	str	r3, [r5, #0]
 80a299e:	a801      	add	r0, sp, #4
 80a29a0:	e01f      	b.n	80a29e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a29a2:	4918      	ldr	r1, [pc, #96]	; (80a2a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 80a29a4:	4638      	mov	r0, r7
 80a29a6:	f001 f807 	bl	80a39b8 <strcmp>
 80a29aa:	b9f0      	cbnz	r0, 80a29ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 80a29ac:	b1fc      	cbz	r4, 80a29ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a29ae:	4629      	mov	r1, r5
 80a29b0:	a804      	add	r0, sp, #16
 80a29b2:	f7ff fdb4 	bl	80a251e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a29b6:	4910      	ldr	r1, [pc, #64]	; (80a29f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a29b8:	2024      	movs	r0, #36	; 0x24
 80a29ba:	f000 fe29 	bl	80a3610 <_ZnwjRKSt9nothrow_t>
 80a29be:	4605      	mov	r5, r0
 80a29c0:	b170      	cbz	r0, 80a29e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a29c2:	a904      	add	r1, sp, #16
 80a29c4:	a807      	add	r0, sp, #28
 80a29c6:	f7fe f91c 	bl	80a0c02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a29ca:	aa07      	add	r2, sp, #28
 80a29cc:	4631      	mov	r1, r6
 80a29ce:	4628      	mov	r0, r5
 80a29d0:	f7ff ff9e 	bl	80a2910 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a29d4:	a807      	add	r0, sp, #28
 80a29d6:	f7fe f8d3 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a29da:	4b08      	ldr	r3, [pc, #32]	; (80a29fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a29dc:	622c      	str	r4, [r5, #32]
 80a29de:	602b      	str	r3, [r5, #0]
 80a29e0:	a804      	add	r0, sp, #16
 80a29e2:	f7fe f8cd 	bl	80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a29e6:	4628      	mov	r0, r5
 80a29e8:	e002      	b.n	80a29f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 80a29ea:	2000      	movs	r0, #0
 80a29ec:	e000      	b.n	80a29f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 80a29ee:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 80a29f0:	b00b      	add	sp, #44	; 0x2c
 80a29f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a29f4:	080a43f7 	.word	0x080a43f7
 80a29f8:	080a45b8 	.word	0x080a45b8
 80a29fc:	080a4440 	.word	0x080a4440
 80a2a00:	080a432c 	.word	0x080a432c
 80a2a04:	080a43fb 	.word	0x080a43fb

080a2a08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2a08:	4a01      	ldr	r2, [pc, #4]	; (80a2a10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2a0a:	4b02      	ldr	r3, [pc, #8]	; (80a2a14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2a0c:	601a      	str	r2, [r3, #0]
 80a2a0e:	4770      	bx	lr
 80a2a10:	080a440c 	.word	0x080a440c
 80a2a14:	20000474 	.word	0x20000474

080a2a18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2a18:	4b02      	ldr	r3, [pc, #8]	; (80a2a24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2a1a:	681a      	ldr	r2, [r3, #0]
 80a2a1c:	4b02      	ldr	r3, [pc, #8]	; (80a2a28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2a1e:	601a      	str	r2, [r3, #0]
 80a2a20:	4770      	bx	lr
 80a2a22:	bf00      	nop
 80a2a24:	2000030c 	.word	0x2000030c
 80a2a28:	20000478 	.word	0x20000478

080a2a2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2a2c:	2100      	movs	r1, #0
 80a2a2e:	f7fe bd41 	b.w	80a14b4 <system_delay_ms>

080a2a32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2a32:	b510      	push	{r4, lr}
 80a2a34:	4604      	mov	r4, r0
 80a2a36:	f7fd fba3 	bl	80a0180 <_ZNSt14_Function_baseD1Ev>
 80a2a3a:	4620      	mov	r0, r4
 80a2a3c:	bd10      	pop	{r4, pc}
	...

080a2a40 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2a40:	4803      	ldr	r0, [pc, #12]	; (80a2a50 <_GLOBAL__sub_I_RGB+0x10>)
 80a2a42:	2300      	movs	r3, #0
 80a2a44:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2a46:	4a03      	ldr	r2, [pc, #12]	; (80a2a54 <_GLOBAL__sub_I_RGB+0x14>)
 80a2a48:	4903      	ldr	r1, [pc, #12]	; (80a2a58 <_GLOBAL__sub_I_RGB+0x18>)
 80a2a4a:	f000 bdd1 	b.w	80a35f0 <__aeabi_atexit>
 80a2a4e:	bf00      	nop
 80a2a50:	2000047c 	.word	0x2000047c
 80a2a54:	20000378 	.word	0x20000378
 80a2a58:	080a2a33 	.word	0x080a2a33

080a2a5c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2a5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2a5e:	4b14      	ldr	r3, [pc, #80]	; (80a2ab0 <serialEventRun+0x54>)
 80a2a60:	b133      	cbz	r3, 80a2a70 <serialEventRun+0x14>
 80a2a62:	f000 f963 	bl	80a2d2c <_Z16_fetch_usbserialv>
 80a2a66:	6803      	ldr	r3, [r0, #0]
 80a2a68:	691b      	ldr	r3, [r3, #16]
 80a2a6a:	4798      	blx	r3
 80a2a6c:	2800      	cmp	r0, #0
 80a2a6e:	dc16      	bgt.n	80a2a9e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2a70:	4b10      	ldr	r3, [pc, #64]	; (80a2ab4 <serialEventRun+0x58>)
 80a2a72:	b133      	cbz	r3, 80a2a82 <serialEventRun+0x26>
 80a2a74:	f000 fa10 	bl	80a2e98 <_Z22__fetch_global_Serial1v>
 80a2a78:	6803      	ldr	r3, [r0, #0]
 80a2a7a:	691b      	ldr	r3, [r3, #16]
 80a2a7c:	4798      	blx	r3
 80a2a7e:	2800      	cmp	r0, #0
 80a2a80:	dc10      	bgt.n	80a2aa4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2a82:	4b0d      	ldr	r3, [pc, #52]	; (80a2ab8 <serialEventRun+0x5c>)
 80a2a84:	b10b      	cbz	r3, 80a2a8a <serialEventRun+0x2e>
 80a2a86:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2a8a:	4b0c      	ldr	r3, [pc, #48]	; (80a2abc <serialEventRun+0x60>)
 80a2a8c:	b17b      	cbz	r3, 80a2aae <serialEventRun+0x52>
 80a2a8e:	f000 f97b 	bl	80a2d88 <_Z17_fetch_usbserial1v>
 80a2a92:	6803      	ldr	r3, [r0, #0]
 80a2a94:	691b      	ldr	r3, [r3, #16]
 80a2a96:	4798      	blx	r3
 80a2a98:	2800      	cmp	r0, #0
 80a2a9a:	dc06      	bgt.n	80a2aaa <serialEventRun+0x4e>
 80a2a9c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2a9e:	f3af 8000 	nop.w
 80a2aa2:	e7e5      	b.n	80a2a70 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2aa4:	f3af 8000 	nop.w
 80a2aa8:	e7eb      	b.n	80a2a82 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2aaa:	f3af 8000 	nop.w
 80a2aae:	bd08      	pop	{r3, pc}
	...

080a2ac0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2ac0:	b508      	push	{r3, lr}
	serialEventRun();
 80a2ac2:	f7ff ffcb 	bl	80a2a5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2ac6:	f7fe fb5b 	bl	80a1180 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2aca:	4b01      	ldr	r3, [pc, #4]	; (80a2ad0 <_post_loop+0x10>)
 80a2acc:	6018      	str	r0, [r3, #0]
 80a2ace:	bd08      	pop	{r3, pc}
 80a2ad0:	20000514 	.word	0x20000514

080a2ad4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2ad4:	4802      	ldr	r0, [pc, #8]	; (80a2ae0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2ad6:	4a03      	ldr	r2, [pc, #12]	; (80a2ae4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2ad8:	4903      	ldr	r1, [pc, #12]	; (80a2ae8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2ada:	1a12      	subs	r2, r2, r0
 80a2adc:	f000 befe 	b.w	80a38dc <memcpy>
 80a2ae0:	40024000 	.word	0x40024000
 80a2ae4:	40024030 	.word	0x40024030
 80a2ae8:	080a47f0 	.word	0x080a47f0

080a2aec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2aec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2aee:	2300      	movs	r3, #0
 80a2af0:	9300      	str	r3, [sp, #0]
 80a2af2:	461a      	mov	r2, r3
 80a2af4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2af8:	f7fe fcee 	bl	80a14d8 <system_ctrl_set_result>
}
 80a2afc:	b003      	add	sp, #12
 80a2afe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2b04 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2b04:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2b06:	8843      	ldrh	r3, [r0, #2]
 80a2b08:	2b0a      	cmp	r3, #10
 80a2b0a:	d008      	beq.n	80a2b1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2b0c:	2b50      	cmp	r3, #80	; 0x50
 80a2b0e:	d109      	bne.n	80a2b24 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2b10:	4b09      	ldr	r3, [pc, #36]	; (80a2b38 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2b12:	681b      	ldr	r3, [r3, #0]
 80a2b14:	b13b      	cbz	r3, 80a2b26 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2b16:	b003      	add	sp, #12
 80a2b18:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2b1c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2b1e:	f7ff ffe5 	bl	80a2aec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2b22:	e006      	b.n	80a2b32 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b24:	2300      	movs	r3, #0
 80a2b26:	9300      	str	r3, [sp, #0]
 80a2b28:	461a      	mov	r2, r3
 80a2b2a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b2e:	f7fe fcd3 	bl	80a14d8 <system_ctrl_set_result>
        break;
    }
}
 80a2b32:	b003      	add	sp, #12
 80a2b34:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2b38:	2000048c 	.word	0x2000048c

080a2b3c <module_user_init_hook>:

void module_user_init_hook()
{
 80a2b3c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2b3e:	4c10      	ldr	r4, [pc, #64]	; (80a2b80 <module_user_init_hook+0x44>)
 80a2b40:	4d10      	ldr	r5, [pc, #64]	; (80a2b84 <module_user_init_hook+0x48>)
 80a2b42:	6823      	ldr	r3, [r4, #0]
 80a2b44:	42ab      	cmp	r3, r5
 80a2b46:	4b10      	ldr	r3, [pc, #64]	; (80a2b88 <module_user_init_hook+0x4c>)
 80a2b48:	bf0c      	ite	eq
 80a2b4a:	2201      	moveq	r2, #1
 80a2b4c:	2200      	movne	r2, #0
 80a2b4e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2b50:	d002      	beq.n	80a2b58 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2b52:	f7ff ffbf 	bl	80a2ad4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2b56:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2b58:	f7fe fb02 	bl	80a1160 <HAL_RNG_GetRandomNumber>
 80a2b5c:	4604      	mov	r4, r0
    srand(seed);
 80a2b5e:	f000 feeb 	bl	80a3938 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2b62:	4b0a      	ldr	r3, [pc, #40]	; (80a2b8c <module_user_init_hook+0x50>)
 80a2b64:	b113      	cbz	r3, 80a2b6c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2b66:	4620      	mov	r0, r4
 80a2b68:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2b6c:	2100      	movs	r1, #0
 80a2b6e:	4807      	ldr	r0, [pc, #28]	; (80a2b8c <module_user_init_hook+0x50>)
 80a2b70:	f7fe fd14 	bl	80a159c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2b78:	2100      	movs	r1, #0
 80a2b7a:	4805      	ldr	r0, [pc, #20]	; (80a2b90 <module_user_init_hook+0x54>)
 80a2b7c:	f7fe bca2 	b.w	80a14c4 <system_ctrl_set_app_request_handler>
 80a2b80:	4002402c 	.word	0x4002402c
 80a2b84:	9a271c1e 	.word	0x9a271c1e
 80a2b88:	20000490 	.word	0x20000490
 80a2b8c:	00000000 	.word	0x00000000
 80a2b90:	080a2b05 	.word	0x080a2b05

080a2b94 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2b94:	4770      	bx	lr

080a2b96 <_ZN9IPAddressD0Ev>:
 80a2b96:	b510      	push	{r4, lr}
 80a2b98:	4604      	mov	r4, r0
 80a2b9a:	2118      	movs	r1, #24
 80a2b9c:	f000 fd36 	bl	80a360c <_ZdlPvj>
 80a2ba0:	4620      	mov	r0, r4
 80a2ba2:	bd10      	pop	{r4, pc}

080a2ba4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ba6:	460f      	mov	r7, r1
 80a2ba8:	f100 0608 	add.w	r6, r0, #8
 80a2bac:	1d05      	adds	r5, r0, #4
 80a2bae:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2bb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2bb4:	220a      	movs	r2, #10
 80a2bb6:	4638      	mov	r0, r7
 80a2bb8:	f7fe ff1a 	bl	80a19f0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2bbc:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2bbe:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2bc0:	d007      	beq.n	80a2bd2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2bc2:	2c00      	cmp	r4, #0
 80a2bc4:	d0f4      	beq.n	80a2bb0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2bc6:	212e      	movs	r1, #46	; 0x2e
 80a2bc8:	4638      	mov	r0, r7
 80a2bca:	f7fe fece 	bl	80a196a <_ZN5Print5printEc>
 80a2bce:	4404      	add	r4, r0
 80a2bd0:	e7ee      	b.n	80a2bb0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2bd2:	4620      	mov	r0, r4
 80a2bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2bd8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2bd8:	b510      	push	{r4, lr}
 80a2bda:	4604      	mov	r4, r0
 80a2bdc:	4b04      	ldr	r3, [pc, #16]	; (80a2bf0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2bde:	2211      	movs	r2, #17
 80a2be0:	f840 3b04 	str.w	r3, [r0], #4
 80a2be4:	2100      	movs	r1, #0
 80a2be6:	f000 fe9f 	bl	80a3928 <memset>
{
    clear();
}
 80a2bea:	4620      	mov	r0, r4
 80a2bec:	bd10      	pop	{r4, pc}
 80a2bee:	bf00      	nop
 80a2bf0:	080a449c 	.word	0x080a449c

080a2bf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2bf4:	4603      	mov	r3, r0
 80a2bf6:	4a07      	ldr	r2, [pc, #28]	; (80a2c14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2bf8:	b510      	push	{r4, lr}
 80a2bfa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2bfe:	f101 0210 	add.w	r2, r1, #16
 80a2c02:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2c06:	4291      	cmp	r1, r2
 80a2c08:	f843 4b04 	str.w	r4, [r3], #4
 80a2c0c:	d1f9      	bne.n	80a2c02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2c0e:	780a      	ldrb	r2, [r1, #0]
 80a2c10:	701a      	strb	r2, [r3, #0]
}
 80a2c12:	bd10      	pop	{r4, pc}
 80a2c14:	080a449c 	.word	0x080a449c

080a2c18 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2c18:	4a02      	ldr	r2, [pc, #8]	; (80a2c24 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2c1a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2c1c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2c1e:	2204      	movs	r2, #4
 80a2c20:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2c22:	4770      	bx	lr
 80a2c24:	080a449c 	.word	0x080a449c

080a2c28 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2c28:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2c2a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2c2e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2c32:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2c36:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2c3a:	2304      	movs	r3, #4
 80a2c3c:	6041      	str	r1, [r0, #4]
 80a2c3e:	7503      	strb	r3, [r0, #20]
 80a2c40:	bd10      	pop	{r4, pc}
	...

080a2c44 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2c46:	4d04      	ldr	r5, [pc, #16]	; (80a2c58 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2c48:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2c4a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2c4e:	9500      	str	r5, [sp, #0]
 80a2c50:	f7ff ffea 	bl	80a2c28 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2c54:	b003      	add	sp, #12
 80a2c56:	bd30      	pop	{r4, r5, pc}
 80a2c58:	080a449c 	.word	0x080a449c

080a2c5c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2c5c:	7441      	strb	r1, [r0, #17]
 80a2c5e:	4770      	bx	lr

080a2c60 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2c60:	4770      	bx	lr

080a2c62 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2c62:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2c64:	2100      	movs	r1, #0
 80a2c66:	7c00      	ldrb	r0, [r0, #16]
 80a2c68:	f7fe fbcc 	bl	80a1404 <HAL_USB_USART_Receive_Data>
}
 80a2c6c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2c70:	bf28      	it	cs
 80a2c72:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2c76:	bd08      	pop	{r3, pc}

080a2c78 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2c78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2c7a:	2101      	movs	r1, #1
 80a2c7c:	7c00      	ldrb	r0, [r0, #16]
 80a2c7e:	f7fe fbc1 	bl	80a1404 <HAL_USB_USART_Receive_Data>
}
 80a2c82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2c86:	bf28      	it	cs
 80a2c88:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2c8c:	bd08      	pop	{r3, pc}

080a2c8e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2c8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2c90:	7c00      	ldrb	r0, [r0, #16]
 80a2c92:	f7fe fbaf 	bl	80a13f4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2c96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c9a:	bd08      	pop	{r3, pc}

080a2c9c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2c9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2c9e:	7c00      	ldrb	r0, [r0, #16]
 80a2ca0:	f7fe fba0 	bl	80a13e4 <HAL_USB_USART_Available_Data>
}
 80a2ca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ca8:	bd08      	pop	{r3, pc}

080a2caa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2caa:	7c00      	ldrb	r0, [r0, #16]
 80a2cac:	f7fe bbba 	b.w	80a1424 <HAL_USB_USART_Flush_Data>

080a2cb0 <_ZN9USBSerialD0Ev>:
 80a2cb0:	b510      	push	{r4, lr}
 80a2cb2:	4604      	mov	r4, r0
 80a2cb4:	2114      	movs	r1, #20
 80a2cb6:	f000 fca9 	bl	80a360c <_ZdlPvj>
 80a2cba:	4620      	mov	r0, r4
 80a2cbc:	bd10      	pop	{r4, pc}

080a2cbe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2cbe:	b538      	push	{r3, r4, r5, lr}
 80a2cc0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2cc2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2cc4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2cc6:	f7fe fb95 	bl	80a13f4 <HAL_USB_USART_Available_Data_For_Write>
 80a2cca:	2800      	cmp	r0, #0
 80a2ccc:	dc01      	bgt.n	80a2cd2 <_ZN9USBSerial5writeEh+0x14>
 80a2cce:	7c60      	ldrb	r0, [r4, #17]
 80a2cd0:	b128      	cbz	r0, 80a2cde <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2cd2:	4629      	mov	r1, r5
 80a2cd4:	7c20      	ldrb	r0, [r4, #16]
 80a2cd6:	f7fe fb9d 	bl	80a1414 <HAL_USB_USART_Send_Data>
 80a2cda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2cde:	bd38      	pop	{r3, r4, r5, pc}

080a2ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2ce0:	b510      	push	{r4, lr}
 80a2ce2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2ce4:	2300      	movs	r3, #0
 80a2ce6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2cec:	60a3      	str	r3, [r4, #8]
 80a2cee:	4b05      	ldr	r3, [pc, #20]	; (80a2d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2cf0:	4608      	mov	r0, r1
 80a2cf2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2cf4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2cf6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2cf8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2cfa:	4611      	mov	r1, r2
 80a2cfc:	f7fe fb5a 	bl	80a13b4 <HAL_USB_USART_Init>
}
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	bd10      	pop	{r4, pc}
 80a2d04:	080a44b0 	.word	0x080a44b0

080a2d08 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2d08:	2200      	movs	r2, #0
 80a2d0a:	7c00      	ldrb	r0, [r0, #16]
 80a2d0c:	f7fe bb5a 	b.w	80a13c4 <HAL_USB_USART_Begin>

080a2d10 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80a2d10:	7c00      	ldrb	r0, [r0, #16]
 80a2d12:	f7fe bb5f 	b.w	80a13d4 <HAL_USB_USART_End>

080a2d16 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
 80a2d16:	7c00      	ldrb	r0, [r0, #16]
 80a2d18:	f7fe bb8c 	b.w	80a1434 <HAL_USB_USART_Is_Connected>

080a2d1c <_Z19acquireSerialBufferv>:
 80a2d1c:	b510      	push	{r4, lr}
 80a2d1e:	4604      	mov	r4, r0
 80a2d20:	2214      	movs	r2, #20
 80a2d22:	2100      	movs	r1, #0
 80a2d24:	f000 fe00 	bl	80a3928 <memset>
 80a2d28:	4620      	mov	r0, r4
 80a2d2a:	bd10      	pop	{r4, pc}

080a2d2c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2d2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2d2e:	4d0e      	ldr	r5, [pc, #56]	; (80a2d68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2d30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2d32:	a801      	add	r0, sp, #4
 80a2d34:	f7ff fff2 	bl	80a2d1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2d38:	6829      	ldr	r1, [r5, #0]
 80a2d3a:	f011 0401 	ands.w	r4, r1, #1
 80a2d3e:	d110      	bne.n	80a2d62 <_Z16_fetch_usbserialv+0x36>
 80a2d40:	4628      	mov	r0, r5
 80a2d42:	f7fd f9b9 	bl	80a00b8 <__cxa_guard_acquire>
 80a2d46:	b160      	cbz	r0, 80a2d62 <_Z16_fetch_usbserialv+0x36>
 80a2d48:	aa01      	add	r2, sp, #4
 80a2d4a:	4621      	mov	r1, r4
 80a2d4c:	4807      	ldr	r0, [pc, #28]	; (80a2d6c <_Z16_fetch_usbserialv+0x40>)
 80a2d4e:	f7ff ffc7 	bl	80a2ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2d52:	4628      	mov	r0, r5
 80a2d54:	f7fd f9b5 	bl	80a00c2 <__cxa_guard_release>
 80a2d58:	4a05      	ldr	r2, [pc, #20]	; (80a2d70 <_Z16_fetch_usbserialv+0x44>)
 80a2d5a:	4906      	ldr	r1, [pc, #24]	; (80a2d74 <_Z16_fetch_usbserialv+0x48>)
 80a2d5c:	4803      	ldr	r0, [pc, #12]	; (80a2d6c <_Z16_fetch_usbserialv+0x40>)
 80a2d5e:	f000 fc47 	bl	80a35f0 <__aeabi_atexit>
	return _usbserial;
}
 80a2d62:	4802      	ldr	r0, [pc, #8]	; (80a2d6c <_Z16_fetch_usbserialv+0x40>)
 80a2d64:	b007      	add	sp, #28
 80a2d66:	bd30      	pop	{r4, r5, pc}
 80a2d68:	20000494 	.word	0x20000494
 80a2d6c:	2000049c 	.word	0x2000049c
 80a2d70:	20000378 	.word	0x20000378
 80a2d74:	080a2c61 	.word	0x080a2c61

080a2d78 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2d78:	b510      	push	{r4, lr}
 80a2d7a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2d7c:	2214      	movs	r2, #20
 80a2d7e:	2100      	movs	r1, #0
 80a2d80:	f000 fdd2 	bl	80a3928 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2d84:	4620      	mov	r0, r4
 80a2d86:	bd10      	pop	{r4, pc}

080a2d88 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2d88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2d8a:	4c0e      	ldr	r4, [pc, #56]	; (80a2dc4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2d8c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2d8e:	a801      	add	r0, sp, #4
 80a2d90:	f7ff fff2 	bl	80a2d78 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2d94:	6823      	ldr	r3, [r4, #0]
 80a2d96:	07db      	lsls	r3, r3, #31
 80a2d98:	d410      	bmi.n	80a2dbc <_Z17_fetch_usbserial1v+0x34>
 80a2d9a:	4620      	mov	r0, r4
 80a2d9c:	f7fd f98c 	bl	80a00b8 <__cxa_guard_acquire>
 80a2da0:	b160      	cbz	r0, 80a2dbc <_Z17_fetch_usbserial1v+0x34>
 80a2da2:	aa01      	add	r2, sp, #4
 80a2da4:	2101      	movs	r1, #1
 80a2da6:	4808      	ldr	r0, [pc, #32]	; (80a2dc8 <_Z17_fetch_usbserial1v+0x40>)
 80a2da8:	f7ff ff9a 	bl	80a2ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2dac:	4620      	mov	r0, r4
 80a2dae:	f7fd f988 	bl	80a00c2 <__cxa_guard_release>
 80a2db2:	4a06      	ldr	r2, [pc, #24]	; (80a2dcc <_Z17_fetch_usbserial1v+0x44>)
 80a2db4:	4906      	ldr	r1, [pc, #24]	; (80a2dd0 <_Z17_fetch_usbserial1v+0x48>)
 80a2db6:	4804      	ldr	r0, [pc, #16]	; (80a2dc8 <_Z17_fetch_usbserial1v+0x40>)
 80a2db8:	f000 fc1a 	bl	80a35f0 <__aeabi_atexit>
  return _usbserial1;
}
 80a2dbc:	4802      	ldr	r0, [pc, #8]	; (80a2dc8 <_Z17_fetch_usbserial1v+0x40>)
 80a2dbe:	b006      	add	sp, #24
 80a2dc0:	bd10      	pop	{r4, pc}
 80a2dc2:	bf00      	nop
 80a2dc4:	20000498 	.word	0x20000498
 80a2dc8:	200004b0 	.word	0x200004b0
 80a2dcc:	20000378 	.word	0x20000378
 80a2dd0:	080a2c61 	.word	0x080a2c61

080a2dd4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2dd4:	4770      	bx	lr

080a2dd6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2dd6:	7441      	strb	r1, [r0, #17]
 80a2dd8:	4770      	bx	lr

080a2dda <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2dda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2ddc:	7c00      	ldrb	r0, [r0, #16]
 80a2dde:	f7fe fa87 	bl	80a12f0 <HAL_USART_Available_Data_For_Write>
}
 80a2de2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2de6:	bd08      	pop	{r3, pc}

080a2de8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2de8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2dea:	7c00      	ldrb	r0, [r0, #16]
 80a2dec:	f7fe fa60 	bl	80a12b0 <HAL_USART_Available_Data>
}
 80a2df0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2df4:	bd08      	pop	{r3, pc}

080a2df6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2df6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2df8:	7c00      	ldrb	r0, [r0, #16]
 80a2dfa:	f7fe fa69 	bl	80a12d0 <HAL_USART_Peek_Data>
}
 80a2dfe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2e02:	bf28      	it	cs
 80a2e04:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2e08:	bd08      	pop	{r3, pc}

080a2e0a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2e0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2e0c:	7c00      	ldrb	r0, [r0, #16]
 80a2e0e:	f7fe fa57 	bl	80a12c0 <HAL_USART_Read_Data>
}
 80a2e12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2e16:	bf28      	it	cs
 80a2e18:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2e1c:	bd08      	pop	{r3, pc}

080a2e1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2e1e:	7c00      	ldrb	r0, [r0, #16]
 80a2e20:	f7fe ba5e 	b.w	80a12e0 <HAL_USART_Flush_Data>

080a2e24 <_ZN11USARTSerialD0Ev>:
 80a2e24:	b510      	push	{r4, lr}
 80a2e26:	4604      	mov	r4, r0
 80a2e28:	2114      	movs	r1, #20
 80a2e2a:	f000 fbef 	bl	80a360c <_ZdlPvj>
 80a2e2e:	4620      	mov	r0, r4
 80a2e30:	bd10      	pop	{r4, pc}

080a2e32 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2e32:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2e34:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2e36:	4604      	mov	r4, r0
 80a2e38:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2e3a:	b925      	cbnz	r5, 80a2e46 <_ZN11USARTSerial5writeEh+0x14>
 80a2e3c:	7c00      	ldrb	r0, [r0, #16]
 80a2e3e:	f7fe fa57 	bl	80a12f0 <HAL_USART_Available_Data_For_Write>
 80a2e42:	2800      	cmp	r0, #0
 80a2e44:	dd05      	ble.n	80a2e52 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2e46:	4631      	mov	r1, r6
 80a2e48:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2e4e:	f7fe ba27 	b.w	80a12a0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2e52:	4628      	mov	r0, r5
 80a2e54:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2e58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2e58:	b510      	push	{r4, lr}
 80a2e5a:	4604      	mov	r4, r0
 80a2e5c:	4608      	mov	r0, r1
 80a2e5e:	4611      	mov	r1, r2
 80a2e60:	2200      	movs	r2, #0
 80a2e62:	6062      	str	r2, [r4, #4]
 80a2e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2e68:	60a2      	str	r2, [r4, #8]
 80a2e6a:	4a05      	ldr	r2, [pc, #20]	; (80a2e80 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2e6c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2e6e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2e70:	2201      	movs	r2, #1
 80a2e72:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2e74:	461a      	mov	r2, r3
 80a2e76:	f7fe fa03 	bl	80a1280 <HAL_USART_Init>
}
 80a2e7a:	4620      	mov	r0, r4
 80a2e7c:	bd10      	pop	{r4, pc}
 80a2e7e:	bf00      	nop
 80a2e80:	080a44e0 	.word	0x080a44e0

080a2e84 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a2e84:	2300      	movs	r3, #0
 80a2e86:	7c00      	ldrb	r0, [r0, #16]
 80a2e88:	f7fe ba3a 	b.w	80a1300 <HAL_USART_BeginConfig>

080a2e8c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a2e8c:	2200      	movs	r2, #0
 80a2e8e:	f7ff bff9 	b.w	80a2e84 <_ZN11USARTSerial5beginEmm>

080a2e92 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a2e92:	7c00      	ldrb	r0, [r0, #16]
 80a2e94:	f7fe b9fc 	b.w	80a1290 <HAL_USART_End>

080a2e98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2e9a:	4c19      	ldr	r4, [pc, #100]	; (80a2f00 <_Z22__fetch_global_Serial1v+0x68>)
 80a2e9c:	6825      	ldr	r5, [r4, #0]
 80a2e9e:	b94d      	cbnz	r5, 80a2eb4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a2ea0:	2084      	movs	r0, #132	; 0x84
 80a2ea2:	f7fd f8fa 	bl	80a009a <_Znwj>
 80a2ea6:	4606      	mov	r6, r0
 80a2ea8:	b118      	cbz	r0, 80a2eb2 <_Z22__fetch_global_Serial1v+0x1a>
 80a2eaa:	2284      	movs	r2, #132	; 0x84
 80a2eac:	4629      	mov	r1, r5
 80a2eae:	f000 fd3b 	bl	80a3928 <memset>
 80a2eb2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2eb4:	4d13      	ldr	r5, [pc, #76]	; (80a2f04 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2eb6:	682e      	ldr	r6, [r5, #0]
 80a2eb8:	b94e      	cbnz	r6, 80a2ece <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2eba:	2084      	movs	r0, #132	; 0x84
 80a2ebc:	f7fd f8ed 	bl	80a009a <_Znwj>
 80a2ec0:	4607      	mov	r7, r0
 80a2ec2:	b118      	cbz	r0, 80a2ecc <_Z22__fetch_global_Serial1v+0x34>
 80a2ec4:	2284      	movs	r2, #132	; 0x84
 80a2ec6:	4631      	mov	r1, r6
 80a2ec8:	f000 fd2e 	bl	80a3928 <memset>
 80a2ecc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2ece:	4f0e      	ldr	r7, [pc, #56]	; (80a2f08 <_Z22__fetch_global_Serial1v+0x70>)
 80a2ed0:	6839      	ldr	r1, [r7, #0]
 80a2ed2:	f011 0601 	ands.w	r6, r1, #1
 80a2ed6:	d111      	bne.n	80a2efc <_Z22__fetch_global_Serial1v+0x64>
 80a2ed8:	4638      	mov	r0, r7
 80a2eda:	f7fd f8ed 	bl	80a00b8 <__cxa_guard_acquire>
 80a2ede:	b168      	cbz	r0, 80a2efc <_Z22__fetch_global_Serial1v+0x64>
 80a2ee0:	6822      	ldr	r2, [r4, #0]
 80a2ee2:	4631      	mov	r1, r6
 80a2ee4:	682b      	ldr	r3, [r5, #0]
 80a2ee6:	4809      	ldr	r0, [pc, #36]	; (80a2f0c <_Z22__fetch_global_Serial1v+0x74>)
 80a2ee8:	f7ff ffb6 	bl	80a2e58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2eec:	4638      	mov	r0, r7
 80a2eee:	f7fd f8e8 	bl	80a00c2 <__cxa_guard_release>
 80a2ef2:	4a07      	ldr	r2, [pc, #28]	; (80a2f10 <_Z22__fetch_global_Serial1v+0x78>)
 80a2ef4:	4907      	ldr	r1, [pc, #28]	; (80a2f14 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2ef6:	4805      	ldr	r0, [pc, #20]	; (80a2f0c <_Z22__fetch_global_Serial1v+0x74>)
 80a2ef8:	f000 fb7a 	bl	80a35f0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2efc:	4803      	ldr	r0, [pc, #12]	; (80a2f0c <_Z22__fetch_global_Serial1v+0x74>)
 80a2efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2f00:	200004e0 	.word	0x200004e0
 80a2f04:	200004d8 	.word	0x200004d8
 80a2f08:	200004dc 	.word	0x200004dc
 80a2f0c:	200004c4 	.word	0x200004c4
 80a2f10:	20000378 	.word	0x20000378
 80a2f14:	080a2dd5 	.word	0x080a2dd5

080a2f18 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2f18:	4770      	bx	lr

080a2f1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f1c:	4606      	mov	r6, r0
 80a2f1e:	4615      	mov	r5, r2
 80a2f20:	460c      	mov	r4, r1
 80a2f22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2f24:	42bc      	cmp	r4, r7
 80a2f26:	d006      	beq.n	80a2f36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2f28:	6833      	ldr	r3, [r6, #0]
 80a2f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2f2e:	689b      	ldr	r3, [r3, #8]
 80a2f30:	4630      	mov	r0, r6
 80a2f32:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2f34:	e7f6      	b.n	80a2f24 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2f36:	4628      	mov	r0, r5
 80a2f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2f3a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2f3a:	2200      	movs	r2, #0
 80a2f3c:	7c00      	ldrb	r0, [r0, #16]
 80a2f3e:	f7fe ba07 	b.w	80a1350 <HAL_I2C_Write_Data>

080a2f42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2f42:	2100      	movs	r1, #0
 80a2f44:	7c00      	ldrb	r0, [r0, #16]
 80a2f46:	f7fe ba0b 	b.w	80a1360 <HAL_I2C_Available_Data>

080a2f4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2f4a:	2100      	movs	r1, #0
 80a2f4c:	7c00      	ldrb	r0, [r0, #16]
 80a2f4e:	f7fe ba0f 	b.w	80a1370 <HAL_I2C_Read_Data>

080a2f52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2f52:	2100      	movs	r1, #0
 80a2f54:	7c00      	ldrb	r0, [r0, #16]
 80a2f56:	f7fe ba13 	b.w	80a1380 <HAL_I2C_Peek_Data>

080a2f5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2f5a:	2100      	movs	r1, #0
 80a2f5c:	7c00      	ldrb	r0, [r0, #16]
 80a2f5e:	f7fe ba17 	b.w	80a1390 <HAL_I2C_Flush_Data>

080a2f62 <_ZN7TwoWireD0Ev>:
 80a2f62:	b510      	push	{r4, lr}
 80a2f64:	4604      	mov	r4, r0
 80a2f66:	2114      	movs	r1, #20
 80a2f68:	f000 fb50 	bl	80a360c <_ZdlPvj>
 80a2f6c:	4620      	mov	r0, r4
 80a2f6e:	bd10      	pop	{r4, pc}

080a2f70 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2f70:	b510      	push	{r4, lr}
 80a2f72:	4604      	mov	r4, r0
 80a2f74:	4608      	mov	r0, r1
 80a2f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2f7a:	60a3      	str	r3, [r4, #8]
 80a2f7c:	4b04      	ldr	r3, [pc, #16]	; (80a2f90 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2f7e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2f80:	7420      	strb	r0, [r4, #16]
 80a2f82:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2f84:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2f86:	f7fe fa0b 	bl	80a13a0 <HAL_I2C_Init>

}
 80a2f8a:	4620      	mov	r0, r4
 80a2f8c:	bd10      	pop	{r4, pc}
 80a2f8e:	bf00      	nop
 80a2f90:	080a4510 	.word	0x080a4510

080a2f94 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2f94:	2300      	movs	r3, #0
 80a2f96:	461a      	mov	r2, r3
 80a2f98:	4619      	mov	r1, r3
 80a2f9a:	7c00      	ldrb	r0, [r0, #16]
 80a2f9c:	f7fe b9b8 	b.w	80a1310 <HAL_I2C_Begin>

080a2fa0 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2fa0:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2fa2:	2400      	movs	r4, #0
 80a2fa4:	7c00      	ldrb	r0, [r0, #16]
 80a2fa6:	9400      	str	r4, [sp, #0]
 80a2fa8:	f7fe f9ba 	bl	80a1320 <HAL_I2C_Request_Data>
  return result;
}
 80a2fac:	b2c0      	uxtb	r0, r0
 80a2fae:	b002      	add	sp, #8
 80a2fb0:	bd10      	pop	{r4, pc}

080a2fb2 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2fb2:	2301      	movs	r3, #1
 80a2fb4:	f7ff bff4 	b.w	80a2fa0 <_ZN7TwoWire11requestFromEhhh>

080a2fb8 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2fb8:	2200      	movs	r2, #0
 80a2fba:	7c00      	ldrb	r0, [r0, #16]
 80a2fbc:	f7fe b9b8 	b.w	80a1330 <HAL_I2C_Begin_Transmission>

080a2fc0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2fc0:	2200      	movs	r2, #0
 80a2fc2:	7c00      	ldrb	r0, [r0, #16]
 80a2fc4:	f7fe b9bc 	b.w	80a1340 <HAL_I2C_End_Transmission>

080a2fc8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2fc8:	2101      	movs	r1, #1
 80a2fca:	f7ff bff9 	b.w	80a2fc0 <_ZN7TwoWire15endTransmissionEh>

080a2fce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2fd0:	4616      	mov	r6, r2
 80a2fd2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2fd4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2fd6:	460f      	mov	r7, r1
 80a2fd8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2fda:	2100      	movs	r1, #0
 80a2fdc:	a803      	add	r0, sp, #12
 80a2fde:	f000 fca3 	bl	80a3928 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2fe2:	4630      	mov	r0, r6
 80a2fe4:	f000 fcfa 	bl	80a39dc <strlen>
 80a2fe8:	2500      	movs	r5, #0
 80a2fea:	9500      	str	r5, [sp, #0]
 80a2fec:	b281      	uxth	r1, r0
 80a2fee:	687b      	ldr	r3, [r7, #4]
 80a2ff0:	aa03      	add	r2, sp, #12
 80a2ff2:	4630      	mov	r0, r6
 80a2ff4:	f7fe fa26 	bl	80a1444 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ff8:	b120      	cbz	r0, 80a3004 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2ffa:	4629      	mov	r1, r5
 80a2ffc:	4620      	mov	r0, r4
 80a2ffe:	f7ff fe0b 	bl	80a2c18 <_ZN9IPAddressC1Em>
 80a3002:	e003      	b.n	80a300c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3004:	a903      	add	r1, sp, #12
 80a3006:	4620      	mov	r0, r4
 80a3008:	f7ff fdf4 	bl	80a2bf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a300c:	4620      	mov	r0, r4
 80a300e:	b009      	add	sp, #36	; 0x24
 80a3010:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3012 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3012:	2200      	movs	r2, #0
 80a3014:	4611      	mov	r1, r2
 80a3016:	6840      	ldr	r0, [r0, #4]
 80a3018:	f7fe baa0 	b.w	80a155c <network_listening>

080a301c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a301c:	2200      	movs	r2, #0
 80a301e:	4611      	mov	r1, r2
 80a3020:	6840      	ldr	r0, [r0, #4]
 80a3022:	f7fe baab 	b.w	80a157c <network_get_listen_timeout>

080a3026 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3026:	2200      	movs	r2, #0
 80a3028:	6840      	ldr	r0, [r0, #4]
 80a302a:	f7fe ba9f 	b.w	80a156c <network_set_listen_timeout>

080a302e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a302e:	2200      	movs	r2, #0
 80a3030:	f081 0101 	eor.w	r1, r1, #1
 80a3034:	6840      	ldr	r0, [r0, #4]
 80a3036:	f7fe ba89 	b.w	80a154c <network_listen>

080a303a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a303a:	2300      	movs	r3, #0
 80a303c:	461a      	mov	r2, r3
 80a303e:	4619      	mov	r1, r3
 80a3040:	6840      	ldr	r0, [r0, #4]
 80a3042:	f7fe ba7b 	b.w	80a153c <network_off>

080a3046 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3046:	2200      	movs	r2, #0
 80a3048:	2102      	movs	r1, #2
 80a304a:	6840      	ldr	r0, [r0, #4]
 80a304c:	f7fe ba5e 	b.w	80a150c <network_disconnect>

080a3050 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3050:	2300      	movs	r3, #0
 80a3052:	461a      	mov	r2, r3
 80a3054:	6840      	ldr	r0, [r0, #4]
 80a3056:	f7fe ba49 	b.w	80a14ec <network_connect>
	...

080a305c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a305c:	4b02      	ldr	r3, [pc, #8]	; (80a3068 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a305e:	2204      	movs	r2, #4
 80a3060:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3062:	4a02      	ldr	r2, [pc, #8]	; (80a306c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3064:	601a      	str	r2, [r3, #0]
 80a3066:	4770      	bx	lr
 80a3068:	200004e4 	.word	0x200004e4
 80a306c:	080a4538 	.word	0x080a4538

080a3070 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3070:	2300      	movs	r3, #0
 80a3072:	461a      	mov	r2, r3
 80a3074:	6840      	ldr	r0, [r0, #4]
 80a3076:	f7fe ba39 	b.w	80a14ec <network_connect>

080a307a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a307a:	2200      	movs	r2, #0
 80a307c:	2102      	movs	r1, #2
 80a307e:	6840      	ldr	r0, [r0, #4]
 80a3080:	f7fe ba44 	b.w	80a150c <network_disconnect>

080a3084 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3084:	2200      	movs	r2, #0
 80a3086:	4611      	mov	r1, r2
 80a3088:	6840      	ldr	r0, [r0, #4]
 80a308a:	f7fe ba37 	b.w	80a14fc <network_connecting>

080a308e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a308e:	2200      	movs	r2, #0
 80a3090:	4611      	mov	r1, r2
 80a3092:	6840      	ldr	r0, [r0, #4]
 80a3094:	f7fe ba42 	b.w	80a151c <network_ready>

080a3098 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3098:	2300      	movs	r3, #0
 80a309a:	461a      	mov	r2, r3
 80a309c:	4619      	mov	r1, r3
 80a309e:	6840      	ldr	r0, [r0, #4]
 80a30a0:	f7fe ba44 	b.w	80a152c <network_on>

080a30a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a30a4:	2300      	movs	r3, #0
 80a30a6:	461a      	mov	r2, r3
 80a30a8:	4619      	mov	r1, r3
 80a30aa:	6840      	ldr	r0, [r0, #4]
 80a30ac:	f7fe ba46 	b.w	80a153c <network_off>

080a30b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a30b0:	2200      	movs	r2, #0
 80a30b2:	f081 0101 	eor.w	r1, r1, #1
 80a30b6:	6840      	ldr	r0, [r0, #4]
 80a30b8:	f7fe ba48 	b.w	80a154c <network_listen>

080a30bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a30bc:	2200      	movs	r2, #0
 80a30be:	6840      	ldr	r0, [r0, #4]
 80a30c0:	f7fe ba54 	b.w	80a156c <network_set_listen_timeout>

080a30c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a30c4:	2200      	movs	r2, #0
 80a30c6:	4611      	mov	r1, r2
 80a30c8:	6840      	ldr	r0, [r0, #4]
 80a30ca:	f7fe ba57 	b.w	80a157c <network_get_listen_timeout>

080a30ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a30ce:	2200      	movs	r2, #0
 80a30d0:	4611      	mov	r1, r2
 80a30d2:	6840      	ldr	r0, [r0, #4]
 80a30d4:	f7fe ba42 	b.w	80a155c <network_listening>

080a30d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a30d8:	b570      	push	{r4, r5, r6, lr}
 80a30da:	4616      	mov	r6, r2
 80a30dc:	b08e      	sub	sp, #56	; 0x38
 80a30de:	4604      	mov	r4, r0
    IPAddress addr;
 80a30e0:	a808      	add	r0, sp, #32
 80a30e2:	f7ff fd79 	bl	80a2bd8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a30e6:	2211      	movs	r2, #17
 80a30e8:	2100      	movs	r1, #0
 80a30ea:	a803      	add	r0, sp, #12
 80a30ec:	f000 fc1c 	bl	80a3928 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a30f0:	4630      	mov	r0, r6
 80a30f2:	f000 fc73 	bl	80a39dc <strlen>
 80a30f6:	2500      	movs	r5, #0
 80a30f8:	4b0a      	ldr	r3, [pc, #40]	; (80a3124 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a30fa:	9500      	str	r5, [sp, #0]
 80a30fc:	b281      	uxth	r1, r0
 80a30fe:	685b      	ldr	r3, [r3, #4]
 80a3100:	aa03      	add	r2, sp, #12
 80a3102:	4630      	mov	r0, r6
 80a3104:	f7fe f99e 	bl	80a1444 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3108:	b120      	cbz	r0, 80a3114 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a310a:	4629      	mov	r1, r5
 80a310c:	4620      	mov	r0, r4
 80a310e:	f7ff fd83 	bl	80a2c18 <_ZN9IPAddressC1Em>
 80a3112:	e003      	b.n	80a311c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3114:	a903      	add	r1, sp, #12
 80a3116:	4620      	mov	r0, r4
 80a3118:	f7ff fd6c 	bl	80a2bf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a311c:	4620      	mov	r0, r4
 80a311e:	b00e      	add	sp, #56	; 0x38
 80a3120:	bd70      	pop	{r4, r5, r6, pc}
 80a3122:	bf00      	nop
 80a3124:	200004e4 	.word	0x200004e4

080a3128 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3128:	4b02      	ldr	r3, [pc, #8]	; (80a3134 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a312a:	4a03      	ldr	r2, [pc, #12]	; (80a3138 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a312c:	601a      	str	r2, [r3, #0]
 80a312e:	2200      	movs	r2, #0
 80a3130:	605a      	str	r2, [r3, #4]
 80a3132:	4770      	bx	lr
 80a3134:	200004ec 	.word	0x200004ec
 80a3138:	080a456c 	.word	0x080a456c

080a313c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 80a313c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 80a3140:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 80a3142:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80a3146:	4610      	mov	r0, r2
 80a3148:	2901      	cmp	r1, #1
 80a314a:	d104      	bne.n	80a3156 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 80a314c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80a3150:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a3154:	e004      	b.n	80a3160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 80a3156:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a3158:	bf04      	itt	eq
 80a315a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 80a315e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 80a3160:	3b01      	subs	r3, #1
 80a3162:	f102 0210 	add.w	r2, r2, #16
 80a3166:	d1ec      	bne.n	80a3142 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 80a3168:	4770      	bx	lr

080a316a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a316a:	b40e      	push	{r1, r2, r3}
 80a316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3170:	b087      	sub	sp, #28
 80a3172:	af00      	add	r7, sp, #0
 80a3174:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80a3178:	f854 6b04 	ldr.w	r6, [r4], #4
 80a317c:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a317e:	4623      	mov	r3, r4
 80a3180:	4632      	mov	r2, r6
 80a3182:	2110      	movs	r1, #16
 80a3184:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 80a3188:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a318a:	f7fe fa27 	bl	80a15dc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a318e:	280f      	cmp	r0, #15
 80a3190:	d916      	bls.n	80a31c0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 80a3192:	f100 0308 	add.w	r3, r0, #8
 80a3196:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a319a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 80a319c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a31a0:	4632      	mov	r2, r6
 80a31a2:	1c41      	adds	r1, r0, #1
 80a31a4:	4623      	mov	r3, r4
 80a31a6:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 80a31a8:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a31aa:	f7fe fa17 	bl	80a15dc <vsnprintf>
        va_end(args);
        if (n > 0) {
 80a31ae:	1e02      	subs	r2, r0, #0
 80a31b0:	dd04      	ble.n	80a31bc <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a31b2:	682b      	ldr	r3, [r5, #0]
 80a31b4:	4669      	mov	r1, sp
 80a31b6:	689b      	ldr	r3, [r3, #8]
 80a31b8:	4628      	mov	r0, r5
 80a31ba:	4798      	blx	r3
 80a31bc:	46c5      	mov	sp, r8
 80a31be:	e007      	b.n	80a31d0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 80a31c0:	b130      	cbz	r0, 80a31d0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 80a31c2:	682b      	ldr	r3, [r5, #0]
 80a31c4:	4602      	mov	r2, r0
 80a31c6:	689b      	ldr	r3, [r3, #8]
 80a31c8:	f107 0108 	add.w	r1, r7, #8
 80a31cc:	4628      	mov	r0, r5
 80a31ce:	4798      	blx	r3
    }
}
 80a31d0:	371c      	adds	r7, #28
 80a31d2:	46bd      	mov	sp, r7
 80a31d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a31d8:	b003      	add	sp, #12
 80a31da:	4770      	bx	lr

080a31dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a31dc:	b510      	push	{r4, lr}
 80a31de:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a31e0:	6803      	ldr	r3, [r0, #0]
 80a31e2:	689b      	ldr	r3, [r3, #8]
 80a31e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a31e6:	68a3      	ldr	r3, [r4, #8]
 80a31e8:	3b01      	subs	r3, #1
 80a31ea:	60a3      	str	r3, [r4, #8]
 80a31ec:	b92b      	cbnz	r3, 80a31fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80a31ee:	6823      	ldr	r3, [r4, #0]
 80a31f0:	4620      	mov	r0, r4
        }
    }
 80a31f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a31f6:	68db      	ldr	r3, [r3, #12]
 80a31f8:	4718      	bx	r3
 80a31fa:	bd10      	pop	{r4, pc}

080a31fc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a31fc:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a31fe:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a3200:	ab02      	add	r3, sp, #8
 80a3202:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a3206:	6894      	ldr	r4, [r2, #8]
 80a3208:	4619      	mov	r1, r3
 80a320a:	2201      	movs	r2, #1
 80a320c:	47a0      	blx	r4
}
 80a320e:	b002      	add	sp, #8
 80a3210:	bd10      	pop	{r4, pc}

080a3212 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 80a3212:	6883      	ldr	r3, [r0, #8]
 80a3214:	b1fb      	cbz	r3, 80a3256 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80a3216:	781a      	ldrb	r2, [r3, #0]
 80a3218:	2a03      	cmp	r2, #3
 80a321a:	d81a      	bhi.n	80a3252 <_ZNK5spark9JSONValue4typeEv+0x40>
 80a321c:	e8df f002 	tbb	[pc, r2]
 80a3220:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 80a3224:	2005      	movs	r0, #5
 80a3226:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80a3228:	6802      	ldr	r2, [r0, #0]
 80a322a:	685b      	ldr	r3, [r3, #4]
 80a322c:	6852      	ldr	r2, [r2, #4]
 80a322e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a3230:	282d      	cmp	r0, #45	; 0x2d
 80a3232:	d014      	beq.n	80a325e <_ZNK5spark9JSONValue4typeEv+0x4c>
 80a3234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a3238:	2b09      	cmp	r3, #9
 80a323a:	d910      	bls.n	80a325e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a323c:	2874      	cmp	r0, #116	; 0x74
 80a323e:	d010      	beq.n	80a3262 <_ZNK5spark9JSONValue4typeEv+0x50>
 80a3240:	2866      	cmp	r0, #102	; 0x66
 80a3242:	d00e      	beq.n	80a3262 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a3244:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a3248:	4258      	negs	r0, r3
 80a324a:	4158      	adcs	r0, r3
 80a324c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 80a324e:	2006      	movs	r0, #6
 80a3250:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 80a3252:	2000      	movs	r0, #0
 80a3254:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a3256:	4618      	mov	r0, r3
 80a3258:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 80a325a:	2004      	movs	r0, #4
 80a325c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 80a325e:	2003      	movs	r0, #3
 80a3260:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 80a3262:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 80a3264:	4770      	bx	lr

080a3266 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 80a3266:	b510      	push	{r4, lr}
 80a3268:	4604      	mov	r4, r0
    switch (type()) {
 80a326a:	f7ff ffd2 	bl	80a3212 <_ZNK5spark9JSONValue4typeEv>
 80a326e:	2802      	cmp	r0, #2
 80a3270:	d00d      	beq.n	80a328e <_ZNK5spark9JSONValue5toIntEv+0x28>
 80a3272:	d316      	bcc.n	80a32a2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
 80a3274:	2804      	cmp	r0, #4
 80a3276:	d814      	bhi.n	80a32a2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 80a3278:	6822      	ldr	r2, [r4, #0]
 80a327a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 80a327c:	6850      	ldr	r0, [r2, #4]
 80a327e:	685b      	ldr	r3, [r3, #4]
 80a3280:	220a      	movs	r2, #10
 80a3282:	2100      	movs	r1, #0
 80a3284:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 80a3286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 80a328a:	f000 bc5d 	b.w	80a3b48 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 80a328e:	6822      	ldr	r2, [r4, #0]
 80a3290:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a3292:	6852      	ldr	r2, [r2, #4]
 80a3294:	685b      	ldr	r3, [r3, #4]
 80a3296:	5cd0      	ldrb	r0, [r2, r3]
 80a3298:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a329c:	4258      	negs	r0, r3
 80a329e:	4158      	adcs	r0, r3
 80a32a0:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 80a32a2:	2000      	movs	r0, #0
    }
}
 80a32a4:	bd10      	pop	{r4, pc}

080a32a6 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a32a6:	b510      	push	{r4, lr}
    if (!n_) {
 80a32a8:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a32aa:	4604      	mov	r4, r0
    if (!n_) {
 80a32ac:	b15b      	cbz	r3, 80a32c6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 80a32ae:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80a32b0:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 80a32b2:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a32b4:	3010      	adds	r0, #16
 80a32b6:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a32b8:	6120      	str	r0, [r4, #16]
    --n_;
 80a32ba:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a32bc:	b12b      	cbz	r3, 80a32ca <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 80a32be:	f7ff ff3d 	bl	80a313c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a32c2:	60a0      	str	r0, [r4, #8]
 80a32c4:	e001      	b.n	80a32ca <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 80a32c6:	4618      	mov	r0, r3
 80a32c8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 80a32ca:	2001      	movs	r0, #1
}
 80a32cc:	bd10      	pop	{r4, pc}

080a32ce <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 80a32ce:	b510      	push	{r4, lr}
 80a32d0:	4604      	mov	r4, r0
    write('}');
 80a32d2:	217d      	movs	r1, #125	; 0x7d
 80a32d4:	f7ff ff92 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a32d8:	2301      	movs	r3, #1
 80a32da:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a32dc:	4620      	mov	r0, r4
 80a32de:	bd10      	pop	{r4, pc}

080a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80a32e0:	b508      	push	{r3, lr}
    switch (state_) {
 80a32e2:	7903      	ldrb	r3, [r0, #4]
 80a32e4:	2b01      	cmp	r3, #1
 80a32e6:	d002      	beq.n	80a32ee <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a32e8:	2b02      	cmp	r3, #2
 80a32ea:	d002      	beq.n	80a32f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80a32ec:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80a32ee:	212c      	movs	r1, #44	; 0x2c
 80a32f0:	e000      	b.n	80a32f4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80a32f2:	213a      	movs	r1, #58	; 0x3a
 80a32f4:	f7ff ff82 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
 80a32f8:	bd08      	pop	{r3, pc}

080a32fa <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a32fa:	b510      	push	{r4, lr}
 80a32fc:	4604      	mov	r4, r0
    writeSeparator();
 80a32fe:	f7ff ffef 	bl	80a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a3302:	4620      	mov	r0, r4
 80a3304:	217b      	movs	r1, #123	; 0x7b
 80a3306:	f7ff ff79 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a330a:	2300      	movs	r3, #0
 80a330c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a330e:	4620      	mov	r0, r4
 80a3310:	bd10      	pop	{r4, pc}
	...

080a3314 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a3314:	b538      	push	{r3, r4, r5, lr}
 80a3316:	4604      	mov	r4, r0
 80a3318:	460d      	mov	r5, r1
    writeSeparator();
 80a331a:	f7ff ffe1 	bl	80a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a331e:	6823      	ldr	r3, [r4, #0]
 80a3320:	4620      	mov	r0, r4
 80a3322:	68db      	ldr	r3, [r3, #12]
 80a3324:	462a      	mov	r2, r5
 80a3326:	4903      	ldr	r1, [pc, #12]	; (80a3334 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a3328:	4798      	blx	r3
    state_ = NEXT;
 80a332a:	2301      	movs	r3, #1
 80a332c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a332e:	4620      	mov	r0, r4
 80a3330:	bd38      	pop	{r3, r4, r5, pc}
 80a3332:	bf00      	nop
 80a3334:	080a4375 	.word	0x080a4375

080a3338 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a3338:	b538      	push	{r3, r4, r5, lr}
 80a333a:	4604      	mov	r4, r0
 80a333c:	460d      	mov	r5, r1
    writeSeparator();
 80a333e:	f7ff ffcf 	bl	80a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a3342:	6823      	ldr	r3, [r4, #0]
 80a3344:	4620      	mov	r0, r4
 80a3346:	68db      	ldr	r3, [r3, #12]
 80a3348:	462a      	mov	r2, r5
 80a334a:	4903      	ldr	r1, [pc, #12]	; (80a3358 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a334c:	4798      	blx	r3
    state_ = NEXT;
 80a334e:	2301      	movs	r3, #1
 80a3350:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a3352:	4620      	mov	r0, r4
 80a3354:	bd38      	pop	{r3, r4, r5, pc}
 80a3356:	bf00      	nop
 80a3358:	080a45a7 	.word	0x080a45a7

080a335c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a335e:	460d      	mov	r5, r1
 80a3360:	4617      	mov	r7, r2
    write('"');
 80a3362:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a3364:	4604      	mov	r4, r0
    write('"');
 80a3366:	f7ff ff49 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
 80a336a:	462a      	mov	r2, r5
    const char* const end = str + size;
 80a336c:	4629      	mov	r1, r5
 80a336e:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 80a3370:	42ba      	cmp	r2, r7
 80a3372:	d038      	beq.n	80a33e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 80a3374:	4616      	mov	r6, r2
 80a3376:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a337a:	2d22      	cmp	r5, #34	; 0x22
 80a337c:	d003      	beq.n	80a3386 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a337e:	2d5c      	cmp	r5, #92	; 0x5c
 80a3380:	d001      	beq.n	80a3386 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a3382:	2d1f      	cmp	r5, #31
 80a3384:	d82d      	bhi.n	80a33e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 80a3386:	6823      	ldr	r3, [r4, #0]
 80a3388:	1a52      	subs	r2, r2, r1
 80a338a:	689b      	ldr	r3, [r3, #8]
 80a338c:	4620      	mov	r0, r4
 80a338e:	4798      	blx	r3
            write('\\');
 80a3390:	215c      	movs	r1, #92	; 0x5c
 80a3392:	4620      	mov	r0, r4
 80a3394:	f7ff ff32 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a3398:	2d0c      	cmp	r5, #12
 80a339a:	d019      	beq.n	80a33d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 80a339c:	d807      	bhi.n	80a33ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 80a339e:	2d09      	cmp	r5, #9
 80a33a0:	d00f      	beq.n	80a33c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 80a33a2:	2d0a      	cmp	r5, #10
 80a33a4:	d012      	beq.n	80a33cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 80a33a6:	2d08      	cmp	r5, #8
 80a33a8:	d114      	bne.n	80a33d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a33aa:	2162      	movs	r1, #98	; 0x62
 80a33ac:	e00a      	b.n	80a33c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 80a33ae:	2d22      	cmp	r5, #34	; 0x22
 80a33b0:	d005      	beq.n	80a33be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a33b2:	2d5c      	cmp	r5, #92	; 0x5c
 80a33b4:	d003      	beq.n	80a33be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a33b6:	2d0d      	cmp	r5, #13
 80a33b8:	d10c      	bne.n	80a33d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 80a33ba:	2172      	movs	r1, #114	; 0x72
 80a33bc:	e002      	b.n	80a33c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 80a33be:	4629      	mov	r1, r5
 80a33c0:	e000      	b.n	80a33c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 80a33c2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a33c4:	4620      	mov	r0, r4
 80a33c6:	f7ff ff19 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
                break;
 80a33ca:	e009      	b.n	80a33e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 80a33cc:	216e      	movs	r1, #110	; 0x6e
 80a33ce:	e7f9      	b.n	80a33c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 80a33d0:	2166      	movs	r1, #102	; 0x66
 80a33d2:	e7f7      	b.n	80a33c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a33d4:	6823      	ldr	r3, [r4, #0]
 80a33d6:	462a      	mov	r2, r5
 80a33d8:	68db      	ldr	r3, [r3, #12]
 80a33da:	4909      	ldr	r1, [pc, #36]	; (80a3400 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 80a33dc:	4620      	mov	r0, r4
 80a33de:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80a33e0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80a33e2:	4632      	mov	r2, r6
 80a33e4:	e7c4      	b.n	80a3370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80a33e6:	4291      	cmp	r1, r2
 80a33e8:	d004      	beq.n	80a33f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80a33ea:	6823      	ldr	r3, [r4, #0]
 80a33ec:	1a52      	subs	r2, r2, r1
 80a33ee:	689d      	ldr	r5, [r3, #8]
 80a33f0:	4620      	mov	r0, r4
 80a33f2:	47a8      	blx	r5
    }
    write('"');
 80a33f4:	2122      	movs	r1, #34	; 0x22
 80a33f6:	4620      	mov	r0, r4
 80a33f8:	f7ff ff00 	bl	80a31fc <_ZN5spark10JSONWriter5writeEc>
 80a33fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a33fe:	bf00      	nop
 80a3400:	080a45b2 	.word	0x080a45b2

080a3404 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a3404:	b570      	push	{r4, r5, r6, lr}
 80a3406:	4604      	mov	r4, r0
 80a3408:	460d      	mov	r5, r1
 80a340a:	4616      	mov	r6, r2
    writeSeparator();
 80a340c:	f7ff ff68 	bl	80a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a3410:	4620      	mov	r0, r4
 80a3412:	4632      	mov	r2, r6
 80a3414:	4629      	mov	r1, r5
 80a3416:	f7ff ffa1 	bl	80a335c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a341a:	2302      	movs	r3, #2
 80a341c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a341e:	4620      	mov	r0, r4
 80a3420:	bd70      	pop	{r4, r5, r6, pc}

080a3422 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a3422:	b570      	push	{r4, r5, r6, lr}
 80a3424:	4604      	mov	r4, r0
 80a3426:	460d      	mov	r5, r1
 80a3428:	4616      	mov	r6, r2
    writeSeparator();
 80a342a:	f7ff ff59 	bl	80a32e0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a342e:	4620      	mov	r0, r4
 80a3430:	4632      	mov	r2, r6
 80a3432:	4629      	mov	r1, r5
 80a3434:	f7ff ff92 	bl	80a335c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a3438:	2301      	movs	r3, #1
 80a343a:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a343c:	4620      	mov	r0, r4
 80a343e:	bd70      	pop	{r4, r5, r6, pc}

080a3440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a3440:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3442:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 80a3444:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a3446:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80a3448:	429c      	cmp	r4, r3
 80a344a:	d00c      	beq.n	80a3466 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 80a344c:	b114      	cbz	r4, 80a3454 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a344e:	6863      	ldr	r3, [r4, #4]
 80a3450:	3301      	adds	r3, #1
 80a3452:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a3454:	6828      	ldr	r0, [r5, #0]
 80a3456:	b128      	cbz	r0, 80a3464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3458:	6843      	ldr	r3, [r0, #4]
 80a345a:	3b01      	subs	r3, #1
 80a345c:	6043      	str	r3, [r0, #4]
 80a345e:	b90b      	cbnz	r3, 80a3464 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 80a3460:	f7ff febc 	bl	80a31dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a3464:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 80a3466:	4628      	mov	r0, r5
 80a3468:	bd38      	pop	{r3, r4, r5, pc}
	...

080a346c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a346c:	b510      	push	{r4, lr}
 80a346e:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a3470:	2300      	movs	r3, #0
 80a3472:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3474:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80a3476:	4810      	ldr	r0, [pc, #64]	; (80a34b8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 80a3478:	60e3      	str	r3, [r4, #12]
 80a347a:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a347c:	b1d1      	cbz	r1, 80a34b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 80a347e:	780b      	ldrb	r3, [r1, #0]
 80a3480:	2b03      	cmp	r3, #3
 80a3482:	d006      	beq.n	80a3492 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 80a3484:	b9b3      	cbnz	r3, 80a34b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a3486:	6813      	ldr	r3, [r2, #0]
 80a3488:	6858      	ldr	r0, [r3, #4]
 80a348a:	684b      	ldr	r3, [r1, #4]
 80a348c:	5cc3      	ldrb	r3, [r0, r3]
 80a348e:	2b6e      	cmp	r3, #110	; 0x6e
 80a3490:	d008      	beq.n	80a34a4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 80a3492:	6813      	ldr	r3, [r2, #0]
 80a3494:	6858      	ldr	r0, [r3, #4]
 80a3496:	684b      	ldr	r3, [r1, #4]
 80a3498:	4403      	add	r3, r0
 80a349a:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 80a349c:	688b      	ldr	r3, [r1, #8]
 80a349e:	6849      	ldr	r1, [r1, #4]
 80a34a0:	1a5b      	subs	r3, r3, r1
 80a34a2:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a34a4:	4611      	mov	r1, r2
 80a34a6:	4620      	mov	r0, r4
 80a34a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80a34ac:	f840 3b04 	str.w	r3, [r0], #4
 80a34b0:	f7ff ffc6 	bl	80a3440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 80a34b4:	4620      	mov	r0, r4
 80a34b6:	bd10      	pop	{r4, pc}
 80a34b8:	080a3e57 	.word	0x080a3e57

080a34bc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a34bc:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a34be:	b510      	push	{r4, lr}
 80a34c0:	4604      	mov	r4, r0
 80a34c2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a34c4:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80a34c6:	6083      	str	r3, [r0, #8]
 80a34c8:	60c3      	str	r3, [r0, #12]
 80a34ca:	6103      	str	r3, [r0, #16]
 80a34cc:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80a34ce:	b171      	cbz	r1, 80a34ee <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 80a34d0:	780b      	ldrb	r3, [r1, #0]
 80a34d2:	2b01      	cmp	r3, #1
 80a34d4:	d10b      	bne.n	80a34ee <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 80a34d6:	f101 0310 	add.w	r3, r1, #16
 80a34da:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 80a34dc:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a34de:	4611      	mov	r1, r2
 80a34e0:	6143      	str	r3, [r0, #20]
 80a34e2:	f851 3b04 	ldr.w	r3, [r1], #4
 80a34e6:	f840 3b04 	str.w	r3, [r0], #4
 80a34ea:	f7ff ffa9 	bl	80a3440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80a34ee:	4620      	mov	r0, r4
 80a34f0:	bd10      	pop	{r4, pc}

080a34f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a34f2:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a34f4:	b510      	push	{r4, lr}
 80a34f6:	4604      	mov	r4, r0
 80a34f8:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a34fa:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80a34fc:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80a34fe:	b131      	cbz	r1, 80a350e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a3500:	4611      	mov	r1, r2
 80a3502:	f851 3b04 	ldr.w	r3, [r1], #4
 80a3506:	f840 3b04 	str.w	r3, [r0], #4
 80a350a:	f7ff ff99 	bl	80a3440 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 80a350e:	4620      	mov	r0, r4
 80a3510:	bd10      	pop	{r4, pc}
	...

080a3514 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3514:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3516:	4c0c      	ldr	r4, [pc, #48]	; (80a3548 <_GLOBAL__sub_I_SPI+0x34>)
 80a3518:	4e0c      	ldr	r6, [pc, #48]	; (80a354c <_GLOBAL__sub_I_SPI+0x38>)
 80a351a:	4d0d      	ldr	r5, [pc, #52]	; (80a3550 <_GLOBAL__sub_I_SPI+0x3c>)
 80a351c:	2100      	movs	r1, #0
 80a351e:	4620      	mov	r0, r4
 80a3520:	f7fe f86c 	bl	80a15fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3524:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3526:	4c0b      	ldr	r4, [pc, #44]	; (80a3554 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3528:	4632      	mov	r2, r6
 80a352a:	4629      	mov	r1, r5
 80a352c:	f000 f860 	bl	80a35f0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3530:	2101      	movs	r1, #1
 80a3532:	4620      	mov	r0, r4
 80a3534:	f7fe f862 	bl	80a15fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3538:	4632      	mov	r2, r6
 80a353a:	4629      	mov	r1, r5
 80a353c:	4620      	mov	r0, r4
 80a353e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a3542:	f000 b855 	b.w	80a35f0 <__aeabi_atexit>
 80a3546:	bf00      	nop
 80a3548:	200004f4 	.word	0x200004f4
 80a354c:	20000378 	.word	0x20000378
 80a3550:	080a15ed 	.word	0x080a15ed
 80a3554:	20000504 	.word	0x20000504

080a3558 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3558:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a355a:	4c07      	ldr	r4, [pc, #28]	; (80a3578 <_Z21__fetch_global_EEPROMv+0x20>)
 80a355c:	6823      	ldr	r3, [r4, #0]
 80a355e:	07db      	lsls	r3, r3, #31
 80a3560:	d408      	bmi.n	80a3574 <_Z21__fetch_global_EEPROMv+0x1c>
 80a3562:	4620      	mov	r0, r4
 80a3564:	f7fc fda8 	bl	80a00b8 <__cxa_guard_acquire>
 80a3568:	b120      	cbz	r0, 80a3574 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a356a:	f7fd fe11 	bl	80a1190 <HAL_EEPROM_Init>
 80a356e:	4620      	mov	r0, r4
 80a3570:	f7fc fda7 	bl	80a00c2 <__cxa_guard_release>
	return eeprom;
}
 80a3574:	4801      	ldr	r0, [pc, #4]	; (80a357c <_Z21__fetch_global_EEPROMv+0x24>)
 80a3576:	bd10      	pop	{r4, pc}
 80a3578:	20000518 	.word	0x20000518
 80a357c:	2000051c 	.word	0x2000051c

080a3580 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3580:	b513      	push	{r0, r1, r4, lr}
 80a3582:	4c08      	ldr	r4, [pc, #32]	; (80a35a4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3584:	2300      	movs	r3, #0
 80a3586:	461a      	mov	r2, r3
 80a3588:	4619      	mov	r1, r3
 80a358a:	9300      	str	r3, [sp, #0]
 80a358c:	4620      	mov	r0, r4
 80a358e:	f7ff fb59 	bl	80a2c44 <_ZN9IPAddressC1Ehhhh>
 80a3592:	4620      	mov	r0, r4
 80a3594:	4a04      	ldr	r2, [pc, #16]	; (80a35a8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3596:	4905      	ldr	r1, [pc, #20]	; (80a35ac <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3598:	b002      	add	sp, #8
 80a359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a359e:	f000 b827 	b.w	80a35f0 <__aeabi_atexit>
 80a35a2:	bf00      	nop
 80a35a4:	20000520 	.word	0x20000520
 80a35a8:	20000378 	.word	0x20000378
 80a35ac:	080a2b95 	.word	0x080a2b95

080a35b0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a35b0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a35b2:	4d0b      	ldr	r5, [pc, #44]	; (80a35e0 <_Z19__fetch_global_Wirev+0x30>)
 80a35b4:	6829      	ldr	r1, [r5, #0]
 80a35b6:	f011 0401 	ands.w	r4, r1, #1
 80a35ba:	d10f      	bne.n	80a35dc <_Z19__fetch_global_Wirev+0x2c>
 80a35bc:	4628      	mov	r0, r5
 80a35be:	f7fc fd7b 	bl	80a00b8 <__cxa_guard_acquire>
 80a35c2:	b158      	cbz	r0, 80a35dc <_Z19__fetch_global_Wirev+0x2c>
 80a35c4:	4621      	mov	r1, r4
 80a35c6:	4807      	ldr	r0, [pc, #28]	; (80a35e4 <_Z19__fetch_global_Wirev+0x34>)
 80a35c8:	f7ff fcd2 	bl	80a2f70 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a35cc:	4628      	mov	r0, r5
 80a35ce:	f7fc fd78 	bl	80a00c2 <__cxa_guard_release>
 80a35d2:	4a05      	ldr	r2, [pc, #20]	; (80a35e8 <_Z19__fetch_global_Wirev+0x38>)
 80a35d4:	4905      	ldr	r1, [pc, #20]	; (80a35ec <_Z19__fetch_global_Wirev+0x3c>)
 80a35d6:	4803      	ldr	r0, [pc, #12]	; (80a35e4 <_Z19__fetch_global_Wirev+0x34>)
 80a35d8:	f000 f80a 	bl	80a35f0 <__aeabi_atexit>
	return wire;
}
 80a35dc:	4801      	ldr	r0, [pc, #4]	; (80a35e4 <_Z19__fetch_global_Wirev+0x34>)
 80a35de:	bd38      	pop	{r3, r4, r5, pc}
 80a35e0:	20000538 	.word	0x20000538
 80a35e4:	2000053c 	.word	0x2000053c
 80a35e8:	20000378 	.word	0x20000378
 80a35ec:	080a2f19 	.word	0x080a2f19

080a35f0 <__aeabi_atexit>:
 80a35f0:	460b      	mov	r3, r1
 80a35f2:	4601      	mov	r1, r0
 80a35f4:	4618      	mov	r0, r3
 80a35f6:	f000 b963 	b.w	80a38c0 <__cxa_atexit>
	...

080a35fc <_ZSt15get_new_handlerv>:
 80a35fc:	4b02      	ldr	r3, [pc, #8]	; (80a3608 <_ZSt15get_new_handlerv+0xc>)
 80a35fe:	6818      	ldr	r0, [r3, #0]
 80a3600:	f3bf 8f5f 	dmb	sy
 80a3604:	4770      	bx	lr
 80a3606:	bf00      	nop
 80a3608:	20000550 	.word	0x20000550

080a360c <_ZdlPvj>:
 80a360c:	f7fc bd47 	b.w	80a009e <_ZdlPv>

080a3610 <_ZnwjRKSt9nothrow_t>:
 80a3610:	b510      	push	{r4, lr}
 80a3612:	2800      	cmp	r0, #0
 80a3614:	bf14      	ite	ne
 80a3616:	4604      	movne	r4, r0
 80a3618:	2401      	moveq	r4, #1
 80a361a:	4620      	mov	r0, r4
 80a361c:	f7fd ffc6 	bl	80a15ac <malloc>
 80a3620:	b920      	cbnz	r0, 80a362c <_ZnwjRKSt9nothrow_t+0x1c>
 80a3622:	f7ff ffeb 	bl	80a35fc <_ZSt15get_new_handlerv>
 80a3626:	b108      	cbz	r0, 80a362c <_ZnwjRKSt9nothrow_t+0x1c>
 80a3628:	4780      	blx	r0
 80a362a:	e7f6      	b.n	80a361a <_ZnwjRKSt9nothrow_t+0xa>
 80a362c:	bd10      	pop	{r4, pc}
	...

080a3630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3630:	4b18      	ldr	r3, [pc, #96]	; (80a3694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3632:	681a      	ldr	r2, [r3, #0]
 80a3634:	07d1      	lsls	r1, r2, #31
 80a3636:	bf5c      	itt	pl
 80a3638:	2201      	movpl	r2, #1
 80a363a:	601a      	strpl	r2, [r3, #0]
 80a363c:	4b16      	ldr	r3, [pc, #88]	; (80a3698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a363e:	681a      	ldr	r2, [r3, #0]
 80a3640:	07d2      	lsls	r2, r2, #31
 80a3642:	bf5c      	itt	pl
 80a3644:	2201      	movpl	r2, #1
 80a3646:	601a      	strpl	r2, [r3, #0]
 80a3648:	4b14      	ldr	r3, [pc, #80]	; (80a369c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a364a:	681a      	ldr	r2, [r3, #0]
 80a364c:	07d0      	lsls	r0, r2, #31
 80a364e:	bf5c      	itt	pl
 80a3650:	2201      	movpl	r2, #1
 80a3652:	601a      	strpl	r2, [r3, #0]
 80a3654:	4b12      	ldr	r3, [pc, #72]	; (80a36a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3656:	681a      	ldr	r2, [r3, #0]
 80a3658:	07d1      	lsls	r1, r2, #31
 80a365a:	bf5c      	itt	pl
 80a365c:	2201      	movpl	r2, #1
 80a365e:	601a      	strpl	r2, [r3, #0]
 80a3660:	4b10      	ldr	r3, [pc, #64]	; (80a36a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3662:	681a      	ldr	r2, [r3, #0]
 80a3664:	07d2      	lsls	r2, r2, #31
 80a3666:	bf5c      	itt	pl
 80a3668:	2201      	movpl	r2, #1
 80a366a:	601a      	strpl	r2, [r3, #0]
 80a366c:	4b0e      	ldr	r3, [pc, #56]	; (80a36a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a366e:	681a      	ldr	r2, [r3, #0]
 80a3670:	07d0      	lsls	r0, r2, #31
 80a3672:	bf5c      	itt	pl
 80a3674:	2201      	movpl	r2, #1
 80a3676:	601a      	strpl	r2, [r3, #0]
 80a3678:	4b0c      	ldr	r3, [pc, #48]	; (80a36ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a367a:	681a      	ldr	r2, [r3, #0]
 80a367c:	07d1      	lsls	r1, r2, #31
 80a367e:	bf5c      	itt	pl
 80a3680:	2201      	movpl	r2, #1
 80a3682:	601a      	strpl	r2, [r3, #0]
 80a3684:	4b0a      	ldr	r3, [pc, #40]	; (80a36b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3686:	681a      	ldr	r2, [r3, #0]
 80a3688:	07d2      	lsls	r2, r2, #31
 80a368a:	bf5c      	itt	pl
 80a368c:	2201      	movpl	r2, #1
 80a368e:	601a      	strpl	r2, [r3, #0]
 80a3690:	4770      	bx	lr
 80a3692:	bf00      	nop
 80a3694:	20000570 	.word	0x20000570
 80a3698:	2000056c 	.word	0x2000056c
 80a369c:	20000568 	.word	0x20000568
 80a36a0:	20000564 	.word	0x20000564
 80a36a4:	20000560 	.word	0x20000560
 80a36a8:	2000055c 	.word	0x2000055c
 80a36ac:	20000558 	.word	0x20000558
 80a36b0:	20000554 	.word	0x20000554

080a36b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a36b4:	4b24      	ldr	r3, [pc, #144]	; (80a3748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a36b6:	681a      	ldr	r2, [r3, #0]
 80a36b8:	07d0      	lsls	r0, r2, #31
 80a36ba:	bf5c      	itt	pl
 80a36bc:	2201      	movpl	r2, #1
 80a36be:	601a      	strpl	r2, [r3, #0]
 80a36c0:	4b22      	ldr	r3, [pc, #136]	; (80a374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a36c2:	681a      	ldr	r2, [r3, #0]
 80a36c4:	07d1      	lsls	r1, r2, #31
 80a36c6:	bf5c      	itt	pl
 80a36c8:	2201      	movpl	r2, #1
 80a36ca:	601a      	strpl	r2, [r3, #0]
 80a36cc:	4b20      	ldr	r3, [pc, #128]	; (80a3750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a36ce:	681a      	ldr	r2, [r3, #0]
 80a36d0:	07d2      	lsls	r2, r2, #31
 80a36d2:	bf5c      	itt	pl
 80a36d4:	2201      	movpl	r2, #1
 80a36d6:	601a      	strpl	r2, [r3, #0]
 80a36d8:	4b1e      	ldr	r3, [pc, #120]	; (80a3754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a36da:	681a      	ldr	r2, [r3, #0]
 80a36dc:	07d0      	lsls	r0, r2, #31
 80a36de:	bf5c      	itt	pl
 80a36e0:	2201      	movpl	r2, #1
 80a36e2:	601a      	strpl	r2, [r3, #0]
 80a36e4:	4b1c      	ldr	r3, [pc, #112]	; (80a3758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a36e6:	681a      	ldr	r2, [r3, #0]
 80a36e8:	07d1      	lsls	r1, r2, #31
 80a36ea:	bf5c      	itt	pl
 80a36ec:	2201      	movpl	r2, #1
 80a36ee:	601a      	strpl	r2, [r3, #0]
 80a36f0:	4b1a      	ldr	r3, [pc, #104]	; (80a375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a36f2:	681a      	ldr	r2, [r3, #0]
 80a36f4:	07d2      	lsls	r2, r2, #31
 80a36f6:	bf5c      	itt	pl
 80a36f8:	2201      	movpl	r2, #1
 80a36fa:	601a      	strpl	r2, [r3, #0]
 80a36fc:	4b18      	ldr	r3, [pc, #96]	; (80a3760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a36fe:	681a      	ldr	r2, [r3, #0]
 80a3700:	07d0      	lsls	r0, r2, #31
 80a3702:	bf5c      	itt	pl
 80a3704:	2201      	movpl	r2, #1
 80a3706:	601a      	strpl	r2, [r3, #0]
 80a3708:	4b16      	ldr	r3, [pc, #88]	; (80a3764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a370a:	681a      	ldr	r2, [r3, #0]
 80a370c:	07d1      	lsls	r1, r2, #31
 80a370e:	bf5c      	itt	pl
 80a3710:	2201      	movpl	r2, #1
 80a3712:	601a      	strpl	r2, [r3, #0]
 80a3714:	4b14      	ldr	r3, [pc, #80]	; (80a3768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3716:	681a      	ldr	r2, [r3, #0]
 80a3718:	07d2      	lsls	r2, r2, #31
 80a371a:	bf5c      	itt	pl
 80a371c:	2201      	movpl	r2, #1
 80a371e:	601a      	strpl	r2, [r3, #0]
 80a3720:	4b12      	ldr	r3, [pc, #72]	; (80a376c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3722:	681a      	ldr	r2, [r3, #0]
 80a3724:	07d0      	lsls	r0, r2, #31
 80a3726:	bf5c      	itt	pl
 80a3728:	2201      	movpl	r2, #1
 80a372a:	601a      	strpl	r2, [r3, #0]
 80a372c:	4b10      	ldr	r3, [pc, #64]	; (80a3770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a372e:	681a      	ldr	r2, [r3, #0]
 80a3730:	07d1      	lsls	r1, r2, #31
 80a3732:	bf5c      	itt	pl
 80a3734:	2201      	movpl	r2, #1
 80a3736:	601a      	strpl	r2, [r3, #0]
 80a3738:	4b0e      	ldr	r3, [pc, #56]	; (80a3774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a373a:	681a      	ldr	r2, [r3, #0]
 80a373c:	07d2      	lsls	r2, r2, #31
 80a373e:	bf5c      	itt	pl
 80a3740:	2201      	movpl	r2, #1
 80a3742:	601a      	strpl	r2, [r3, #0]
 80a3744:	4770      	bx	lr
 80a3746:	bf00      	nop
 80a3748:	200005a0 	.word	0x200005a0
 80a374c:	2000059c 	.word	0x2000059c
 80a3750:	20000598 	.word	0x20000598
 80a3754:	20000594 	.word	0x20000594
 80a3758:	20000590 	.word	0x20000590
 80a375c:	2000058c 	.word	0x2000058c
 80a3760:	20000588 	.word	0x20000588
 80a3764:	20000584 	.word	0x20000584
 80a3768:	20000580 	.word	0x20000580
 80a376c:	2000057c 	.word	0x2000057c
 80a3770:	20000578 	.word	0x20000578
 80a3774:	20000574 	.word	0x20000574

080a3778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3778:	4b24      	ldr	r3, [pc, #144]	; (80a380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a377a:	681a      	ldr	r2, [r3, #0]
 80a377c:	07d0      	lsls	r0, r2, #31
 80a377e:	bf5c      	itt	pl
 80a3780:	2201      	movpl	r2, #1
 80a3782:	601a      	strpl	r2, [r3, #0]
 80a3784:	4b22      	ldr	r3, [pc, #136]	; (80a3810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3786:	681a      	ldr	r2, [r3, #0]
 80a3788:	07d1      	lsls	r1, r2, #31
 80a378a:	bf5c      	itt	pl
 80a378c:	2201      	movpl	r2, #1
 80a378e:	601a      	strpl	r2, [r3, #0]
 80a3790:	4b20      	ldr	r3, [pc, #128]	; (80a3814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3792:	681a      	ldr	r2, [r3, #0]
 80a3794:	07d2      	lsls	r2, r2, #31
 80a3796:	bf5c      	itt	pl
 80a3798:	2201      	movpl	r2, #1
 80a379a:	601a      	strpl	r2, [r3, #0]
 80a379c:	4b1e      	ldr	r3, [pc, #120]	; (80a3818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a379e:	681a      	ldr	r2, [r3, #0]
 80a37a0:	07d0      	lsls	r0, r2, #31
 80a37a2:	bf5c      	itt	pl
 80a37a4:	2201      	movpl	r2, #1
 80a37a6:	601a      	strpl	r2, [r3, #0]
 80a37a8:	4b1c      	ldr	r3, [pc, #112]	; (80a381c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a37aa:	681a      	ldr	r2, [r3, #0]
 80a37ac:	07d1      	lsls	r1, r2, #31
 80a37ae:	bf5c      	itt	pl
 80a37b0:	2201      	movpl	r2, #1
 80a37b2:	601a      	strpl	r2, [r3, #0]
 80a37b4:	4b1a      	ldr	r3, [pc, #104]	; (80a3820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a37b6:	681a      	ldr	r2, [r3, #0]
 80a37b8:	07d2      	lsls	r2, r2, #31
 80a37ba:	bf5c      	itt	pl
 80a37bc:	2201      	movpl	r2, #1
 80a37be:	601a      	strpl	r2, [r3, #0]
 80a37c0:	4b18      	ldr	r3, [pc, #96]	; (80a3824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a37c2:	681a      	ldr	r2, [r3, #0]
 80a37c4:	07d0      	lsls	r0, r2, #31
 80a37c6:	bf5c      	itt	pl
 80a37c8:	2201      	movpl	r2, #1
 80a37ca:	601a      	strpl	r2, [r3, #0]
 80a37cc:	4b16      	ldr	r3, [pc, #88]	; (80a3828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a37ce:	681a      	ldr	r2, [r3, #0]
 80a37d0:	07d1      	lsls	r1, r2, #31
 80a37d2:	bf5c      	itt	pl
 80a37d4:	2201      	movpl	r2, #1
 80a37d6:	601a      	strpl	r2, [r3, #0]
 80a37d8:	4b14      	ldr	r3, [pc, #80]	; (80a382c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a37da:	681a      	ldr	r2, [r3, #0]
 80a37dc:	07d2      	lsls	r2, r2, #31
 80a37de:	bf5c      	itt	pl
 80a37e0:	2201      	movpl	r2, #1
 80a37e2:	601a      	strpl	r2, [r3, #0]
 80a37e4:	4b12      	ldr	r3, [pc, #72]	; (80a3830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a37e6:	681a      	ldr	r2, [r3, #0]
 80a37e8:	07d0      	lsls	r0, r2, #31
 80a37ea:	bf5c      	itt	pl
 80a37ec:	2201      	movpl	r2, #1
 80a37ee:	601a      	strpl	r2, [r3, #0]
 80a37f0:	4b10      	ldr	r3, [pc, #64]	; (80a3834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a37f2:	681a      	ldr	r2, [r3, #0]
 80a37f4:	07d1      	lsls	r1, r2, #31
 80a37f6:	bf5c      	itt	pl
 80a37f8:	2201      	movpl	r2, #1
 80a37fa:	601a      	strpl	r2, [r3, #0]
 80a37fc:	4b0e      	ldr	r3, [pc, #56]	; (80a3838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a37fe:	681a      	ldr	r2, [r3, #0]
 80a3800:	07d2      	lsls	r2, r2, #31
 80a3802:	bf5c      	itt	pl
 80a3804:	2201      	movpl	r2, #1
 80a3806:	601a      	strpl	r2, [r3, #0]
 80a3808:	4770      	bx	lr
 80a380a:	bf00      	nop
 80a380c:	200005d0 	.word	0x200005d0
 80a3810:	200005cc 	.word	0x200005cc
 80a3814:	200005c8 	.word	0x200005c8
 80a3818:	200005c4 	.word	0x200005c4
 80a381c:	200005c0 	.word	0x200005c0
 80a3820:	200005bc 	.word	0x200005bc
 80a3824:	200005b8 	.word	0x200005b8
 80a3828:	200005b4 	.word	0x200005b4
 80a382c:	200005b0 	.word	0x200005b0
 80a3830:	200005ac 	.word	0x200005ac
 80a3834:	200005a8 	.word	0x200005a8
 80a3838:	200005a4 	.word	0x200005a4

080a383c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a383c:	4b18      	ldr	r3, [pc, #96]	; (80a38a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a383e:	681a      	ldr	r2, [r3, #0]
 80a3840:	07d1      	lsls	r1, r2, #31
 80a3842:	bf5c      	itt	pl
 80a3844:	2201      	movpl	r2, #1
 80a3846:	601a      	strpl	r2, [r3, #0]
 80a3848:	4b16      	ldr	r3, [pc, #88]	; (80a38a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a384a:	681a      	ldr	r2, [r3, #0]
 80a384c:	07d2      	lsls	r2, r2, #31
 80a384e:	bf5c      	itt	pl
 80a3850:	2201      	movpl	r2, #1
 80a3852:	601a      	strpl	r2, [r3, #0]
 80a3854:	4b14      	ldr	r3, [pc, #80]	; (80a38a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3856:	681a      	ldr	r2, [r3, #0]
 80a3858:	07d0      	lsls	r0, r2, #31
 80a385a:	bf5c      	itt	pl
 80a385c:	2201      	movpl	r2, #1
 80a385e:	601a      	strpl	r2, [r3, #0]
 80a3860:	4b12      	ldr	r3, [pc, #72]	; (80a38ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3862:	681a      	ldr	r2, [r3, #0]
 80a3864:	07d1      	lsls	r1, r2, #31
 80a3866:	bf5c      	itt	pl
 80a3868:	2201      	movpl	r2, #1
 80a386a:	601a      	strpl	r2, [r3, #0]
 80a386c:	4b10      	ldr	r3, [pc, #64]	; (80a38b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a386e:	681a      	ldr	r2, [r3, #0]
 80a3870:	07d2      	lsls	r2, r2, #31
 80a3872:	bf5c      	itt	pl
 80a3874:	2201      	movpl	r2, #1
 80a3876:	601a      	strpl	r2, [r3, #0]
 80a3878:	4b0e      	ldr	r3, [pc, #56]	; (80a38b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a387a:	681a      	ldr	r2, [r3, #0]
 80a387c:	07d0      	lsls	r0, r2, #31
 80a387e:	bf5c      	itt	pl
 80a3880:	2201      	movpl	r2, #1
 80a3882:	601a      	strpl	r2, [r3, #0]
 80a3884:	4b0c      	ldr	r3, [pc, #48]	; (80a38b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3886:	681a      	ldr	r2, [r3, #0]
 80a3888:	07d1      	lsls	r1, r2, #31
 80a388a:	bf5c      	itt	pl
 80a388c:	2201      	movpl	r2, #1
 80a388e:	601a      	strpl	r2, [r3, #0]
 80a3890:	4b0a      	ldr	r3, [pc, #40]	; (80a38bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3892:	681a      	ldr	r2, [r3, #0]
 80a3894:	07d2      	lsls	r2, r2, #31
 80a3896:	bf5c      	itt	pl
 80a3898:	2201      	movpl	r2, #1
 80a389a:	601a      	strpl	r2, [r3, #0]
 80a389c:	4770      	bx	lr
 80a389e:	bf00      	nop
 80a38a0:	200005f0 	.word	0x200005f0
 80a38a4:	200005ec 	.word	0x200005ec
 80a38a8:	200005e8 	.word	0x200005e8
 80a38ac:	200005e4 	.word	0x200005e4
 80a38b0:	200005e0 	.word	0x200005e0
 80a38b4:	200005dc 	.word	0x200005dc
 80a38b8:	200005d8 	.word	0x200005d8
 80a38bc:	200005d4 	.word	0x200005d4

080a38c0 <__cxa_atexit>:
 80a38c0:	b510      	push	{r4, lr}
 80a38c2:	4c05      	ldr	r4, [pc, #20]	; (80a38d8 <__cxa_atexit+0x18>)
 80a38c4:	4613      	mov	r3, r2
 80a38c6:	b12c      	cbz	r4, 80a38d4 <__cxa_atexit+0x14>
 80a38c8:	460a      	mov	r2, r1
 80a38ca:	4601      	mov	r1, r0
 80a38cc:	2002      	movs	r0, #2
 80a38ce:	f3af 8000 	nop.w
 80a38d2:	bd10      	pop	{r4, pc}
 80a38d4:	4620      	mov	r0, r4
 80a38d6:	bd10      	pop	{r4, pc}
 80a38d8:	00000000 	.word	0x00000000

080a38dc <memcpy>:
 80a38dc:	b510      	push	{r4, lr}
 80a38de:	1e43      	subs	r3, r0, #1
 80a38e0:	440a      	add	r2, r1
 80a38e2:	4291      	cmp	r1, r2
 80a38e4:	d004      	beq.n	80a38f0 <memcpy+0x14>
 80a38e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a38ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a38ee:	e7f8      	b.n	80a38e2 <memcpy+0x6>
 80a38f0:	bd10      	pop	{r4, pc}

080a38f2 <memmove>:
 80a38f2:	4288      	cmp	r0, r1
 80a38f4:	b510      	push	{r4, lr}
 80a38f6:	eb01 0302 	add.w	r3, r1, r2
 80a38fa:	d801      	bhi.n	80a3900 <memmove+0xe>
 80a38fc:	1e42      	subs	r2, r0, #1
 80a38fe:	e00b      	b.n	80a3918 <memmove+0x26>
 80a3900:	4298      	cmp	r0, r3
 80a3902:	d2fb      	bcs.n	80a38fc <memmove+0xa>
 80a3904:	1881      	adds	r1, r0, r2
 80a3906:	1ad2      	subs	r2, r2, r3
 80a3908:	42d3      	cmn	r3, r2
 80a390a:	d004      	beq.n	80a3916 <memmove+0x24>
 80a390c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3910:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a3914:	e7f8      	b.n	80a3908 <memmove+0x16>
 80a3916:	bd10      	pop	{r4, pc}
 80a3918:	4299      	cmp	r1, r3
 80a391a:	d004      	beq.n	80a3926 <memmove+0x34>
 80a391c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3920:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a3924:	e7f8      	b.n	80a3918 <memmove+0x26>
 80a3926:	bd10      	pop	{r4, pc}

080a3928 <memset>:
 80a3928:	4603      	mov	r3, r0
 80a392a:	4402      	add	r2, r0
 80a392c:	4293      	cmp	r3, r2
 80a392e:	d002      	beq.n	80a3936 <memset+0xe>
 80a3930:	f803 1b01 	strb.w	r1, [r3], #1
 80a3934:	e7fa      	b.n	80a392c <memset+0x4>
 80a3936:	4770      	bx	lr

080a3938 <srand>:
 80a3938:	b538      	push	{r3, r4, r5, lr}
 80a393a:	4b12      	ldr	r3, [pc, #72]	; (80a3984 <srand+0x4c>)
 80a393c:	4605      	mov	r5, r0
 80a393e:	681c      	ldr	r4, [r3, #0]
 80a3940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3942:	b9d3      	cbnz	r3, 80a397a <srand+0x42>
 80a3944:	2018      	movs	r0, #24
 80a3946:	f7fd fe31 	bl	80a15ac <malloc>
 80a394a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a394e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3950:	8003      	strh	r3, [r0, #0]
 80a3952:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3956:	8043      	strh	r3, [r0, #2]
 80a3958:	f241 2334 	movw	r3, #4660	; 0x1234
 80a395c:	8083      	strh	r3, [r0, #4]
 80a395e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3962:	80c3      	strh	r3, [r0, #6]
 80a3964:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3968:	8103      	strh	r3, [r0, #8]
 80a396a:	2305      	movs	r3, #5
 80a396c:	8143      	strh	r3, [r0, #10]
 80a396e:	230b      	movs	r3, #11
 80a3970:	8183      	strh	r3, [r0, #12]
 80a3972:	2201      	movs	r2, #1
 80a3974:	2300      	movs	r3, #0
 80a3976:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a397a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a397c:	2200      	movs	r2, #0
 80a397e:	611d      	str	r5, [r3, #16]
 80a3980:	615a      	str	r2, [r3, #20]
 80a3982:	bd38      	pop	{r3, r4, r5, pc}
 80a3984:	20000374 	.word	0x20000374

080a3988 <strchr>:
 80a3988:	b2c9      	uxtb	r1, r1
 80a398a:	4603      	mov	r3, r0
 80a398c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3990:	b11a      	cbz	r2, 80a399a <strchr+0x12>
 80a3992:	4291      	cmp	r1, r2
 80a3994:	d1f9      	bne.n	80a398a <strchr+0x2>
 80a3996:	4618      	mov	r0, r3
 80a3998:	4770      	bx	lr
 80a399a:	2900      	cmp	r1, #0
 80a399c:	bf0c      	ite	eq
 80a399e:	4618      	moveq	r0, r3
 80a39a0:	2000      	movne	r0, #0
 80a39a2:	4770      	bx	lr

080a39a4 <strchrnul>:
 80a39a4:	b510      	push	{r4, lr}
 80a39a6:	4604      	mov	r4, r0
 80a39a8:	f7ff ffee 	bl	80a3988 <strchr>
 80a39ac:	b918      	cbnz	r0, 80a39b6 <strchrnul+0x12>
 80a39ae:	4620      	mov	r0, r4
 80a39b0:	f000 f814 	bl	80a39dc <strlen>
 80a39b4:	4420      	add	r0, r4
 80a39b6:	bd10      	pop	{r4, pc}

080a39b8 <strcmp>:
 80a39b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a39bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a39c0:	2a01      	cmp	r2, #1
 80a39c2:	bf28      	it	cs
 80a39c4:	429a      	cmpcs	r2, r3
 80a39c6:	d0f7      	beq.n	80a39b8 <strcmp>
 80a39c8:	1ad0      	subs	r0, r2, r3
 80a39ca:	4770      	bx	lr

080a39cc <strcpy>:
 80a39cc:	4603      	mov	r3, r0
 80a39ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a39d2:	f803 2b01 	strb.w	r2, [r3], #1
 80a39d6:	2a00      	cmp	r2, #0
 80a39d8:	d1f9      	bne.n	80a39ce <strcpy+0x2>
 80a39da:	4770      	bx	lr

080a39dc <strlen>:
 80a39dc:	4603      	mov	r3, r0
 80a39de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a39e2:	2a00      	cmp	r2, #0
 80a39e4:	d1fb      	bne.n	80a39de <strlen+0x2>
 80a39e6:	1a18      	subs	r0, r3, r0
 80a39e8:	3801      	subs	r0, #1
 80a39ea:	4770      	bx	lr

080a39ec <strncmp>:
 80a39ec:	b530      	push	{r4, r5, lr}
 80a39ee:	b182      	cbz	r2, 80a3a12 <strncmp+0x26>
 80a39f0:	1e45      	subs	r5, r0, #1
 80a39f2:	3901      	subs	r1, #1
 80a39f4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a39f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a39fc:	42a3      	cmp	r3, r4
 80a39fe:	d106      	bne.n	80a3a0e <strncmp+0x22>
 80a3a00:	43ec      	mvns	r4, r5
 80a3a02:	4414      	add	r4, r2
 80a3a04:	42e0      	cmn	r0, r4
 80a3a06:	d001      	beq.n	80a3a0c <strncmp+0x20>
 80a3a08:	2b00      	cmp	r3, #0
 80a3a0a:	d1f3      	bne.n	80a39f4 <strncmp+0x8>
 80a3a0c:	461c      	mov	r4, r3
 80a3a0e:	1b18      	subs	r0, r3, r4
 80a3a10:	bd30      	pop	{r4, r5, pc}
 80a3a12:	4610      	mov	r0, r2
 80a3a14:	bd30      	pop	{r4, r5, pc}

080a3a16 <strrchr>:
 80a3a16:	b538      	push	{r3, r4, r5, lr}
 80a3a18:	4603      	mov	r3, r0
 80a3a1a:	460d      	mov	r5, r1
 80a3a1c:	b141      	cbz	r1, 80a3a30 <strrchr+0x1a>
 80a3a1e:	2400      	movs	r4, #0
 80a3a20:	4629      	mov	r1, r5
 80a3a22:	4618      	mov	r0, r3
 80a3a24:	f7ff ffb0 	bl	80a3988 <strchr>
 80a3a28:	b130      	cbz	r0, 80a3a38 <strrchr+0x22>
 80a3a2a:	1c43      	adds	r3, r0, #1
 80a3a2c:	4604      	mov	r4, r0
 80a3a2e:	e7f7      	b.n	80a3a20 <strrchr+0xa>
 80a3a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3a34:	f7ff bfa8 	b.w	80a3988 <strchr>
 80a3a38:	4620      	mov	r0, r4
 80a3a3a:	bd38      	pop	{r3, r4, r5, pc}

080a3a3c <_strtol_r>:
 80a3a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3a40:	460f      	mov	r7, r1
 80a3a42:	4680      	mov	r8, r0
 80a3a44:	483f      	ldr	r0, [pc, #252]	; (80a3b44 <_strtol_r+0x108>)
 80a3a46:	f8d0 9000 	ldr.w	r9, [r0]
 80a3a4a:	463d      	mov	r5, r7
 80a3a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3a50:	eb09 0004 	add.w	r0, r9, r4
 80a3a54:	7840      	ldrb	r0, [r0, #1]
 80a3a56:	f000 0008 	and.w	r0, r0, #8
 80a3a5a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a3a5e:	b108      	cbz	r0, 80a3a64 <_strtol_r+0x28>
 80a3a60:	462f      	mov	r7, r5
 80a3a62:	e7f2      	b.n	80a3a4a <_strtol_r+0xe>
 80a3a64:	2c2d      	cmp	r4, #45	; 0x2d
 80a3a66:	d103      	bne.n	80a3a70 <_strtol_r+0x34>
 80a3a68:	1cbd      	adds	r5, r7, #2
 80a3a6a:	787c      	ldrb	r4, [r7, #1]
 80a3a6c:	2601      	movs	r6, #1
 80a3a6e:	e003      	b.n	80a3a78 <_strtol_r+0x3c>
 80a3a70:	2c2b      	cmp	r4, #43	; 0x2b
 80a3a72:	bf04      	itt	eq
 80a3a74:	787c      	ldrbeq	r4, [r7, #1]
 80a3a76:	1cbd      	addeq	r5, r7, #2
 80a3a78:	b113      	cbz	r3, 80a3a80 <_strtol_r+0x44>
 80a3a7a:	2b10      	cmp	r3, #16
 80a3a7c:	d10a      	bne.n	80a3a94 <_strtol_r+0x58>
 80a3a7e:	e05b      	b.n	80a3b38 <_strtol_r+0xfc>
 80a3a80:	2c30      	cmp	r4, #48	; 0x30
 80a3a82:	d157      	bne.n	80a3b34 <_strtol_r+0xf8>
 80a3a84:	7828      	ldrb	r0, [r5, #0]
 80a3a86:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a3a8a:	2858      	cmp	r0, #88	; 0x58
 80a3a8c:	d14d      	bne.n	80a3b2a <_strtol_r+0xee>
 80a3a8e:	786c      	ldrb	r4, [r5, #1]
 80a3a90:	2310      	movs	r3, #16
 80a3a92:	3502      	adds	r5, #2
 80a3a94:	2e00      	cmp	r6, #0
 80a3a96:	bf14      	ite	ne
 80a3a98:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a3a9c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a3aa0:	fbbc faf3 	udiv	sl, ip, r3
 80a3aa4:	2700      	movs	r7, #0
 80a3aa6:	4638      	mov	r0, r7
 80a3aa8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a3aac:	eb09 0e04 	add.w	lr, r9, r4
 80a3ab0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3ab4:	f01e 0f04 	tst.w	lr, #4
 80a3ab8:	d001      	beq.n	80a3abe <_strtol_r+0x82>
 80a3aba:	3c30      	subs	r4, #48	; 0x30
 80a3abc:	e00b      	b.n	80a3ad6 <_strtol_r+0x9a>
 80a3abe:	f01e 0e03 	ands.w	lr, lr, #3
 80a3ac2:	d01b      	beq.n	80a3afc <_strtol_r+0xc0>
 80a3ac4:	f1be 0f01 	cmp.w	lr, #1
 80a3ac8:	bf0c      	ite	eq
 80a3aca:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3ace:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3ad2:	ebce 0404 	rsb	r4, lr, r4
 80a3ad6:	42a3      	cmp	r3, r4
 80a3ad8:	dd10      	ble.n	80a3afc <_strtol_r+0xc0>
 80a3ada:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a3ade:	d00a      	beq.n	80a3af6 <_strtol_r+0xba>
 80a3ae0:	4550      	cmp	r0, sl
 80a3ae2:	d806      	bhi.n	80a3af2 <_strtol_r+0xb6>
 80a3ae4:	d101      	bne.n	80a3aea <_strtol_r+0xae>
 80a3ae6:	4564      	cmp	r4, ip
 80a3ae8:	dc03      	bgt.n	80a3af2 <_strtol_r+0xb6>
 80a3aea:	fb03 4000 	mla	r0, r3, r0, r4
 80a3aee:	2701      	movs	r7, #1
 80a3af0:	e001      	b.n	80a3af6 <_strtol_r+0xba>
 80a3af2:	f04f 37ff 	mov.w	r7, #4294967295
 80a3af6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3afa:	e7d7      	b.n	80a3aac <_strtol_r+0x70>
 80a3afc:	1c7b      	adds	r3, r7, #1
 80a3afe:	d10c      	bne.n	80a3b1a <_strtol_r+0xde>
 80a3b00:	2e00      	cmp	r6, #0
 80a3b02:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a3b06:	bf14      	ite	ne
 80a3b08:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a3b0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3b10:	f8c8 3000 	str.w	r3, [r8]
 80a3b14:	b92a      	cbnz	r2, 80a3b22 <_strtol_r+0xe6>
 80a3b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3b1a:	b106      	cbz	r6, 80a3b1e <_strtol_r+0xe2>
 80a3b1c:	4240      	negs	r0, r0
 80a3b1e:	b172      	cbz	r2, 80a3b3e <_strtol_r+0x102>
 80a3b20:	b107      	cbz	r7, 80a3b24 <_strtol_r+0xe8>
 80a3b22:	1e69      	subs	r1, r5, #1
 80a3b24:	6011      	str	r1, [r2, #0]
 80a3b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3b2a:	2430      	movs	r4, #48	; 0x30
 80a3b2c:	2b00      	cmp	r3, #0
 80a3b2e:	d1b1      	bne.n	80a3a94 <_strtol_r+0x58>
 80a3b30:	2308      	movs	r3, #8
 80a3b32:	e7af      	b.n	80a3a94 <_strtol_r+0x58>
 80a3b34:	230a      	movs	r3, #10
 80a3b36:	e7ad      	b.n	80a3a94 <_strtol_r+0x58>
 80a3b38:	2c30      	cmp	r4, #48	; 0x30
 80a3b3a:	d0a3      	beq.n	80a3a84 <_strtol_r+0x48>
 80a3b3c:	e7aa      	b.n	80a3a94 <_strtol_r+0x58>
 80a3b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3b42:	bf00      	nop
 80a3b44:	20000310 	.word	0x20000310

080a3b48 <strtol>:
 80a3b48:	4613      	mov	r3, r2
 80a3b4a:	460a      	mov	r2, r1
 80a3b4c:	4601      	mov	r1, r0
 80a3b4e:	4802      	ldr	r0, [pc, #8]	; (80a3b58 <strtol+0x10>)
 80a3b50:	6800      	ldr	r0, [r0, #0]
 80a3b52:	f7ff bf73 	b.w	80a3a3c <_strtol_r>
 80a3b56:	bf00      	nop
 80a3b58:	20000374 	.word	0x20000374

080a3b5c <dynalib_user>:
 80a3b5c:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a3b6c:	00000000                                ....

080a3b70 <_ZTV5Timer>:
	...
 80a3b78:	080a01c5 080a020d 080a00ef              ............

080a3b84 <_ZTVN5spark10LogHandlerE>:
	...
 80a3b94:	080a00a5 080a00c9                       ........

080a3b9c <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a3ba4:	080a0139 080a016d 080a1ced 080a00cb     9...m...........
 80a3bb4:	6e6b6e55 206e776f 44495353 6600203a     Unknown SSID: .f
 80a3bc4:	656c6961 6f742064 696e6920 6c616974     ailed to initial
 80a3bd4:	20657a69 736e6573 002e726f 736e6553     ize sensor..Sens
 80a3be4:	6920726f 6e692073 61697469 657a696c     or is initialize
 80a3bf4:	53002e64 69747465 4220676e 20657361     d..Setting Base 
 80a3c04:	756c6176 66207365 206d6f72 52504545     values from EEPR
 80a3c14:	002e4d4f 6c696146 74206465 6567206f     OM..Failed to ge
 80a3c24:	61622074 696c6573 7220656e 69646165     t baseline readi
 80a3c34:	0073676e 736e6553 4320726f 20706968     ngs.Sensor Chip 
 80a3c44:	65736162 6c617620 3a736575 43650920     base values: .eC
 80a3c54:	203a324f 54092000 3a636f76 61460020     O2: . .Tvoc: .Fa
 80a3c64:	64656c69 206f7420 20746573 65736162     iled to set base
 80a3c74:	656e696c 61657220 676e6964 45450073     line readings.EE
 80a3c84:	4d4f5250 73616220 61762065 7365756c     PROM base values
 80a3c94:	6509203a 3a324f43 654d0020 72757361     : .eCO2: .Measur
 80a3ca4:	6e656d65 61662074 64656c69 50475300     ement failed.SGP
 80a3cb4:	72203033 69646165 203a676e 4f436509     30 reading: .eCO
 80a3cc4:	00203a32 33504753 65722030 6e696461     2: .SGP30 readin
 80a3cd4:	00203a67 20746f47 6f666e69 6f726620     g: .Got info fro
 80a3ce4:	4545206d 4d4f5250 6f4e202e 68632077     m EEPROM. Now ch
 80a3cf4:	696b6365 002e676e 61746144 206e6920     ecking..Data in 
 80a3d04:	52504545 69204d4f 6f6e2073 6e692074     EEPROM is not in
 80a3d14:	61697469 657a696c 50202e64 69747475     itialized. Putti
 80a3d24:	6e20676e 64207765 2e617461 74614400     ng new data..Dat
 80a3d34:	75502061 2e2e2e74 74614400 78652061     a Put....Data ex
 80a3d44:	73747369 74756220 746f6e20 65687420     ists but not the
 80a3d54:	6d617320 73612065 72756320 746e6572      same as current
 80a3d64:	6d616e20 4e002e65 20656d61 45206e69      name..Name in E
 80a3d74:	4f525045 00203a4d 2077656e 656d616e     EPROM: .new name
 80a3d84:	20202020 203a2020 73614200 61762065           : .Base va
 80a3d94:	7365756c 206e6920 52504545 20204d4f     lues in EEPROM  
 80a3da4:	4200203a 20657361 756c6176 69207365     : .Base values i
 80a3db4:	656e206e 61642077 203a6174 74656700     n new data: .get
 80a3dc4:	676e6974 73614220 61762065 7365756c     ting Base values
 80a3dd4:	746f4700 73616220 61762065 7365756c     .Got base values
 80a3de4:	5300203a 7065656c 00676e69 52504545     : .Sleeping.EEPR
 80a3df4:	77204d4f 65207361 7974706d 756f4600     OM was empty.Fou
 80a3e04:	4520646e 4f525045 6164204d 202c6174     nd EEPROM data, 
 80a3e14:	726c4100 79646165 616f6c20 20646564     .Already loaded 
 80a3e24:	52504545 64204d4f 2e617461 4e0a0020     EEPROM data. ..N
 80a3e34:	3a656d61 0a000920 20746553 3a736147     ame: ...Set Gas:
 80a3e44:	0a000920 3a436f56 0a000920 326f4365      ...VoC: ...eCo2
 80a3e54:	0009203a 6e6e7552 20676e69 75746553     : ..Running Setu
 80a3e64:	6f662070 6f6c2072 202c706f 756f4300     p for loop, .Cou
 80a3e74:	6e20646c 6620746f 20646e69 61762061     ld not find a va
 80a3e84:	2064696c 33504753 65732030 726f736e     lid SGP30 sensor
 80a3e94:	6863202c 206b6365 69726977 0021676e     , check wiring!.
 80a3ea4:	33504753 6f432030 63656e6e 21646574     SGP30 Connected!
 80a3eb4:	6d414e00 6f742065 76617320 6f742065     .NAme to save to
 80a3ec4:	50454520 3a4d4f52 614e0020 7320656d      EEPROM: .Name s
 80a3ed4:	74726f68 64656e65 3a6f7420 61430020     hortened to: .Ca
 80a3ee4:	62206c6c 206b6361 20726f66 69766564     ll back for devi
 80a3ef4:	6e206563 21656d61 63657200 65766965     ce name!.receive
 80a3f04:	53002064 6e697661 616e2067 2e2e656d     d .Saving name..
 80a3f14:	6553002e 6e697474 656e2067 616e2077     ..Setting new na
 80a3f24:	2e2e656d 00203a2e 20746553 656d616e     me...: .Set name
 80a3f34:	6f6e202c 61732077 676e6976 206f7420     , now saving to 
 80a3f44:	52504545 2e2e4d4f 6557002e 76616820     EEPROM....We hav
 80a3f54:	20612065 656d616e 206e6920 206d6172     e a name in ram 
 80a3f64:	3a202020 65570020 76616820 20612065        : .We have a 
 80a3f74:	656d616e 206e6920 66206e6f 3a656c69     name in on file:
 80a3f84:	65570020 76616820 20612065 656d616e      .We have a name
 80a3f94:	206e6920 52504545 3a204d4f 6f4e0020      in EEPROM : .No
 80a3fa4:	6d616e20 57202c65 206c6c69 20797274      name, Will try 
 80a3fb4:	20646e61 20746567 2e656e6f 57002e2e     and get one....W
 80a3fc4:	6f642065 6820746e 20657661 65642061     e dont have a de
 80a3fd4:	65636976 6d616e20 49202e65 6c697720     vice name. I wil
 80a3fe4:	6572206c 74736967 77207265 20687469     l register with 
 80a3ff4:	20656874 756f6c63 2e2e2e64 72617000     the cloud....par
 80a4004:	6c636974 65642f65 65636976 6d616e2f     ticle/device/nam
 80a4014:	61570065 6e697469 6f742067 74656720     e.Waiting to get
 80a4024:	76656420 20656369 656d616e 002e2e2e      device name....
 80a4034:	6c697453 6177206c 6e697469 6f662067     Still waiting fo
 80a4044:	20612072 656d616e 002e2e2e 20746f4e     r a name....Not 
 80a4054:	6c632061 2064756f 706f6f6c 6843202e     a cloud loop. Ch
 80a4064:	696b6365 6420676e 63697665 6f662065     ecking device fo
 80a4074:	616e2072 002e656d 20746f47 656d616e     r name..Got name
 80a4084:	6f726620 4545206d 4d4f5250 6f4e0021      from EEPROM!.No
 80a4094:	20612074 756f6c63 6f6c2064 6120706f     t a cloud loop a
 80a40a4:	6e20646e 6173206f 20646576 656d616e     nd no saved name
 80a40b4:	2049202c 6c6c6163 65687420 6f4e2065     , I call thee No
 80a40c4:	656d614e 002e2e2e 614e6f4e 5700656d     Name....NoName.W
 80a40d4:	61682065 61206576 6d616e20 00203a65     e have a name: .
 80a40e4:	6b6f6f54 6f6f7420 6e6f6c20 2e2e2e67     Took too long...
 80a40f4:	6c697720 6163206c 6c65636e 66695720      will cancel Wif
 80a4104:	6e612069 68742064 6c632065 2e64756f     i and the cloud.
 80a4114:	00202e2e 6e6e6f43 69746365 5720676e     .. .Connecting W
 80a4124:	2e694669 43002e2e 656e6e6f 6e697463     iFi....Connectin
 80a4134:	6f742067 6f6c4320 2e2e6475 7349002e     g to Cloud....Is
 80a4144:	63206120 64756f6c 6f6f6c20 75622070      a cloud loop bu
 80a4154:	68742074 6c632065 2064756f 20746f6e     t the cloud not 
 80a4164:	6e6e6f63 65746365 77202c64 206c6c69     connected, will 
 80a4174:	20776f6e 6e6e6f63 2e746365 66695700     now connect..Wif
 80a4184:	73692069 61657220 002e7964 69666957     i is ready..Wifi
 80a4194:	20736920 6e6e6f63 69746365 002e676e      is connecting..
 80a41a4:	69666957 20736920 64616572 6e202e79     Wifi is ready. n
 80a41b4:	7420776f 6f63206f 63656e6e 6f742074     ow to connect to
 80a41c4:	65687420 6f6c6320 202e6475 6e6f4300      the cloud. .Con
 80a41d4:	7463656e 20676e69 74206f74 63206568     necting to the c
 80a41e4:	64756f6c 202e2e2e 20655700 20657261     loud... .We are 
 80a41f4:	6e6e6f63 65746365 6f742064 65687420     connected to the
 80a4204:	6f6c6320 202e6475 617a6148 69570072      cloud. Hazar.Wi
 80a4214:	63206946 656e6e6f 6f697463 6974206e     Fi connection ti
 80a4224:	2064656d 2c74756f 6c697720 7274206c     med out, will tr
 80a4234:	6e612079 6f632064 63656e6e 2e2e2e74     y and connect...
 80a4244:	20655700 20657261 6c697473 6f63206c     .We are still co
 80a4254:	63656e6e 676e6974 206f7420 20656874     nnecting to the 
 80a4264:	756f6c63 57202e64 206c6c69 20797274     cloud. Will try 
 80a4274:	6e6e6f63 20746365 69616761 4e002e6e     connect again..N
 80a4284:	6320746f 656e6e6f 64657463 206f7420     ot connected to 
 80a4294:	20656874 756f6c63 77202e64 206c6c69     the cloud. will 
 80a42a4:	20797274 69616761 2e2e2e6e 72754200     try again....Bur
 80a42b4:	79656c6e 69513400 39326475 0061642d     nley.4Qiud29-da.
 80a42c4:	75204733 395f6946 33003045 46752047     3G uFi_9E0.3G uF
 80a42d4:	36435f69 47330042 69467520 3338435f     i_C6B.3G uFi_C83
 80a42e4:	20473300 5f694675 00334539 75204733     .3G uFi_9E3.3G u
 80a42f4:	365f6946 00004231                       Fi_61B..

080a42fc <_ZTV8SPIClass>:
	...
 80a4304:	080a15ed 080a15ef                       ........

080a430c <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a4314:	080a1a9b 080a1ac1 080a1a75 080a316b     ........u...k1..

080a4324 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a432c:	080a227d 080a2291 080a1b59 080a1a7d     }"..."..Y...}...

080a433c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a4344:	080a1a97 080a1add 080a2175 080a1aeb     ........u!......
 80a4354:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
 80a4364:	006c6961 25000a0d 75303130 205d0020     ail....%010u .] 
 80a4374:	00642500 203a2928 005b2000 65646f63     .%d.(): . [.code
 80a4384:	00203d20 64006925 69617465 3d20736c      = .%i.details =
 80a4394:	61620020 53006475 61697265 5355006c      .baud.Serial.US
 80a43a4:	72655342 316c6169 70797400 61700065     BSerial1.type.pa
 80a43b4:	006d6172 00646d63 68006469 7300646e     ram.cmd.id.hnd.s
 80a43c4:	006d7274 746c6966 6c766c00 64646100     trm.filt.lvl.add
 80a43d4:	646e6148 0072656c 6f6d6572 61486576     Handler.removeHa
 80a43e4:	656c646e 6e650072 61486d75 656c646e     ndler.enumHandle
 80a43f4:	4a007372 534e4f53 61657274 676f4c6d     rs.JSONStreamLog
 80a4404:	646e6148 0072656c 00707061 656e6f6e     Handler.app.none
 80a4414:	61727400 69006563 006f666e 6e726177     .trace.info.warn
 80a4424:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
 80a4434:	00000000                                ....

080a4438 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a4440:	080a2251 080a2269 080a1ced 080a00cb     Q"..i"..........

080a4450 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a4458:	080a1a99 080a1acf 080a2941 080a1a7f     ........A)......
 80a4468:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 80a4478:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 80a4488:	63736100 656d6974 00000000              .asctime....

080a4494 <_ZTV9IPAddress>:
	...
 80a449c:	080a2ba5 080a2b95 080a2b97              .+...+...+..

080a44a8 <_ZTV9USBSerial>:
	...
 80a44b0:	080a2c61 080a2cb1 080a2cbf 080a193f     a,...,...,..?...
 80a44c0:	080a2c9d 080a2c63 080a2c79 080a2cab     .,..c,..y,...,..
 80a44d0:	080a2c8f 080a2c5d                       .,..],..

080a44d8 <_ZTV11USARTSerial>:
	...
 80a44e0:	080a2dd5 080a2e25 080a2e33 080a193f     .-..%...3...?...
 80a44f0:	080a2de9 080a2e0b 080a2df7 080a2e1f     .-.......-......
 80a4500:	080a2dd7 080a2ddb                       .-...-..

080a4508 <_ZTV7TwoWire>:
	...
 80a4510:	080a2f19 080a2f63 080a2f3b 080a2f1b     ./..c/..;/.../..
 80a4520:	080a2f43 080a2f4b 080a2f53 080a2f5b     C/..K/..S/..[/..

080a4530 <_ZTVN5spark9WiFiClassE>:
	...
 80a4538:	080a3051 080a3047 080a0193 080a019d     Q0..G0..........
 80a4548:	080a1a69 080a303b 080a302f 080a3027     i...;0../0..'0..
 80a4558:	080a301d 080a3013 080a2fcf              .0...0.../..

080a4564 <_ZTVN5spark12NetworkClassE>:
	...
 80a456c:	080a3071 080a307b 080a3085 080a308f     q0..{0...0...0..
 80a457c:	080a3099 080a30a5 080a30b1 080a30bd     .0...0...0...0..
 80a458c:	080a30c5 080a30cf 080a30d9 00302e30     .0...0...0..0.0.
 80a459c:	736c6166 72740065 25006575 67250075     false.true.%u.%g
 80a45ac:	6c756e00 2575006c 00783430              .null.u%04x.

080a45b8 <_ZSt7nothrow>:
	...

080a45b9 <_ctype_>:
 80a45b9:	20202000 20202020 28282020 20282828     .         ((((( 
 80a45c9:	20202020 20202020 20202020 20202020                     
 80a45d9:	10108820 10101010 10101010 10101010      ...............
 80a45e9:	04040410 04040404 10040404 10101010     ................
 80a45f9:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4609:	01010101 01010101 01010101 10101010     ................
 80a4619:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4629:	02020202 02020202 02020202 10101010     ................
 80a4639:	00000020 00000000 00000000 00000000      ...............
	...

080a46bc <__sf_fake_stdin>:
	...

080a46dc <__sf_fake_stdout>:
	...

080a46fc <__sf_fake_stderr>:
	...
 80a471c:	00000043                                         C.

080a471e <link_const_variable_data_end>:
	...

080a4720 <link_constructors_location>:
 80a4720:	080a0c69 	.word	0x080a0c69
 80a4724:	080a0e19 	.word	0x080a0e19
 80a4728:	080a0e31 	.word	0x080a0e31
 80a472c:	080a0e35 	.word	0x080a0e35
 80a4730:	080a0e39 	.word	0x080a0e39
 80a4734:	080a0e3d 	.word	0x080a0e3d
 80a4738:	080a0e41 	.word	0x080a0e41
 80a473c:	080a0e45 	.word	0x080a0e45
 80a4740:	080a0e49 	.word	0x080a0e49
 80a4744:	080a0e4d 	.word	0x080a0e4d
 80a4748:	080a0e51 	.word	0x080a0e51
 80a474c:	080a0e55 	.word	0x080a0e55
 80a4750:	080a0e59 	.word	0x080a0e59
 80a4754:	080a0e5d 	.word	0x080a0e5d
 80a4758:	080a0e61 	.word	0x080a0e61
 80a475c:	080a10c3 	.word	0x080a10c3
 80a4760:	080a10c7 	.word	0x080a10c7
 80a4764:	080a10cb 	.word	0x080a10cb
 80a4768:	080a10cf 	.word	0x080a10cf
 80a476c:	080a10d3 	.word	0x080a10d3
 80a4770:	080a10d7 	.word	0x080a10d7
 80a4774:	080a10db 	.word	0x080a10db
 80a4778:	080a10df 	.word	0x080a10df
 80a477c:	080a10e3 	.word	0x080a10e3
 80a4780:	080a10e7 	.word	0x080a10e7
 80a4784:	080a110b 	.word	0x080a110b
 80a4788:	080a110f 	.word	0x080a110f
 80a478c:	080a1113 	.word	0x080a1113
 80a4790:	080a1117 	.word	0x080a1117
 80a4794:	080a111b 	.word	0x080a111b
 80a4798:	080a111f 	.word	0x080a111f
 80a479c:	080a1123 	.word	0x080a1123
 80a47a0:	080a1127 	.word	0x080a1127
 80a47a4:	080a112b 	.word	0x080a112b
 80a47a8:	080a112f 	.word	0x080a112f
 80a47ac:	080a1133 	.word	0x080a1133
 80a47b0:	080a1137 	.word	0x080a1137
 80a47b4:	080a113b 	.word	0x080a113b
 80a47b8:	080a1625 	.word	0x080a1625
 80a47bc:	080a2a09 	.word	0x080a2a09
 80a47c0:	080a2a19 	.word	0x080a2a19
 80a47c4:	080a2a41 	.word	0x080a2a41
 80a47c8:	080a305d 	.word	0x080a305d
 80a47cc:	080a3129 	.word	0x080a3129
 80a47d0:	080a3515 	.word	0x080a3515
 80a47d4:	080a3581 	.word	0x080a3581
 80a47d8:	080a3631 	.word	0x080a3631
 80a47dc:	080a36b5 	.word	0x080a36b5
 80a47e0:	080a3779 	.word	0x080a3779
 80a47e4:	080a383d 	.word	0x080a383d

080a47e8 <link_constructors_end>:
	...
