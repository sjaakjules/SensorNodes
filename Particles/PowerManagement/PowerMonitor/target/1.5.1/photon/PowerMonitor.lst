
c:/Users/julia/OneDrive/Documents/Repos/Particles/PowerManagement/PowerMonitor/target/1.5.1/photon/PowerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006670  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a6690  080a6690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a6698  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c8  20000000  080a669c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e4  200000c8  200000c8  000400c8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a6764  080a6764  00036764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a678c  080a678c  0003678c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ceafd  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011931  00000000  00000000  0010528d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017c89  00000000  00000000  00116bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002510  00000000  00000000  0012e847  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003d10  00000000  00000000  00130d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002818a  00000000  00000000  00134a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00026c30  00000000  00000000  0015cbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000afad8  00000000  00000000  00183821  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ce28  00000000  00000000  002332fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 f9c1 	bl	80a53b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 f9e1 	bl	80a5404 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a669c 	.word	0x080a669c
 80a0050:	200000c8 	.word	0x200000c8
 80a0054:	200000c8 	.word	0x200000c8
 80a0058:	200004ac 	.word	0x200004ac
 80a005c:	200004ac 	.word	0x200004ac

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fd77 	bl	80a2b54 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a6658 	.word	0x080a6658
 80a0088:	080a6688 	.word	0x080a6688

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8e8 	b.w	80a0260 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fbcf 	bl	80a0834 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bd1d 	b.w	80a2ad8 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 b89d 	b.w	80a11dc <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 b8a3 	b.w	80a11ec <free>
	...

080a00a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a03      	ldr	r2, [pc, #12]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
 80a00b0:	f000 ffa8 	bl	80a1004 <panic_>
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a0dd1 	.word	0x080a0dd1

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80a00cc:	4770      	bx	lr

080a00ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ce:	6a00      	ldr	r0, [r0, #32]
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	68db      	ldr	r3, [r3, #12]
 80a00d4:	4718      	bx	r3
	...

080a00d8 <__tcf_1>:
double offCoulomb = 0;
double total_mAh = 0;
double on_mAh = 0;
double off_mAh = 0;
String powerOnStampList[10];
String powerOffStampList[10];
 80a00d8:	b538      	push	{r3, r4, r5, lr}
 80a00da:	4d06      	ldr	r5, [pc, #24]	; (80a00f4 <__tcf_1+0x1c>)
 80a00dc:	2400      	movs	r4, #0
 80a00de:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80a00e2:	4428      	add	r0, r5
 80a00e4:	3c10      	subs	r4, #16
 80a00e6:	f001 f9e1 	bl	80a14ac <_ZN6StringD1Ev>
 80a00ea:	f114 0fa0 	cmn.w	r4, #160	; 0xa0
 80a00ee:	d1f6      	bne.n	80a00de <__tcf_1+0x6>
 80a00f0:	bd38      	pop	{r3, r4, r5, pc}
 80a00f2:	bf00      	nop
 80a00f4:	20000108 	.word	0x20000108

080a00f8 <__tcf_0>:
double onCoulomb = 0;
double offCoulomb = 0;
double total_mAh = 0;
double on_mAh = 0;
double off_mAh = 0;
String powerOnStampList[10];
 80a00f8:	b538      	push	{r3, r4, r5, lr}
 80a00fa:	4d06      	ldr	r5, [pc, #24]	; (80a0114 <__tcf_0+0x1c>)
 80a00fc:	2400      	movs	r4, #0
 80a00fe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80a0102:	4428      	add	r0, r5
 80a0104:	3c10      	subs	r4, #16
 80a0106:	f001 f9d1 	bl	80a14ac <_ZN6StringD1Ev>
 80a010a:	f114 0fa0 	cmn.w	r4, #160	; 0xa0
 80a010e:	d1f6      	bne.n	80a00fe <__tcf_0+0x6>
 80a0110:	bd38      	pop	{r3, r4, r5, pc}
 80a0112:	bf00      	nop
 80a0114:	200001c0 	.word	0x200001c0

080a0118 <_Z9VoltSpikev>:
  Serial.println("Sent to the cloud... ");
  Serial.println(message);
}

void VoltSpike()
{
 80a0118:	b510      	push	{r4, lr}
  total_mAh += mAh;
 80a011a:	a31d      	add	r3, pc, #116	; (adr r3, 80a0190 <_Z9VoltSpikev+0x78>)
 80a011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0120:	4c1f      	ldr	r4, [pc, #124]	; (80a01a0 <_Z9VoltSpikev+0x88>)
 80a0122:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a0126:	f003 ffa9 	bl	80a407c <__adddf3>
  totalCoulomb += coulomb;
 80a012a:	a31b      	add	r3, pc, #108	; (adr r3, 80a0198 <_Z9VoltSpikev+0x80>)
 80a012c:	e9d3 2300 	ldrd	r2, r3, [r3]
  Serial.println(message);
}

void VoltSpike()
{
  total_mAh += mAh;
 80a0130:	e9c4 0100 	strd	r0, r1, [r4]
  totalCoulomb += coulomb;
 80a0134:	4c1b      	ldr	r4, [pc, #108]	; (80a01a4 <_Z9VoltSpikev+0x8c>)
 80a0136:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a013a:	f003 ff9f 	bl	80a407c <__adddf3>
  int isPowered = digitalRead(pwr);
 80a013e:	4b1a      	ldr	r3, [pc, #104]	; (80a01a8 <_Z9VoltSpikev+0x90>)
}

void VoltSpike()
{
  total_mAh += mAh;
  totalCoulomb += coulomb;
 80a0140:	e9c4 0100 	strd	r0, r1, [r4]
  int isPowered = digitalRead(pwr);
 80a0144:	8818      	ldrh	r0, [r3, #0]
 80a0146:	f003 fd32 	bl	80a3bae <digitalRead>
  if (isPowered == 1)
 80a014a:	2801      	cmp	r0, #1
 80a014c:	d10b      	bne.n	80a0166 <_Z9VoltSpikev+0x4e>
  {
    on_mAh += mAh;
 80a014e:	a310      	add	r3, pc, #64	; (adr r3, 80a0190 <_Z9VoltSpikev+0x78>)
 80a0150:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0154:	4c15      	ldr	r4, [pc, #84]	; (80a01ac <_Z9VoltSpikev+0x94>)
 80a0156:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a015a:	f003 ff8f 	bl	80a407c <__adddf3>
 80a015e:	e9c4 0100 	strd	r0, r1, [r4]
    onCoulomb += coulomb;
 80a0162:	4c13      	ldr	r4, [pc, #76]	; (80a01b0 <_Z9VoltSpikev+0x98>)
 80a0164:	e00a      	b.n	80a017c <_Z9VoltSpikev+0x64>
  }
  else
  {
    off_mAh += mAh;
 80a0166:	4c13      	ldr	r4, [pc, #76]	; (80a01b4 <_Z9VoltSpikev+0x9c>)
 80a0168:	a309      	add	r3, pc, #36	; (adr r3, 80a0190 <_Z9VoltSpikev+0x78>)
 80a016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a016e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a0172:	f003 ff83 	bl	80a407c <__adddf3>
 80a0176:	e9c4 0100 	strd	r0, r1, [r4]
    offCoulomb += coulomb;
 80a017a:	4c0f      	ldr	r4, [pc, #60]	; (80a01b8 <_Z9VoltSpikev+0xa0>)
 80a017c:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a0180:	a305      	add	r3, pc, #20	; (adr r3, 80a0198 <_Z9VoltSpikev+0x80>)
 80a0182:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0186:	f003 ff79 	bl	80a407c <__adddf3>
 80a018a:	e9c4 0100 	strd	r0, r1, [r4]
 80a018e:	bd10      	pop	{r4, pc}
 80a0190:	60000000 	.word	0x60000000
 80a0194:	3fc5d97f 	.word	0x3fc5d97f
 80a0198:	00000000 	.word	0x00000000
 80a019c:	3fe3a97c 	.word	0x3fe3a97c
 80a01a0:	20000270 	.word	0x20000270
 80a01a4:	200001b8 	.word	0x200001b8
 80a01a8:	20000004 	.word	0x20000004
 80a01ac:	20000100 	.word	0x20000100
 80a01b0:	200002a0 	.word	0x200002a0
 80a01b4:	200000f8 	.word	0x200000f8
 80a01b8:	200001b0 	.word	0x200001b0

080a01bc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a01bc:	b510      	push	{r4, lr}
 80a01be:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a01c0:	6800      	ldr	r0, [r0, #0]
 80a01c2:	b108      	cbz	r0, 80a01c8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a01c4:	f001 f812 	bl	80a11ec <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a01c8:	4620      	mov	r0, r4
 80a01ca:	bd10      	pop	{r4, pc}

080a01cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a01cc:	b510      	push	{r4, lr}
 80a01ce:	4604      	mov	r4, r0
 80a01d0:	4b09      	ldr	r3, [pc, #36]	; (80a01f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a01d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a01d4:	f001 fc92 	bl	80a1afc <_ZN5spark10LogManager8instanceEv>
 80a01d8:	4621      	mov	r1, r4
 80a01da:	f001 feac 	bl	80a1f36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a01de:	f003 f873 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a01e2:	f003 f865 	bl	80a32b0 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a01e6:	4620      	mov	r0, r4
 80a01e8:	4b04      	ldr	r3, [pc, #16]	; (80a01fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a01ea:	f840 3b04 	str.w	r3, [r0], #4
 80a01ee:	f001 fda9 	bl	80a1d44 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a01f2:	4620      	mov	r0, r4
 80a01f4:	bd10      	pop	{r4, pc}
 80a01f6:	bf00      	nop
 80a01f8:	080a5dd4 	.word	0x080a5dd4
 80a01fc:	080a5dbc 	.word	0x080a5dbc

080a0200 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0200:	b510      	push	{r4, lr}
 80a0202:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 80a0204:	f7ff ffe2 	bl	80a01cc <_ZN5spark16SerialLogHandlerD1Ev>
 80a0208:	4620      	mov	r0, r4
 80a020a:	2124      	movs	r1, #36	; 0x24
 80a020c:	f003 fd48 	bl	80a3ca0 <_ZdlPvj>
 80a0210:	4620      	mov	r0, r4
 80a0212:	bd10      	pop	{r4, pc}

080a0214 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0214:	2200      	movs	r2, #0
 80a0216:	4611      	mov	r1, r2
 80a0218:	6840      	ldr	r0, [r0, #4]
 80a021a:	f000 bf5f 	b.w	80a10dc <network_connecting>

080a021e <_ZN5spark9WiFiClass5readyEv>:
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a021e:	2200      	movs	r2, #0
 80a0220:	4611      	mov	r1, r2
 80a0222:	6840      	ldr	r0, [r0, #4]
 80a0224:	f000 bf6a 	b.w	80a10fc <network_ready>

080a0228 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a0228:	b40e      	push	{r1, r2, r3}
 80a022a:	b500      	push	{lr}
 80a022c:	b08c      	sub	sp, #48	; 0x30
 80a022e:	aa0d      	add	r2, sp, #52	; 0x34
 80a0230:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0234:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0236:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a023a:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a023c:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a023e:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0240:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0242:	aa04      	add	r2, sp, #16
 80a0244:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0246:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0248:	f000 fee4 	bl	80a1014 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80a024c:	b00c      	add	sp, #48	; 0x30
 80a024e:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0252:	b003      	add	sp, #12
 80a0254:	4770      	bx	lr

080a0256 <_Z13setup_Optionsv>:
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a0256:	2101      	movs	r1, #1
 80a0258:	4608      	mov	r0, r1
 80a025a:	f000 bdd9 	b.w	80a0e10 <HAL_Feature_Set>
	...

080a0260 <setup>:
/*DO NOT CHANGE*/ const char *PASS2 = "pha813rdl470";

bool syncedTime = false;

void setup()
{
 80a0260:	b513      	push	{r0, r1, r4, lr}
  pinMode(pwr, INPUT_PULLDOWN);
 80a0262:	4b14      	ldr	r3, [pc, #80]	; (80a02b4 <setup+0x54>)
  pinMode(interup, INPUT);
 80a0264:	4c14      	ldr	r4, [pc, #80]	; (80a02b8 <setup+0x58>)

bool syncedTime = false;

void setup()
{
  pinMode(pwr, INPUT_PULLDOWN);
 80a0266:	8818      	ldrh	r0, [r3, #0]
 80a0268:	2103      	movs	r1, #3
 80a026a:	f003 fc8f 	bl	80a3b8c <pinMode>
  pinMode(interup, INPUT);
 80a026e:	2100      	movs	r1, #0
 80a0270:	8820      	ldrh	r0, [r4, #0]
 80a0272:	f003 fc8b 	bl	80a3b8c <pinMode>
  Serial.begin(9600);
 80a0276:	f003 f827 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a027a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a027e:	f003 f813 	bl	80a32a8 <_ZN9USBSerial5beginEl>
  Time.zone(+10);
 80a0282:	480e      	ldr	r0, [pc, #56]	; (80a02bc <setup+0x5c>)
 80a0284:	f002 fb3e 	bl	80a2904 <_ZN9TimeClass4zoneEf>

  // while (!Serial.isConnected())
  //     Particle.process();
  Serial.println("Running Setup for loop");
 80a0288:	f003 f81e 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a028c:	490c      	ldr	r1, [pc, #48]	; (80a02c0 <setup+0x60>)
 80a028e:	f001 fa87 	bl	80a17a0 <_ZN5Print7printlnEPKc>
  delay(100);
 80a0292:	2064      	movs	r0, #100	; 0x64
 80a0294:	f002 fbbe 	bl	80a2a14 <delay>
  attachInterrupt(interup, VoltSpike, FALLING);
 80a0298:	2300      	movs	r3, #0
 80a029a:	9300      	str	r3, [sp, #0]
 80a029c:	8820      	ldrh	r0, [r4, #0]
 80a029e:	f04f 33ff 	mov.w	r3, #4294967295
 80a02a2:	2202      	movs	r2, #2
 80a02a4:	4907      	ldr	r1, [pc, #28]	; (80a02c4 <setup+0x64>)
 80a02a6:	f003 f865 	bl	80a3374 <_Z15attachInterrupttPFvvE13InterruptModeah>
  //attachInterrupt(pwr, ChangedPower, CHANGE);
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
  Particle.connect();
  //tryConnectCloud();
}
 80a02aa:	b002      	add	sp, #8
 80a02ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a02b0:	f000 bf64 	b.w	80a117c <spark_cloud_flag_connect>
 80a02b4:	20000004 	.word	0x20000004
 80a02b8:	20000000 	.word	0x20000000
 80a02bc:	41200000 	.word	0x41200000
 80a02c0:	080a5de4 	.word	0x080a5de4
 80a02c4:	080a0119 	.word	0x080a0119

080a02c8 <_Z13publishValuesv>:
  }
  delay(1000);
}

void publishValues()
{
 80a02c8:	b570      	push	{r4, r5, r6, lr}
 80a02ca:	b08e      	sub	sp, #56	; 0x38
  String message = "";
 80a02cc:	4919      	ldr	r1, [pc, #100]	; (80a0334 <_Z13publishValuesv+0x6c>)
 80a02ce:	a802      	add	r0, sp, #8
 80a02d0:	f001 f933 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a02d4:	f000 ff5a 	bl	80a118c <spark_cloud_flag_connected>

  if (Particle.connected())
 80a02d8:	2800      	cmp	r0, #0
 80a02da:	f000 81f4 	beq.w	80a06c6 <_Z13publishValuesv+0x3fe>
  {
    powerOffStamp = "";
 80a02de:	4915      	ldr	r1, [pc, #84]	; (80a0334 <_Z13publishValuesv+0x6c>)
 80a02e0:	4815      	ldr	r0, [pc, #84]	; (80a0338 <_Z13publishValuesv+0x70>)
 80a02e2:	f001 f97c 	bl	80a15de <_ZN6StringaSEPKc>
    powerOnStamp = "";
 80a02e6:	4913      	ldr	r1, [pc, #76]	; (80a0334 <_Z13publishValuesv+0x6c>)
 80a02e8:	4814      	ldr	r0, [pc, #80]	; (80a033c <_Z13publishValuesv+0x74>)
 80a02ea:	f001 f978 	bl	80a15de <_ZN6StringaSEPKc>
    for (size_t i = 0; i < nOff; i++)
 80a02ee:	4e14      	ldr	r6, [pc, #80]	; (80a0340 <_Z13publishValuesv+0x78>)
    {
      powerOffStamp.concat(powerOffStampList[i]);
 80a02f0:	4d14      	ldr	r5, [pc, #80]	; (80a0344 <_Z13publishValuesv+0x7c>)

  if (Particle.connected())
  {
    powerOffStamp = "";
    powerOnStamp = "";
    for (size_t i = 0; i < nOff; i++)
 80a02f2:	2400      	movs	r4, #0
 80a02f4:	6833      	ldr	r3, [r6, #0]
 80a02f6:	429c      	cmp	r4, r3
 80a02f8:	d303      	bcc.n	80a0302 <_Z13publishValuesv+0x3a>
 80a02fa:	2400      	movs	r4, #0
    {
      powerOffStamp.concat(powerOffStampList[i]);
      powerOffStamp.concat("_");
    }

    for (size_t i = 0; i < nOn; i++)
 80a02fc:	4e12      	ldr	r6, [pc, #72]	; (80a0348 <_Z13publishValuesv+0x80>)
    {
      powerOnStamp.concat(powerOnStampList[i]);
 80a02fe:	4d13      	ldr	r5, [pc, #76]	; (80a034c <_Z13publishValuesv+0x84>)
 80a0300:	e00a      	b.n	80a0318 <_Z13publishValuesv+0x50>
  {
    powerOffStamp = "";
    powerOnStamp = "";
    for (size_t i = 0; i < nOff; i++)
    {
      powerOffStamp.concat(powerOffStampList[i]);
 80a0302:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80a0306:	480c      	ldr	r0, [pc, #48]	; (80a0338 <_Z13publishValuesv+0x70>)
 80a0308:	f001 f9e4 	bl	80a16d4 <_ZN6String6concatERKS_>
      powerOffStamp.concat("_");
 80a030c:	4910      	ldr	r1, [pc, #64]	; (80a0350 <_Z13publishValuesv+0x88>)
 80a030e:	480a      	ldr	r0, [pc, #40]	; (80a0338 <_Z13publishValuesv+0x70>)
 80a0310:	f001 f9e4 	bl	80a16dc <_ZN6String6concatEPKc>

  if (Particle.connected())
  {
    powerOffStamp = "";
    powerOnStamp = "";
    for (size_t i = 0; i < nOff; i++)
 80a0314:	3401      	adds	r4, #1
 80a0316:	e7ed      	b.n	80a02f4 <_Z13publishValuesv+0x2c>
    {
      powerOffStamp.concat(powerOffStampList[i]);
      powerOffStamp.concat("_");
    }

    for (size_t i = 0; i < nOn; i++)
 80a0318:	6833      	ldr	r3, [r6, #0]
 80a031a:	429c      	cmp	r4, r3
 80a031c:	d21a      	bcs.n	80a0354 <_Z13publishValuesv+0x8c>
    {
      powerOnStamp.concat(powerOnStampList[i]);
 80a031e:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80a0322:	4806      	ldr	r0, [pc, #24]	; (80a033c <_Z13publishValuesv+0x74>)
 80a0324:	f001 f9d6 	bl	80a16d4 <_ZN6String6concatERKS_>
      powerOnStamp.concat("_");
 80a0328:	4909      	ldr	r1, [pc, #36]	; (80a0350 <_Z13publishValuesv+0x88>)
 80a032a:	4804      	ldr	r0, [pc, #16]	; (80a033c <_Z13publishValuesv+0x74>)
 80a032c:	f001 f9d6 	bl	80a16dc <_ZN6String6concatEPKc>
    {
      powerOffStamp.concat(powerOffStampList[i]);
      powerOffStamp.concat("_");
    }

    for (size_t i = 0; i < nOn; i++)
 80a0330:	3401      	adds	r4, #1
 80a0332:	e7f1      	b.n	80a0318 <_Z13publishValuesv+0x50>
 80a0334:	080a5f40 	.word	0x080a5f40
 80a0338:	200000cc 	.word	0x200000cc
 80a033c:	20000260 	.word	0x20000260
 80a0340:	200001a8 	.word	0x200001a8
 80a0344:	20000108 	.word	0x20000108
 80a0348:	200000e0 	.word	0x200000e0
 80a034c:	200001c0 	.word	0x200001c0
 80a0350:	080a5dfb 	.word	0x080a5dfb
    {
      powerOnStamp.concat(powerOnStampList[i]);
      powerOnStamp.concat("_");
    }
    nOff = 0;
 80a0354:	4ab6      	ldr	r2, [pc, #728]	; (80a0630 <_Z13publishValuesv+0x368>)
 80a0356:	2300      	movs	r3, #0
 80a0358:	6013      	str	r3, [r2, #0]
    nOn = 0;
 80a035a:	4ab6      	ldr	r2, [pc, #728]	; (80a0634 <_Z13publishValuesv+0x36c>)

    message.concat(String("{ "));
 80a035c:	49b6      	ldr	r1, [pc, #728]	; (80a0638 <_Z13publishValuesv+0x370>)
 80a035e:	a80a      	add	r0, sp, #40	; 0x28
    {
      powerOnStamp.concat(powerOnStampList[i]);
      powerOnStamp.concat("_");
    }
    nOff = 0;
    nOn = 0;
 80a0360:	6013      	str	r3, [r2, #0]

    message.concat(String("{ "));
 80a0362:	f001 f8ea 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0366:	a90a      	add	r1, sp, #40	; 0x28
 80a0368:	a802      	add	r0, sp, #8
 80a036a:	f001 f9b3 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a036e:	a80a      	add	r0, sp, #40	; 0x28
 80a0370:	f001 f89c 	bl	80a14ac <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0374:	49b1      	ldr	r1, [pc, #708]	; (80a063c <_Z13publishValuesv+0x374>)
 80a0376:	a80a      	add	r0, sp, #40	; 0x28
 80a0378:	f001 f8df 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Bt\":" + String(total_mAh, 3) + ", ");
 80a037c:	2403      	movs	r4, #3
 80a037e:	4bb0      	ldr	r3, [pc, #704]	; (80a0640 <_Z13publishValuesv+0x378>)
 80a0380:	9400      	str	r4, [sp, #0]
 80a0382:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0386:	a806      	add	r0, sp, #24
 80a0388:	f001 f977 	bl	80a167a <_ZN6StringC1Edi>
 80a038c:	a906      	add	r1, sp, #24
 80a038e:	a80a      	add	r0, sp, #40	; 0x28
 80a0390:	f001 f9b3 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0394:	49ab      	ldr	r1, [pc, #684]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a0396:	f001 f9bc 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a039a:	4601      	mov	r1, r0
 80a039c:	a802      	add	r0, sp, #8
 80a039e:	f001 f999 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a03a2:	a806      	add	r0, sp, #24
 80a03a4:	f001 f882 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03a8:	a80a      	add	r0, sp, #40	; 0x28
 80a03aa:	f001 f87f 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03ae:	49a6      	ldr	r1, [pc, #664]	; (80a0648 <_Z13publishValuesv+0x380>)
 80a03b0:	a80a      	add	r0, sp, #40	; 0x28
 80a03b2:	f001 f8c2 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Bp\":" + String(on_mAh, 3) + ", ");
 80a03b6:	4ba5      	ldr	r3, [pc, #660]	; (80a064c <_Z13publishValuesv+0x384>)
 80a03b8:	9400      	str	r4, [sp, #0]
 80a03ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03be:	a806      	add	r0, sp, #24
 80a03c0:	f001 f95b 	bl	80a167a <_ZN6StringC1Edi>
 80a03c4:	a906      	add	r1, sp, #24
 80a03c6:	a80a      	add	r0, sp, #40	; 0x28
 80a03c8:	f001 f997 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a03cc:	499d      	ldr	r1, [pc, #628]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a03ce:	f001 f9a0 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a03d2:	4601      	mov	r1, r0
 80a03d4:	a802      	add	r0, sp, #8
 80a03d6:	f001 f97d 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a03da:	a806      	add	r0, sp, #24
 80a03dc:	f001 f866 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03e0:	a80a      	add	r0, sp, #40	; 0x28
 80a03e2:	f001 f863 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03e6:	499a      	ldr	r1, [pc, #616]	; (80a0650 <_Z13publishValuesv+0x388>)
 80a03e8:	a80a      	add	r0, sp, #40	; 0x28
 80a03ea:	f001 f8a6 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Bh\":" + String(off_mAh, 3) + ", ");
 80a03ee:	4b99      	ldr	r3, [pc, #612]	; (80a0654 <_Z13publishValuesv+0x38c>)
 80a03f0:	9400      	str	r4, [sp, #0]
 80a03f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03f6:	a806      	add	r0, sp, #24
 80a03f8:	f001 f93f 	bl	80a167a <_ZN6StringC1Edi>
 80a03fc:	a906      	add	r1, sp, #24
 80a03fe:	a80a      	add	r0, sp, #40	; 0x28
 80a0400:	f001 f97b 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0404:	498f      	ldr	r1, [pc, #572]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a0406:	f001 f984 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a040a:	4601      	mov	r1, r0
 80a040c:	a802      	add	r0, sp, #8
 80a040e:	f001 f961 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a0412:	a806      	add	r0, sp, #24
 80a0414:	f001 f84a 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0418:	a80a      	add	r0, sp, #40	; 0x28
 80a041a:	f001 f847 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a041e:	498e      	ldr	r1, [pc, #568]	; (80a0658 <_Z13publishValuesv+0x390>)
 80a0420:	a80a      	add	r0, sp, #40	; 0x28
 80a0422:	f001 f88a 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Yr\":" + String(Time.year()) + ", ");
 80a0426:	f002 fae1 	bl	80a29ec <_ZN9TimeClass4yearEv>
 80a042a:	220a      	movs	r2, #10
 80a042c:	4601      	mov	r1, r0
 80a042e:	a806      	add	r0, sp, #24
 80a0430:	f001 f8e6 	bl	80a1600 <_ZN6StringC1Eih>
 80a0434:	a906      	add	r1, sp, #24
 80a0436:	a80a      	add	r0, sp, #40	; 0x28
 80a0438:	f001 f95f 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a043c:	4981      	ldr	r1, [pc, #516]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a043e:	f001 f968 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0442:	4601      	mov	r1, r0
 80a0444:	a802      	add	r0, sp, #8
 80a0446:	f001 f945 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a044a:	a806      	add	r0, sp, #24
 80a044c:	f001 f82e 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0450:	a80a      	add	r0, sp, #40	; 0x28
 80a0452:	f001 f82b 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0456:	4981      	ldr	r1, [pc, #516]	; (80a065c <_Z13publishValuesv+0x394>)
 80a0458:	a80a      	add	r0, sp, #40	; 0x28
 80a045a:	f001 f86e 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Mo\":" + String(Time.month()) + ", ");
 80a045e:	f002 fabd 	bl	80a29dc <_ZN9TimeClass5monthEv>
 80a0462:	220a      	movs	r2, #10
 80a0464:	4601      	mov	r1, r0
 80a0466:	a806      	add	r0, sp, #24
 80a0468:	f001 f8ca 	bl	80a1600 <_ZN6StringC1Eih>
 80a046c:	a906      	add	r1, sp, #24
 80a046e:	a80a      	add	r0, sp, #40	; 0x28
 80a0470:	f001 f943 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0474:	4973      	ldr	r1, [pc, #460]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a0476:	f001 f94c 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a047a:	4601      	mov	r1, r0
 80a047c:	a802      	add	r0, sp, #8
 80a047e:	f001 f929 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a0482:	a806      	add	r0, sp, #24
 80a0484:	f001 f812 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0488:	a80a      	add	r0, sp, #40	; 0x28
 80a048a:	f001 f80f 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a048e:	4974      	ldr	r1, [pc, #464]	; (80a0660 <_Z13publishValuesv+0x398>)
 80a0490:	a80a      	add	r0, sp, #40	; 0x28
 80a0492:	f001 f852 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Da\":" + String(Time.day()) + ", ");
 80a0496:	f002 fa97 	bl	80a29c8 <_ZN9TimeClass3dayEv>
 80a049a:	220a      	movs	r2, #10
 80a049c:	4601      	mov	r1, r0
 80a049e:	a806      	add	r0, sp, #24
 80a04a0:	f001 f8ae 	bl	80a1600 <_ZN6StringC1Eih>
 80a04a4:	a906      	add	r1, sp, #24
 80a04a6:	a80a      	add	r0, sp, #40	; 0x28
 80a04a8:	f001 f927 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a04ac:	4965      	ldr	r1, [pc, #404]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a04ae:	f001 f930 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a04b2:	4601      	mov	r1, r0
 80a04b4:	a802      	add	r0, sp, #8
 80a04b6:	f001 f90d 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a04ba:	a806      	add	r0, sp, #24
 80a04bc:	f000 fff6 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04c0:	a80a      	add	r0, sp, #40	; 0x28
 80a04c2:	f000 fff3 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a04c6:	4967      	ldr	r1, [pc, #412]	; (80a0664 <_Z13publishValuesv+0x39c>)
 80a04c8:	a80a      	add	r0, sp, #40	; 0x28
 80a04ca:	f001 f836 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Hr\":" + String(Time.hour()) + ", ");
 80a04ce:	f002 fa5d 	bl	80a298c <_ZN9TimeClass4hourEv>
 80a04d2:	220a      	movs	r2, #10
 80a04d4:	4601      	mov	r1, r0
 80a04d6:	a806      	add	r0, sp, #24
 80a04d8:	f001 f892 	bl	80a1600 <_ZN6StringC1Eih>
 80a04dc:	a906      	add	r1, sp, #24
 80a04de:	a80a      	add	r0, sp, #40	; 0x28
 80a04e0:	f001 f90b 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a04e4:	4957      	ldr	r1, [pc, #348]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a04e6:	f001 f914 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a04ea:	4601      	mov	r1, r0
 80a04ec:	a802      	add	r0, sp, #8
 80a04ee:	f001 f8f1 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a04f2:	a806      	add	r0, sp, #24
 80a04f4:	f000 ffda 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04f8:	a80a      	add	r0, sp, #40	; 0x28
 80a04fa:	f000 ffd7 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a04fe:	495a      	ldr	r1, [pc, #360]	; (80a0668 <_Z13publishValuesv+0x3a0>)
 80a0500:	a80a      	add	r0, sp, #40	; 0x28
 80a0502:	f001 f81a 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Mi\":" + String(Time.minute()) + ", ");
 80a0506:	f002 fa4b 	bl	80a29a0 <_ZN9TimeClass6minuteEv>
 80a050a:	220a      	movs	r2, #10
 80a050c:	4601      	mov	r1, r0
 80a050e:	a806      	add	r0, sp, #24
 80a0510:	f001 f876 	bl	80a1600 <_ZN6StringC1Eih>
 80a0514:	a906      	add	r1, sp, #24
 80a0516:	a80a      	add	r0, sp, #40	; 0x28
 80a0518:	f001 f8ef 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a051c:	4949      	ldr	r1, [pc, #292]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a051e:	f001 f8f8 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0522:	4601      	mov	r1, r0
 80a0524:	a802      	add	r0, sp, #8
 80a0526:	f001 f8d5 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a052a:	a806      	add	r0, sp, #24
 80a052c:	f000 ffbe 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0530:	a80a      	add	r0, sp, #40	; 0x28
 80a0532:	f000 ffbb 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0536:	494d      	ldr	r1, [pc, #308]	; (80a066c <_Z13publishValuesv+0x3a4>)
 80a0538:	a80a      	add	r0, sp, #40	; 0x28
 80a053a:	f000 fffe 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Sc\":" + String(Time.second()) + ", ");
 80a053e:	f002 fa39 	bl	80a29b4 <_ZN9TimeClass6secondEv>
 80a0542:	220a      	movs	r2, #10
 80a0544:	4601      	mov	r1, r0
 80a0546:	a806      	add	r0, sp, #24
 80a0548:	f001 f85a 	bl	80a1600 <_ZN6StringC1Eih>
 80a054c:	a906      	add	r1, sp, #24
 80a054e:	a80a      	add	r0, sp, #40	; 0x28
 80a0550:	f001 f8d3 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0554:	493b      	ldr	r1, [pc, #236]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a0556:	f001 f8dc 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a055a:	4601      	mov	r1, r0
 80a055c:	a802      	add	r0, sp, #8
 80a055e:	f001 f8b9 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a0562:	a806      	add	r0, sp, #24
 80a0564:	f000 ffa2 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0568:	a80a      	add	r0, sp, #40	; 0x28
 80a056a:	f000 ff9f 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a056e:	4940      	ldr	r1, [pc, #256]	; (80a0670 <_Z13publishValuesv+0x3a8>)
 80a0570:	a80a      	add	r0, sp, #40	; 0x28
 80a0572:	f000 ffe2 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat("\"Zo\":" + String(10) + ", ");
 80a0576:	220a      	movs	r2, #10
 80a0578:	4611      	mov	r1, r2
 80a057a:	a806      	add	r0, sp, #24
 80a057c:	f001 f840 	bl	80a1600 <_ZN6StringC1Eih>
 80a0580:	a906      	add	r1, sp, #24
 80a0582:	a80a      	add	r0, sp, #40	; 0x28
 80a0584:	f001 f8b9 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0588:	492e      	ldr	r1, [pc, #184]	; (80a0644 <_Z13publishValuesv+0x37c>)
 80a058a:	f001 f8c2 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a058e:	4601      	mov	r1, r0
 80a0590:	a802      	add	r0, sp, #8
 80a0592:	f001 f89f 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a0596:	a806      	add	r0, sp, #24
 80a0598:	f000 ff88 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a059c:	a80a      	add	r0, sp, #40	; 0x28
 80a059e:	f000 ff85 	bl	80a14ac <_ZN6StringD1Ev>

    message.concat(String("\"P1\": \""));
 80a05a2:	4934      	ldr	r1, [pc, #208]	; (80a0674 <_Z13publishValuesv+0x3ac>)
 80a05a4:	a80a      	add	r0, sp, #40	; 0x28
 80a05a6:	f000 ffc8 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a05aa:	a90a      	add	r1, sp, #40	; 0x28
 80a05ac:	a802      	add	r0, sp, #8
 80a05ae:	f001 f891 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a05b2:	a80a      	add	r0, sp, #40	; 0x28
 80a05b4:	f000 ff7a 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a05b8:	492f      	ldr	r1, [pc, #188]	; (80a0678 <_Z13publishValuesv+0x3b0>)
 80a05ba:	a80a      	add	r0, sp, #40	; 0x28
 80a05bc:	f000 fffc 	bl	80a15b8 <_ZN6StringC1ERKS_>
    message.concat(powerOffStamp + "\", ");
 80a05c0:	492e      	ldr	r1, [pc, #184]	; (80a067c <_Z13publishValuesv+0x3b4>)
 80a05c2:	a80a      	add	r0, sp, #40	; 0x28
 80a05c4:	f001 f8a5 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a05c8:	4601      	mov	r1, r0
 80a05ca:	a802      	add	r0, sp, #8
 80a05cc:	f001 f882 	bl	80a16d4 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a05d0:	a80a      	add	r0, sp, #40	; 0x28
 80a05d2:	f000 ff6b 	bl	80a14ac <_ZN6StringD1Ev>

    message.concat(String("\"P2\": \""));
 80a05d6:	492a      	ldr	r1, [pc, #168]	; (80a0680 <_Z13publishValuesv+0x3b8>)
 80a05d8:	a80a      	add	r0, sp, #40	; 0x28
 80a05da:	f000 ffae 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a05de:	a90a      	add	r1, sp, #40	; 0x28
 80a05e0:	a802      	add	r0, sp, #8
 80a05e2:	f001 f877 	bl	80a16d4 <_ZN6String6concatERKS_>
 80a05e6:	a80a      	add	r0, sp, #40	; 0x28
 80a05e8:	f000 ff60 	bl	80a14ac <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a05ec:	4925      	ldr	r1, [pc, #148]	; (80a0684 <_Z13publishValuesv+0x3bc>)
 80a05ee:	a80a      	add	r0, sp, #40	; 0x28
 80a05f0:	f000 ffe2 	bl	80a15b8 <_ZN6StringC1ERKS_>
    message.concat(powerOnStamp + "\", ");
 80a05f4:	4921      	ldr	r1, [pc, #132]	; (80a067c <_Z13publishValuesv+0x3b4>)
 80a05f6:	a80a      	add	r0, sp, #40	; 0x28
 80a05f8:	f001 f88b 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a05fc:	4601      	mov	r1, r0
 80a05fe:	a802      	add	r0, sp, #8
 80a0600:	f001 f868 	bl	80a16d4 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0604:	a80a      	add	r0, sp, #40	; 0x28
 80a0606:	f000 ff51 	bl	80a14ac <_ZN6StringD1Ev>

    message.concat("\"Dv\": \"Power1\" }");
 80a060a:	491f      	ldr	r1, [pc, #124]	; (80a0688 <_Z13publishValuesv+0x3c0>)
 80a060c:	a802      	add	r0, sp, #8
 80a060e:	f001 f865 	bl	80a16dc <_ZN6String6concatEPKc>

    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
 80a0612:	a902      	add	r1, sp, #8
 80a0614:	a80a      	add	r0, sp, #40	; 0x28
 80a0616:	f000 ffcf 	bl	80a15b8 <_ZN6StringC1ERKS_>
 80a061a:	4b1c      	ldr	r3, [pc, #112]	; (80a068c <_Z13publishValuesv+0x3c4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a061c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a061e:	781b      	ldrb	r3, [r3, #0]
 80a0620:	491b      	ldr	r1, [pc, #108]	; (80a0690 <_Z13publishValuesv+0x3c8>)
 80a0622:	f88d 3000 	strb.w	r3, [sp]
 80a0626:	a806      	add	r0, sp, #24
 80a0628:	233c      	movs	r3, #60	; 0x3c
 80a062a:	f002 fc01 	bl	80a2e30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a062e:	e031      	b.n	80a0694 <_Z13publishValuesv+0x3cc>
 80a0630:	200001a8 	.word	0x200001a8
 80a0634:	200000e0 	.word	0x200000e0
 80a0638:	080a5dfd 	.word	0x080a5dfd
 80a063c:	080a5e00 	.word	0x080a5e00
 80a0640:	20000270 	.word	0x20000270
 80a0644:	080a5e45 	.word	0x080a5e45
 80a0648:	080a5e06 	.word	0x080a5e06
 80a064c:	20000100 	.word	0x20000100
 80a0650:	080a5e0c 	.word	0x080a5e0c
 80a0654:	200000f8 	.word	0x200000f8
 80a0658:	080a5e12 	.word	0x080a5e12
 80a065c:	080a5e18 	.word	0x080a5e18
 80a0660:	080a5e1e 	.word	0x080a5e1e
 80a0664:	080a5e24 	.word	0x080a5e24
 80a0668:	080a5e2a 	.word	0x080a5e2a
 80a066c:	080a5e30 	.word	0x080a5e30
 80a0670:	080a5e36 	.word	0x080a5e36
 80a0674:	080a5e3c 	.word	0x080a5e3c
 80a0678:	200000cc 	.word	0x200000cc
 80a067c:	080a5e44 	.word	0x080a5e44
 80a0680:	080a5e48 	.word	0x080a5e48
 80a0684:	20000260 	.word	0x20000260
 80a0688:	080a5e50 	.word	0x080a5e50
 80a068c:	200000dc 	.word	0x200000dc
 80a0690:	080a5e61 	.word	0x080a5e61
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0694:	9c07      	ldr	r4, [sp, #28]
 80a0696:	b17c      	cbz	r4, 80a06b8 <_Z13publishValuesv+0x3f0>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0698:	6863      	ldr	r3, [r4, #4]
 80a069a:	3b01      	subs	r3, #1
 80a069c:	6063      	str	r3, [r4, #4]
 80a069e:	b95b      	cbnz	r3, 80a06b8 <_Z13publishValuesv+0x3f0>
        {
          _M_dispose();
 80a06a0:	6823      	ldr	r3, [r4, #0]
 80a06a2:	4620      	mov	r0, r4
 80a06a4:	689b      	ldr	r3, [r3, #8]
 80a06a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a06a8:	68a3      	ldr	r3, [r4, #8]
 80a06aa:	3b01      	subs	r3, #1
 80a06ac:	60a3      	str	r3, [r4, #8]
 80a06ae:	b91b      	cbnz	r3, 80a06b8 <_Z13publishValuesv+0x3f0>
            _M_destroy();
 80a06b0:	6823      	ldr	r3, [r4, #0]
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	68db      	ldr	r3, [r3, #12]
 80a06b6:	4798      	blx	r3
 80a06b8:	a80a      	add	r0, sp, #40	; 0x28
 80a06ba:	f000 fef7 	bl	80a14ac <_ZN6StringD1Ev>
    delay(1000);
 80a06be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a06c2:	f002 f9a7 	bl	80a2a14 <delay>
  }
  Serial.println("Sent to the cloud... ");
 80a06c6:	f002 fdff 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a06ca:	4906      	ldr	r1, [pc, #24]	; (80a06e4 <_Z13publishValuesv+0x41c>)
 80a06cc:	f001 f868 	bl	80a17a0 <_ZN5Print7printlnEPKc>
  Serial.println(message);
 80a06d0:	f002 fdfa 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a06d4:	9902      	ldr	r1, [sp, #8]
 80a06d6:	f001 f863 	bl	80a17a0 <_ZN5Print7printlnEPKc>
  delay(1000);
}

void publishValues()
{
  String message = "";
 80a06da:	a802      	add	r0, sp, #8
 80a06dc:	f000 fee6 	bl	80a14ac <_ZN6StringD1Ev>
    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
    delay(1000);
  }
  Serial.println("Sent to the cloud... ");
  Serial.println(message);
}
 80a06e0:	b00e      	add	sp, #56	; 0x38
 80a06e2:	bd70      	pop	{r4, r5, r6, pc}
 80a06e4:	080a5e69 	.word	0x080a5e69

080a06e8 <_Z13getDecimalDayv>:
    Serial.println("Saved date...");
    */
}

float getDecimalDay()
{
 80a06e8:	b530      	push	{r4, r5, lr}
 80a06ea:	b089      	sub	sp, #36	; 0x24
  int year = Time.year();
 80a06ec:	f002 f97e 	bl	80a29ec <_ZN9TimeClass4yearEv>
 80a06f0:	4604      	mov	r4, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a06f2:	4949      	ldr	r1, [pc, #292]	; (80a0818 <_Z13getDecimalDayv+0x130>)
 80a06f4:	a804      	add	r0, sp, #16
 80a06f6:	f000 ff20 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Current year is: " + String(year));
 80a06fa:	220a      	movs	r2, #10
 80a06fc:	4621      	mov	r1, r4
 80a06fe:	4668      	mov	r0, sp
 80a0700:	f000 ff7e 	bl	80a1600 <_ZN6StringC1Eih>
 80a0704:	4669      	mov	r1, sp
 80a0706:	a804      	add	r0, sp, #16
 80a0708:	f000 fff7 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a070c:	6801      	ldr	r1, [r0, #0]
 80a070e:	4843      	ldr	r0, [pc, #268]	; (80a081c <_Z13getDecimalDayv+0x134>)
 80a0710:	f7ff fd8a 	bl	80a0228 <_ZNK5spark6Logger4infoEPKcz>
 80a0714:	4668      	mov	r0, sp
 80a0716:	f000 fec9 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a071a:	a804      	add	r0, sp, #16
 80a071c:	f000 fec6 	bl	80a14ac <_ZN6StringD1Ev>
  long secFromEpoc = Time.local();
 80a0720:	f002 f8e2 	bl	80a28e8 <_ZN9TimeClass5localEv>
 80a0724:	4605      	mov	r5, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0726:	493e      	ldr	r1, [pc, #248]	; (80a0820 <_Z13getDecimalDayv+0x138>)
 80a0728:	a804      	add	r0, sp, #16
 80a072a:	f000 ff06 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Current seconds are:: " + String(secFromEpoc));
 80a072e:	220a      	movs	r2, #10
 80a0730:	4629      	mov	r1, r5
 80a0732:	4668      	mov	r0, sp
 80a0734:	f000 ff77 	bl	80a1626 <_ZN6StringC1Elh>
 80a0738:	4669      	mov	r1, sp
 80a073a:	a804      	add	r0, sp, #16
 80a073c:	f000 ffdd 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0740:	6801      	ldr	r1, [r0, #0]
 80a0742:	4836      	ldr	r0, [pc, #216]	; (80a081c <_Z13getDecimalDayv+0x134>)
 80a0744:	f7ff fd70 	bl	80a0228 <_ZNK5spark6Logger4infoEPKcz>
 80a0748:	4668      	mov	r0, sp
 80a074a:	f000 feaf 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a074e:	a804      	add	r0, sp, #16
 80a0750:	f000 feac 	bl	80a14ac <_ZN6StringD1Ev>
  int additionalSeconds = 0;
  if (year > 2020)
 80a0754:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80a0758:	429c      	cmp	r4, r3
 80a075a:	dd0f      	ble.n	80a077c <_Z13getDecimalDayv+0x94>
  {
    additionalSeconds = floor((year - 2021) / 4 + 1) * 86400;
 80a075c:	f2a4 70e5 	subw	r0, r4, #2021	; 0x7e5
 80a0760:	1080      	asrs	r0, r0, #2
 80a0762:	3001      	adds	r0, #1
 80a0764:	f003 fdd6 	bl	80a4314 <__aeabi_i2d>
 80a0768:	f003 fbfa 	bl	80a3f60 <floor>
 80a076c:	a326      	add	r3, pc, #152	; (adr r3, 80a0808 <_Z13getDecimalDayv+0x120>)
 80a076e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0772:	f003 fe35 	bl	80a43e0 <__aeabi_dmul>
 80a0776:	f004 f8cd 	bl	80a4914 <__aeabi_d2iz>
 80a077a:	e000      	b.n	80a077e <_Z13getDecimalDayv+0x96>
{
  int year = Time.year();
  Log.info("Current year is: " + String(year));
  long secFromEpoc = Time.local();
  Log.info("Current seconds are:: " + String(secFromEpoc));
  int additionalSeconds = 0;
 80a077c:	2000      	movs	r0, #0
  if (year > 2020)
  {
    additionalSeconds = floor((year - 2021) / 4 + 1) * 86400;
  }
  long secStartOfYear = 1546300800 + (year - 2019) * 31536000 + additionalSeconds;
 80a077e:	4b29      	ldr	r3, [pc, #164]	; (80a0824 <_Z13getDecimalDayv+0x13c>)
 80a0780:	f2a4 74e3 	subw	r4, r4, #2019	; 0x7e3
 80a0784:	fb03 0004 	mla	r0, r3, r4, r0
 80a0788:	4c27      	ldr	r4, [pc, #156]	; (80a0828 <_Z13getDecimalDayv+0x140>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a078a:	4928      	ldr	r1, [pc, #160]	; (80a082c <_Z13getDecimalDayv+0x144>)
 80a078c:	4404      	add	r4, r0
 80a078e:	a804      	add	r0, sp, #16
 80a0790:	f000 fed3 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Seconds for the start of year: " + String(secStartOfYear));
 80a0794:	220a      	movs	r2, #10
 80a0796:	4621      	mov	r1, r4
 80a0798:	4668      	mov	r0, sp
 80a079a:	f000 ff44 	bl	80a1626 <_ZN6StringC1Elh>
 80a079e:	4669      	mov	r1, sp
 80a07a0:	a804      	add	r0, sp, #16
 80a07a2:	f000 ffaa 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a07a6:	6801      	ldr	r1, [r0, #0]
 80a07a8:	481c      	ldr	r0, [pc, #112]	; (80a081c <_Z13getDecimalDayv+0x134>)
 80a07aa:	f7ff fd3d 	bl	80a0228 <_ZNK5spark6Logger4infoEPKcz>
 80a07ae:	4668      	mov	r0, sp
 80a07b0:	f000 fe7c 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a07b4:	a804      	add	r0, sp, #16
 80a07b6:	f000 fe79 	bl	80a14ac <_ZN6StringD1Ev>
  long diffFromSoY = secFromEpoc - secStartOfYear;
  float hrs = diffFromSoY * 1.0 / 3600.0;
 80a07ba:	1b28      	subs	r0, r5, r4
 80a07bc:	f003 fdaa 	bl	80a4314 <__aeabi_i2d>
 80a07c0:	a313      	add	r3, pc, #76	; (adr r3, 80a0810 <_Z13getDecimalDayv+0x128>)
 80a07c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07c6:	f003 ff35 	bl	80a4634 <__aeabi_ddiv>
 80a07ca:	f004 f8eb 	bl	80a49a4 <__aeabi_d2f>
 80a07ce:	4604      	mov	r4, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a07d0:	4917      	ldr	r1, [pc, #92]	; (80a0830 <_Z13getDecimalDayv+0x148>)
 80a07d2:	a804      	add	r0, sp, #16
 80a07d4:	f000 feb1 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
  Log.info("Decimal hrs are: " + String(hrs));
 80a07d8:	2206      	movs	r2, #6
 80a07da:	4621      	mov	r1, r4
 80a07dc:	4668      	mov	r0, sp
 80a07de:	f000 ff35 	bl	80a164c <_ZN6StringC1Efi>
 80a07e2:	4669      	mov	r1, sp
 80a07e4:	a804      	add	r0, sp, #16
 80a07e6:	f000 ff88 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a07ea:	6801      	ldr	r1, [r0, #0]
 80a07ec:	480b      	ldr	r0, [pc, #44]	; (80a081c <_Z13getDecimalDayv+0x134>)
 80a07ee:	f7ff fd1b 	bl	80a0228 <_ZNK5spark6Logger4infoEPKcz>
 80a07f2:	4668      	mov	r0, sp
 80a07f4:	f000 fe5a 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a07f8:	a804      	add	r0, sp, #16
 80a07fa:	f000 fe57 	bl	80a14ac <_ZN6StringD1Ev>
  return hrs;
}
 80a07fe:	4620      	mov	r0, r4
 80a0800:	b009      	add	sp, #36	; 0x24
 80a0802:	bd30      	pop	{r4, r5, pc}
 80a0804:	f3af 8000 	nop.w
 80a0808:	00000000 	.word	0x00000000
 80a080c:	40f51800 	.word	0x40f51800
 80a0810:	00000000 	.word	0x00000000
 80a0814:	40ac2000 	.word	0x40ac2000
 80a0818:	080a5e7f 	.word	0x080a5e7f
 80a081c:	200002ec 	.word	0x200002ec
 80a0820:	080a5e91 	.word	0x080a5e91
 80a0824:	01e13380 	.word	0x01e13380
 80a0828:	5c2aad80 	.word	0x5c2aad80
 80a082c:	080a5ea8 	.word	0x080a5ea8
 80a0830:	080a5ec8 	.word	0x080a5ec8

080a0834 <loop>:
  Particle.connect();
  //tryConnectCloud();
}

void loop()
{
 80a0834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isPowered != digitalRead(pwr))
 80a0838:	4c9b      	ldr	r4, [pc, #620]	; (80a0aa8 <loop+0x274>)
 80a083a:	4d9c      	ldr	r5, [pc, #624]	; (80a0aac <loop+0x278>)
  Particle.connect();
  //tryConnectCloud();
}

void loop()
{
 80a083c:	b08e      	sub	sp, #56	; 0x38
  if (isPowered != digitalRead(pwr))
 80a083e:	8820      	ldrh	r0, [r4, #0]
 80a0840:	782e      	ldrb	r6, [r5, #0]
 80a0842:	f003 f9b4 	bl	80a3bae <digitalRead>
 80a0846:	4286      	cmp	r6, r0
 80a0848:	4e99      	ldr	r6, [pc, #612]	; (80a0ab0 <loop+0x27c>)
 80a084a:	d036      	beq.n	80a08ba <loop+0x86>
  {
    isPowered = digitalRead(pwr);
 80a084c:	8820      	ldrh	r0, [r4, #0]
 80a084e:	f003 f9ae 	bl	80a3bae <digitalRead>
 80a0852:	2800      	cmp	r0, #0
 80a0854:	bf0c      	ite	eq
 80a0856:	2300      	moveq	r3, #0
 80a0858:	2301      	movne	r3, #1
 80a085a:	702b      	strb	r3, [r5, #0]
    if (!isPowered)
    {
      updateSerial = true;
    }
    int isPowered = digitalRead(pwr);
 80a085c:	8820      	ldrh	r0, [r4, #0]
  if (isPowered != digitalRead(pwr))
  {
    isPowered = digitalRead(pwr);
    if (!isPowered)
    {
      updateSerial = true;
 80a085e:	bf04      	itt	eq
 80a0860:	2301      	moveq	r3, #1
 80a0862:	7033      	strbeq	r3, [r6, #0]
    }
    int isPowered = digitalRead(pwr);
 80a0864:	f003 f9a3 	bl	80a3bae <digitalRead>

    if (isPowered == 1)
 80a0868:	2801      	cmp	r0, #1
 80a086a:	d108      	bne.n	80a087e <loop+0x4a>
    {
      Serial.println("now High");
      powerOnStampList[nOn] = String(getDecimalDay(), 4);
 80a086c:	4c91      	ldr	r4, [pc, #580]	; (80a0ab4 <loop+0x280>)
    }
    int isPowered = digitalRead(pwr);

    if (isPowered == 1)
    {
      Serial.println("now High");
 80a086e:	f002 fd2b 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a0872:	4991      	ldr	r1, [pc, #580]	; (80a0ab8 <loop+0x284>)
 80a0874:	f000 ff94 	bl	80a17a0 <_ZN5Print7printlnEPKc>
      powerOnStampList[nOn] = String(getDecimalDay(), 4);
 80a0878:	6827      	ldr	r7, [r4, #0]
 80a087a:	4b90      	ldr	r3, [pc, #576]	; (80a0abc <loop+0x288>)
 80a087c:	e00a      	b.n	80a0894 <loop+0x60>
      nOn++;
      //powerOnStamp += String(getDecimalDay(),4)+"_";
    }
    else
    {
      Serial.println("now Low");
 80a087e:	f002 fd23 	bl	80a32c8 <_Z16_fetch_usbserialv>
      delay(10);
      powerOffStampList[nOff] = String(getDecimalDay(), 4);
 80a0882:	4c8f      	ldr	r4, [pc, #572]	; (80a0ac0 <loop+0x28c>)
      nOn++;
      //powerOnStamp += String(getDecimalDay(),4)+"_";
    }
    else
    {
      Serial.println("now Low");
 80a0884:	498f      	ldr	r1, [pc, #572]	; (80a0ac4 <loop+0x290>)
 80a0886:	f000 ff8b 	bl	80a17a0 <_ZN5Print7printlnEPKc>
      delay(10);
 80a088a:	200a      	movs	r0, #10
 80a088c:	f002 f8c2 	bl	80a2a14 <delay>
      powerOffStampList[nOff] = String(getDecimalDay(), 4);
 80a0890:	6827      	ldr	r7, [r4, #0]
 80a0892:	4b8d      	ldr	r3, [pc, #564]	; (80a0ac8 <loop+0x294>)
 80a0894:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a0898:	f7ff ff26 	bl	80a06e8 <_Z13getDecimalDayv>
 80a089c:	2204      	movs	r2, #4
 80a089e:	4601      	mov	r1, r0
 80a08a0:	a80a      	add	r0, sp, #40	; 0x28
 80a08a2:	f000 fed3 	bl	80a164c <_ZN6StringC1Efi>
 80a08a6:	a90a      	add	r1, sp, #40	; 0x28
 80a08a8:	4638      	mov	r0, r7
 80a08aa:	f000 fe90 	bl	80a15ce <_ZN6StringaSEOS_>
 80a08ae:	a80a      	add	r0, sp, #40	; 0x28
 80a08b0:	f000 fdfc 	bl	80a14ac <_ZN6StringD1Ev>
      nOff++;
 80a08b4:	6823      	ldr	r3, [r4, #0]
 80a08b6:	3301      	adds	r3, #1
 80a08b8:	6023      	str	r3, [r4, #0]
      //powerOffStamp += String(getDecimalDay(),4)+"_";
    }
  }

  if (Time.year() != 1999)
 80a08ba:	f002 f897 	bl	80a29ec <_ZN9TimeClass4yearEv>
 80a08be:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80a08c2:	4298      	cmp	r0, r3
 80a08c4:	4b81      	ldr	r3, [pc, #516]	; (80a0acc <loop+0x298>)
  {
    syncedTime = true;
 80a08c6:	bf1c      	itt	ne
 80a08c8:	2201      	movne	r2, #1
 80a08ca:	701a      	strbne	r2, [r3, #0]
  }

  if (!syncedTime && Particle.connected())
 80a08cc:	781c      	ldrb	r4, [r3, #0]
 80a08ce:	b944      	cbnz	r4, 80a08e2 <loop+0xae>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a08d0:	f000 fc5c 	bl	80a118c <spark_cloud_flag_connected>
 80a08d4:	b128      	cbz	r0, 80a08e2 <loop+0xae>
 80a08d6:	f000 fc59 	bl	80a118c <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a08da:	b110      	cbz	r0, 80a08e2 <loop+0xae>
            return false;
        }
        return spark_sync_time(NULL);
 80a08dc:	4620      	mov	r0, r4
 80a08de:	f000 fc65 	bl	80a11ac <spark_sync_time>
  {
    Particle.syncTime();
  }

  //tryConnectCloud();
  Serial.println("Total power is \t" + String(totalCoulomb) + "C\t" + String(total_mAh) + "mAh");
 80a08e2:	f002 fcf1 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a08e6:	2406      	movs	r4, #6
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a08e8:	4979      	ldr	r1, [pc, #484]	; (80a0ad0 <loop+0x29c>)
 80a08ea:	4681      	mov	r9, r0
 80a08ec:	f8df 8218 	ldr.w	r8, [pc, #536]	; 80a0b08 <loop+0x2d4>
 80a08f0:	a806      	add	r0, sp, #24
 80a08f2:	f000 fe22 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a08f6:	9400      	str	r4, [sp, #0]
 80a08f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a08fc:	a802      	add	r0, sp, #8
 80a08fe:	f000 febc 	bl	80a167a <_ZN6StringC1Edi>
 80a0902:	a902      	add	r1, sp, #8
 80a0904:	a806      	add	r0, sp, #24
 80a0906:	f000 fef8 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a090a:	4972      	ldr	r1, [pc, #456]	; (80a0ad4 <loop+0x2a0>)
 80a090c:	f000 ff01 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0910:	4682      	mov	sl, r0
 80a0912:	4f71      	ldr	r7, [pc, #452]	; (80a0ad8 <loop+0x2a4>)
 80a0914:	9400      	str	r4, [sp, #0]
 80a0916:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a091a:	a80a      	add	r0, sp, #40	; 0x28
 80a091c:	f000 fead 	bl	80a167a <_ZN6StringC1Edi>
 80a0920:	a90a      	add	r1, sp, #40	; 0x28
 80a0922:	4650      	mov	r0, sl
 80a0924:	f000 fee9 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0928:	496c      	ldr	r1, [pc, #432]	; (80a0adc <loop+0x2a8>)
 80a092a:	f000 fef2 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a092e:	6801      	ldr	r1, [r0, #0]
 80a0930:	4648      	mov	r0, r9
 80a0932:	f000 ff35 	bl	80a17a0 <_ZN5Print7printlnEPKc>
 80a0936:	a80a      	add	r0, sp, #40	; 0x28
 80a0938:	f000 fdb8 	bl	80a14ac <_ZN6StringD1Ev>
 80a093c:	a802      	add	r0, sp, #8
 80a093e:	f000 fdb5 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0942:	a806      	add	r0, sp, #24
 80a0944:	f000 fdb2 	bl	80a14ac <_ZN6StringD1Ev>
  if (updateSerial)
 80a0948:	7833      	ldrb	r3, [r6, #0]
 80a094a:	2b00      	cmp	r3, #0
 80a094c:	f000 80a5 	beq.w	80a0a9a <loop+0x266>
  {
    Serial.println("Power of device switched.");
 80a0950:	f002 fcba 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a0954:	4962      	ldr	r1, [pc, #392]	; (80a0ae0 <loop+0x2ac>)
 80a0956:	f000 ff23 	bl	80a17a0 <_ZN5Print7printlnEPKc>
    Serial.println("Power is " + isPowered ? "On" : "off");
 80a095a:	f002 fcb5 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a095e:	782a      	ldrb	r2, [r5, #0]
 80a0960:	4b60      	ldr	r3, [pc, #384]	; (80a0ae4 <loop+0x2b0>)
 80a0962:	4961      	ldr	r1, [pc, #388]	; (80a0ae8 <loop+0x2b4>)
 80a0964:	42d3      	cmn	r3, r2
 80a0966:	4b61      	ldr	r3, [pc, #388]	; (80a0aec <loop+0x2b8>)
 80a0968:	bf08      	it	eq
 80a096a:	4619      	moveq	r1, r3
 80a096c:	f000 ff18 	bl	80a17a0 <_ZN5Print7printlnEPKc>
    Serial.println("Total power is \t" + String(totalCoulomb) + "C\t" + String(total_mAh) + "mAh");
 80a0970:	f002 fcaa 	bl	80a32c8 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0974:	4956      	ldr	r1, [pc, #344]	; (80a0ad0 <loop+0x29c>)
 80a0976:	4605      	mov	r5, r0
 80a0978:	a806      	add	r0, sp, #24
 80a097a:	f000 fdde 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a097e:	9400      	str	r4, [sp, #0]
 80a0980:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a0984:	a802      	add	r0, sp, #8
 80a0986:	f000 fe78 	bl	80a167a <_ZN6StringC1Edi>
 80a098a:	a902      	add	r1, sp, #8
 80a098c:	a806      	add	r0, sp, #24
 80a098e:	f000 feb4 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0992:	4950      	ldr	r1, [pc, #320]	; (80a0ad4 <loop+0x2a0>)
 80a0994:	f000 febd 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0998:	4680      	mov	r8, r0
 80a099a:	9400      	str	r4, [sp, #0]
 80a099c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a09a0:	a80a      	add	r0, sp, #40	; 0x28
 80a09a2:	f000 fe6a 	bl	80a167a <_ZN6StringC1Edi>
 80a09a6:	a90a      	add	r1, sp, #40	; 0x28
 80a09a8:	4640      	mov	r0, r8
 80a09aa:	f000 fea6 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a09ae:	494b      	ldr	r1, [pc, #300]	; (80a0adc <loop+0x2a8>)
 80a09b0:	f000 feaf 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a09b4:	6801      	ldr	r1, [r0, #0]
 80a09b6:	4628      	mov	r0, r5
 80a09b8:	f000 fef2 	bl	80a17a0 <_ZN5Print7printlnEPKc>
 80a09bc:	a80a      	add	r0, sp, #40	; 0x28
 80a09be:	f000 fd75 	bl	80a14ac <_ZN6StringD1Ev>
 80a09c2:	a802      	add	r0, sp, #8
 80a09c4:	f000 fd72 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a09c8:	a806      	add	r0, sp, #24
 80a09ca:	f000 fd6f 	bl	80a14ac <_ZN6StringD1Ev>
    Serial.println("When power is on \t" + String(onCoulomb) + "C\t" + String(on_mAh) + "mAh");
 80a09ce:	f002 fc7b 	bl	80a32c8 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a09d2:	4947      	ldr	r1, [pc, #284]	; (80a0af0 <loop+0x2bc>)
 80a09d4:	4605      	mov	r5, r0
 80a09d6:	a806      	add	r0, sp, #24
 80a09d8:	f000 fdaf 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a09dc:	4b45      	ldr	r3, [pc, #276]	; (80a0af4 <loop+0x2c0>)
 80a09de:	9400      	str	r4, [sp, #0]
 80a09e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09e4:	a802      	add	r0, sp, #8
 80a09e6:	f000 fe48 	bl	80a167a <_ZN6StringC1Edi>
 80a09ea:	a902      	add	r1, sp, #8
 80a09ec:	a806      	add	r0, sp, #24
 80a09ee:	f000 fe84 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a09f2:	4938      	ldr	r1, [pc, #224]	; (80a0ad4 <loop+0x2a0>)
 80a09f4:	f000 fe8d 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a09f8:	4607      	mov	r7, r0
 80a09fa:	4b3f      	ldr	r3, [pc, #252]	; (80a0af8 <loop+0x2c4>)
 80a09fc:	9400      	str	r4, [sp, #0]
 80a09fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a02:	a80a      	add	r0, sp, #40	; 0x28
 80a0a04:	f000 fe39 	bl	80a167a <_ZN6StringC1Edi>
 80a0a08:	a90a      	add	r1, sp, #40	; 0x28
 80a0a0a:	4638      	mov	r0, r7
 80a0a0c:	f000 fe75 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0a10:	4932      	ldr	r1, [pc, #200]	; (80a0adc <loop+0x2a8>)
 80a0a12:	f000 fe7e 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0a16:	6801      	ldr	r1, [r0, #0]
 80a0a18:	4628      	mov	r0, r5
 80a0a1a:	f000 fec1 	bl	80a17a0 <_ZN5Print7printlnEPKc>
 80a0a1e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a20:	f000 fd44 	bl	80a14ac <_ZN6StringD1Ev>
 80a0a24:	a802      	add	r0, sp, #8
 80a0a26:	f000 fd41 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a2a:	a806      	add	r0, sp, #24
 80a0a2c:	f000 fd3e 	bl	80a14ac <_ZN6StringD1Ev>
    Serial.println("When power is off\t" + String(offCoulomb) + "C\t" + String(off_mAh) + "mAh");
 80a0a30:	f002 fc4a 	bl	80a32c8 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0a34:	4931      	ldr	r1, [pc, #196]	; (80a0afc <loop+0x2c8>)
 80a0a36:	4605      	mov	r5, r0
 80a0a38:	a806      	add	r0, sp, #24
 80a0a3a:	f000 fd7e 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0a3e:	4b30      	ldr	r3, [pc, #192]	; (80a0b00 <loop+0x2cc>)
 80a0a40:	9400      	str	r4, [sp, #0]
 80a0a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a46:	a802      	add	r0, sp, #8
 80a0a48:	f000 fe17 	bl	80a167a <_ZN6StringC1Edi>
 80a0a4c:	a902      	add	r1, sp, #8
 80a0a4e:	a806      	add	r0, sp, #24
 80a0a50:	f000 fe53 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0a54:	491f      	ldr	r1, [pc, #124]	; (80a0ad4 <loop+0x2a0>)
 80a0a56:	f000 fe5c 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0a5a:	4607      	mov	r7, r0
 80a0a5c:	4b29      	ldr	r3, [pc, #164]	; (80a0b04 <loop+0x2d0>)
 80a0a5e:	9400      	str	r4, [sp, #0]
 80a0a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a64:	a80a      	add	r0, sp, #40	; 0x28
 80a0a66:	f000 fe08 	bl	80a167a <_ZN6StringC1Edi>
 80a0a6a:	a90a      	add	r1, sp, #40	; 0x28
 80a0a6c:	4638      	mov	r0, r7
 80a0a6e:	f000 fe44 	bl	80a16fa <_ZplRK15StringSumHelperRK6String>
 80a0a72:	491a      	ldr	r1, [pc, #104]	; (80a0adc <loop+0x2a8>)
 80a0a74:	f000 fe4d 	bl	80a1712 <_ZplRK15StringSumHelperPKc>
 80a0a78:	6801      	ldr	r1, [r0, #0]
 80a0a7a:	4628      	mov	r0, r5
 80a0a7c:	f000 fe90 	bl	80a17a0 <_ZN5Print7printlnEPKc>
 80a0a80:	a80a      	add	r0, sp, #40	; 0x28
 80a0a82:	f000 fd13 	bl	80a14ac <_ZN6StringD1Ev>
 80a0a86:	a802      	add	r0, sp, #8
 80a0a88:	f000 fd10 	bl	80a14ac <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a8c:	a806      	add	r0, sp, #24
 80a0a8e:	f000 fd0d 	bl	80a14ac <_ZN6StringD1Ev>

    publishValues();
 80a0a92:	f7ff fc19 	bl	80a02c8 <_Z13publishValuesv>
    updateSerial = false;
 80a0a96:	2300      	movs	r3, #0
 80a0a98:	7033      	strb	r3, [r6, #0]
  }
  delay(1000);
 80a0a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0a9e:	f001 ffb9 	bl	80a2a14 <delay>
}
 80a0aa2:	b00e      	add	sp, #56	; 0x38
 80a0aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0aa8:	20000004 	.word	0x20000004
 80a0aac:	200000f0 	.word	0x200000f0
 80a0ab0:	200000f1 	.word	0x200000f1
 80a0ab4:	200000e0 	.word	0x200000e0
 80a0ab8:	080a5ee1 	.word	0x080a5ee1
 80a0abc:	200001c0 	.word	0x200001c0
 80a0ac0:	200001a8 	.word	0x200001a8
 80a0ac4:	080a5eea 	.word	0x080a5eea
 80a0ac8:	20000108 	.word	0x20000108
 80a0acc:	200002a8 	.word	0x200002a8
 80a0ad0:	080a5ef2 	.word	0x080a5ef2
 80a0ad4:	080a5f03 	.word	0x080a5f03
 80a0ad8:	20000270 	.word	0x20000270
 80a0adc:	080a5f06 	.word	0x080a5f06
 80a0ae0:	080a5f0a 	.word	0x080a5f0a
 80a0ae4:	080a5f24 	.word	0x080a5f24
 80a0ae8:	080a5eda 	.word	0x080a5eda
 80a0aec:	080a5edd 	.word	0x080a5edd
 80a0af0:	080a5f2e 	.word	0x080a5f2e
 80a0af4:	200002a0 	.word	0x200002a0
 80a0af8:	20000100 	.word	0x20000100
 80a0afc:	080a5f41 	.word	0x080a5f41
 80a0b00:	200001b0 	.word	0x200001b0
 80a0b04:	200000f8 	.word	0x200000f8
 80a0b08:	200001b8 	.word	0x200001b8

080a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a0b0c:	b570      	push	{r4, r5, r6, lr}
 80a0b0e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a0b10:	6804      	ldr	r4, [r0, #0]
 80a0b12:	6843      	ldr	r3, [r0, #4]
 80a0b14:	2614      	movs	r6, #20
 80a0b16:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a0b1a:	42a6      	cmp	r6, r4
 80a0b1c:	d004      	beq.n	80a0b28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 80a0b1e:	4620      	mov	r0, r4
 80a0b20:	f000 fcc4 	bl	80a14ac <_ZN6StringD1Ev>
 80a0b24:	3414      	adds	r4, #20
 80a0b26:	e7f8      	b.n	80a0b1a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a0b28:	6828      	ldr	r0, [r5, #0]
 80a0b2a:	f000 fb5f 	bl	80a11ec <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a0b2e:	4628      	mov	r0, r5
 80a0b30:	bd70      	pop	{r4, r5, r6, pc}

080a0b32 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a0b32:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a0b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b36:	4606      	mov	r6, r0
 80a0b38:	460c      	mov	r4, r1
 80a0b3a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a0b3c:	d916      	bls.n	80a0b6c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0b3e:	4290      	cmp	r0, r2
 80a0b40:	d215      	bcs.n	80a0b6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 80a0b42:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a0b46:	1a6c      	subs	r4, r5, r1
 80a0b48:	f1a1 0714 	sub.w	r7, r1, #20
 80a0b4c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a0b4e:	42af      	cmp	r7, r5
 80a0b50:	d01c      	beq.n	80a0b8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0b52:	b12c      	cbz	r4, 80a0b60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0b54:	4629      	mov	r1, r5
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	f000 fc98 	bl	80a148c <_ZN6StringC1EOS_>
 80a0b5c:	7c2b      	ldrb	r3, [r5, #16]
 80a0b5e:	7423      	strb	r3, [r4, #16]
 80a0b60:	4628      	mov	r0, r5
 80a0b62:	f000 fca3 	bl	80a14ac <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a0b66:	3d14      	subs	r5, #20
 80a0b68:	3c14      	subs	r4, #20
 80a0b6a:	e7f0      	b.n	80a0b4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a0b6c:	d00e      	beq.n	80a0b8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0b6e:	42ac      	cmp	r4, r5
 80a0b70:	d00c      	beq.n	80a0b8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0b72:	b12e      	cbz	r6, 80a0b80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0b74:	4621      	mov	r1, r4
 80a0b76:	4630      	mov	r0, r6
 80a0b78:	f000 fc88 	bl	80a148c <_ZN6StringC1EOS_>
 80a0b7c:	7c23      	ldrb	r3, [r4, #16]
 80a0b7e:	7433      	strb	r3, [r6, #16]
 80a0b80:	4620      	mov	r0, r4
 80a0b82:	f000 fc93 	bl	80a14ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a0b86:	3414      	adds	r4, #20
 80a0b88:	3614      	adds	r6, #20
 80a0b8a:	e7f0      	b.n	80a0b6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 80a0b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a0b92:	2300      	movs	r3, #0
 80a0b94:	6003      	str	r3, [r0, #0]
 80a0b96:	6043      	str	r3, [r0, #4]
 80a0b98:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0b9a:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0b9c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0b9e:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0ba0:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0ba2:	dd24      	ble.n	80a0bee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a0ba4:	f04f 0814 	mov.w	r8, #20
 80a0ba8:	fb08 f006 	mul.w	r0, r8, r6
 80a0bac:	f000 fb16 	bl	80a11dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a0bb0:	4605      	mov	r5, r0
 80a0bb2:	b1e0      	cbz	r0, 80a0bee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80a0bb4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0bb8:	fb08 1202 	mla	r2, r8, r2, r1
 80a0bbc:	f7ff ffb9 	bl	80a0b32 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a0bc0:	6820      	ldr	r0, [r4, #0]
 80a0bc2:	f000 fb13 	bl	80a11ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a0bc6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a0bc8:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a0bca:	683e      	ldr	r6, [r7, #0]
 80a0bcc:	687b      	ldr	r3, [r7, #4]
 80a0bce:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a0bd2:	4546      	cmp	r6, r8
 80a0bd4:	d009      	beq.n	80a0bea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80a0bd6:	b12d      	cbz	r5, 80a0be4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80a0bd8:	4631      	mov	r1, r6
 80a0bda:	4628      	mov	r0, r5
 80a0bdc:	f000 fcec 	bl	80a15b8 <_ZN6StringC1ERKS_>
 80a0be0:	7c33      	ldrb	r3, [r6, #16]
 80a0be2:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a0be4:	3614      	adds	r6, #20
 80a0be6:	3514      	adds	r5, #20
 80a0be8:	e7f3      	b.n	80a0bd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80a0bea:	687b      	ldr	r3, [r7, #4]
 80a0bec:	6063      	str	r3, [r4, #4]
    }
}
 80a0bee:	4620      	mov	r0, r4
 80a0bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0bf4 <_GLOBAL__sub_I_SystemMode>:

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a0bf4:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0bf6:	4b41      	ldr	r3, [pc, #260]	; (80a0cfc <_GLOBAL__sub_I_SystemMode+0x108>)
 80a0bf8:	b08c      	sub	sp, #48	; 0x30
 80a0bfa:	2400      	movs	r4, #0
 80a0bfc:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0bfe:	f000 f89f 	bl	80a0d40 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0c02:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0c06:	4d3e      	ldr	r5, [pc, #248]	; (80a0d00 <_GLOBAL__sub_I_SystemMode+0x10c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c08:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0c0a:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0c0c:	602c      	str	r4, [r5, #0]
 80a0c0e:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0c10:	71ac      	strb	r4, [r5, #6]
 80a0c12:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c14:	f000 fa1e 	bl	80a1054 <set_system_mode>
// It is designed to work with the other example rf95_client
// Tested with Anarduino MiniWirelessLoRa

#include "SPI.h"

SYSTEM_MODE(SEMI_AUTOMATIC);
 80a0c18:	4a3a      	ldr	r2, [pc, #232]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0c1a:	493b      	ldr	r1, [pc, #236]	; (80a0d08 <_GLOBAL__sub_I_SystemMode+0x114>)
 80a0c1c:	4628      	mov	r0, r5
 80a0c1e:	f003 f831 	bl	80a3c84 <__aeabi_atexit>

STARTUP(setup_Options());
 80a0c22:	f7ff fb18 	bl	80a0256 <_Z13setup_Optionsv>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a0c26:	9400      	str	r4, [sp, #0]
 80a0c28:	9401      	str	r4, [sp, #4]
 80a0c2a:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 80a0c2c:	f002 fb4c 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a0c30:	4606      	mov	r6, r0
 80a0c32:	4669      	mov	r1, sp
 80a0c34:	a803      	add	r0, sp, #12
 80a0c36:	f7ff ffaa 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0c3a:	a903      	add	r1, sp, #12
 80a0c3c:	a806      	add	r0, sp, #24
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a0c3e:	4d33      	ldr	r5, [pc, #204]	; (80a0d0c <_GLOBAL__sub_I_SystemMode+0x118>)
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0c40:	f7ff ffa5 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a0c44:	4b32      	ldr	r3, [pc, #200]	; (80a0d10 <_GLOBAL__sub_I_SystemMode+0x11c>)
 80a0c46:	a906      	add	r1, sp, #24
 80a0c48:	602b      	str	r3, [r5, #0]
 80a0c4a:	a809      	add	r0, sp, #36	; 0x24
 80a0c4c:	f7ff ff9f 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a0c50:	aa09      	add	r2, sp, #36	; 0x24
 80a0c52:	211e      	movs	r1, #30
 80a0c54:	1d28      	adds	r0, r5, #4
 80a0c56:	f001 fad4 	bl	80a2202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0c5a:	a809      	add	r0, sp, #36	; 0x24
 80a0c5c:	f7ff ff56 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0c60:	a806      	add	r0, sp, #24
 80a0c62:	f7ff ff53 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0c66:	4b2b      	ldr	r3, [pc, #172]	; (80a0d14 <_GLOBAL__sub_I_SystemMode+0x120>)
 80a0c68:	622e      	str	r6, [r5, #32]
 80a0c6a:	602b      	str	r3, [r5, #0]
 80a0c6c:	a803      	add	r0, sp, #12
 80a0c6e:	f7ff ff4d 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0c72:	4b29      	ldr	r3, [pc, #164]	; (80a0d18 <_GLOBAL__sub_I_SystemMode+0x124>)
 80a0c74:	602b      	str	r3, [r5, #0]
        Serial.begin();
 80a0c76:	f002 fb27 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a0c7a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0c7e:	f002 fb13 	bl	80a32a8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0c82:	f000 ff3b 	bl	80a1afc <_ZN5spark10LogManager8instanceEv>
 80a0c86:	4629      	mov	r1, r5
 80a0c88:	f001 fa4f 	bl	80a212a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
  // System.enableFeature(FEATURE_RESET_INFO);
  // System.disableUpdates();
  // System.enableFeature(FEATURE_WIFI_POWERSAVE_CLOCK);
}

SerialLogHandler logHandler;
 80a0c8c:	4668      	mov	r0, sp
 80a0c8e:	f7ff ff3d 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0c92:	4628      	mov	r0, r5
 80a0c94:	4a1b      	ldr	r2, [pc, #108]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0c96:	4921      	ldr	r1, [pc, #132]	; (80a0d1c <_GLOBAL__sub_I_SystemMode+0x128>)
 80a0c98:	f002 fff4 	bl	80a3c84 <__aeabi_atexit>
double onCoulomb = 0;
double offCoulomb = 0;
double total_mAh = 0;
double on_mAh = 0;
double off_mAh = 0;
String powerOnStampList[10];
 80a0c9c:	4d20      	ldr	r5, [pc, #128]	; (80a0d20 <_GLOBAL__sub_I_SystemMode+0x12c>)
 80a0c9e:	1928      	adds	r0, r5, r4
 80a0ca0:	4920      	ldr	r1, [pc, #128]	; (80a0d24 <_GLOBAL__sub_I_SystemMode+0x130>)
 80a0ca2:	3410      	adds	r4, #16
 80a0ca4:	f000 fc49 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0ca8:	2ca0      	cmp	r4, #160	; 0xa0
 80a0caa:	d1f8      	bne.n	80a0c9e <_GLOBAL__sub_I_SystemMode+0xaa>
 80a0cac:	4a15      	ldr	r2, [pc, #84]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0cae:	491e      	ldr	r1, [pc, #120]	; (80a0d28 <_GLOBAL__sub_I_SystemMode+0x134>)
 80a0cb0:	2000      	movs	r0, #0
 80a0cb2:	f002 ffe7 	bl	80a3c84 <__aeabi_atexit>
String powerOffStampList[10];
 80a0cb6:	4d1d      	ldr	r5, [pc, #116]	; (80a0d2c <_GLOBAL__sub_I_SystemMode+0x138>)
double onCoulomb = 0;
double offCoulomb = 0;
double total_mAh = 0;
double on_mAh = 0;
double off_mAh = 0;
String powerOnStampList[10];
 80a0cb8:	2400      	movs	r4, #0
String powerOffStampList[10];
 80a0cba:	1928      	adds	r0, r5, r4
 80a0cbc:	4919      	ldr	r1, [pc, #100]	; (80a0d24 <_GLOBAL__sub_I_SystemMode+0x130>)
 80a0cbe:	3410      	adds	r4, #16
 80a0cc0:	f000 fc3b 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0cc4:	2ca0      	cmp	r4, #160	; 0xa0
 80a0cc6:	d1f8      	bne.n	80a0cba <_GLOBAL__sub_I_SystemMode+0xc6>
 80a0cc8:	4a0e      	ldr	r2, [pc, #56]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0cca:	4919      	ldr	r1, [pc, #100]	; (80a0d30 <_GLOBAL__sub_I_SystemMode+0x13c>)
 80a0ccc:	2000      	movs	r0, #0
 80a0cce:	f002 ffd9 	bl	80a3c84 <__aeabi_atexit>
int nOn;
int nOff;
String powerOnStamp = "";
 80a0cd2:	4914      	ldr	r1, [pc, #80]	; (80a0d24 <_GLOBAL__sub_I_SystemMode+0x130>)
 80a0cd4:	4817      	ldr	r0, [pc, #92]	; (80a0d34 <_GLOBAL__sub_I_SystemMode+0x140>)
 80a0cd6:	f000 fc30 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0cda:	4a0a      	ldr	r2, [pc, #40]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0cdc:	4916      	ldr	r1, [pc, #88]	; (80a0d38 <_GLOBAL__sub_I_SystemMode+0x144>)
 80a0cde:	4815      	ldr	r0, [pc, #84]	; (80a0d34 <_GLOBAL__sub_I_SystemMode+0x140>)
 80a0ce0:	f002 ffd0 	bl	80a3c84 <__aeabi_atexit>
String powerOffStamp = "";
 80a0ce4:	490f      	ldr	r1, [pc, #60]	; (80a0d24 <_GLOBAL__sub_I_SystemMode+0x130>)
 80a0ce6:	4815      	ldr	r0, [pc, #84]	; (80a0d3c <_GLOBAL__sub_I_SystemMode+0x148>)
 80a0ce8:	f000 fc27 	bl	80a153a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0cec:	4a05      	ldr	r2, [pc, #20]	; (80a0d04 <_GLOBAL__sub_I_SystemMode+0x110>)
 80a0cee:	4912      	ldr	r1, [pc, #72]	; (80a0d38 <_GLOBAL__sub_I_SystemMode+0x144>)
 80a0cf0:	4812      	ldr	r0, [pc, #72]	; (80a0d3c <_GLOBAL__sub_I_SystemMode+0x148>)
 80a0cf2:	f002 ffc7 	bl	80a3c84 <__aeabi_atexit>

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a0cf6:	b00c      	add	sp, #48	; 0x30
 80a0cf8:	bd70      	pop	{r4, r5, r6, pc}
 80a0cfa:	bf00      	nop
 80a0cfc:	200000dc 	.word	0x200000dc
 80a0d00:	200000e4 	.word	0x200000e4
 80a0d04:	200000c8 	.word	0x200000c8
 80a0d08:	080a01bd 	.word	0x080a01bd
 80a0d0c:	20000278 	.word	0x20000278
 80a0d10:	080a5dbc 	.word	0x080a5dbc
 80a0d14:	080a62a8 	.word	0x080a62a8
 80a0d18:	080a5dd4 	.word	0x080a5dd4
 80a0d1c:	080a01cd 	.word	0x080a01cd
 80a0d20:	200001c0 	.word	0x200001c0
 80a0d24:	080a5f40 	.word	0x080a5f40
 80a0d28:	080a00f9 	.word	0x080a00f9
 80a0d2c:	20000108 	.word	0x20000108
 80a0d30:	080a00d9 	.word	0x080a00d9
 80a0d34:	20000260 	.word	0x20000260
 80a0d38:	080a14ad 	.word	0x080a14ad
 80a0d3c:	200000cc 	.word	0x200000cc

080a0d40 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0d40:	b508      	push	{r3, lr}
 80a0d42:	4b02      	ldr	r3, [pc, #8]	; (80a0d4c <HAL_Pin_Map+0xc>)
 80a0d44:	681b      	ldr	r3, [r3, #0]
 80a0d46:	681b      	ldr	r3, [r3, #0]
 80a0d48:	9301      	str	r3, [sp, #4]
 80a0d4a:	bd08      	pop	{r3, pc}
 80a0d4c:	080601b0 	.word	0x080601b0

080a0d50 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0d50:	b508      	push	{r3, lr}
 80a0d52:	4b02      	ldr	r3, [pc, #8]	; (80a0d5c <HAL_Pin_Mode+0xc>)
 80a0d54:	681b      	ldr	r3, [r3, #0]
 80a0d56:	689b      	ldr	r3, [r3, #8]
 80a0d58:	9301      	str	r3, [sp, #4]
 80a0d5a:	bd08      	pop	{r3, pc}
 80a0d5c:	080601b0 	.word	0x080601b0

080a0d60 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0d60:	b508      	push	{r3, lr}
 80a0d62:	4b02      	ldr	r3, [pc, #8]	; (80a0d6c <HAL_Get_Pin_Mode+0xc>)
 80a0d64:	681b      	ldr	r3, [r3, #0]
 80a0d66:	68db      	ldr	r3, [r3, #12]
 80a0d68:	9301      	str	r3, [sp, #4]
 80a0d6a:	bd08      	pop	{r3, pc}
 80a0d6c:	080601b0 	.word	0x080601b0

080a0d70 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <HAL_GPIO_Read+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	695b      	ldr	r3, [r3, #20]
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601b0 	.word	0x080601b0

080a0d80 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <HAL_Interrupts_Attach+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	699b      	ldr	r3, [r3, #24]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601b0 	.word	0x080601b0

080a0d90 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <HAL_Interrupts_Detach+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	69db      	ldr	r3, [r3, #28]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601b0 	.word	0x080601b0

080a0da0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <HAL_SPI_Init+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	69db      	ldr	r3, [r3, #28]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601b4 	.word	0x080601b4

080a0db0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <HAL_SPI_Is_Enabled+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	6a1b      	ldr	r3, [r3, #32]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601b4 	.word	0x080601b4

080a0dc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <HAL_RNG_GetRandomNumber+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	685b      	ldr	r3, [r3, #4]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	0806019c 	.word	0x0806019c

080a0dd0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <HAL_Delay_Microseconds+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	68db      	ldr	r3, [r3, #12]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	0806019c 	.word	0x0806019c

080a0de0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	695b      	ldr	r3, [r3, #20]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	0806019c 	.word	0x0806019c

080a0df0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <HAL_RTC_Get_UnixTime+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	69db      	ldr	r3, [r3, #28]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	0806019c 	.word	0x0806019c

080a0e00 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <HAL_RTC_Time_Is_Valid+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	0806019c 	.word	0x0806019c

080a0e10 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <HAL_Feature_Set+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601b8 	.word	0x080601b8

080a0e20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <os_mutex_recursive_create+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601d0 	.word	0x080601d0

080a0e30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <os_mutex_recursive_destroy+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601d0 	.word	0x080601d0

080a0e40 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <os_mutex_recursive_lock+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601d0 	.word	0x080601d0

080a0e50 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <os_mutex_recursive_unlock+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601d0 	.word	0x080601d0

080a0e60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <HAL_USART_Init+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	699b      	ldr	r3, [r3, #24]
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601c4 	.word	0x080601c4

080a0e70 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <HAL_USART_End+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	6a1b      	ldr	r3, [r3, #32]
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601c4 	.word	0x080601c4

080a0e80 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <HAL_USART_Write_Data+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601c4 	.word	0x080601c4

080a0e90 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <HAL_USART_Available_Data+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601c4 	.word	0x080601c4

080a0ea0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <HAL_USART_Read_Data+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601c4 	.word	0x080601c4

080a0eb0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <HAL_USART_Peek_Data+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601c4 	.word	0x080601c4

080a0ec0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <HAL_USART_Flush_Data+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601c4 	.word	0x080601c4

080a0ed0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0ed0:	b508      	push	{r3, lr}
 80a0ed2:	4b02      	ldr	r3, [pc, #8]	; (80a0edc <HAL_USART_Is_Enabled+0xc>)
 80a0ed4:	681b      	ldr	r3, [r3, #0]
 80a0ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0ed8:	9301      	str	r3, [sp, #4]
 80a0eda:	bd08      	pop	{r3, pc}
 80a0edc:	080601c4 	.word	0x080601c4

080a0ee0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ee0:	b508      	push	{r3, lr}
 80a0ee2:	4b02      	ldr	r3, [pc, #8]	; (80a0eec <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ee4:	681b      	ldr	r3, [r3, #0]
 80a0ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0ee8:	9301      	str	r3, [sp, #4]
 80a0eea:	bd08      	pop	{r3, pc}
 80a0eec:	080601c4 	.word	0x080601c4

080a0ef0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0ef0:	b508      	push	{r3, lr}
 80a0ef2:	4b02      	ldr	r3, [pc, #8]	; (80a0efc <HAL_USART_BeginConfig+0xc>)
 80a0ef4:	681b      	ldr	r3, [r3, #0]
 80a0ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ef8:	9301      	str	r3, [sp, #4]
 80a0efa:	bd08      	pop	{r3, pc}
 80a0efc:	080601c4 	.word	0x080601c4

080a0f00 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0f00:	b508      	push	{r3, lr}
 80a0f02:	4b02      	ldr	r3, [pc, #8]	; (80a0f0c <HAL_I2C_Write_Data+0xc>)
 80a0f04:	681b      	ldr	r3, [r3, #0]
 80a0f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0f08:	9301      	str	r3, [sp, #4]
 80a0f0a:	bd08      	pop	{r3, pc}
 80a0f0c:	080601ac 	.word	0x080601ac

080a0f10 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0f10:	b508      	push	{r3, lr}
 80a0f12:	4b02      	ldr	r3, [pc, #8]	; (80a0f1c <HAL_I2C_Available_Data+0xc>)
 80a0f14:	681b      	ldr	r3, [r3, #0]
 80a0f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0f18:	9301      	str	r3, [sp, #4]
 80a0f1a:	bd08      	pop	{r3, pc}
 80a0f1c:	080601ac 	.word	0x080601ac

080a0f20 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0f20:	b508      	push	{r3, lr}
 80a0f22:	4b02      	ldr	r3, [pc, #8]	; (80a0f2c <HAL_I2C_Read_Data+0xc>)
 80a0f24:	681b      	ldr	r3, [r3, #0]
 80a0f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0f28:	9301      	str	r3, [sp, #4]
 80a0f2a:	bd08      	pop	{r3, pc}
 80a0f2c:	080601ac 	.word	0x080601ac

080a0f30 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0f30:	b508      	push	{r3, lr}
 80a0f32:	4b02      	ldr	r3, [pc, #8]	; (80a0f3c <HAL_I2C_Peek_Data+0xc>)
 80a0f34:	681b      	ldr	r3, [r3, #0]
 80a0f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0f38:	9301      	str	r3, [sp, #4]
 80a0f3a:	bd08      	pop	{r3, pc}
 80a0f3c:	080601ac 	.word	0x080601ac

080a0f40 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0f40:	b508      	push	{r3, lr}
 80a0f42:	4b02      	ldr	r3, [pc, #8]	; (80a0f4c <HAL_I2C_Flush_Data+0xc>)
 80a0f44:	681b      	ldr	r3, [r3, #0]
 80a0f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0f48:	9301      	str	r3, [sp, #4]
 80a0f4a:	bd08      	pop	{r3, pc}
 80a0f4c:	080601ac 	.word	0x080601ac

080a0f50 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0f50:	b508      	push	{r3, lr}
 80a0f52:	4b02      	ldr	r3, [pc, #8]	; (80a0f5c <HAL_I2C_Is_Enabled+0xc>)
 80a0f54:	681b      	ldr	r3, [r3, #0]
 80a0f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0f58:	9301      	str	r3, [sp, #4]
 80a0f5a:	bd08      	pop	{r3, pc}
 80a0f5c:	080601ac 	.word	0x080601ac

080a0f60 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0f60:	b508      	push	{r3, lr}
 80a0f62:	4b03      	ldr	r3, [pc, #12]	; (80a0f70 <HAL_I2C_Init+0x10>)
 80a0f64:	681b      	ldr	r3, [r3, #0]
 80a0f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0f6a:	9301      	str	r3, [sp, #4]
 80a0f6c:	bd08      	pop	{r3, pc}
 80a0f6e:	0000      	.short	0x0000
 80a0f70:	080601ac 	.word	0x080601ac

080a0f74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0f74:	b508      	push	{r3, lr}
 80a0f76:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <HAL_USB_USART_Init+0xc>)
 80a0f78:	681b      	ldr	r3, [r3, #0]
 80a0f7a:	681b      	ldr	r3, [r3, #0]
 80a0f7c:	9301      	str	r3, [sp, #4]
 80a0f7e:	bd08      	pop	{r3, pc}
 80a0f80:	080601d8 	.word	0x080601d8

080a0f84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0f84:	b508      	push	{r3, lr}
 80a0f86:	4b02      	ldr	r3, [pc, #8]	; (80a0f90 <HAL_USB_USART_Begin+0xc>)
 80a0f88:	681b      	ldr	r3, [r3, #0]
 80a0f8a:	685b      	ldr	r3, [r3, #4]
 80a0f8c:	9301      	str	r3, [sp, #4]
 80a0f8e:	bd08      	pop	{r3, pc}
 80a0f90:	080601d8 	.word	0x080601d8

080a0f94 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a0f94:	b508      	push	{r3, lr}
 80a0f96:	4b02      	ldr	r3, [pc, #8]	; (80a0fa0 <HAL_USB_USART_End+0xc>)
 80a0f98:	681b      	ldr	r3, [r3, #0]
 80a0f9a:	689b      	ldr	r3, [r3, #8]
 80a0f9c:	9301      	str	r3, [sp, #4]
 80a0f9e:	bd08      	pop	{r3, pc}
 80a0fa0:	080601d8 	.word	0x080601d8

080a0fa4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0fa4:	b508      	push	{r3, lr}
 80a0fa6:	4b02      	ldr	r3, [pc, #8]	; (80a0fb0 <HAL_USB_USART_Available_Data+0xc>)
 80a0fa8:	681b      	ldr	r3, [r3, #0]
 80a0faa:	691b      	ldr	r3, [r3, #16]
 80a0fac:	9301      	str	r3, [sp, #4]
 80a0fae:	bd08      	pop	{r3, pc}
 80a0fb0:	080601d8 	.word	0x080601d8

080a0fb4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0fb4:	b508      	push	{r3, lr}
 80a0fb6:	4b02      	ldr	r3, [pc, #8]	; (80a0fc0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0fb8:	681b      	ldr	r3, [r3, #0]
 80a0fba:	695b      	ldr	r3, [r3, #20]
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	bd08      	pop	{r3, pc}
 80a0fc0:	080601d8 	.word	0x080601d8

080a0fc4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0fc4:	b508      	push	{r3, lr}
 80a0fc6:	4b02      	ldr	r3, [pc, #8]	; (80a0fd0 <HAL_USB_USART_Receive_Data+0xc>)
 80a0fc8:	681b      	ldr	r3, [r3, #0]
 80a0fca:	699b      	ldr	r3, [r3, #24]
 80a0fcc:	9301      	str	r3, [sp, #4]
 80a0fce:	bd08      	pop	{r3, pc}
 80a0fd0:	080601d8 	.word	0x080601d8

080a0fd4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0fd4:	b508      	push	{r3, lr}
 80a0fd6:	4b02      	ldr	r3, [pc, #8]	; (80a0fe0 <HAL_USB_USART_Send_Data+0xc>)
 80a0fd8:	681b      	ldr	r3, [r3, #0]
 80a0fda:	69db      	ldr	r3, [r3, #28]
 80a0fdc:	9301      	str	r3, [sp, #4]
 80a0fde:	bd08      	pop	{r3, pc}
 80a0fe0:	080601d8 	.word	0x080601d8

080a0fe4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0fe4:	b508      	push	{r3, lr}
 80a0fe6:	4b02      	ldr	r3, [pc, #8]	; (80a0ff0 <HAL_USB_USART_Flush_Data+0xc>)
 80a0fe8:	681b      	ldr	r3, [r3, #0]
 80a0fea:	6a1b      	ldr	r3, [r3, #32]
 80a0fec:	9301      	str	r3, [sp, #4]
 80a0fee:	bd08      	pop	{r3, pc}
 80a0ff0:	080601d8 	.word	0x080601d8

080a0ff4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0ff4:	b508      	push	{r3, lr}
 80a0ff6:	4b02      	ldr	r3, [pc, #8]	; (80a1000 <inet_gethostbyname+0xc>)
 80a0ff8:	681b      	ldr	r3, [r3, #0]
 80a0ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0ffc:	9301      	str	r3, [sp, #4]
 80a0ffe:	bd08      	pop	{r3, pc}
 80a1000:	080601c0 	.word	0x080601c0

080a1004 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1004:	b508      	push	{r3, lr}
 80a1006:	4b02      	ldr	r3, [pc, #8]	; (80a1010 <panic_+0xc>)
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a100c:	9301      	str	r3, [sp, #4]
 80a100e:	bd08      	pop	{r3, pc}
 80a1010:	080201a8 	.word	0x080201a8

080a1014 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1014:	b508      	push	{r3, lr}
 80a1016:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <log_message_v+0xc>)
 80a1018:	681b      	ldr	r3, [r3, #0]
 80a101a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a101c:	9301      	str	r3, [sp, #4]
 80a101e:	bd08      	pop	{r3, pc}
 80a1020:	080201a8 	.word	0x080201a8

080a1024 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a1024:	b508      	push	{r3, lr}
 80a1026:	4b02      	ldr	r3, [pc, #8]	; (80a1030 <log_level_name+0xc>)
 80a1028:	681b      	ldr	r3, [r3, #0]
 80a102a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a102c:	9301      	str	r3, [sp, #4]
 80a102e:	bd08      	pop	{r3, pc}
 80a1030:	080201a8 	.word	0x080201a8

080a1034 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a1034:	b508      	push	{r3, lr}
 80a1036:	4b02      	ldr	r3, [pc, #8]	; (80a1040 <log_set_callbacks+0xc>)
 80a1038:	681b      	ldr	r3, [r3, #0]
 80a103a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	bd08      	pop	{r3, pc}
 80a1040:	080201a8 	.word	0x080201a8

080a1044 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1044:	b508      	push	{r3, lr}
 80a1046:	4b02      	ldr	r3, [pc, #8]	; (80a1050 <system_mode+0xc>)
 80a1048:	681b      	ldr	r3, [r3, #0]
 80a104a:	681b      	ldr	r3, [r3, #0]
 80a104c:	9301      	str	r3, [sp, #4]
 80a104e:	bd08      	pop	{r3, pc}
 80a1050:	080601a4 	.word	0x080601a4

080a1054 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1054:	b508      	push	{r3, lr}
 80a1056:	4b02      	ldr	r3, [pc, #8]	; (80a1060 <set_system_mode+0xc>)
 80a1058:	681b      	ldr	r3, [r3, #0]
 80a105a:	685b      	ldr	r3, [r3, #4]
 80a105c:	9301      	str	r3, [sp, #4]
 80a105e:	bd08      	pop	{r3, pc}
 80a1060:	080601a4 	.word	0x080601a4

080a1064 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1064:	b508      	push	{r3, lr}
 80a1066:	4b02      	ldr	r3, [pc, #8]	; (80a1070 <system_delay_ms+0xc>)
 80a1068:	681b      	ldr	r3, [r3, #0]
 80a106a:	695b      	ldr	r3, [r3, #20]
 80a106c:	9301      	str	r3, [sp, #4]
 80a106e:	bd08      	pop	{r3, pc}
 80a1070:	080601a4 	.word	0x080601a4

080a1074 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1074:	b508      	push	{r3, lr}
 80a1076:	4b02      	ldr	r3, [pc, #8]	; (80a1080 <application_thread_current+0xc>)
 80a1078:	681b      	ldr	r3, [r3, #0]
 80a107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a107c:	9301      	str	r3, [sp, #4]
 80a107e:	bd08      	pop	{r3, pc}
 80a1080:	080601a4 	.word	0x080601a4

080a1084 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1084:	b508      	push	{r3, lr}
 80a1086:	4b02      	ldr	r3, [pc, #8]	; (80a1090 <application_thread_invoke+0xc>)
 80a1088:	681b      	ldr	r3, [r3, #0]
 80a108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a108c:	9301      	str	r3, [sp, #4]
 80a108e:	bd08      	pop	{r3, pc}
 80a1090:	080601a4 	.word	0x080601a4

080a1094 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1094:	b508      	push	{r3, lr}
 80a1096:	4b02      	ldr	r3, [pc, #8]	; (80a10a0 <system_thread_get_state+0xc>)
 80a1098:	681b      	ldr	r3, [r3, #0]
 80a109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a109c:	9301      	str	r3, [sp, #4]
 80a109e:	bd08      	pop	{r3, pc}
 80a10a0:	080601a4 	.word	0x080601a4

080a10a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a10a4:	b508      	push	{r3, lr}
 80a10a6:	4b03      	ldr	r3, [pc, #12]	; (80a10b4 <system_ctrl_set_app_request_handler+0x10>)
 80a10a8:	681b      	ldr	r3, [r3, #0]
 80a10aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a10ae:	9301      	str	r3, [sp, #4]
 80a10b0:	bd08      	pop	{r3, pc}
 80a10b2:	0000      	.short	0x0000
 80a10b4:	080601a4 	.word	0x080601a4

080a10b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a10b8:	b508      	push	{r3, lr}
 80a10ba:	4b03      	ldr	r3, [pc, #12]	; (80a10c8 <system_ctrl_set_result+0x10>)
 80a10bc:	681b      	ldr	r3, [r3, #0]
 80a10be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a10c2:	9301      	str	r3, [sp, #4]
 80a10c4:	bd08      	pop	{r3, pc}
 80a10c6:	0000      	.short	0x0000
 80a10c8:	080601a4 	.word	0x080601a4

080a10cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a10cc:	b508      	push	{r3, lr}
 80a10ce:	4b02      	ldr	r3, [pc, #8]	; (80a10d8 <network_connect+0xc>)
 80a10d0:	681b      	ldr	r3, [r3, #0]
 80a10d2:	685b      	ldr	r3, [r3, #4]
 80a10d4:	9301      	str	r3, [sp, #4]
 80a10d6:	bd08      	pop	{r3, pc}
 80a10d8:	080601c8 	.word	0x080601c8

080a10dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a10dc:	b508      	push	{r3, lr}
 80a10de:	4b02      	ldr	r3, [pc, #8]	; (80a10e8 <network_connecting+0xc>)
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	689b      	ldr	r3, [r3, #8]
 80a10e4:	9301      	str	r3, [sp, #4]
 80a10e6:	bd08      	pop	{r3, pc}
 80a10e8:	080601c8 	.word	0x080601c8

080a10ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <network_disconnect+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	68db      	ldr	r3, [r3, #12]
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	080601c8 	.word	0x080601c8

080a10fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <network_ready+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	691b      	ldr	r3, [r3, #16]
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601c8 	.word	0x080601c8

080a110c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <network_on+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	695b      	ldr	r3, [r3, #20]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601c8 	.word	0x080601c8

080a111c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <network_off+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	699b      	ldr	r3, [r3, #24]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601c8 	.word	0x080601c8

080a112c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <network_listen+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	69db      	ldr	r3, [r3, #28]
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601c8 	.word	0x080601c8

080a113c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <network_listening+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	6a1b      	ldr	r3, [r3, #32]
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601c8 	.word	0x080601c8

080a114c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <network_set_listen_timeout+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601c8 	.word	0x080601c8

080a115c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <network_get_listen_timeout+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601c8 	.word	0x080601c8

080a116c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <spark_process+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	689b      	ldr	r3, [r3, #8]
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601cc 	.word	0x080601cc

080a117c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <spark_cloud_flag_connect+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	68db      	ldr	r3, [r3, #12]
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601cc 	.word	0x080601cc

080a118c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <spark_cloud_flag_connected+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	695b      	ldr	r3, [r3, #20]
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601cc 	.word	0x080601cc

080a119c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <spark_send_event+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	6a1b      	ldr	r3, [r3, #32]
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601cc 	.word	0x080601cc

080a11ac <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <spark_sync_time+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601cc 	.word	0x080601cc

080a11bc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <spark_sync_time_pending+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601cc 	.word	0x080601cc

080a11cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601cc 	.word	0x080601cc

080a11dc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <malloc+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	681b      	ldr	r3, [r3, #0]
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601a0 	.word	0x080601a0

080a11ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <free+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	685b      	ldr	r3, [r3, #4]
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601a0 	.word	0x080601a0

080a11fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <realloc+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	689b      	ldr	r3, [r3, #8]
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601a0 	.word	0x080601a0

080a120c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <siscanf+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	699b      	ldr	r3, [r3, #24]
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601a0 	.word	0x080601a0

080a121c <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <vsnprintf+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601a0 	.word	0x080601a0

080a122c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <abort+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601a0 	.word	0x080601a0

080a123c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <_malloc_r+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601a0 	.word	0x080601a0

080a124c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a124c:	6800      	ldr	r0, [r0, #0]
 80a124e:	f7ff bdf7 	b.w	80a0e40 <os_mutex_recursive_lock>

080a1252 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1252:	b570      	push	{r4, r5, r6, lr}
 80a1254:	4604      	mov	r4, r0
 80a1256:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1258:	2500      	movs	r5, #0
 80a125a:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a125e:	f7ff fddf 	bl	80a0e20 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1262:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1264:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1266:	f7ff fd9b 	bl	80a0da0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a126a:	6065      	str	r5, [r4, #4]
}
 80a126c:	4620      	mov	r0, r4
 80a126e:	bd70      	pop	{r4, r5, r6, pc}

080a1270 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1270:	7800      	ldrb	r0, [r0, #0]
 80a1272:	f7ff bd9d 	b.w	80a0db0 <HAL_SPI_Is_Enabled>
	...

080a1278 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1278:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a127c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a127e:	4c08      	ldr	r4, [pc, #32]	; (80a12a0 <_GLOBAL__sub_I_System+0x28>)
 80a1280:	2000      	movs	r0, #0
 80a1282:	6020      	str	r0, [r4, #0]
 80a1284:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1286:	71a0      	strb	r0, [r4, #6]
 80a1288:	8120      	strh	r0, [r4, #8]
 80a128a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a128c:	f7ff fee2 	bl	80a1054 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1290:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1296:	4a03      	ldr	r2, [pc, #12]	; (80a12a4 <_GLOBAL__sub_I_System+0x2c>)
 80a1298:	4903      	ldr	r1, [pc, #12]	; (80a12a8 <_GLOBAL__sub_I_System+0x30>)
 80a129a:	f002 bcf3 	b.w	80a3c84 <__aeabi_atexit>
 80a129e:	bf00      	nop
 80a12a0:	200002ac 	.word	0x200002ac
 80a12a4:	200000c8 	.word	0x200000c8
 80a12a8:	080a01bd 	.word	0x080a01bd

080a12ac <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a12ac:	b510      	push	{r4, lr}
 80a12ae:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a12b0:	f004 f91d 	bl	80a54ee <strlen>
 80a12b4:	3801      	subs	r0, #1
 80a12b6:	1823      	adds	r3, r4, r0
 80a12b8:	4620      	mov	r0, r4
	while(i<j){
 80a12ba:	4298      	cmp	r0, r3
 80a12bc:	d206      	bcs.n	80a12cc <_Z11str_reversePc+0x20>
		c = *i;
 80a12be:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a12c0:	7819      	ldrb	r1, [r3, #0]
 80a12c2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a12c6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a12ca:	e7f6      	b.n	80a12ba <_Z11str_reversePc+0xe>
 80a12cc:	bd10      	pop	{r4, pc}

080a12ce <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a12ce:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80a12d0:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a12d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12d6:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80a12d8:	bf34      	ite	cc
 80a12da:	4615      	movcc	r5, r2
 80a12dc:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a12de:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a12e0:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80a12e2:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a12e4:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a12e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80a12ea:	d107      	bne.n	80a12fc <ltoa+0x2e>
 80a12ec:	4298      	cmp	r0, r3
 80a12ee:	da05      	bge.n	80a12fc <ltoa+0x2e>
      {
            *head++ = '-';
 80a12f0:	232d      	movs	r3, #45	; 0x2d
 80a12f2:	f101 0801 	add.w	r8, r1, #1
 80a12f6:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80a12f8:	4240      	negs	r0, r0
 80a12fa:	e001      	b.n	80a1300 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80a12fc:	b1a8      	cbz	r0, 80a132a <ltoa+0x5c>
 80a12fe:	46a0      	mov	r8, r4
 80a1300:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80a1304:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a1306:	462a      	mov	r2, r5
 80a1308:	4601      	mov	r1, r0
 80a130a:	a801      	add	r0, sp, #4
 80a130c:	f004 f840 	bl	80a5390 <ldiv>
 80a1310:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a1312:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80a1314:	2a09      	cmp	r2, #9
 80a1316:	bfcc      	ite	gt
 80a1318:	2337      	movgt	r3, #55	; 0x37
 80a131a:	2330      	movle	r3, #48	; 0x30
 80a131c:	4413      	add	r3, r2
 80a131e:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a1322:	3701      	adds	r7, #1
 80a1324:	2800      	cmp	r0, #0
 80a1326:	d1ee      	bne.n	80a1306 <ltoa+0x38>
 80a1328:	e006      	b.n	80a1338 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 80a132a:	46a0      	mov	r8, r4
 80a132c:	2330      	movs	r3, #48	; 0x30
 80a132e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a1332:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 80a1336:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a1338:	463a      	mov	r2, r7
 80a133a:	1c71      	adds	r1, r6, #1
 80a133c:	4640      	mov	r0, r8
 80a133e:	f004 f83b 	bl	80a53b8 <memcpy>
      return str;
}
 80a1342:	4620      	mov	r0, r4
 80a1344:	b00c      	add	sp, #48	; 0x30
 80a1346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a134a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a134a:	b570      	push	{r4, r5, r6, lr}
 80a134c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a134e:	1e91      	subs	r1, r2, #2
 80a1350:	2922      	cmp	r1, #34	; 0x22
 80a1352:	d820      	bhi.n	80a1396 <ultoa+0x4c>
 80a1354:	4625      	mov	r5, r4
 80a1356:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1358:	b910      	cbnz	r0, 80a1360 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a135a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a135c:	2230      	movs	r2, #48	; 0x30
 80a135e:	e00e      	b.n	80a137e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1360:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1364:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1368:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a136a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a136c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1370:	bf94      	ite	ls
 80a1372:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1374:	3157      	addhi	r1, #87	; 0x57
 80a1376:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a137a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a137c:	e7eb      	b.n	80a1356 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a137e:	4299      	cmp	r1, r3
 80a1380:	d202      	bcs.n	80a1388 <ultoa+0x3e>
            *ptr++ = '0';
 80a1382:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1386:	e7fa      	b.n	80a137e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1388:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a138a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a138c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a138e:	f7ff ff8d 	bl	80a12ac <_Z11str_reversePc>
	return buffer;
 80a1392:	4620      	mov	r0, r4
 80a1394:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1396:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1398:	bd70      	pop	{r4, r5, r6, pc}

080a139a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a139a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a139c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a139e:	460c      	mov	r4, r1
 80a13a0:	4615      	mov	r5, r2
	if(a<0){
 80a13a2:	da0b      	bge.n	80a13bc <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a13a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a13a8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a13ac:	bf14      	ite	ne
 80a13ae:	4258      	negne	r0, r3
 80a13b0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a13b2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a13b4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a13b6:	462a      	mov	r2, r5
 80a13b8:	4419      	add	r1, r3
 80a13ba:	e000      	b.n	80a13be <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a13bc:	2301      	movs	r3, #1
 80a13be:	f7ff ffc4 	bl	80a134a <ultoa>
	}
	return buffer;
}
 80a13c2:	4620      	mov	r0, r4
 80a13c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a13c8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a13c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a13cc:	4680      	mov	r8, r0
 80a13ce:	460d      	mov	r5, r1
 80a13d0:	4617      	mov	r7, r2
 80a13d2:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a13d4:	2200      	movs	r2, #0
 80a13d6:	2300      	movs	r3, #0
 80a13d8:	4640      	mov	r0, r8
 80a13da:	4629      	mov	r1, r5
 80a13dc:	f003 fa72 	bl	80a48c4 <__aeabi_dcmplt>
 80a13e0:	b120      	cbz	r0, 80a13ec <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a13e2:	232d      	movs	r3, #45	; 0x2d
 80a13e4:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a13e6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a13ea:	3601      	adds	r6, #1
 80a13ec:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a13ee:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a13f0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a13f2:	b2d9      	uxtb	r1, r3
 80a13f4:	428f      	cmp	r7, r1
 80a13f6:	d902      	bls.n	80a13fe <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a13f8:	4354      	muls	r4, r2
 80a13fa:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a13fc:	e7f9      	b.n	80a13f2 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a13fe:	4620      	mov	r0, r4
 80a1400:	f002 ff88 	bl	80a4314 <__aeabi_i2d>
 80a1404:	4642      	mov	r2, r8
 80a1406:	462b      	mov	r3, r5
 80a1408:	f002 ffea 	bl	80a43e0 <__aeabi_dmul>
 80a140c:	4682      	mov	sl, r0
 80a140e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a1410:	f003 fd1c 	bl	80a4e4c <__aeabi_d2ulz>
 80a1414:	4680      	mov	r8, r0
 80a1416:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1418:	f002 ffac 	bl	80a4374 <__aeabi_ul2d>
 80a141c:	4602      	mov	r2, r0
 80a141e:	460b      	mov	r3, r1
 80a1420:	4650      	mov	r0, sl
 80a1422:	4659      	mov	r1, fp
 80a1424:	f002 fe28 	bl	80a4078 <__aeabi_dsub>
 80a1428:	2200      	movs	r2, #0
 80a142a:	4b17      	ldr	r3, [pc, #92]	; (80a1488 <_Z4dtoadhPc+0xc0>)
 80a142c:	f003 fa5e 	bl	80a48ec <__aeabi_dcmpge>
 80a1430:	b118      	cbz	r0, 80a143a <_Z4dtoadhPc+0x72>
        fixed++;
 80a1432:	f118 0801 	adds.w	r8, r8, #1
 80a1436:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a143a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a143c:	4622      	mov	r2, r4
 80a143e:	462b      	mov	r3, r5
 80a1440:	4640      	mov	r0, r8
 80a1442:	4649      	mov	r1, r9
 80a1444:	f003 fcea 	bl	80a4e1c <__aeabi_uldivmod>
 80a1448:	2301      	movs	r3, #1
 80a144a:	220a      	movs	r2, #10
 80a144c:	4631      	mov	r1, r6
 80a144e:	f7ff ff7c 	bl	80a134a <ultoa>
    if (prec) {
 80a1452:	b1af      	cbz	r7, 80a1480 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a1454:	4630      	mov	r0, r6
 80a1456:	f004 f84a 	bl	80a54ee <strlen>
        *sout++ = '.';
 80a145a:	232e      	movs	r3, #46	; 0x2e
 80a145c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a145e:	3001      	adds	r0, #1
 80a1460:	4406      	add	r6, r0
 80a1462:	4622      	mov	r2, r4
 80a1464:	462b      	mov	r3, r5
 80a1466:	4640      	mov	r0, r8
 80a1468:	4649      	mov	r1, r9
 80a146a:	f003 fcd7 	bl	80a4e1c <__aeabi_uldivmod>
 80a146e:	463b      	mov	r3, r7
 80a1470:	4610      	mov	r0, r2
 80a1472:	4631      	mov	r1, r6
 80a1474:	220a      	movs	r2, #10
    }
}
 80a1476:	b001      	add	sp, #4
 80a1478:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a147c:	f7ff bf65 	b.w	80a134a <ultoa>
    }
}
 80a1480:	b001      	add	sp, #4
 80a1482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1486:	bf00      	nop
 80a1488:	3fe00000 	.word	0x3fe00000

080a148c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a148c:	2300      	movs	r3, #0
 80a148e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1490:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1492:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1494:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a1496:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a1498:	680c      	ldr	r4, [r1, #0]
 80a149a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a149c:	684c      	ldr	r4, [r1, #4]
 80a149e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a14a0:	688c      	ldr	r4, [r1, #8]
 80a14a2:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a14a4:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a14a6:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a14a8:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a14aa:	bd10      	pop	{r4, pc}

080a14ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a14ac:	b510      	push	{r4, lr}
 80a14ae:	4604      	mov	r4, r0
{
	free(buffer);
 80a14b0:	6800      	ldr	r0, [r0, #0]
 80a14b2:	f7ff fe9b 	bl	80a11ec <free>
}
 80a14b6:	4620      	mov	r0, r4
 80a14b8:	bd10      	pop	{r4, pc}

080a14ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a14ba:	b510      	push	{r4, lr}
 80a14bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a14be:	6800      	ldr	r0, [r0, #0]
 80a14c0:	b108      	cbz	r0, 80a14c6 <_ZN6String10invalidateEv+0xc>
 80a14c2:	f7ff fe93 	bl	80a11ec <free>
	buffer = NULL;
 80a14c6:	2300      	movs	r3, #0
 80a14c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a14ca:	60a3      	str	r3, [r4, #8]
 80a14cc:	6063      	str	r3, [r4, #4]
 80a14ce:	bd10      	pop	{r4, pc}

080a14d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a14d0:	b538      	push	{r3, r4, r5, lr}
 80a14d2:	4604      	mov	r4, r0
 80a14d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a14d6:	6800      	ldr	r0, [r0, #0]
 80a14d8:	3101      	adds	r1, #1
 80a14da:	f7ff fe8f 	bl	80a11fc <realloc>
	if (newbuffer) {
 80a14de:	b110      	cbz	r0, 80a14e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a14e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a14e4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a14e6:	bd38      	pop	{r3, r4, r5, pc}

080a14e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a14e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a14ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a14ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a14ee:	b113      	cbz	r3, 80a14f6 <_ZN6String7reserveEj+0xe>
 80a14f0:	6843      	ldr	r3, [r0, #4]
 80a14f2:	428b      	cmp	r3, r1
 80a14f4:	d207      	bcs.n	80a1506 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a14f6:	4620      	mov	r0, r4
 80a14f8:	f7ff ffea 	bl	80a14d0 <_ZN6String12changeBufferEj>
 80a14fc:	b120      	cbz	r0, 80a1508 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a14fe:	68a3      	ldr	r3, [r4, #8]
 80a1500:	b90b      	cbnz	r3, 80a1506 <_ZN6String7reserveEj+0x1e>
 80a1502:	6822      	ldr	r2, [r4, #0]
 80a1504:	7013      	strb	r3, [r2, #0]
 80a1506:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1508:	bd10      	pop	{r4, pc}

080a150a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a150a:	b570      	push	{r4, r5, r6, lr}
 80a150c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a150e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1510:	4604      	mov	r4, r0
 80a1512:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1514:	f7ff ffe8 	bl	80a14e8 <_ZN6String7reserveEj>
 80a1518:	b918      	cbnz	r0, 80a1522 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a151a:	4620      	mov	r0, r4
 80a151c:	f7ff ffcd 	bl	80a14ba <_ZN6String10invalidateEv>
		return *this;
 80a1520:	e009      	b.n	80a1536 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1522:	462a      	mov	r2, r5
 80a1524:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1526:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1528:	6820      	ldr	r0, [r4, #0]
 80a152a:	f003 ff45 	bl	80a53b8 <memcpy>
	buffer[len] = 0;
 80a152e:	6822      	ldr	r2, [r4, #0]
 80a1530:	68a3      	ldr	r3, [r4, #8]
 80a1532:	2100      	movs	r1, #0
 80a1534:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1536:	4620      	mov	r0, r4
 80a1538:	bd70      	pop	{r4, r5, r6, pc}

080a153a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a153a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a153c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a153e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1540:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1542:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1544:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1546:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1548:	460d      	mov	r5, r1
 80a154a:	b139      	cbz	r1, 80a155c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a154c:	4608      	mov	r0, r1
 80a154e:	f003 ffce 	bl	80a54ee <strlen>
 80a1552:	4629      	mov	r1, r5
 80a1554:	4602      	mov	r2, r0
 80a1556:	4620      	mov	r0, r4
 80a1558:	f7ff ffd7 	bl	80a150a <_ZN6String4copyEPKcj>
}
 80a155c:	4620      	mov	r0, r4
 80a155e:	bd38      	pop	{r3, r4, r5, pc}

080a1560 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1560:	b538      	push	{r3, r4, r5, lr}
 80a1562:	4605      	mov	r5, r0
	if (buffer) {
 80a1564:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1566:	460c      	mov	r4, r1
	if (buffer) {
 80a1568:	b160      	cbz	r0, 80a1584 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a156a:	686a      	ldr	r2, [r5, #4]
 80a156c:	688b      	ldr	r3, [r1, #8]
 80a156e:	429a      	cmp	r2, r3
 80a1570:	d306      	bcc.n	80a1580 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1572:	6809      	ldr	r1, [r1, #0]
 80a1574:	f003 ff98 	bl	80a54a8 <strcpy>
			len = rhs.len;
 80a1578:	68a3      	ldr	r3, [r4, #8]
 80a157a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a157c:	2300      	movs	r3, #0
 80a157e:	e00a      	b.n	80a1596 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a1580:	f7ff fe34 	bl	80a11ec <free>
		}
	}
	buffer = rhs.buffer;
 80a1584:	6823      	ldr	r3, [r4, #0]
 80a1586:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1588:	6863      	ldr	r3, [r4, #4]
 80a158a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a158c:	68a3      	ldr	r3, [r4, #8]
 80a158e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1590:	2300      	movs	r3, #0
 80a1592:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1594:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1596:	60a3      	str	r3, [r4, #8]
 80a1598:	bd38      	pop	{r3, r4, r5, pc}

080a159a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a159a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a159c:	b510      	push	{r4, lr}
 80a159e:	460b      	mov	r3, r1
 80a15a0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a15a2:	d007      	beq.n	80a15b4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a15a4:	6809      	ldr	r1, [r1, #0]
 80a15a6:	b119      	cbz	r1, 80a15b0 <_ZN6StringaSERKS_+0x16>
 80a15a8:	689a      	ldr	r2, [r3, #8]
 80a15aa:	f7ff ffae 	bl	80a150a <_ZN6String4copyEPKcj>
 80a15ae:	e001      	b.n	80a15b4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a15b0:	f7ff ff83 	bl	80a14ba <_ZN6String10invalidateEv>

	return *this;
}
 80a15b4:	4620      	mov	r0, r4
 80a15b6:	bd10      	pop	{r4, pc}

080a15b8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a15b8:	b510      	push	{r4, lr}
 80a15ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a15bc:	2300      	movs	r3, #0
 80a15be:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a15c0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a15c2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a15c4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a15c6:	f7ff ffe8 	bl	80a159a <_ZN6StringaSERKS_>
}
 80a15ca:	4620      	mov	r0, r4
 80a15cc:	bd10      	pop	{r4, pc}

080a15ce <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a15ce:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a15d0:	b510      	push	{r4, lr}
 80a15d2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a15d4:	d001      	beq.n	80a15da <_ZN6StringaSEOS_+0xc>
 80a15d6:	f7ff ffc3 	bl	80a1560 <_ZN6String4moveERS_>
	return *this;
}
 80a15da:	4620      	mov	r0, r4
 80a15dc:	bd10      	pop	{r4, pc}

080a15de <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a15de:	b538      	push	{r3, r4, r5, lr}
 80a15e0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a15e2:	460c      	mov	r4, r1
 80a15e4:	b141      	cbz	r1, 80a15f8 <_ZN6StringaSEPKc+0x1a>
 80a15e6:	4608      	mov	r0, r1
 80a15e8:	f003 ff81 	bl	80a54ee <strlen>
 80a15ec:	4621      	mov	r1, r4
 80a15ee:	4602      	mov	r2, r0
 80a15f0:	4628      	mov	r0, r5
 80a15f2:	f7ff ff8a 	bl	80a150a <_ZN6String4copyEPKcj>
 80a15f6:	e001      	b.n	80a15fc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a15f8:	f7ff ff5f 	bl	80a14ba <_ZN6String10invalidateEv>

	return *this;
}
 80a15fc:	4628      	mov	r0, r5
 80a15fe:	bd38      	pop	{r3, r4, r5, pc}

080a1600 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1600:	b510      	push	{r4, lr}
 80a1602:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1604:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1606:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1608:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a160a:	6063      	str	r3, [r4, #4]
	len = 0;
 80a160c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a160e:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1610:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a1612:	a901      	add	r1, sp, #4
 80a1614:	f7ff fec1 	bl	80a139a <itoa>
	*this = buf;
 80a1618:	a901      	add	r1, sp, #4
 80a161a:	4620      	mov	r0, r4
 80a161c:	f7ff ffdf 	bl	80a15de <_ZN6StringaSEPKc>
}
 80a1620:	4620      	mov	r0, r4
 80a1622:	b00a      	add	sp, #40	; 0x28
 80a1624:	bd10      	pop	{r4, pc}

080a1626 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a1626:	b510      	push	{r4, lr}
 80a1628:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a162a:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a162c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a162e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1630:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1632:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1634:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a1636:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 80a1638:	a901      	add	r1, sp, #4
 80a163a:	f7ff fe48 	bl	80a12ce <ltoa>
	*this = buf;
 80a163e:	a901      	add	r1, sp, #4
 80a1640:	4620      	mov	r0, r4
 80a1642:	f7ff ffcc 	bl	80a15de <_ZN6StringaSEPKc>
}
 80a1646:	4620      	mov	r0, r4
 80a1648:	b00a      	add	sp, #40	; 0x28
 80a164a:	bd10      	pop	{r4, pc}

080a164c <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a164c:	b530      	push	{r4, r5, lr}
 80a164e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1650:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1652:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1654:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1656:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1658:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a165a:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a165c:	b2d5      	uxtb	r5, r2
 80a165e:	4608      	mov	r0, r1
 80a1660:	f002 fe6a 	bl	80a4338 <__aeabi_f2d>
 80a1664:	ab01      	add	r3, sp, #4
 80a1666:	462a      	mov	r2, r5
 80a1668:	f7ff feae 	bl	80a13c8 <_Z4dtoadhPc>
        *this = buf;
 80a166c:	a901      	add	r1, sp, #4
 80a166e:	4620      	mov	r0, r4
 80a1670:	f7ff ffb5 	bl	80a15de <_ZN6StringaSEPKc>
}
 80a1674:	4620      	mov	r0, r4
 80a1676:	b00b      	add	sp, #44	; 0x2c
 80a1678:	bd30      	pop	{r4, r5, pc}

080a167a <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 80a167a:	b510      	push	{r4, lr}
 80a167c:	4604      	mov	r4, r0
 80a167e:	b08a      	sub	sp, #40	; 0x28
 80a1680:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1682:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a1684:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1686:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1688:	6063      	str	r3, [r4, #4]
	len = 0;
 80a168a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a168c:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a168e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a1692:	ab01      	add	r3, sp, #4
 80a1694:	f7ff fe98 	bl	80a13c8 <_Z4dtoadhPc>
        *this = buf;
 80a1698:	a901      	add	r1, sp, #4
 80a169a:	4620      	mov	r0, r4
 80a169c:	f7ff ff9f 	bl	80a15de <_ZN6StringaSEPKc>
}
 80a16a0:	4620      	mov	r0, r4
 80a16a2:	b00a      	add	sp, #40	; 0x28
 80a16a4:	bd10      	pop	{r4, pc}

080a16a6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a16a6:	b570      	push	{r4, r5, r6, lr}
 80a16a8:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a16aa:	460e      	mov	r6, r1
 80a16ac:	b909      	cbnz	r1, 80a16b2 <_ZN6String6concatEPKcj+0xc>
 80a16ae:	2000      	movs	r0, #0
 80a16b0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a16b2:	b16a      	cbz	r2, 80a16d0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a16b4:	6883      	ldr	r3, [r0, #8]
 80a16b6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a16b8:	4629      	mov	r1, r5
 80a16ba:	f7ff ff15 	bl	80a14e8 <_ZN6String7reserveEj>
 80a16be:	2800      	cmp	r0, #0
 80a16c0:	d0f5      	beq.n	80a16ae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a16c2:	6820      	ldr	r0, [r4, #0]
 80a16c4:	68a3      	ldr	r3, [r4, #8]
 80a16c6:	4631      	mov	r1, r6
 80a16c8:	4418      	add	r0, r3
 80a16ca:	f003 feed 	bl	80a54a8 <strcpy>
	len = newlen;
 80a16ce:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a16d0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a16d2:	bd70      	pop	{r4, r5, r6, pc}

080a16d4 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a16d4:	688a      	ldr	r2, [r1, #8]
 80a16d6:	6809      	ldr	r1, [r1, #0]
 80a16d8:	f7ff bfe5 	b.w	80a16a6 <_ZN6String6concatEPKcj>

080a16dc <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a16dc:	b538      	push	{r3, r4, r5, lr}
 80a16de:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a16e0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a16e2:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a16e4:	b141      	cbz	r1, 80a16f8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a16e6:	f003 ff02 	bl	80a54ee <strlen>
 80a16ea:	4621      	mov	r1, r4
 80a16ec:	4602      	mov	r2, r0
 80a16ee:	4628      	mov	r0, r5
}
 80a16f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a16f4:	f7ff bfd7 	b.w	80a16a6 <_ZN6String6concatEPKcj>
}
 80a16f8:	bd38      	pop	{r3, r4, r5, pc}

080a16fa <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a16fa:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a16fc:	688a      	ldr	r2, [r1, #8]
 80a16fe:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1700:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1702:	f7ff ffd0 	bl	80a16a6 <_ZN6String6concatEPKcj>
 80a1706:	b910      	cbnz	r0, 80a170e <_ZplRK15StringSumHelperRK6String+0x14>
 80a1708:	4620      	mov	r0, r4
 80a170a:	f7ff fed6 	bl	80a14ba <_ZN6String10invalidateEv>
	return a;
}
 80a170e:	4620      	mov	r0, r4
 80a1710:	bd10      	pop	{r4, pc}

080a1712 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1712:	b538      	push	{r3, r4, r5, lr}
 80a1714:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1716:	460d      	mov	r5, r1
 80a1718:	b141      	cbz	r1, 80a172c <_ZplRK15StringSumHelperPKc+0x1a>
 80a171a:	4608      	mov	r0, r1
 80a171c:	f003 fee7 	bl	80a54ee <strlen>
 80a1720:	4629      	mov	r1, r5
 80a1722:	4602      	mov	r2, r0
 80a1724:	4620      	mov	r0, r4
 80a1726:	f7ff ffbe 	bl	80a16a6 <_ZN6String6concatEPKcj>
 80a172a:	b910      	cbnz	r0, 80a1732 <_ZplRK15StringSumHelperPKc+0x20>
 80a172c:	4620      	mov	r0, r4
 80a172e:	f7ff fec4 	bl	80a14ba <_ZN6String10invalidateEv>
	return a;
}
 80a1732:	4620      	mov	r0, r4
 80a1734:	bd38      	pop	{r3, r4, r5, pc}

080a1736 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1738:	4606      	mov	r6, r0
 80a173a:	460d      	mov	r5, r1
 80a173c:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a173e:	2400      	movs	r4, #0
  while (size--) {
 80a1740:	42bd      	cmp	r5, r7
 80a1742:	d00c      	beq.n	80a175e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1744:	6833      	ldr	r3, [r6, #0]
 80a1746:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a174a:	689b      	ldr	r3, [r3, #8]
 80a174c:	4630      	mov	r0, r6
 80a174e:	4798      	blx	r3
     if (chunk>=0)
 80a1750:	2800      	cmp	r0, #0
 80a1752:	db01      	blt.n	80a1758 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1754:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1756:	e7f3      	b.n	80a1740 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1758:	2c00      	cmp	r4, #0
 80a175a:	bf08      	it	eq
 80a175c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a175e:	4620      	mov	r0, r4
 80a1760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1762 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1762:	b570      	push	{r4, r5, r6, lr}
 80a1764:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1766:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1768:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a176a:	b149      	cbz	r1, 80a1780 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a176c:	f003 febf 	bl	80a54ee <strlen>
 80a1770:	682b      	ldr	r3, [r5, #0]
 80a1772:	4602      	mov	r2, r0
 80a1774:	4621      	mov	r1, r4
 80a1776:	4628      	mov	r0, r5
    }
 80a1778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a177c:	68db      	ldr	r3, [r3, #12]
 80a177e:	4718      	bx	r3
    }
 80a1780:	bd70      	pop	{r4, r5, r6, pc}

080a1782 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1782:	6803      	ldr	r3, [r0, #0]
 80a1784:	689b      	ldr	r3, [r3, #8]
 80a1786:	4718      	bx	r3

080a1788 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1788:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a178a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a178c:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a178e:	f7ff fff8 	bl	80a1782 <_ZN5Print5printEc>
  n += print('\n');
 80a1792:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1794:	4604      	mov	r4, r0
  n += print('\n');
 80a1796:	4628      	mov	r0, r5
 80a1798:	f7ff fff3 	bl	80a1782 <_ZN5Print5printEc>
  return n;
}
 80a179c:	4420      	add	r0, r4
 80a179e:	bd38      	pop	{r3, r4, r5, pc}

080a17a0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a17a0:	b538      	push	{r3, r4, r5, lr}
 80a17a2:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a17a4:	f7ff ffdd 	bl	80a1762 <_ZN5Print5writeEPKc>
 80a17a8:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a17aa:	4628      	mov	r0, r5
 80a17ac:	f7ff ffec 	bl	80a1788 <_ZN5Print7printlnEv>
  return n;
}
 80a17b0:	4420      	add	r0, r4
 80a17b2:	bd38      	pop	{r3, r4, r5, pc}

080a17b4 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a17b4:	2a01      	cmp	r2, #1
 80a17b6:	bf98      	it	ls
 80a17b8:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a17ba:	b530      	push	{r4, r5, lr}
 80a17bc:	460b      	mov	r3, r1
 80a17be:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a17c0:	2100      	movs	r1, #0
 80a17c2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a17c6:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a17ca:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a17ce:	fb05 3312 	mls	r3, r5, r2, r3
 80a17d2:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a17d4:	2b09      	cmp	r3, #9
 80a17d6:	bf94      	ite	ls
 80a17d8:	3330      	addls	r3, #48	; 0x30
 80a17da:	3337      	addhi	r3, #55	; 0x37
 80a17dc:	b2db      	uxtb	r3, r3
 80a17de:	4621      	mov	r1, r4
 80a17e0:	f804 3901 	strb.w	r3, [r4], #-1
 80a17e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a17e6:	2d00      	cmp	r5, #0
 80a17e8:	d1ef      	bne.n	80a17ca <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a17ea:	f7ff ffba 	bl	80a1762 <_ZN5Print5writeEPKc>
}
 80a17ee:	b00b      	add	sp, #44	; 0x2c
 80a17f0:	bd30      	pop	{r4, r5, pc}

080a17f2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a17f2:	b40c      	push	{r2, r3}
 80a17f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a17f8:	b087      	sub	sp, #28
 80a17fa:	af00      	add	r7, sp, #0
 80a17fc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1800:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1804:	4605      	mov	r5, r0
 80a1806:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1808:	4623      	mov	r3, r4
 80a180a:	464a      	mov	r2, r9
 80a180c:	2114      	movs	r1, #20
 80a180e:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1810:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1812:	f7ff fd03 	bl	80a121c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1816:	2813      	cmp	r0, #19
 80a1818:	d805      	bhi.n	80a1826 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a181a:	1d39      	adds	r1, r7, #4
 80a181c:	4628      	mov	r0, r5
 80a181e:	f7ff ffa0 	bl	80a1762 <_ZN5Print5writeEPKc>
 80a1822:	4604      	mov	r4, r0
 80a1824:	e013      	b.n	80a184e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1826:	f100 0308 	add.w	r3, r0, #8
 80a182a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a182e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1830:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1834:	1c41      	adds	r1, r0, #1
 80a1836:	4623      	mov	r3, r4
 80a1838:	464a      	mov	r2, r9
 80a183a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a183c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a183e:	f7ff fced 	bl	80a121c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1842:	4669      	mov	r1, sp
 80a1844:	4628      	mov	r0, r5
 80a1846:	f7ff ff8c 	bl	80a1762 <_ZN5Print5writeEPKc>
 80a184a:	4604      	mov	r4, r0
 80a184c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a184e:	b11e      	cbz	r6, 80a1858 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1850:	4628      	mov	r0, r5
 80a1852:	f7ff ff99 	bl	80a1788 <_ZN5Print7printlnEv>
 80a1856:	4404      	add	r4, r0
    return n;
}
 80a1858:	4620      	mov	r0, r4
 80a185a:	371c      	adds	r7, #28
 80a185c:	46bd      	mov	sp, r7
 80a185e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1862:	b002      	add	sp, #8
 80a1864:	4770      	bx	lr

080a1866 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1866:	2300      	movs	r3, #0
 80a1868:	461a      	mov	r2, r3
 80a186a:	4619      	mov	r1, r3
 80a186c:	6840      	ldr	r0, [r0, #4]
 80a186e:	f7ff bc4d 	b.w	80a110c <network_on>

080a1872 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a1872:	6880      	ldr	r0, [r0, #8]
 80a1874:	6803      	ldr	r3, [r0, #0]
 80a1876:	68db      	ldr	r3, [r3, #12]
 80a1878:	4718      	bx	r3

080a187a <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 80a187a:	4770      	bx	lr

080a187c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a187c:	b119      	cbz	r1, 80a1886 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a187e:	680b      	ldr	r3, [r1, #0]
 80a1880:	4608      	mov	r0, r1
 80a1882:	685b      	ldr	r3, [r3, #4]
 80a1884:	4718      	bx	r3
 80a1886:	4770      	bx	lr

080a1888 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a1888:	b119      	cbz	r1, 80a1892 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 80a188a:	680b      	ldr	r3, [r1, #0]
 80a188c:	4608      	mov	r0, r1
 80a188e:	685b      	ldr	r3, [r3, #4]
 80a1890:	4718      	bx	r3
 80a1892:	4770      	bx	lr

080a1894 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a1894:	4770      	bx	lr

080a1896 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a1896:	4770      	bx	lr

080a1898 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 80a1898:	4770      	bx	lr

080a189a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a189a:	b538      	push	{r3, r4, r5, lr}
 80a189c:	4604      	mov	r4, r0
 80a189e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a18a0:	6800      	ldr	r0, [r0, #0]
 80a18a2:	212e      	movs	r1, #46	; 0x2e
 80a18a4:	f003 fdec 	bl	80a5480 <strchrnul>
    size = s - category;
 80a18a8:	6823      	ldr	r3, [r4, #0]
 80a18aa:	1ac3      	subs	r3, r0, r3
 80a18ac:	602b      	str	r3, [r5, #0]
    if (size) {
 80a18ae:	b123      	cbz	r3, 80a18ba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 80a18b0:	7803      	ldrb	r3, [r0, #0]
 80a18b2:	b103      	cbz	r3, 80a18b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 80a18b4:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a18b6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a18b8:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 80a18ba:	4618      	mov	r0, r3
}
 80a18bc:	bd38      	pop	{r3, r4, r5, pc}

080a18be <_ZN5spark16JSONStreamWriterD0Ev>:
 80a18be:	b510      	push	{r4, lr}
 80a18c0:	4604      	mov	r4, r0
 80a18c2:	210c      	movs	r1, #12
 80a18c4:	f002 f9ec 	bl	80a3ca0 <_ZdlPvj>
 80a18c8:	4620      	mov	r0, r4
 80a18ca:	bd10      	pop	{r4, pc}

080a18cc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a18cc:	b510      	push	{r4, lr}
 80a18ce:	4604      	mov	r4, r0
 80a18d0:	2104      	movs	r1, #4
 80a18d2:	f002 f9e5 	bl	80a3ca0 <_ZdlPvj>
 80a18d6:	4620      	mov	r0, r4
 80a18d8:	bd10      	pop	{r4, pc}

080a18da <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a18da:	b510      	push	{r4, lr}
 80a18dc:	4604      	mov	r4, r0
 80a18de:	2104      	movs	r1, #4
 80a18e0:	f002 f9de 	bl	80a3ca0 <_ZdlPvj>
 80a18e4:	4620      	mov	r0, r4
 80a18e6:	bd10      	pop	{r4, pc}

080a18e8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a18e8:	b538      	push	{r3, r4, r5, lr}
 80a18ea:	460c      	mov	r4, r1
 80a18ec:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a18ee:	f001 fceb 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a18f2:	4284      	cmp	r4, r0
 80a18f4:	d102      	bne.n	80a18fc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a18f6:	f001 fce7 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a18fa:	e005      	b.n	80a1908 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80a18fc:	f001 fd12 	bl	80a3324 <_Z17_fetch_usbserial1v>
 80a1900:	4284      	cmp	r4, r0
 80a1902:	d105      	bne.n	80a1910 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 80a1904:	f001 fd0e 	bl	80a3324 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a1908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 80a190c:	f001 bcd0 	b.w	80a32b0 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 80a1910:	f001 fdbe 	bl	80a3490 <_Z22__fetch_global_Serial1v>
 80a1914:	4284      	cmp	r4, r0
 80a1916:	d105      	bne.n	80a1924 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 80a1918:	f001 fdba 	bl	80a3490 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a191c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 80a1920:	f001 bdaf 	b.w	80a3482 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 80a1924:	4621      	mov	r1, r4
 80a1926:	4628      	mov	r0, r5
 80a1928:	f7ff ffae 	bl	80a1888 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 80a192c:	bd38      	pop	{r3, r4, r5, pc}

080a192e <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 80a192e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a1930:	f003 fdb0 	bl	80a5494 <strcmp>
}
 80a1934:	fab0 f080 	clz	r0, r0
 80a1938:	0940      	lsrs	r0, r0, #5
 80a193a:	bd08      	pop	{r3, pc}

080a193c <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a193c:	b538      	push	{r3, r4, r5, lr}
 80a193e:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a1940:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a1942:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a1944:	f003 fdd3 	bl	80a54ee <strlen>
 80a1948:	4621      	mov	r1, r4
 80a194a:	4602      	mov	r2, r0
 80a194c:	4628      	mov	r0, r5
}
 80a194e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 80a1952:	f002 b85c 	b.w	80a3a0e <_ZN5spark10JSONWriter5valueEPKcj>

080a1956 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a1956:	b570      	push	{r4, r5, r6, lr}
 80a1958:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a195a:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a195c:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a195e:	f003 fdc6 	bl	80a54ee <strlen>
 80a1962:	6823      	ldr	r3, [r4, #0]
 80a1964:	4602      	mov	r2, r0
 80a1966:	4629      	mov	r1, r5
 80a1968:	4620      	mov	r0, r4
}
 80a196a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 80a196e:	68db      	ldr	r3, [r3, #12]
 80a1970:	4718      	bx	r3

080a1972 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 80a1972:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a1974:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 80a1976:	ab02      	add	r3, sp, #8
 80a1978:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a197c:	68d4      	ldr	r4, [r2, #12]
 80a197e:	4619      	mov	r1, r3
 80a1980:	2201      	movs	r2, #1
 80a1982:	47a0      	blx	r4
}
 80a1984:	b002      	add	sp, #8
 80a1986:	bd10      	pop	{r4, pc}

080a1988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a1988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a198c:	6807      	ldr	r7, [r0, #0]
 80a198e:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a1990:	463c      	mov	r4, r7
 80a1992:	6845      	ldr	r5, [r0, #4]
 80a1994:	4691      	mov	r9, r2
 80a1996:	2214      	movs	r2, #20
 80a1998:	4355      	muls	r5, r2
 80a199a:	b085      	sub	sp, #20
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	10ab      	asrs	r3, r5, #2
 80a19a0:	4d18      	ldr	r5, [pc, #96]	; (80a1a04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a19a2:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a19a4:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a19a6:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a19a8:	2d00      	cmp	r5, #0
 80a19aa:	9303      	str	r3, [sp, #12]
 80a19ac:	dd23      	ble.n	80a19f6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a19ae:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 80a19b0:	106e      	asrs	r6, r5, #1
 80a19b2:	fb03 f006 	mul.w	r0, r3, r6
 80a19b6:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a19ba:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 80a19be:	464a      	mov	r2, r9
 80a19c0:	45d1      	cmp	r9, sl
 80a19c2:	bf28      	it	cs
 80a19c4:	4652      	movcs	r2, sl
 80a19c6:	4659      	mov	r1, fp
 80a19c8:	5820      	ldr	r0, [r4, r0]
 80a19ca:	f003 fd98 	bl	80a54fe <strncmp>
                if (cmp == 0) {
 80a19ce:	9b03      	ldr	r3, [sp, #12]
 80a19d0:	b948      	cbnz	r0, 80a19e6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80a19d2:	45d1      	cmp	r9, sl
 80a19d4:	d103      	bne.n	80a19de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a19d6:	9a01      	ldr	r2, [sp, #4]
 80a19d8:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a19da:	4635      	mov	r5, r6
 80a19dc:	e7e4      	b.n	80a19a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80a19de:	bf8c      	ite	hi
 80a19e0:	2001      	movhi	r0, #1
 80a19e2:	2000      	movls	r0, #0
 80a19e4:	e000      	b.n	80a19e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80a19e6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a19e8:	2800      	cmp	r0, #0
 80a19ea:	d0f6      	beq.n	80a19da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a19ec:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80a19ee:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80a19f2:	3e01      	subs	r6, #1
 80a19f4:	e7f1      	b.n	80a19da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80a19f6:	1be4      	subs	r4, r4, r7
}
 80a19f8:	4802      	ldr	r0, [pc, #8]	; (80a1a04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80a19fa:	10a4      	asrs	r4, r4, #2
}
 80a19fc:	4360      	muls	r0, r4
 80a19fe:	b005      	add	sp, #20
 80a1a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a04:	cccccccd 	.word	0xcccccccd

080a1a08 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 80a1a0a:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a1a0c:	b085      	sub	sp, #20
 80a1a0e:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 80a1a10:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 80a1a12:	b313      	cbz	r3, 80a1a5a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 80a1a14:	b309      	cbz	r1, 80a1a5a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1a16:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a1a18:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1a1a:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a1a1c:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a1a20:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 80a1a24:	4639      	mov	r1, r7
 80a1a26:	a801      	add	r0, sp, #4
 80a1a28:	f7ff ff37 	bl	80a189a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a1a2c:	4601      	mov	r1, r0
 80a1a2e:	b1a0      	cbz	r0, 80a1a5a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 80a1a30:	ab04      	add	r3, sp, #16
 80a1a32:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a1a36:	9a03      	ldr	r2, [sp, #12]
 80a1a38:	4620      	mov	r0, r4
 80a1a3a:	f7ff ffa5 	bl	80a1988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a1a3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a1a42:	b153      	cbz	r3, 80a1a5a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 80a1a44:	6823      	ldr	r3, [r4, #0]
 80a1a46:	2414      	movs	r4, #20
 80a1a48:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a1a4c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 80a1a50:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a1a52:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a1a54:	bfa8      	it	ge
 80a1a56:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a1a58:	e7e4      	b.n	80a1a24 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 80a1a5a:	4630      	mov	r0, r6
 80a1a5c:	b005      	add	sp, #20
 80a1a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a1a60:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a1a62:	4c09      	ldr	r4, [pc, #36]	; (80a1a88 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a1a64:	6823      	ldr	r3, [r4, #0]
 80a1a66:	07db      	lsls	r3, r3, #31
 80a1a68:	d40b      	bmi.n	80a1a82 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1a6a:	4620      	mov	r0, r4
 80a1a6c:	f7fe fb26 	bl	80a00bc <__cxa_guard_acquire>
 80a1a70:	b138      	cbz	r0, 80a1a82 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a1a72:	4620      	mov	r0, r4
 80a1a74:	f7fe fb27 	bl	80a00c6 <__cxa_guard_release>
 80a1a78:	4a04      	ldr	r2, [pc, #16]	; (80a1a8c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a1a7a:	4905      	ldr	r1, [pc, #20]	; (80a1a90 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a1a7c:	4805      	ldr	r0, [pc, #20]	; (80a1a94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1a7e:	f002 f901 	bl	80a3c84 <__aeabi_atexit>
    return &factory;
}
 80a1a82:	4804      	ldr	r0, [pc, #16]	; (80a1a94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a1a84:	bd10      	pop	{r4, pc}
 80a1a86:	bf00      	nop
 80a1a88:	200002b8 	.word	0x200002b8
 80a1a8c:	200000c8 	.word	0x200000c8
 80a1a90:	080a1897 	.word	0x080a1897
 80a1a94:	2000000c 	.word	0x2000000c

080a1a98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a1a98:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a1a9a:	4c09      	ldr	r4, [pc, #36]	; (80a1ac0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a1a9c:	6823      	ldr	r3, [r4, #0]
 80a1a9e:	07db      	lsls	r3, r3, #31
 80a1aa0:	d40b      	bmi.n	80a1aba <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	f7fe fb0a 	bl	80a00bc <__cxa_guard_acquire>
 80a1aa8:	b138      	cbz	r0, 80a1aba <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a1aaa:	4620      	mov	r0, r4
 80a1aac:	f7fe fb0b 	bl	80a00c6 <__cxa_guard_release>
 80a1ab0:	4a04      	ldr	r2, [pc, #16]	; (80a1ac4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a1ab2:	4905      	ldr	r1, [pc, #20]	; (80a1ac8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a1ab4:	4805      	ldr	r0, [pc, #20]	; (80a1acc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1ab6:	f002 f8e5 	bl	80a3c84 <__aeabi_atexit>
    return &factory;
}
 80a1aba:	4804      	ldr	r0, [pc, #16]	; (80a1acc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a1abc:	bd10      	pop	{r4, pc}
 80a1abe:	bf00      	nop
 80a1ac0:	200002e8 	.word	0x200002e8
 80a1ac4:	200000c8 	.word	0x200000c8
 80a1ac8:	080a1895 	.word	0x080a1895
 80a1acc:	20000008 	.word	0x20000008

080a1ad0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a1ad0:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a1ad2:	2500      	movs	r5, #0
 80a1ad4:	4604      	mov	r4, r0
 80a1ad6:	6005      	str	r5, [r0, #0]
 80a1ad8:	6045      	str	r5, [r0, #4]
 80a1ada:	6085      	str	r5, [r0, #8]
 80a1adc:	6105      	str	r5, [r0, #16]
 80a1ade:	6145      	str	r5, [r0, #20]
 80a1ae0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1ae2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a1ae6:	f7ff f99b 	bl	80a0e20 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a1aea:	f7ff ffb9 	bl	80a1a60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a1aee:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1af0:	f7ff ffd2 	bl	80a1a98 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a1af4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a1af6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 80a1af8:	4620      	mov	r0, r4
 80a1afa:	bd38      	pop	{r3, r4, r5, pc}

080a1afc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a1afc:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a1afe:	4c0a      	ldr	r4, [pc, #40]	; (80a1b28 <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a1b00:	6823      	ldr	r3, [r4, #0]
 80a1b02:	07db      	lsls	r3, r3, #31
 80a1b04:	d40e      	bmi.n	80a1b24 <_ZN5spark10LogManager8instanceEv+0x28>
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	f7fe fad8 	bl	80a00bc <__cxa_guard_acquire>
 80a1b0c:	b150      	cbz	r0, 80a1b24 <_ZN5spark10LogManager8instanceEv+0x28>
 80a1b0e:	4807      	ldr	r0, [pc, #28]	; (80a1b2c <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1b10:	f7ff ffde 	bl	80a1ad0 <_ZN5spark10LogManagerC1Ev>
 80a1b14:	4620      	mov	r0, r4
 80a1b16:	f7fe fad6 	bl	80a00c6 <__cxa_guard_release>
 80a1b1a:	4a05      	ldr	r2, [pc, #20]	; (80a1b30 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a1b1c:	4905      	ldr	r1, [pc, #20]	; (80a1b34 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a1b1e:	4803      	ldr	r0, [pc, #12]	; (80a1b2c <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1b20:	f002 f8b0 	bl	80a3c84 <__aeabi_atexit>
    return &mgr;
}
 80a1b24:	4801      	ldr	r0, [pc, #4]	; (80a1b2c <_ZN5spark10LogManager8instanceEv+0x30>)
 80a1b26:	bd10      	pop	{r4, pc}
 80a1b28:	200002bc 	.word	0x200002bc
 80a1b2c:	200002c0 	.word	0x200002c0
 80a1b30:	200000c8 	.word	0x200000c8
 80a1b34:	080a1fc1 	.word	0x080a1fc1

080a1b38 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a1b38:	2300      	movs	r3, #0
 80a1b3a:	4a02      	ldr	r2, [pc, #8]	; (80a1b44 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a1b3c:	4902      	ldr	r1, [pc, #8]	; (80a1b48 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a1b3e:	4803      	ldr	r0, [pc, #12]	; (80a1b4c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a1b40:	f7ff ba78 	b.w	80a1034 <log_set_callbacks>
 80a1b44:	080a1ea5 	.word	0x080a1ea5
 80a1b48:	080a1e35 	.word	0x080a1e35
 80a1b4c:	080a1dbd 	.word	0x080a1dbd

080a1b50 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a1b50:	2300      	movs	r3, #0
 80a1b52:	461a      	mov	r2, r3
 80a1b54:	4619      	mov	r1, r3
 80a1b56:	4618      	mov	r0, r3
 80a1b58:	f7ff ba6c 	b.w	80a1034 <log_set_callbacks>

080a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1b5c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1b5e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1b60:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1b62:	b17c      	cbz	r4, 80a1b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1b64:	6863      	ldr	r3, [r4, #4]
 80a1b66:	3b01      	subs	r3, #1
 80a1b68:	6063      	str	r3, [r4, #4]
 80a1b6a:	b95b      	cbnz	r3, 80a1b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1b6c:	6823      	ldr	r3, [r4, #0]
 80a1b6e:	4620      	mov	r0, r4
 80a1b70:	689b      	ldr	r3, [r3, #8]
 80a1b72:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b74:	68a3      	ldr	r3, [r4, #8]
 80a1b76:	3b01      	subs	r3, #1
 80a1b78:	60a3      	str	r3, [r4, #8]
 80a1b7a:	b91b      	cbnz	r3, 80a1b84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1b7c:	6823      	ldr	r3, [r4, #0]
 80a1b7e:	4620      	mov	r0, r4
 80a1b80:	68db      	ldr	r3, [r3, #12]
 80a1b82:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1b84:	4628      	mov	r0, r5
 80a1b86:	bd38      	pop	{r3, r4, r5, pc}

080a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1b88:	680b      	ldr	r3, [r1, #0]
 80a1b8a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1b8c:	b113      	cbz	r3, 80a1b94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1b8e:	685a      	ldr	r2, [r3, #4]
 80a1b90:	3201      	adds	r2, #1
 80a1b92:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1b94:	4770      	bx	lr

080a1b96 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a1b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1b98:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a1b9a:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1b9c:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1ba0:	ac02      	add	r4, sp, #8
 80a1ba2:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a1ba6:	a801      	add	r0, sp, #4
 80a1ba8:	f7ff ffee 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1bac:	4622      	mov	r2, r4
 80a1bae:	4631      	mov	r1, r6
 80a1bb0:	4628      	mov	r0, r5
 80a1bb2:	f001 ff79 	bl	80a3aa8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1bb6:	a801      	add	r0, sp, #4
 80a1bb8:	f7ff ffd0 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1bbc:	4628      	mov	r0, r5
 80a1bbe:	b002      	add	sp, #8
 80a1bc0:	bd70      	pop	{r4, r5, r6, pc}

080a1bc2 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a1bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1bc4:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 80a1bc6:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1bcc:	ac02      	add	r4, sp, #8
 80a1bce:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a1bd2:	a801      	add	r0, sp, #4
 80a1bd4:	f7ff ffd8 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1bd8:	4622      	mov	r2, r4
 80a1bda:	4631      	mov	r1, r6
 80a1bdc:	4628      	mov	r0, r5
 80a1bde:	f001 ff7e 	bl	80a3ade <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1be2:	a801      	add	r0, sp, #4
 80a1be4:	f7ff ffba 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1be8:	4628      	mov	r0, r5
 80a1bea:	b002      	add	sp, #8
 80a1bec:	bd70      	pop	{r4, r5, r6, pc}

080a1bee <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a1bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1bf0:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80a1bf2:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1bf4:	f851 3b04 	ldr.w	r3, [r1], #4
 80a1bf8:	ac02      	add	r4, sp, #8
 80a1bfa:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a1bfe:	a801      	add	r0, sp, #4
 80a1c00:	f7ff ffc2 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a1c04:	4622      	mov	r2, r4
 80a1c06:	4631      	mov	r1, r6
 80a1c08:	4628      	mov	r0, r5
 80a1c0a:	f001 ff25 	bl	80a3a58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1c0e:	a801      	add	r0, sp, #4
 80a1c10:	f7ff ffa4 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1c14:	4628      	mov	r0, r5
 80a1c16:	b002      	add	sp, #8
 80a1c18:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1c1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a1c1c:	b530      	push	{r4, r5, lr}
 80a1c1e:	b08b      	sub	sp, #44	; 0x2c
 80a1c20:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a1c22:	4601      	mov	r1, r0
 80a1c24:	a804      	add	r0, sp, #16
 80a1c26:	f7ff ffb6 	bl	80a1b96 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 80a1c2a:	a804      	add	r0, sp, #16
 80a1c2c:	f001 fe31 	bl	80a3892 <_ZN5spark18JSONObjectIterator4nextEv>
 80a1c30:	b1e8      	cbz	r0, 80a1c6e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 80a1c32:	a904      	add	r1, sp, #16
 80a1c34:	4668      	mov	r0, sp
 80a1c36:	f7ff ffda 	bl	80a1bee <_ZNK5spark18JSONObjectIterator4nameEv>
 80a1c3a:	490f      	ldr	r1, [pc, #60]	; (80a1c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 80a1c3c:	9802      	ldr	r0, [sp, #8]
 80a1c3e:	f7ff fe76 	bl	80a192e <_ZNK5spark10JSONStringeqEPKc.isra.7>
 80a1c42:	4604      	mov	r4, r0
 80a1c44:	b110      	cbz	r0, 80a1c4c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 80a1c46:	1c2c      	adds	r4, r5, #0
 80a1c48:	bf18      	it	ne
 80a1c4a:	2401      	movne	r4, #1
 80a1c4c:	a801      	add	r0, sp, #4
 80a1c4e:	f7ff ff85 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c52:	2c00      	cmp	r4, #0
 80a1c54:	d0e9      	beq.n	80a1c2a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 80a1c56:	a904      	add	r1, sp, #16
 80a1c58:	4668      	mov	r0, sp
 80a1c5a:	f7ff ffb2 	bl	80a1bc2 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a1c5e:	4668      	mov	r0, sp
 80a1c60:	f001 fdf7 	bl	80a3852 <_ZNK5spark9JSONValue5toIntEv>
 80a1c64:	6028      	str	r0, [r5, #0]
 80a1c66:	a801      	add	r0, sp, #4
 80a1c68:	f7ff ff78 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c6c:	e7dd      	b.n	80a1c2a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 80a1c6e:	a805      	add	r0, sp, #20
 80a1c70:	f7ff ff74 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 80a1c74:	b00b      	add	sp, #44	; 0x2c
 80a1c76:	bd30      	pop	{r4, r5, pc}
 80a1c78:	080a61c0 	.word	0x080a61c0

080a1c7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c7e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a1c80:	491a      	ldr	r1, [pc, #104]	; (80a1cec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a1c82:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a1c84:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a1c86:	f003 fc05 	bl	80a5494 <strcmp>
 80a1c8a:	b940      	cbnz	r0, 80a1c9e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 80a1c8c:	f001 fb1c 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a1c90:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1c94:	f001 fb08 	bl	80a32a8 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a1c98:	f001 fb16 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a1c9c:	e023      	b.n	80a1ce6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 80a1c9e:	4914      	ldr	r1, [pc, #80]	; (80a1cf0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a1ca0:	4620      	mov	r0, r4
 80a1ca2:	f003 fbf7 	bl	80a5494 <strcmp>
 80a1ca6:	b940      	cbnz	r0, 80a1cba <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 80a1ca8:	f001 fb3c 	bl	80a3324 <_Z17_fetch_usbserial1v>
 80a1cac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1cb0:	f001 fafa 	bl	80a32a8 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a1cb4:	f001 fb36 	bl	80a3324 <_Z17_fetch_usbserial1v>
 80a1cb8:	e015      	b.n	80a1ce6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 80a1cba:	490e      	ldr	r1, [pc, #56]	; (80a1cf4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	f003 fbe9 	bl	80a5494 <strcmp>
 80a1cc2:	b978      	cbnz	r0, 80a1ce4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a1cc4:	a902      	add	r1, sp, #8
 80a1cc6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80a1cca:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 80a1cce:	4628      	mov	r0, r5
 80a1cd0:	f7ff ffa4 	bl	80a1c1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a1cd4:	f001 fbdc 	bl	80a3490 <_Z22__fetch_global_Serial1v>
 80a1cd8:	9901      	ldr	r1, [sp, #4]
 80a1cda:	f001 fbcf 	bl	80a347c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a1cde:	f001 fbd7 	bl	80a3490 <_Z22__fetch_global_Serial1v>
 80a1ce2:	e000      	b.n	80a1ce6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 80a1ce4:	2000      	movs	r0, #0
}
 80a1ce6:	b003      	add	sp, #12
 80a1ce8:	bd30      	pop	{r4, r5, pc}
 80a1cea:	bf00      	nop
 80a1cec:	080a61c5 	.word	0x080a61c5
 80a1cf0:	080a61cc 	.word	0x080a61cc
 80a1cf4:	080a61cf 	.word	0x080a61cf

080a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1cf8:	b570      	push	{r4, r5, r6, lr}
 80a1cfa:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a1cfc:	6804      	ldr	r4, [r0, #0]
 80a1cfe:	6843      	ldr	r3, [r0, #4]
 80a1d00:	2614      	movs	r6, #20
 80a1d02:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a1d06:	42a6      	cmp	r6, r4
 80a1d08:	d005      	beq.n	80a1d16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a1d0a:	f104 0008 	add.w	r0, r4, #8
 80a1d0e:	f7ff fff3 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1d12:	3414      	adds	r4, #20
 80a1d14:	e7f7      	b.n	80a1d06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a1d16:	6828      	ldr	r0, [r5, #0]
 80a1d18:	f7ff fa68 	bl	80a11ec <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a1d1c:	4628      	mov	r0, r5
 80a1d1e:	bd70      	pop	{r4, r5, r6, pc}

080a1d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a1d20:	b570      	push	{r4, r5, r6, lr}
 80a1d22:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a1d24:	6804      	ldr	r4, [r0, #0]
 80a1d26:	6843      	ldr	r3, [r0, #4]
 80a1d28:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a1d2c:	42a6      	cmp	r6, r4
 80a1d2e:	d004      	beq.n	80a1d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a1d30:	4620      	mov	r0, r4
 80a1d32:	f7ff fbbb 	bl	80a14ac <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a1d36:	3410      	adds	r4, #16
 80a1d38:	e7f8      	b.n	80a1d2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a1d3a:	6828      	ldr	r0, [r5, #0]
 80a1d3c:	f7ff fa56 	bl	80a11ec <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a1d40:	4628      	mov	r0, r5
 80a1d42:	bd70      	pop	{r4, r5, r6, pc}

080a1d44 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 80a1d44:	b510      	push	{r4, lr}
 80a1d46:	4604      	mov	r4, r0
 80a1d48:	300c      	adds	r0, #12
 80a1d4a:	f7ff ffd5 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a1d4e:	4620      	mov	r0, r4
 80a1d50:	f7ff ffe6 	bl	80a1d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	bd10      	pop	{r4, pc}

080a1d58 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a1d58:	b510      	push	{r4, lr}
 80a1d5a:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a1d5c:	4b03      	ldr	r3, [pc, #12]	; (80a1d6c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a1d5e:	f840 3b04 	str.w	r3, [r0], #4
 80a1d62:	f7ff ffef 	bl	80a1d44 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	bd10      	pop	{r4, pc}
 80a1d6a:	bf00      	nop
 80a1d6c:	080a5dbc 	.word	0x080a5dbc

080a1d70 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a1d70:	b510      	push	{r4, lr}
 80a1d72:	4604      	mov	r4, r0
 80a1d74:	f7ff fff0 	bl	80a1d58 <_ZN5spark16StreamLogHandlerD1Ev>
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	2124      	movs	r1, #36	; 0x24
 80a1d7c:	f001 ff90 	bl	80a3ca0 <_ZdlPvj>
 80a1d80:	4620      	mov	r0, r4
 80a1d82:	bd10      	pop	{r4, pc}

080a1d84 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 80a1d84:	b510      	push	{r4, lr}
 80a1d86:	4604      	mov	r4, r0
 80a1d88:	4b02      	ldr	r3, [pc, #8]	; (80a1d94 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a1d8a:	6003      	str	r3, [r0, #0]
 80a1d8c:	f7ff ffe4 	bl	80a1d58 <_ZN5spark16StreamLogHandlerD1Ev>
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	bd10      	pop	{r4, pc}
 80a1d94:	080a61b0 	.word	0x080a61b0

080a1d98 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a1d98:	b510      	push	{r4, lr}
 80a1d9a:	4604      	mov	r4, r0
 80a1d9c:	f7ff fff2 	bl	80a1d84 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a1da0:	4620      	mov	r0, r4
 80a1da2:	2124      	movs	r1, #36	; 0x24
 80a1da4:	f001 ff7c 	bl	80a3ca0 <_ZdlPvj>
 80a1da8:	4620      	mov	r0, r4
 80a1daa:	bd10      	pop	{r4, pc}

080a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a1dac:	b510      	push	{r4, lr}
 80a1dae:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1db0:	6803      	ldr	r3, [r0, #0]
 80a1db2:	6818      	ldr	r0, [r3, #0]
 80a1db4:	f7ff f84c 	bl	80a0e50 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80a1db8:	4620      	mov	r0, r4
 80a1dba:	bd10      	pop	{r4, pc}

080a1dbc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a1dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1dc0:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a1dc2:	4b1b      	ldr	r3, [pc, #108]	; (80a1e30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 80a1dc4:	b085      	sub	sp, #20
 80a1dc6:	685b      	ldr	r3, [r3, #4]
 80a1dc8:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1dca:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a1dce:	460e      	mov	r6, r1
 80a1dd0:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1dd2:	bb53      	cbnz	r3, 80a1e2a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 80a1dd4:	f7ff fe92 	bl	80a1afc <_ZN5spark10LogManager8instanceEv>
 80a1dd8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1dda:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1ddc:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a1dde:	f7ff fa35 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a1de2:	7b23      	ldrb	r3, [r4, #12]
 80a1de4:	b9f3      	cbnz	r3, 80a1e24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1de6:	2301      	movs	r3, #1
 80a1de8:	7323      	strb	r3, [r4, #12]
 80a1dea:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a1dec:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 80a1dee:	b2f6      	uxtb	r6, r6
 80a1df0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a1df4:	454d      	cmp	r5, r9
 80a1df6:	d013      	beq.n	80a1e20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 80a1df8:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 80a1dfc:	4641      	mov	r1, r8
 80a1dfe:	1d38      	adds	r0, r7, #4
 80a1e00:	f7ff fe02 	bl	80a1a08 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a1e04:	4286      	cmp	r6, r0
 80a1e06:	d3f5      	bcc.n	80a1df4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 80a1e08:	683b      	ldr	r3, [r7, #0]
 80a1e0a:	f8cd b000 	str.w	fp, [sp]
 80a1e0e:	689b      	ldr	r3, [r3, #8]
 80a1e10:	4638      	mov	r0, r7
 80a1e12:	469e      	mov	lr, r3
 80a1e14:	4632      	mov	r2, r6
 80a1e16:	4643      	mov	r3, r8
 80a1e18:	4651      	mov	r1, sl
 80a1e1a:	4677      	mov	r7, lr
 80a1e1c:	47b8      	blx	r7
 80a1e1e:	e7e9      	b.n	80a1df4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1e20:	2300      	movs	r3, #0
 80a1e22:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a1e24:	a803      	add	r0, sp, #12
 80a1e26:	f7ff ffc1 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a1e2a:	b005      	add	sp, #20
 80a1e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e30:	e000ed00 	.word	0xe000ed00

080a1e34 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a1e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1e38:	4699      	mov	r9, r3
 80a1e3a:	4b19      	ldr	r3, [pc, #100]	; (80a1ea0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 80a1e3c:	4607      	mov	r7, r0
 80a1e3e:	685b      	ldr	r3, [r3, #4]
 80a1e40:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a1e46:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1e48:	bb33      	cbnz	r3, 80a1e98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 80a1e4a:	f7ff fe57 	bl	80a1afc <_ZN5spark10LogManager8instanceEv>
 80a1e4e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a1e50:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1e52:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a1e54:	f7ff f9fa 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a1e58:	7b23      	ldrb	r3, [r4, #12]
 80a1e5a:	b9d3      	cbnz	r3, 80a1e92 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1e5c:	2301      	movs	r3, #1
 80a1e5e:	7323      	strb	r3, [r4, #12]
 80a1e60:	6825      	ldr	r5, [r4, #0]
 80a1e62:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 80a1e64:	fa5f fb86 	uxtb.w	fp, r6
 80a1e68:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a1e6c:	4555      	cmp	r5, sl
 80a1e6e:	d00e      	beq.n	80a1e8e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 80a1e70:	f855 6b04 	ldr.w	r6, [r5], #4
 80a1e74:	4649      	mov	r1, r9
 80a1e76:	1d30      	adds	r0, r6, #4
 80a1e78:	f7ff fdc6 	bl	80a1a08 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a1e7c:	4583      	cmp	fp, r0
 80a1e7e:	d3f5      	bcc.n	80a1e6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 80a1e80:	6833      	ldr	r3, [r6, #0]
 80a1e82:	4642      	mov	r2, r8
 80a1e84:	68db      	ldr	r3, [r3, #12]
 80a1e86:	4639      	mov	r1, r7
 80a1e88:	4630      	mov	r0, r6
 80a1e8a:	4798      	blx	r3
 80a1e8c:	e7ee      	b.n	80a1e6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a1e8e:	2300      	movs	r3, #0
 80a1e90:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a1e92:	a801      	add	r0, sp, #4
 80a1e94:	f7ff ff8a 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 80a1e98:	b003      	add	sp, #12
 80a1e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e9e:	bf00      	nop
 80a1ea0:	e000ed00 	.word	0xe000ed00

080a1ea4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a1ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1ea8:	4b15      	ldr	r3, [pc, #84]	; (80a1f00 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 80a1eaa:	4604      	mov	r4, r0
 80a1eac:	685b      	ldr	r3, [r3, #4]
 80a1eae:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a1eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a1eb4:	b9fb      	cbnz	r3, 80a1ef6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 80a1eb6:	f7ff fe21 	bl	80a1afc <_ZN5spark10LogManager8instanceEv>
 80a1eba:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a1ebc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1ebe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a1ec0:	f7ff f9c4 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
 80a1ec4:	e896 00a0 	ldmia.w	r6, {r5, r7}
 80a1ec8:	2646      	movs	r6, #70	; 0x46
 80a1eca:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a1ece:	42af      	cmp	r7, r5
 80a1ed0:	d107      	bne.n	80a1ee2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a1ed2:	a801      	add	r0, sp, #4
 80a1ed4:	f7ff ff6a 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 80a1ed8:	42b4      	cmp	r4, r6
 80a1eda:	bfb4      	ite	lt
 80a1edc:	2000      	movlt	r0, #0
 80a1ede:	2001      	movge	r0, #1
 80a1ee0:	e00a      	b.n	80a1ef8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 80a1ee2:	f855 0b04 	ldr.w	r0, [r5], #4
 80a1ee6:	4641      	mov	r1, r8
 80a1ee8:	3004      	adds	r0, #4
 80a1eea:	f7ff fd8d 	bl	80a1a08 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a1eee:	4286      	cmp	r6, r0
 80a1ef0:	bfa8      	it	ge
 80a1ef2:	4606      	movge	r6, r0
 80a1ef4:	e7eb      	b.n	80a1ece <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 80a1ef6:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 80a1ef8:	b002      	add	sp, #8
 80a1efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1efe:	bf00      	nop
 80a1f00:	e000ed00 	.word	0xe000ed00

080a1f04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a1f04:	b570      	push	{r4, r5, r6, lr}
 80a1f06:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a1f08:	6803      	ldr	r3, [r0, #0]
 80a1f0a:	6842      	ldr	r2, [r0, #4]
 80a1f0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a1f10:	429a      	cmp	r2, r3
 80a1f12:	4618      	mov	r0, r3
 80a1f14:	d00d      	beq.n	80a1f32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 80a1f16:	6806      	ldr	r6, [r0, #0]
 80a1f18:	680d      	ldr	r5, [r1, #0]
 80a1f1a:	3304      	adds	r3, #4
 80a1f1c:	42ae      	cmp	r6, r5
 80a1f1e:	d1f7      	bne.n	80a1f10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 80a1f20:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a1f22:	1a52      	subs	r2, r2, r1
 80a1f24:	f003 fa53 	bl	80a53ce <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a1f28:	6863      	ldr	r3, [r4, #4]
    return true;
 80a1f2a:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a1f2c:	3b01      	subs	r3, #1
 80a1f2e:	6063      	str	r3, [r4, #4]
    return true;
}
 80a1f30:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 80a1f32:	2000      	movs	r0, #0
 80a1f34:	bd70      	pop	{r4, r5, r6, pc}

080a1f36 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1f36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1f38:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a1f3a:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a1f3c:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1f3e:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a1f40:	f7ff f984 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a1f44:	a901      	add	r1, sp, #4
 80a1f46:	4620      	mov	r0, r4
 80a1f48:	f7ff ffdc 	bl	80a1f04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a1f4c:	b920      	cbnz	r0, 80a1f58 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a1f4e:	a803      	add	r0, sp, #12
 80a1f50:	f7ff ff2c 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 80a1f54:	b004      	add	sp, #16
 80a1f56:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a1f58:	6863      	ldr	r3, [r4, #4]
 80a1f5a:	2b00      	cmp	r3, #0
 80a1f5c:	d1f7      	bne.n	80a1f4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 80a1f5e:	f7ff fdf7 	bl	80a1b50 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 80a1f62:	e7f4      	b.n	80a1f4e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

080a1f64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 80a1f64:	b570      	push	{r4, r5, r6, lr}
 80a1f66:	4604      	mov	r4, r0
 80a1f68:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a1f6a:	6943      	ldr	r3, [r0, #20]
 80a1f6c:	2618      	movs	r6, #24
 80a1f6e:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1f72:	42ae      	cmp	r6, r5
 80a1f74:	d015      	beq.n	80a1fa2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a1f76:	f105 0110 	add.w	r1, r5, #16
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	f7ff ffc2 	bl	80a1f04 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a1f80:	6863      	ldr	r3, [r4, #4]
 80a1f82:	b90b      	cbnz	r3, 80a1f88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a1f84:	f7ff fde4 	bl	80a1b50 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 80a1f88:	69e0      	ldr	r0, [r4, #28]
 80a1f8a:	6929      	ldr	r1, [r5, #16]
 80a1f8c:	6803      	ldr	r3, [r0, #0]
 80a1f8e:	68db      	ldr	r3, [r3, #12]
 80a1f90:	4798      	blx	r3
        if (h.stream) {
 80a1f92:	6969      	ldr	r1, [r5, #20]
 80a1f94:	b119      	cbz	r1, 80a1f9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a1f96:	6a20      	ldr	r0, [r4, #32]
 80a1f98:	6803      	ldr	r3, [r0, #0]
 80a1f9a:	68db      	ldr	r3, [r3, #12]
 80a1f9c:	4798      	blx	r3
 80a1f9e:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 80a1fa0:	e7e7      	b.n	80a1f72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 80a1fa2:	6925      	ldr	r5, [r4, #16]
 80a1fa4:	6963      	ldr	r3, [r4, #20]
 80a1fa6:	2618      	movs	r6, #24
 80a1fa8:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a1fac:	42b5      	cmp	r5, r6
 80a1fae:	d004      	beq.n	80a1fba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a1fb0:	4628      	mov	r0, r5
 80a1fb2:	f7ff fa7b 	bl	80a14ac <_ZN6StringD1Ev>
 80a1fb6:	3518      	adds	r5, #24
 80a1fb8:	e7f8      	b.n	80a1fac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 80a1fba:	2300      	movs	r3, #0
 80a1fbc:	6163      	str	r3, [r4, #20]
 80a1fbe:	bd70      	pop	{r4, r5, r6, pc}

080a1fc0 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 80a1fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1fc2:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a1fc4:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 80a1fc6:	f7ff fdc3 	bl	80a1b50 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a1fca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a1fce:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 80a1fd2:	f7ff f93b 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 80a1fd6:	4620      	mov	r0, r4
 80a1fd8:	f7ff ffc4 	bl	80a1f64 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a1fdc:	4628      	mov	r0, r5
 80a1fde:	f7ff fee5 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1fe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1fe4:	b108      	cbz	r0, 80a1fea <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
 80a1fe6:	f7fe ff23 	bl	80a0e30 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 80a1fea:	6925      	ldr	r5, [r4, #16]
 80a1fec:	6963      	ldr	r3, [r4, #20]
 80a1fee:	2618      	movs	r6, #24
 80a1ff0:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a1ff4:	42b5      	cmp	r5, r6
 80a1ff6:	d004      	beq.n	80a2002 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a1ff8:	4628      	mov	r0, r5
 80a1ffa:	f7ff fa57 	bl	80a14ac <_ZN6StringD1Ev>
 80a1ffe:	3518      	adds	r5, #24
 80a2000:	e7f8      	b.n	80a1ff4 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a2002:	6920      	ldr	r0, [r4, #16]
 80a2004:	f7ff f8f2 	bl	80a11ec <free>
 80a2008:	6820      	ldr	r0, [r4, #0]
 80a200a:	f7ff f8ef 	bl	80a11ec <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 80a200e:	4620      	mov	r0, r4
 80a2010:	b002      	add	sp, #8
 80a2012:	bd70      	pop	{r4, r5, r6, pc}

080a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2014:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2016:	680a      	ldr	r2, [r1, #0]
 80a2018:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a201a:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a201c:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a201e:	684a      	ldr	r2, [r1, #4]
 80a2020:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2022:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2024:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2026:	688a      	ldr	r2, [r1, #8]
 80a2028:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a202a:	608b      	str	r3, [r1, #8]
 80a202c:	4770      	bx	lr

080a202e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a202e:	b510      	push	{r4, lr}
 80a2030:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2032:	2300      	movs	r3, #0
 80a2034:	6003      	str	r3, [r0, #0]
 80a2036:	6043      	str	r3, [r0, #4]
 80a2038:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a203a:	f7ff ffeb 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 80a203e:	4620      	mov	r0, r4
 80a2040:	bd10      	pop	{r4, pc}

080a2042 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a2042:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a2044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2046:	4604      	mov	r4, r0
 80a2048:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a204a:	d925      	bls.n	80a2098 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 80a204c:	4290      	cmp	r0, r2
 80a204e:	d224      	bcs.n	80a209a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 80a2050:	1a55      	subs	r5, r2, r1
 80a2052:	3d14      	subs	r5, #20
 80a2054:	442c      	add	r4, r5
 80a2056:	f1a1 0714 	sub.w	r7, r1, #20
 80a205a:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a205e:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a2060:	f1a5 0308 	sub.w	r3, r5, #8
 80a2064:	429f      	cmp	r7, r3
 80a2066:	d037      	beq.n	80a20d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 80a2068:	b184      	cbz	r4, 80a208c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a206a:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a206e:	4629      	mov	r1, r5
 80a2070:	6023      	str	r3, [r4, #0]
 80a2072:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a2076:	f104 0008 	add.w	r0, r4, #8
 80a207a:	80a3      	strh	r3, [r4, #4]
 80a207c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2080:	60a6      	str	r6, [r4, #8]
 80a2082:	80e3      	strh	r3, [r4, #6]
 80a2084:	60e6      	str	r6, [r4, #12]
 80a2086:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a2088:	f7ff ffc4 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a208c:	4628      	mov	r0, r5
 80a208e:	f7ff fe33 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a2092:	3c14      	subs	r4, #20
 80a2094:	3d14      	subs	r5, #20
 80a2096:	e7e3      	b.n	80a2060 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a2098:	d01e      	beq.n	80a20d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 80a209a:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a209e:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a20a0:	f1a5 0308 	sub.w	r3, r5, #8
 80a20a4:	429e      	cmp	r6, r3
 80a20a6:	d017      	beq.n	80a20d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 80a20a8:	b184      	cbz	r4, 80a20cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 80a20aa:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a20ae:	4629      	mov	r1, r5
 80a20b0:	6023      	str	r3, [r4, #0]
 80a20b2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a20b6:	f104 0008 	add.w	r0, r4, #8
 80a20ba:	80a3      	strh	r3, [r4, #4]
 80a20bc:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a20c0:	60a7      	str	r7, [r4, #8]
 80a20c2:	80e3      	strh	r3, [r4, #6]
 80a20c4:	60e7      	str	r7, [r4, #12]
 80a20c6:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a20c8:	f7ff ffa4 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a20cc:	4628      	mov	r0, r5
 80a20ce:	f7ff fe13 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a20d2:	3414      	adds	r4, #20
 80a20d4:	3514      	adds	r5, #20
 80a20d6:	e7e3      	b.n	80a20a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 80a20d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a20da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a20dc:	6845      	ldr	r5, [r0, #4]
 80a20de:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a20e0:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a20e2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a20e4:	460e      	mov	r6, r1
 80a20e6:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a20e8:	db0e      	blt.n	80a2108 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 80a20ea:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a20ec:	2d00      	cmp	r5, #0
 80a20ee:	dd05      	ble.n	80a20fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80a20f0:	00a9      	lsls	r1, r5, #2
 80a20f2:	6800      	ldr	r0, [r0, #0]
 80a20f4:	f7ff f882 	bl	80a11fc <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80a20f8:	b920      	cbnz	r0, 80a2104 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80a20fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a20fc:	6800      	ldr	r0, [r0, #0]
 80a20fe:	f7ff f875 	bl	80a11ec <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a2102:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80a2104:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a2106:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a2108:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a210a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a210c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a2110:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80a2114:	1a52      	subs	r2, r2, r1
 80a2116:	1d08      	adds	r0, r1, #4
 80a2118:	f003 f959 	bl	80a53ce <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80a211c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a2120:	6863      	ldr	r3, [r4, #4]
 80a2122:	2001      	movs	r0, #1
 80a2124:	3301      	adds	r3, #1
 80a2126:	6063      	str	r3, [r4, #4]
    return true;
}
 80a2128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a212a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a212a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a212c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a212e:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a2130:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a2132:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a2134:	f7ff f88a 	bl	80a124c <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 80a2138:	6823      	ldr	r3, [r4, #0]
 80a213a:	6861      	ldr	r1, [r4, #4]
 80a213c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a2140:	4283      	cmp	r3, r0
 80a2142:	461a      	mov	r2, r3
 80a2144:	d008      	beq.n	80a2158 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 80a2146:	6812      	ldr	r2, [r2, #0]
 80a2148:	3304      	adds	r3, #4
 80a214a:	42aa      	cmp	r2, r5
 80a214c:	d1f8      	bne.n	80a2140 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 80a214e:	a801      	add	r0, sp, #4
 80a2150:	f7ff fe2c 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a2154:	2500      	movs	r5, #0
 80a2156:	e00e      	b.n	80a2176 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2158:	462a      	mov	r2, r5
 80a215a:	4620      	mov	r0, r4
 80a215c:	f7ff ffbd 	bl	80a20da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a2160:	4605      	mov	r5, r0
 80a2162:	2800      	cmp	r0, #0
 80a2164:	d0f3      	beq.n	80a214e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 80a2166:	6863      	ldr	r3, [r4, #4]
 80a2168:	2b01      	cmp	r3, #1
 80a216a:	d101      	bne.n	80a2170 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 80a216c:	f7ff fce4 	bl	80a1b38 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a2170:	a801      	add	r0, sp, #4
 80a2172:	f7ff fe1b 	bl	80a1dac <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 80a2176:	4628      	mov	r0, r5
 80a2178:	b003      	add	sp, #12
 80a217a:	bd30      	pop	{r4, r5, pc}

080a217c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a217c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a217e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2180:	4606      	mov	r6, r0
 80a2182:	460c      	mov	r4, r1
 80a2184:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a2186:	d914      	bls.n	80a21b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a2188:	4290      	cmp	r0, r2
 80a218a:	d213      	bcs.n	80a21b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 80a218c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 80a2190:	1a6c      	subs	r4, r5, r1
 80a2192:	f1a1 0710 	sub.w	r7, r1, #16
 80a2196:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a2198:	42af      	cmp	r7, r5
 80a219a:	d018      	beq.n	80a21ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a219c:	b11c      	cbz	r4, 80a21a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a219e:	4629      	mov	r1, r5
 80a21a0:	4620      	mov	r0, r4
 80a21a2:	f7ff f973 	bl	80a148c <_ZN6StringC1EOS_>
                end->~T();
 80a21a6:	4628      	mov	r0, r5
 80a21a8:	f7ff f980 	bl	80a14ac <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a21ac:	3d10      	subs	r5, #16
 80a21ae:	3c10      	subs	r4, #16
 80a21b0:	e7f2      	b.n	80a2198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a21b2:	d00c      	beq.n	80a21ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a21b4:	42ac      	cmp	r4, r5
 80a21b6:	d00a      	beq.n	80a21ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a21b8:	b11e      	cbz	r6, 80a21c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a21ba:	4621      	mov	r1, r4
 80a21bc:	4630      	mov	r0, r6
 80a21be:	f7ff f965 	bl	80a148c <_ZN6StringC1EOS_>
                p->~T();
 80a21c2:	4620      	mov	r0, r4
 80a21c4:	f7ff f972 	bl	80a14ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a21c8:	3410      	adds	r4, #16
 80a21ca:	3610      	adds	r6, #16
 80a21cc:	e7f2      	b.n	80a21b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 80a21ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a21d0:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 80a21d2:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a21d4:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 80a21d6:	dd0b      	ble.n	80a21f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a21d8:	0130      	lsls	r0, r6, #4
 80a21da:	f7fe ffff 	bl	80a11dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a21de:	4604      	mov	r4, r0
 80a21e0:	b170      	cbz	r0, 80a2200 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 80a21e2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a21e6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a21ea:	f7ff ffc7 	bl	80a217c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 80a21ee:	e000      	b.n	80a21f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a21f0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a21f2:	6828      	ldr	r0, [r5, #0]
 80a21f4:	f7fe fffa 	bl	80a11ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a21f8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a21fa:	60ae      	str	r6, [r5, #8]
        return true;
 80a21fc:	2001      	movs	r0, #1
 80a21fe:	bd70      	pop	{r4, r5, r6, pc}
    }
 80a2200:	bd70      	pop	{r4, r5, r6, pc}

080a2202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a2202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2206:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2208:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a220a:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a220c:	b095      	sub	sp, #84	; 0x54
 80a220e:	6003      	str	r3, [r0, #0]
 80a2210:	6043      	str	r3, [r0, #4]
 80a2212:	6083      	str	r3, [r0, #8]
 80a2214:	60c3      	str	r3, [r0, #12]
 80a2216:	6103      	str	r3, [r0, #16]
 80a2218:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a221a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a221c:	9102      	str	r1, [sp, #8]
 80a221e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a2222:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a2224:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2226:	9308      	str	r3, [sp, #32]
 80a2228:	9309      	str	r3, [sp, #36]	; 0x24
 80a222a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a222c:	f340 809d 	ble.w	80a236a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a2230:	a808      	add	r0, sp, #32
 80a2232:	f7ff ffcd 	bl	80a21d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2236:	2800      	cmp	r0, #0
 80a2238:	f040 8097 	bne.w	80a236a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a223c:	e08e      	b.n	80a235c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 80a223e:	4621      	mov	r1, r4
 80a2240:	a80b      	add	r0, sp, #44	; 0x2c
 80a2242:	f7ff f923 	bl	80a148c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2246:	a90b      	add	r1, sp, #44	; 0x2c
 80a2248:	a80f      	add	r0, sp, #60	; 0x3c
 80a224a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a224c:	f7ff f91e 	bl	80a148c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2250:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a2254:	4299      	cmp	r1, r3
 80a2256:	f2c0 80ce 	blt.w	80a23f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 80a225a:	3101      	adds	r1, #1
 80a225c:	a808      	add	r0, sp, #32
 80a225e:	f7ff ffb7 	bl	80a21d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a2262:	2800      	cmp	r0, #0
 80a2264:	f040 80c7 	bne.w	80a23f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a2268:	a80f      	add	r0, sp, #60	; 0x3c
 80a226a:	f7ff f91f 	bl	80a14ac <_ZN6StringD1Ev>
 80a226e:	a80b      	add	r0, sp, #44	; 0x2c
 80a2270:	f7ff f91c 	bl	80a14ac <_ZN6StringD1Ev>
 80a2274:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 80a2276:	42a7      	cmp	r7, r4
 80a2278:	d1e1      	bne.n	80a223e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a227a:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a227c:	46b1      	mov	r9, r6
 80a227e:	960b      	str	r6, [sp, #44]	; 0x2c
 80a2280:	960c      	str	r6, [sp, #48]	; 0x30
 80a2282:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a2284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2286:	429e      	cmp	r6, r3
 80a2288:	f280 80a8 	bge.w	80a23dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a228c:	9a08      	ldr	r2, [sp, #32]
 80a228e:	0133      	lsls	r3, r6, #4
 80a2290:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80a2292:	9306      	str	r3, [sp, #24]
        if (!category) {
 80a2294:	2b00      	cmp	r3, #0
 80a2296:	f000 809f 	beq.w	80a23d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 80a229a:	2314      	movs	r3, #20
 80a229c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a229e:	f8cd 901c 	str.w	r9, [sp, #28]
 80a22a2:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a22a4:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a22a6:	a907      	add	r1, sp, #28
 80a22a8:	a806      	add	r0, sp, #24
 80a22aa:	f7ff faf6 	bl	80a189a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a22ae:	4607      	mov	r7, r0
 80a22b0:	2800      	cmp	r0, #0
 80a22b2:	f000 8091 	beq.w	80a23d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 80a22b6:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 80a22b8:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a22ba:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a22be:	9a07      	ldr	r2, [sp, #28]
 80a22c0:	4620      	mov	r0, r4
 80a22c2:	f7ff fb61 	bl	80a1988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a22c6:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 80a22ca:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a22cc:	f1b8 0f00 	cmp.w	r8, #0
 80a22d0:	d153      	bne.n	80a237a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 80a22d2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 80a22d6:	970f      	str	r7, [sp, #60]	; 0x3c
 80a22d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80a22dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a22e0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80a22e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80a22e8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80a22ec:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a22f0:	6867      	ldr	r7, [r4, #4]
 80a22f2:	68a3      	ldr	r3, [r4, #8]
 80a22f4:	429f      	cmp	r7, r3
 80a22f6:	da4f      	bge.n	80a2398 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 80a22f8:	9b00      	ldr	r3, [sp, #0]
 80a22fa:	2214      	movs	r2, #20
 80a22fc:	4353      	muls	r3, r2
 80a22fe:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 80a2302:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a2304:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 80a2308:	fb02 b201 	mla	r2, r2, r1, fp
 80a230c:	f107 0014 	add.w	r0, r7, #20
 80a2310:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a2312:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 80a2314:	f7ff fe95 	bl	80a2042 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a2318:	b1a7      	cbz	r7, 80a2344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a231a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a231c:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a231e:	a911      	add	r1, sp, #68	; 0x44
 80a2320:	f84b 2003 	str.w	r2, [fp, r3]
 80a2324:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80a2328:	f107 0008 	add.w	r0, r7, #8
 80a232c:	80bb      	strh	r3, [r7, #4]
 80a232e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a2332:	f8c7 9008 	str.w	r9, [r7, #8]
 80a2336:	80fb      	strh	r3, [r7, #6]
 80a2338:	f8c7 900c 	str.w	r9, [r7, #12]
 80a233c:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a2340:	f7ff fe68 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 80a2344:	6863      	ldr	r3, [r4, #4]
 80a2346:	3301      	adds	r3, #1
 80a2348:	6063      	str	r3, [r4, #4]
 80a234a:	a811      	add	r0, sp, #68	; 0x44
 80a234c:	f7ff fcd4 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a2350:	f1b8 0f00 	cmp.w	r8, #0
 80a2354:	d011      	beq.n	80a237a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 80a2356:	a80b      	add	r0, sp, #44	; 0x2c
 80a2358:	f7ff fcce 	bl	80a1cf8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a235c:	a808      	add	r0, sp, #32
 80a235e:	f7ff fcdf 	bl	80a1d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 80a2362:	4628      	mov	r0, r5
 80a2364:	b015      	add	sp, #84	; 0x54
 80a2366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a236a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a236e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80a2372:	2714      	movs	r7, #20
 80a2374:	fb07 4703 	mla	r7, r7, r3, r4
 80a2378:	e77d      	b.n	80a2276 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 80a237a:	6823      	ldr	r3, [r4, #0]
 80a237c:	9a00      	ldr	r2, [sp, #0]
 80a237e:	2414      	movs	r4, #20
 80a2380:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 80a2384:	9b06      	ldr	r3, [sp, #24]
 80a2386:	781b      	ldrb	r3, [r3, #0]
 80a2388:	bb23      	cbnz	r3, 80a23d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 80a238a:	f8da 3000 	ldr.w	r3, [sl]
 80a238e:	9a01      	ldr	r2, [sp, #4]
 80a2390:	4413      	add	r3, r2
 80a2392:	7c1b      	ldrb	r3, [r3, #16]
 80a2394:	80e3      	strh	r3, [r4, #6]
 80a2396:	e01d      	b.n	80a23d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a2398:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a239a:	2f00      	cmp	r7, #0
 80a239c:	dd0f      	ble.n	80a23be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a239e:	2314      	movs	r3, #20
 80a23a0:	fb03 f007 	mul.w	r0, r3, r7
 80a23a4:	9303      	str	r3, [sp, #12]
 80a23a6:	f7fe ff19 	bl	80a11dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a23aa:	4683      	mov	fp, r0
 80a23ac:	b178      	cbz	r0, 80a23ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 80a23ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a23b2:	9b03      	ldr	r3, [sp, #12]
 80a23b4:	fb03 1202 	mla	r2, r3, r2, r1
 80a23b8:	f7ff fe43 	bl	80a2042 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a23bc:	e000      	b.n	80a23c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a23be:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a23c0:	6820      	ldr	r0, [r4, #0]
 80a23c2:	f7fe ff13 	bl	80a11ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a23c6:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 80a23ca:	60a7      	str	r7, [r4, #8]
 80a23cc:	e794      	b.n	80a22f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a23ce:	f04f 0801 	mov.w	r8, #1
 80a23d2:	e7ba      	b.n	80a234a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 80a23d4:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a23d6:	e766      	b.n	80a22a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a23d8:	3601      	adds	r6, #1
 80a23da:	e753      	b.n	80a2284 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 80a23dc:	a908      	add	r1, sp, #32
 80a23de:	4628      	mov	r0, r5
 80a23e0:	f7ff fe18 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 80a23e4:	a90b      	add	r1, sp, #44	; 0x2c
 80a23e6:	f105 000c 	add.w	r0, r5, #12
 80a23ea:	f7ff fe13 	bl	80a2014 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 80a23ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a23f2:	762b      	strb	r3, [r5, #24]
 80a23f4:	e7af      	b.n	80a2356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a23f6:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80a23f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a23fa:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a23fe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a2402:	4631      	mov	r1, r6
 80a2404:	f106 0010 	add.w	r0, r6, #16
 80a2408:	f7ff feb8 	bl	80a217c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a240c:	b11e      	cbz	r6, 80a2416 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 80a240e:	a90f      	add	r1, sp, #60	; 0x3c
 80a2410:	4630      	mov	r0, r6
 80a2412:	f7ff f83b 	bl	80a148c <_ZN6StringC1EOS_>
    ++size_;
 80a2416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a2418:	3301      	adds	r3, #1
 80a241a:	9309      	str	r3, [sp, #36]	; 0x24
 80a241c:	e724      	b.n	80a2268 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

080a2420 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a2422:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a2424:	460e      	mov	r6, r1
 80a2426:	4605      	mov	r5, r0
        filter_(level, filters) {
 80a2428:	4b08      	ldr	r3, [pc, #32]	; (80a244c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a242a:	4611      	mov	r1, r2
 80a242c:	f844 3b04 	str.w	r3, [r4], #4
 80a2430:	a801      	add	r0, sp, #4
 80a2432:	f7fe fbac 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a2436:	aa01      	add	r2, sp, #4
 80a2438:	4631      	mov	r1, r6
 80a243a:	4620      	mov	r0, r4
 80a243c:	f7ff fee1 	bl	80a2202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2440:	a801      	add	r0, sp, #4
 80a2442:	f7fe fb63 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a2446:	4628      	mov	r0, r5
 80a2448:	b004      	add	sp, #16
 80a244a:	bd70      	pop	{r4, r5, r6, pc}
 80a244c:	080a5dbc 	.word	0x080a5dbc

080a2450 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a2450:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2452:	460f      	mov	r7, r1
 80a2454:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2456:	492b      	ldr	r1, [pc, #172]	; (80a2504 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 80a2458:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a245a:	4616      	mov	r6, r2
 80a245c:	461d      	mov	r5, r3
 80a245e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a2460:	f003 f818 	bl	80a5494 <strcmp>
 80a2464:	bb28      	cbnz	r0, 80a24b2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 80a2466:	2c00      	cmp	r4, #0
 80a2468:	d049      	beq.n	80a24fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a246a:	4629      	mov	r1, r5
 80a246c:	a801      	add	r0, sp, #4
 80a246e:	f7ff fdde 	bl	80a202e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a2472:	4925      	ldr	r1, [pc, #148]	; (80a2508 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a2474:	2024      	movs	r0, #36	; 0x24
 80a2476:	f001 fc17 	bl	80a3ca8 <_ZnwjRKSt9nothrow_t>
 80a247a:	4605      	mov	r5, r0
 80a247c:	b1b8      	cbz	r0, 80a24ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a247e:	a901      	add	r1, sp, #4
 80a2480:	a804      	add	r0, sp, #16
 80a2482:	f7ff fdd4 	bl	80a202e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a2486:	a904      	add	r1, sp, #16
 80a2488:	a807      	add	r0, sp, #28
 80a248a:	f7fe fb80 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a248e:	aa07      	add	r2, sp, #28
 80a2490:	4631      	mov	r1, r6
 80a2492:	4628      	mov	r0, r5
 80a2494:	f7ff ffc4 	bl	80a2420 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a2498:	a807      	add	r0, sp, #28
 80a249a:	f7fe fb37 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a249e:	4b1b      	ldr	r3, [pc, #108]	; (80a250c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a24a0:	622c      	str	r4, [r5, #32]
 80a24a2:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a24a4:	a804      	add	r0, sp, #16
 80a24a6:	f7fe fb31 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a24aa:	4b19      	ldr	r3, [pc, #100]	; (80a2510 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 80a24ac:	602b      	str	r3, [r5, #0]
 80a24ae:	a801      	add	r0, sp, #4
 80a24b0:	e01f      	b.n	80a24f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a24b2:	4918      	ldr	r1, [pc, #96]	; (80a2514 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 80a24b4:	4638      	mov	r0, r7
 80a24b6:	f002 ffed 	bl	80a5494 <strcmp>
 80a24ba:	b9f0      	cbnz	r0, 80a24fa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 80a24bc:	b1fc      	cbz	r4, 80a24fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a24be:	4629      	mov	r1, r5
 80a24c0:	a804      	add	r0, sp, #16
 80a24c2:	f7ff fdb4 	bl	80a202e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a24c6:	4910      	ldr	r1, [pc, #64]	; (80a2508 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a24c8:	2024      	movs	r0, #36	; 0x24
 80a24ca:	f001 fbed 	bl	80a3ca8 <_ZnwjRKSt9nothrow_t>
 80a24ce:	4605      	mov	r5, r0
 80a24d0:	b170      	cbz	r0, 80a24f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a24d2:	a904      	add	r1, sp, #16
 80a24d4:	a807      	add	r0, sp, #28
 80a24d6:	f7fe fb5a 	bl	80a0b8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a24da:	aa07      	add	r2, sp, #28
 80a24dc:	4631      	mov	r1, r6
 80a24de:	4628      	mov	r0, r5
 80a24e0:	f7ff ff9e 	bl	80a2420 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a24e4:	a807      	add	r0, sp, #28
 80a24e6:	f7fe fb11 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a24ea:	4b08      	ldr	r3, [pc, #32]	; (80a250c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a24ec:	622c      	str	r4, [r5, #32]
 80a24ee:	602b      	str	r3, [r5, #0]
 80a24f0:	a804      	add	r0, sp, #16
 80a24f2:	f7fe fb0b 	bl	80a0b0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a24f6:	4628      	mov	r0, r5
 80a24f8:	e002      	b.n	80a2500 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 80a24fa:	2000      	movs	r0, #0
 80a24fc:	e000      	b.n	80a2500 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 80a24fe:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 80a2500:	b00b      	add	sp, #44	; 0x2c
 80a2502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2504:	080a6221 	.word	0x080a6221
 80a2508:	080a6456 	.word	0x080a6456
 80a250c:	080a62a8 	.word	0x080a62a8
 80a2510:	080a61b0 	.word	0x080a61b0
 80a2514:	080a6225 	.word	0x080a6225

080a2518 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2518:	4a01      	ldr	r2, [pc, #4]	; (80a2520 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a251a:	4b02      	ldr	r3, [pc, #8]	; (80a2524 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a251c:	601a      	str	r2, [r3, #0]
 80a251e:	4770      	bx	lr
 80a2520:	080a6236 	.word	0x080a6236
 80a2524:	200002ec 	.word	0x200002ec

080a2528 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a252c:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a252e:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a2532:	4604      	mov	r4, r0
 80a2534:	460e      	mov	r6, r1
 80a2536:	4617      	mov	r7, r2
 80a2538:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a253a:	f000 fec5 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a253e:	4581      	cmp	r9, r0
 80a2540:	d105      	bne.n	80a254e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
 80a2542:	485a      	ldr	r0, [pc, #360]	; (80a26ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a2544:	f001 f8b9 	bl	80a36ba <_ZN5spark12NetworkClass9listeningEv>
 80a2548:	2800      	cmp	r0, #0
 80a254a:	f040 80ac 	bne.w	80a26a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a254e:	792b      	ldrb	r3, [r5, #4]
 80a2550:	071b      	lsls	r3, r3, #28
 80a2552:	d505      	bpl.n	80a2560 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a2554:	696b      	ldr	r3, [r5, #20]
 80a2556:	4a56      	ldr	r2, [pc, #344]	; (80a26b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a2558:	2100      	movs	r1, #0
 80a255a:	6a20      	ldr	r0, [r4, #32]
 80a255c:	f7ff f949 	bl	80a17f2 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 80a2560:	f1b8 0f00 	cmp.w	r8, #0
 80a2564:	d00d      	beq.n	80a2582 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
 80a2566:	215b      	movs	r1, #91	; 0x5b
 80a2568:	4620      	mov	r0, r4
 80a256a:	f7ff fa02 	bl	80a1972 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a256e:	4641      	mov	r1, r8
 80a2570:	4620      	mov	r0, r4
 80a2572:	f7ff f9f0 	bl	80a1956 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a2576:	6823      	ldr	r3, [r4, #0]
 80a2578:	2202      	movs	r2, #2
 80a257a:	68db      	ldr	r3, [r3, #12]
 80a257c:	494d      	ldr	r1, [pc, #308]	; (80a26b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a257e:	4620      	mov	r0, r4
 80a2580:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 80a2582:	792b      	ldrb	r3, [r5, #4]
 80a2584:	07d9      	lsls	r1, r3, #31
 80a2586:	d525      	bpl.n	80a25d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
 80a2588:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a258c:	212f      	movs	r1, #47	; 0x2f
 80a258e:	4640      	mov	r0, r8
 80a2590:	f002 ffca 	bl	80a5528 <strrchr>
    if (s1) {
 80a2594:	b108      	cbz	r0, 80a259a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
 80a2596:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 80a259a:	4641      	mov	r1, r8
 80a259c:	4620      	mov	r0, r4
 80a259e:	f7ff f9da 	bl	80a1956 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a25a2:	792b      	ldrb	r3, [r5, #4]
 80a25a4:	079a      	lsls	r2, r3, #30
 80a25a6:	d509      	bpl.n	80a25bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
 80a25a8:	213a      	movs	r1, #58	; 0x3a
 80a25aa:	4620      	mov	r0, r4
 80a25ac:	f7ff f9e1 	bl	80a1972 <_ZN5spark16StreamLogHandler5writeEc>
 80a25b0:	68eb      	ldr	r3, [r5, #12]
 80a25b2:	4a41      	ldr	r2, [pc, #260]	; (80a26b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a25b4:	2100      	movs	r1, #0
 80a25b6:	6a20      	ldr	r0, [r4, #32]
 80a25b8:	f7ff f91b 	bl	80a17f2 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a25bc:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 80a25be:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a25c0:	f013 0f04 	tst.w	r3, #4
 80a25c4:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 80a25c6:	bf18      	it	ne
 80a25c8:	493c      	ldrne	r1, [pc, #240]	; (80a26bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a25ca:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 80a25cc:	bf08      	it	eq
 80a25ce:	493c      	ldreq	r1, [pc, #240]	; (80a26c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a25d0:	4620      	mov	r0, r4
 80a25d2:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 80a25d4:	792b      	ldrb	r3, [r5, #4]
 80a25d6:	075b      	lsls	r3, r3, #29
 80a25d8:	d518      	bpl.n	80a260c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a25da:	6929      	ldr	r1, [r5, #16]
 80a25dc:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a25de:	4613      	mov	r3, r2
 80a25e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a25e4:	b138      	cbz	r0, 80a25f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
 80a25e6:	2820      	cmp	r0, #32
 80a25e8:	d101      	bne.n	80a25ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
 80a25ea:	4619      	mov	r1, r3
 80a25ec:	e001      	b.n	80a25f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
 80a25ee:	2828      	cmp	r0, #40	; 0x28
 80a25f0:	d001      	beq.n	80a25f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a25f2:	461a      	mov	r2, r3
 80a25f4:	e7f3      	b.n	80a25de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 80a25f6:	6823      	ldr	r3, [r4, #0]
 80a25f8:	1a52      	subs	r2, r2, r1
 80a25fa:	68db      	ldr	r3, [r3, #12]
 80a25fc:	4620      	mov	r0, r4
 80a25fe:	4798      	blx	r3
        write("(): ", 4);
 80a2600:	6823      	ldr	r3, [r4, #0]
 80a2602:	2204      	movs	r2, #4
 80a2604:	68db      	ldr	r3, [r3, #12]
 80a2606:	492f      	ldr	r1, [pc, #188]	; (80a26c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a2608:	4620      	mov	r0, r4
 80a260a:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80a260c:	2100      	movs	r1, #0
 80a260e:	4638      	mov	r0, r7
 80a2610:	f7fe fd08 	bl	80a1024 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 80a2614:	4601      	mov	r1, r0
 80a2616:	4620      	mov	r0, r4
 80a2618:	f7ff f99d 	bl	80a1956 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a261c:	6823      	ldr	r3, [r4, #0]
 80a261e:	2202      	movs	r2, #2
 80a2620:	68db      	ldr	r3, [r3, #12]
 80a2622:	4927      	ldr	r1, [pc, #156]	; (80a26c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a2624:	4620      	mov	r0, r4
 80a2626:	4798      	blx	r3
    // Message
    if (msg) {
 80a2628:	b11e      	cbz	r6, 80a2632 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
 80a262a:	4631      	mov	r1, r6
 80a262c:	4620      	mov	r0, r4
 80a262e:	f7ff f992 	bl	80a1956 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 80a2632:	792b      	ldrb	r3, [r5, #4]
 80a2634:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a2638:	d02d      	beq.n	80a2696 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
 80a263a:	6823      	ldr	r3, [r4, #0]
 80a263c:	4620      	mov	r0, r4
 80a263e:	68db      	ldr	r3, [r3, #12]
 80a2640:	2202      	movs	r2, #2
 80a2642:	4921      	ldr	r1, [pc, #132]	; (80a26c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a2644:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 80a2646:	792b      	ldrb	r3, [r5, #4]
 80a2648:	06d8      	lsls	r0, r3, #27
 80a264a:	d50b      	bpl.n	80a2664 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
 80a264c:	6823      	ldr	r3, [r4, #0]
 80a264e:	2207      	movs	r2, #7
 80a2650:	68db      	ldr	r3, [r3, #12]
 80a2652:	491e      	ldr	r1, [pc, #120]	; (80a26cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a2654:	4620      	mov	r0, r4
 80a2656:	4798      	blx	r3
 80a2658:	69ab      	ldr	r3, [r5, #24]
 80a265a:	4a1d      	ldr	r2, [pc, #116]	; (80a26d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
 80a265c:	2100      	movs	r1, #0
 80a265e:	6a20      	ldr	r0, [r4, #32]
 80a2660:	f7ff f8c7 	bl	80a17f2 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 80a2664:	792b      	ldrb	r3, [r5, #4]
 80a2666:	0699      	lsls	r1, r3, #26
 80a2668:	d511      	bpl.n	80a268e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
 80a266a:	06da      	lsls	r2, r3, #27
 80a266c:	d505      	bpl.n	80a267a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
 80a266e:	6823      	ldr	r3, [r4, #0]
 80a2670:	2202      	movs	r2, #2
 80a2672:	68db      	ldr	r3, [r3, #12]
 80a2674:	4911      	ldr	r1, [pc, #68]	; (80a26bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a2676:	4620      	mov	r0, r4
 80a2678:	4798      	blx	r3
            }
            write("details = ", 10);
 80a267a:	6823      	ldr	r3, [r4, #0]
 80a267c:	4915      	ldr	r1, [pc, #84]	; (80a26d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
 80a267e:	4620      	mov	r0, r4
 80a2680:	68db      	ldr	r3, [r3, #12]
 80a2682:	220a      	movs	r2, #10
 80a2684:	4798      	blx	r3
            write(attr.details);
 80a2686:	69e9      	ldr	r1, [r5, #28]
 80a2688:	4620      	mov	r0, r4
 80a268a:	f7ff f964 	bl	80a1956 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 80a268e:	215d      	movs	r1, #93	; 0x5d
 80a2690:	4620      	mov	r0, r4
 80a2692:	f7ff f96e 	bl	80a1972 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 80a2696:	6823      	ldr	r3, [r4, #0]
 80a2698:	4620      	mov	r0, r4
}
 80a269a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 80a269e:	68db      	ldr	r3, [r3, #12]
 80a26a0:	2202      	movs	r2, #2
 80a26a2:	490d      	ldr	r1, [pc, #52]	; (80a26d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
 80a26a4:	4718      	bx	r3
 80a26a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a26aa:	bf00      	nop
 80a26ac:	20000394 	.word	0x20000394
 80a26b0:	080a623a 	.word	0x080a623a
 80a26b4:	080a6241 	.word	0x080a6241
 80a26b8:	080a6244 	.word	0x080a6244
 80a26bc:	080a5e45 	.word	0x080a5e45
 80a26c0:	080a6249 	.word	0x080a6249
 80a26c4:	080a6247 	.word	0x080a6247
 80a26c8:	080a624c 	.word	0x080a624c
 80a26cc:	080a624f 	.word	0x080a624f
 80a26d0:	080a6257 	.word	0x080a6257
 80a26d4:	080a625a 	.word	0x080a625a
 80a26d8:	080a6265 	.word	0x080a6265

080a26dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a26dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a26e0:	b085      	sub	sp, #20
 80a26e2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80a26e6:	4606      	mov	r6, r0
 80a26e8:	460f      	mov	r7, r1
 80a26ea:	4691      	mov	r9, r2
 80a26ec:	461d      	mov	r5, r3
 80a26ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
 80a26f0:	f000 fdea 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a26f4:	4580      	cmp	r8, r0
 80a26f6:	d105      	bne.n	80a2704 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a26f8:	484a      	ldr	r0, [pc, #296]	; (80a2824 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 80a26fa:	f000 ffde 	bl	80a36ba <_ZN5spark12NetworkClass9listeningEv>
 80a26fe:	2800      	cmp	r0, #0
 80a2700:	f040 808c 	bne.w	80a281c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
 80a2704:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a2706:	4a48      	ldr	r2, [pc, #288]	; (80a2828 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a2708:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80a270c:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a270e:	9201      	str	r2, [sp, #4]
 80a2710:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a2712:	f88d 8008 	strb.w	r8, [sp, #8]
 80a2716:	f001 f8e6 	bl	80a38e6 <_ZN5spark10JSONWriter11beginObjectEv>
 80a271a:	4641      	mov	r1, r8
 80a271c:	4648      	mov	r0, r9
 80a271e:	f7fe fc81 	bl	80a1024 <log_level_name>
 80a2722:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80a2724:	4941      	ldr	r1, [pc, #260]	; (80a282c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a2726:	2201      	movs	r2, #1
 80a2728:	a801      	add	r0, sp, #4
 80a272a:	f001 f961 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a272e:	4641      	mov	r1, r8
 80a2730:	f7ff f904 	bl	80a193c <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80a2734:	b13f      	cbz	r7, 80a2746 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a2736:	493e      	ldr	r1, [pc, #248]	; (80a2830 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a2738:	2201      	movs	r2, #1
 80a273a:	a801      	add	r0, sp, #4
 80a273c:	f001 f958 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2740:	4639      	mov	r1, r7
 80a2742:	f7ff f8fb 	bl	80a193c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 80a2746:	b13d      	cbz	r5, 80a2758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a2748:	493a      	ldr	r1, [pc, #232]	; (80a2834 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a274a:	2201      	movs	r2, #1
 80a274c:	a801      	add	r0, sp, #4
 80a274e:	f001 f94f 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2752:	4629      	mov	r1, r5
 80a2754:	f7ff f8f2 	bl	80a193c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 80a2758:	7923      	ldrb	r3, [r4, #4]
 80a275a:	07df      	lsls	r7, r3, #31
 80a275c:	d50e      	bpl.n	80a277c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a275e:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a2760:	212f      	movs	r1, #47	; 0x2f
 80a2762:	4628      	mov	r0, r5
 80a2764:	f002 fee0 	bl	80a5528 <strrchr>
    if (s1) {
 80a2768:	b100      	cbz	r0, 80a276c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a276a:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 80a276c:	4932      	ldr	r1, [pc, #200]	; (80a2838 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a276e:	2201      	movs	r2, #1
 80a2770:	a801      	add	r0, sp, #4
 80a2772:	f001 f93d 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2776:	4629      	mov	r1, r5
 80a2778:	f7ff f8e0 	bl	80a193c <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 80a277c:	7923      	ldrb	r3, [r4, #4]
 80a277e:	079d      	lsls	r5, r3, #30
 80a2780:	d507      	bpl.n	80a2792 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a2782:	492e      	ldr	r1, [pc, #184]	; (80a283c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a2784:	2202      	movs	r2, #2
 80a2786:	a801      	add	r0, sp, #4
 80a2788:	f001 f932 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a278c:	68e1      	ldr	r1, [r4, #12]
 80a278e:	f001 f8b7 	bl	80a3900 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 80a2792:	7923      	ldrb	r3, [r4, #4]
 80a2794:	0758      	lsls	r0, r3, #29
 80a2796:	d516      	bpl.n	80a27c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a2798:	6925      	ldr	r5, [r4, #16]
 80a279a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a279c:	463b      	mov	r3, r7
 80a279e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a27a2:	b13a      	cbz	r2, 80a27b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
 80a27a4:	2a20      	cmp	r2, #32
 80a27a6:	d101      	bne.n	80a27ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a27a8:	461d      	mov	r5, r3
 80a27aa:	e001      	b.n	80a27b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
 80a27ac:	2a28      	cmp	r2, #40	; 0x28
 80a27ae:	d001      	beq.n	80a27b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a27b0:	461f      	mov	r7, r3
 80a27b2:	e7f3      	b.n	80a279c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 80a27b4:	2202      	movs	r2, #2
 80a27b6:	4922      	ldr	r1, [pc, #136]	; (80a2840 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a27b8:	a801      	add	r0, sp, #4
 80a27ba:	f001 f919 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a27be:	1b7a      	subs	r2, r7, r5
 80a27c0:	4629      	mov	r1, r5
 80a27c2:	f001 f924 	bl	80a3a0e <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 80a27c6:	7923      	ldrb	r3, [r4, #4]
 80a27c8:	0719      	lsls	r1, r3, #28
 80a27ca:	d507      	bpl.n	80a27dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
 80a27cc:	491d      	ldr	r1, [pc, #116]	; (80a2844 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a27ce:	2201      	movs	r2, #1
 80a27d0:	a801      	add	r0, sp, #4
 80a27d2:	f001 f90d 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a27d6:	6961      	ldr	r1, [r4, #20]
 80a27d8:	f001 f8a4 	bl	80a3924 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80a27dc:	7923      	ldrb	r3, [r4, #4]
 80a27de:	06da      	lsls	r2, r3, #27
 80a27e0:	d508      	bpl.n	80a27f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
 80a27e2:	2204      	movs	r2, #4
 80a27e4:	4918      	ldr	r1, [pc, #96]	; (80a2848 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a27e6:	eb0d 0002 	add.w	r0, sp, r2
 80a27ea:	f001 f901 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a27ee:	69a1      	ldr	r1, [r4, #24]
 80a27f0:	f001 f886 	bl	80a3900 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80a27f4:	7923      	ldrb	r3, [r4, #4]
 80a27f6:	069b      	lsls	r3, r3, #26
 80a27f8:	d507      	bpl.n	80a280a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
 80a27fa:	4914      	ldr	r1, [pc, #80]	; (80a284c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a27fc:	2206      	movs	r2, #6
 80a27fe:	a801      	add	r0, sp, #4
 80a2800:	f001 f8f6 	bl	80a39f0 <_ZN5spark10JSONWriter4nameEPKcj>
 80a2804:	69e1      	ldr	r1, [r4, #28]
 80a2806:	f7ff f899 	bl	80a193c <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80a280a:	a801      	add	r0, sp, #4
 80a280c:	f001 f855 	bl	80a38ba <_ZN5spark10JSONWriter9endObjectEv>
 80a2810:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a2812:	2202      	movs	r2, #2
 80a2814:	6803      	ldr	r3, [r0, #0]
 80a2816:	490e      	ldr	r1, [pc, #56]	; (80a2850 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80a2818:	68db      	ldr	r3, [r3, #12]
 80a281a:	4798      	blx	r3
}
 80a281c:	b005      	add	sp, #20
 80a281e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2822:	bf00      	nop
 80a2824:	20000394 	.word	0x20000394
 80a2828:	080a6198 	.word	0x080a6198
 80a282c:	080a61ca 	.word	0x080a61ca
 80a2830:	080a61e0 	.word	0x080a61e0
 80a2834:	080a6299 	.word	0x080a6299
 80a2838:	080a5edf 	.word	0x080a5edf
 80a283c:	080a6268 	.word	0x080a6268
 80a2840:	080a626b 	.word	0x080a626b
 80a2844:	080a61f5 	.word	0x080a61f5
 80a2848:	080a626e 	.word	0x080a626e
 80a284c:	080a6273 	.word	0x080a6273
 80a2850:	080a6265 	.word	0x080a6265

080a2854 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2854:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2856:	4b14      	ldr	r3, [pc, #80]	; (80a28a8 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2858:	4f14      	ldr	r7, [pc, #80]	; (80a28ac <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a285a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a285c:	4b14      	ldr	r3, [pc, #80]	; (80a28b0 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a285e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a2860:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a2862:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2864:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2866:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2868:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a286a:	d01b      	beq.n	80a28a4 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a286c:	a80a      	add	r0, sp, #40	; 0x28
 80a286e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a2872:	f002 fc95 	bl	80a51a0 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2876:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2878:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a287a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a287c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a2880:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a2882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a288a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a288e:	4c09      	ldr	r4, [pc, #36]	; (80a28b4 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2890:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2894:	ad01      	add	r5, sp, #4
 80a2896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a289e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a28a0:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a28a4:	b00b      	add	sp, #44	; 0x2c
 80a28a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a28a8:	20000320 	.word	0x20000320
 80a28ac:	2000031c 	.word	0x2000031c
 80a28b0:	20000318 	.word	0x20000318
 80a28b4:	200002f0 	.word	0x200002f0

080a28b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a28b8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a28ba:	2000      	movs	r0, #0
 80a28bc:	f7fe fc7e 	bl	80a11bc <spark_sync_time_pending>
 80a28c0:	b128      	cbz	r0, 80a28ce <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a28c2:	f7fe fc63 	bl	80a118c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a28c6:	f080 0001 	eor.w	r0, r0, #1
 80a28ca:	b2c0      	uxtb	r0, r0
 80a28cc:	bd08      	pop	{r3, pc}
 80a28ce:	2001      	movs	r0, #1
    }
 80a28d0:	bd08      	pop	{r3, pc}
	...

080a28d4 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a28d4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a28d6:	f7ff ffbd 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a28da:	4b02      	ldr	r3, [pc, #8]	; (80a28e4 <_ZN9TimeClass5monthEl+0x10>)
 80a28dc:	6918      	ldr	r0, [r3, #16]
}
 80a28de:	3001      	adds	r0, #1
 80a28e0:	bd08      	pop	{r3, pc}
 80a28e2:	bf00      	nop
 80a28e4:	200002f0 	.word	0x200002f0

080a28e8 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
 80a28e8:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
 80a28ea:	f7fe fa81 	bl	80a0df0 <HAL_RTC_Get_UnixTime>
 80a28ee:	4b03      	ldr	r3, [pc, #12]	; (80a28fc <_ZN9TimeClass5localEv+0x14>)
 80a28f0:	681b      	ldr	r3, [r3, #0]
 80a28f2:	4418      	add	r0, r3
 80a28f4:	4b02      	ldr	r3, [pc, #8]	; (80a2900 <_ZN9TimeClass5localEv+0x18>)
 80a28f6:	681b      	ldr	r3, [r3, #0]
}
 80a28f8:	4418      	add	r0, r3
 80a28fa:	bd08      	pop	{r3, pc}
 80a28fc:	20000320 	.word	0x20000320
 80a2900:	20000318 	.word	0x20000318

080a2904 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2904:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2906:	4909      	ldr	r1, [pc, #36]	; (80a292c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2908:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a290a:	f002 fa39 	bl	80a4d80 <__aeabi_fcmplt>
 80a290e:	b960      	cbnz	r0, 80a292a <_ZN9TimeClass4zoneEf+0x26>
 80a2910:	4907      	ldr	r1, [pc, #28]	; (80a2930 <_ZN9TimeClass4zoneEf+0x2c>)
 80a2912:	4620      	mov	r0, r4
 80a2914:	f002 fa52 	bl	80a4dbc <__aeabi_fcmpgt>
 80a2918:	b938      	cbnz	r0, 80a292a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a291a:	4906      	ldr	r1, [pc, #24]	; (80a2934 <_ZN9TimeClass4zoneEf+0x30>)
 80a291c:	4620      	mov	r0, r4
 80a291e:	f002 f891 	bl	80a4a44 <__aeabi_fmul>
 80a2922:	f002 fa55 	bl	80a4dd0 <__aeabi_f2iz>
 80a2926:	4b04      	ldr	r3, [pc, #16]	; (80a2938 <_ZN9TimeClass4zoneEf+0x34>)
 80a2928:	6018      	str	r0, [r3, #0]
 80a292a:	bd10      	pop	{r4, pc}
 80a292c:	c1400000 	.word	0xc1400000
 80a2930:	41600000 	.word	0x41600000
 80a2934:	45610000 	.word	0x45610000
 80a2938:	20000320 	.word	0x20000320

080a293c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a293c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a293e:	2000      	movs	r0, #0
 80a2940:	f7fe fa5e 	bl	80a0e00 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2944:	4604      	mov	r4, r0
 80a2946:	b968      	cbnz	r0, 80a2964 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2948:	f7fe fb7c 	bl	80a1044 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a294c:	2801      	cmp	r0, #1
 80a294e:	d10b      	bne.n	80a2968 <_ZN9TimeClass7isValidEv+0x2c>
 80a2950:	4620      	mov	r0, r4
 80a2952:	f7fe fb9f 	bl	80a1094 <system_thread_get_state>
 80a2956:	b938      	cbnz	r0, 80a2968 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2958:	f7ff ffae 	bl	80a28b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a295c:	b930      	cbnz	r0, 80a296c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a295e:	f7fe fc05 	bl	80a116c <spark_process>
 80a2962:	e7f9      	b.n	80a2958 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2964:	2001      	movs	r0, #1
 80a2966:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2968:	2000      	movs	r0, #0
 80a296a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a296c:	f7ff ffa4 	bl	80a28b8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2970:	2000      	movs	r0, #0
 80a2972:	f7fe fa45 	bl	80a0e00 <HAL_RTC_Time_Is_Valid>
 80a2976:	3000      	adds	r0, #0
 80a2978:	bf18      	it	ne
 80a297a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a297c:	bd10      	pop	{r4, pc}

080a297e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a297e:	b508      	push	{r3, lr}
    (void)isValid();
 80a2980:	f7ff ffdc 	bl	80a293c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2988:	f7fe ba32 	b.w	80a0df0 <HAL_RTC_Get_UnixTime>

080a298c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a298c:	b508      	push	{r3, lr}
	return hour(now());
 80a298e:	f7ff fff6 	bl	80a297e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2992:	f7ff ff5f 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a2996:	4b01      	ldr	r3, [pc, #4]	; (80a299c <_ZN9TimeClass4hourEv+0x10>)
 80a2998:	6898      	ldr	r0, [r3, #8]
 80a299a:	bd08      	pop	{r3, pc}
 80a299c:	200002f0 	.word	0x200002f0

080a29a0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a29a0:	b508      	push	{r3, lr}
	return minute(now());
 80a29a2:	f7ff ffec 	bl	80a297e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a29a6:	f7ff ff55 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a29aa:	4b01      	ldr	r3, [pc, #4]	; (80a29b0 <_ZN9TimeClass6minuteEv+0x10>)
 80a29ac:	6858      	ldr	r0, [r3, #4]
 80a29ae:	bd08      	pop	{r3, pc}
 80a29b0:	200002f0 	.word	0x200002f0

080a29b4 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a29b4:	b508      	push	{r3, lr}
	return second(now());
 80a29b6:	f7ff ffe2 	bl	80a297e <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a29ba:	f7ff ff4b 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a29be:	4b01      	ldr	r3, [pc, #4]	; (80a29c4 <_ZN9TimeClass6secondEv+0x10>)
 80a29c0:	6818      	ldr	r0, [r3, #0]
 80a29c2:	bd08      	pop	{r3, pc}
 80a29c4:	200002f0 	.word	0x200002f0

080a29c8 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a29c8:	b508      	push	{r3, lr}
	return day(now());
 80a29ca:	f7ff ffd8 	bl	80a297e <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a29ce:	f7ff ff41 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a29d2:	4b01      	ldr	r3, [pc, #4]	; (80a29d8 <_ZN9TimeClass3dayEv+0x10>)
 80a29d4:	68d8      	ldr	r0, [r3, #12]
 80a29d6:	bd08      	pop	{r3, pc}
 80a29d8:	200002f0 	.word	0x200002f0

080a29dc <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a29dc:	b508      	push	{r3, lr}
	return month(now());
 80a29de:	f7ff ffce 	bl	80a297e <_ZN9TimeClass3nowEv>
}
 80a29e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a29e6:	f7ff bf75 	b.w	80a28d4 <_ZN9TimeClass5monthEl>
	...

080a29ec <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80a29ec:	b508      	push	{r3, lr}
	return year(now());
 80a29ee:	f7ff ffc6 	bl	80a297e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a29f2:	f7ff ff2f 	bl	80a2854 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80a29f6:	4b01      	ldr	r3, [pc, #4]	; (80a29fc <_ZN9TimeClass4yearEv+0x10>)
 80a29f8:	6958      	ldr	r0, [r3, #20]
 80a29fa:	bd08      	pop	{r3, pc}
 80a29fc:	200002f0 	.word	0x200002f0

080a2a00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2a00:	4b02      	ldr	r3, [pc, #8]	; (80a2a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2a02:	681a      	ldr	r2, [r3, #0]
 80a2a04:	4b02      	ldr	r3, [pc, #8]	; (80a2a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2a06:	601a      	str	r2, [r3, #0]
 80a2a08:	4770      	bx	lr
 80a2a0a:	bf00      	nop
 80a2a0c:	20000010 	.word	0x20000010
 80a2a10:	20000314 	.word	0x20000314

080a2a14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2a14:	2100      	movs	r1, #0
 80a2a16:	f7fe bb25 	b.w	80a1064 <system_delay_ms>

080a2a1a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2a1a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2a1c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2a1e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2a20:	b113      	cbz	r3, 80a2a28 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2a22:	2203      	movs	r2, #3
 80a2a24:	4601      	mov	r1, r0
 80a2a26:	4798      	blx	r3
    }
 80a2a28:	4620      	mov	r0, r4
 80a2a2a:	bd10      	pop	{r4, pc}

080a2a2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2a2c:	b510      	push	{r4, lr}
 80a2a2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2a30:	f7ff fff3 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
 80a2a34:	4620      	mov	r0, r4
 80a2a36:	bd10      	pop	{r4, pc}

080a2a38 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a2a38:	b513      	push	{r0, r1, r4, lr}
 80a2a3a:	460b      	mov	r3, r1
 80a2a3c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2a3e:	c803      	ldmia	r0, {r0, r1}
 80a2a40:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2a48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2a4c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a2a50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2a54:	b002      	add	sp, #8
 80a2a56:	bd10      	pop	{r4, pc}

080a2a58 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2a58:	4803      	ldr	r0, [pc, #12]	; (80a2a68 <_GLOBAL__sub_I_RGB+0x10>)
 80a2a5a:	2300      	movs	r3, #0
 80a2a5c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2a5e:	4a03      	ldr	r2, [pc, #12]	; (80a2a6c <_GLOBAL__sub_I_RGB+0x14>)
 80a2a60:	4903      	ldr	r1, [pc, #12]	; (80a2a70 <_GLOBAL__sub_I_RGB+0x18>)
 80a2a62:	f001 b90f 	b.w	80a3c84 <__aeabi_atexit>
 80a2a66:	bf00      	nop
 80a2a68:	20000324 	.word	0x20000324
 80a2a6c:	200000c8 	.word	0x200000c8
 80a2a70:	080a2a2d 	.word	0x080a2a2d

080a2a74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2a74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2a76:	4b14      	ldr	r3, [pc, #80]	; (80a2ac8 <serialEventRun+0x54>)
 80a2a78:	b133      	cbz	r3, 80a2a88 <serialEventRun+0x14>
 80a2a7a:	f000 fc25 	bl	80a32c8 <_Z16_fetch_usbserialv>
 80a2a7e:	6803      	ldr	r3, [r0, #0]
 80a2a80:	691b      	ldr	r3, [r3, #16]
 80a2a82:	4798      	blx	r3
 80a2a84:	2800      	cmp	r0, #0
 80a2a86:	dc16      	bgt.n	80a2ab6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2a88:	4b10      	ldr	r3, [pc, #64]	; (80a2acc <serialEventRun+0x58>)
 80a2a8a:	b133      	cbz	r3, 80a2a9a <serialEventRun+0x26>
 80a2a8c:	f000 fd00 	bl	80a3490 <_Z22__fetch_global_Serial1v>
 80a2a90:	6803      	ldr	r3, [r0, #0]
 80a2a92:	691b      	ldr	r3, [r3, #16]
 80a2a94:	4798      	blx	r3
 80a2a96:	2800      	cmp	r0, #0
 80a2a98:	dc10      	bgt.n	80a2abc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2a9a:	4b0d      	ldr	r3, [pc, #52]	; (80a2ad0 <serialEventRun+0x5c>)
 80a2a9c:	b10b      	cbz	r3, 80a2aa2 <serialEventRun+0x2e>
 80a2a9e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2aa2:	4b0c      	ldr	r3, [pc, #48]	; (80a2ad4 <serialEventRun+0x60>)
 80a2aa4:	b17b      	cbz	r3, 80a2ac6 <serialEventRun+0x52>
 80a2aa6:	f000 fc3d 	bl	80a3324 <_Z17_fetch_usbserial1v>
 80a2aaa:	6803      	ldr	r3, [r0, #0]
 80a2aac:	691b      	ldr	r3, [r3, #16]
 80a2aae:	4798      	blx	r3
 80a2ab0:	2800      	cmp	r0, #0
 80a2ab2:	dc06      	bgt.n	80a2ac2 <serialEventRun+0x4e>
 80a2ab4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2ab6:	f3af 8000 	nop.w
 80a2aba:	e7e5      	b.n	80a2a88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2abc:	f3af 8000 	nop.w
 80a2ac0:	e7eb      	b.n	80a2a9a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2ac2:	f3af 8000 	nop.w
 80a2ac6:	bd08      	pop	{r3, pc}
	...

080a2ad8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2ad8:	b508      	push	{r3, lr}
	serialEventRun();
 80a2ada:	f7ff ffcb 	bl	80a2a74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2ade:	f7fe f97f 	bl	80a0de0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2ae2:	4b01      	ldr	r3, [pc, #4]	; (80a2ae8 <_post_loop+0x10>)
 80a2ae4:	6018      	str	r0, [r3, #0]
 80a2ae6:	bd08      	pop	{r3, pc}
 80a2ae8:	200003ac 	.word	0x200003ac

080a2aec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2aec:	4802      	ldr	r0, [pc, #8]	; (80a2af8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2aee:	4a03      	ldr	r2, [pc, #12]	; (80a2afc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2af0:	4903      	ldr	r1, [pc, #12]	; (80a2b00 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2af2:	1a12      	subs	r2, r2, r0
 80a2af4:	f002 bc60 	b.w	80a53b8 <memcpy>
 80a2af8:	40024000 	.word	0x40024000
 80a2afc:	40024004 	.word	0x40024004
 80a2b00:	080a6698 	.word	0x080a6698

080a2b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2b04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b06:	2300      	movs	r3, #0
 80a2b08:	9300      	str	r3, [sp, #0]
 80a2b0a:	461a      	mov	r2, r3
 80a2b0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b10:	f7fe fad2 	bl	80a10b8 <system_ctrl_set_result>
}
 80a2b14:	b003      	add	sp, #12
 80a2b16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2b1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2b1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2b1e:	8843      	ldrh	r3, [r0, #2]
 80a2b20:	2b0a      	cmp	r3, #10
 80a2b22:	d008      	beq.n	80a2b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2b24:	2b50      	cmp	r3, #80	; 0x50
 80a2b26:	d109      	bne.n	80a2b3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2b28:	4b09      	ldr	r3, [pc, #36]	; (80a2b50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2b2a:	681b      	ldr	r3, [r3, #0]
 80a2b2c:	b13b      	cbz	r3, 80a2b3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2b2e:	b003      	add	sp, #12
 80a2b30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2b34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2b36:	f7ff ffe5 	bl	80a2b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2b3a:	e006      	b.n	80a2b4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b3c:	2300      	movs	r3, #0
 80a2b3e:	9300      	str	r3, [sp, #0]
 80a2b40:	461a      	mov	r2, r3
 80a2b42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b46:	f7fe fab7 	bl	80a10b8 <system_ctrl_set_result>
        break;
    }
}
 80a2b4a:	b003      	add	sp, #12
 80a2b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2b50:	20000334 	.word	0x20000334

080a2b54 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2b54:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2b56:	4c10      	ldr	r4, [pc, #64]	; (80a2b98 <module_user_init_hook+0x44>)
 80a2b58:	4d10      	ldr	r5, [pc, #64]	; (80a2b9c <module_user_init_hook+0x48>)
 80a2b5a:	6823      	ldr	r3, [r4, #0]
 80a2b5c:	42ab      	cmp	r3, r5
 80a2b5e:	4b10      	ldr	r3, [pc, #64]	; (80a2ba0 <module_user_init_hook+0x4c>)
 80a2b60:	bf0c      	ite	eq
 80a2b62:	2201      	moveq	r2, #1
 80a2b64:	2200      	movne	r2, #0
 80a2b66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2b68:	d002      	beq.n	80a2b70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2b6a:	f7ff ffbf 	bl	80a2aec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2b6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2b70:	f7fe f926 	bl	80a0dc0 <HAL_RNG_GetRandomNumber>
 80a2b74:	4604      	mov	r4, r0
    srand(seed);
 80a2b76:	f002 fc4d 	bl	80a5414 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2b7a:	4b0a      	ldr	r3, [pc, #40]	; (80a2ba4 <module_user_init_hook+0x50>)
 80a2b7c:	b113      	cbz	r3, 80a2b84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2b7e:	4620      	mov	r0, r4
 80a2b80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2b84:	2100      	movs	r1, #0
 80a2b86:	4807      	ldr	r0, [pc, #28]	; (80a2ba4 <module_user_init_hook+0x50>)
 80a2b88:	f7fe fb20 	bl	80a11cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2b90:	2100      	movs	r1, #0
 80a2b92:	4805      	ldr	r0, [pc, #20]	; (80a2ba8 <module_user_init_hook+0x54>)
 80a2b94:	f7fe ba86 	b.w	80a10a4 <system_ctrl_set_app_request_handler>
 80a2b98:	40024000 	.word	0x40024000
 80a2b9c:	9a271c1e 	.word	0x9a271c1e
 80a2ba0:	20000338 	.word	0x20000338
 80a2ba4:	00000000 	.word	0x00000000
 80a2ba8:	080a2b1d 	.word	0x080a2b1d

080a2bac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2bac:	4770      	bx	lr

080a2bae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2bae:	2000      	movs	r0, #0
 80a2bb0:	4770      	bx	lr

080a2bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2bb2:	b510      	push	{r4, lr}
 80a2bb4:	4604      	mov	r4, r0
 80a2bb6:	2110      	movs	r1, #16
 80a2bb8:	f001 f872 	bl	80a3ca0 <_ZdlPvj>
 80a2bbc:	4620      	mov	r0, r4
 80a2bbe:	bd10      	pop	{r4, pc}

080a2bc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2bc0:	b508      	push	{r3, lr}
      { delete this; }
 80a2bc2:	b108      	cbz	r0, 80a2bc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a2bc4:	f7ff fff5 	bl	80a2bb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2bc8:	bd08      	pop	{r3, pc}

080a2bca <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2bca:	2200      	movs	r2, #0
 80a2bcc:	6002      	str	r2, [r0, #0]
 80a2bce:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a2bd2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2bd4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2bd6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a2bda:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2bdc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2bde:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2be0:	680c      	ldr	r4, [r1, #0]
 80a2be2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2be4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2be6:	bd10      	pop	{r4, pc}

080a2be8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2be8:	b510      	push	{r4, lr}
 80a2bea:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2bec:	6800      	ldr	r0, [r0, #0]
 80a2bee:	f7fe fafd 	bl	80a11ec <free>
}
 80a2bf2:	4620      	mov	r0, r4
 80a2bf4:	bd10      	pop	{r4, pc}

080a2bf6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a2bf6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2bf8:	68c4      	ldr	r4, [r0, #12]
 80a2bfa:	b1f4      	cbz	r4, 80a2c3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2bfc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2bfe:	2b02      	cmp	r3, #2
 80a2c00:	d103      	bne.n	80a2c0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2c02:	f104 000c 	add.w	r0, r4, #12
 80a2c06:	f7ff ffef 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2c0a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2c0c:	b135      	cbz	r5, 80a2c1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2c0e:	4628      	mov	r0, r5
 80a2c10:	f7ff ff03 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
 80a2c14:	2110      	movs	r1, #16
 80a2c16:	4628      	mov	r0, r5
 80a2c18:	f001 f842 	bl	80a3ca0 <_ZdlPvj>
 80a2c1c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2c1e:	b135      	cbz	r5, 80a2c2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2c20:	4628      	mov	r0, r5
 80a2c22:	f7ff fefa 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
 80a2c26:	2110      	movs	r1, #16
 80a2c28:	4628      	mov	r0, r5
 80a2c2a:	f001 f839 	bl	80a3ca0 <_ZdlPvj>
 80a2c2e:	4620      	mov	r0, r4
 80a2c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2c34:	2114      	movs	r1, #20
 80a2c36:	f001 b833 	b.w	80a3ca0 <_ZdlPvj>
 80a2c3a:	bd38      	pop	{r3, r4, r5, pc}

080a2c3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2c3c:	b513      	push	{r0, r1, r4, lr}
 80a2c3e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2c40:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2c44:	2300      	movs	r3, #0
 80a2c46:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2c48:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2c4a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2c4c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2c4e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2c50:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2c52:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2c54:	f7fe ff82 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c58:	4620      	mov	r0, r4
 80a2c5a:	b002      	add	sp, #8
 80a2c5c:	bd10      	pop	{r4, pc}

080a2c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2c60:	460c      	mov	r4, r1
 80a2c62:	4606      	mov	r6, r0
 80a2c64:	460f      	mov	r7, r1
 80a2c66:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2c6a:	ad02      	add	r5, sp, #8
 80a2c6c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2c70:	4621      	mov	r1, r4
 80a2c72:	a801      	add	r0, sp, #4
 80a2c74:	f7fe ff88 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2c78:	4629      	mov	r1, r5
 80a2c7a:	4630      	mov	r0, r6
 80a2c7c:	f7ff ffde 	bl	80a2c3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2c80:	a801      	add	r0, sp, #4
 80a2c82:	f7fe ff6b 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c86:	4620      	mov	r0, r4
 80a2c88:	f7fe ff68 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2c8c:	4638      	mov	r0, r7
 80a2c8e:	2108      	movs	r1, #8
 80a2c90:	f001 f806 	bl	80a3ca0 <_ZdlPvj>
        return p;
    }
 80a2c94:	4630      	mov	r0, r6
 80a2c96:	b003      	add	sp, #12
 80a2c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2c9c:	b538      	push	{r3, r4, r5, lr}
 80a2c9e:	2300      	movs	r3, #0
 80a2ca0:	4604      	mov	r4, r0
 80a2ca2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2ca4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2ca6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2ca8:	f7fd f9f9 	bl	80a009e <_Znwj>
 80a2cac:	b128      	cbz	r0, 80a2cba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2cae:	2301      	movs	r3, #1
 80a2cb0:	6043      	str	r3, [r0, #4]
 80a2cb2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2cb4:	4b02      	ldr	r3, [pc, #8]	; (80a2cc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2cb6:	60c5      	str	r5, [r0, #12]
 80a2cb8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2cba:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2cbc:	4620      	mov	r0, r4
 80a2cbe:	bd38      	pop	{r3, r4, r5, pc}
 80a2cc0:	080a6318 	.word	0x080a6318

080a2cc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2cc4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2cc6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2cc8:	b90a      	cbnz	r2, 80a2cce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2cca:	f000 fffc 	bl	80a3cc6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2cce:	68c3      	ldr	r3, [r0, #12]
    }
 80a2cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2cd4:	4718      	bx	r3

080a2cd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2cd6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2cd8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2cda:	f100 0110 	add.w	r1, r0, #16
 80a2cde:	f7ff fff1 	bl	80a2cc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2ce2:	bd08      	pop	{r3, pc}

080a2ce4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2ce4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2ce6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2ce8:	b90a      	cbnz	r2, 80a2cee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2cea:	f000 ffec 	bl	80a3cc6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2cee:	68c3      	ldr	r3, [r0, #12]
    }
 80a2cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2cf4:	4718      	bx	r3

080a2cf6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2cf6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2cf8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2cfa:	f100 0110 	add.w	r1, r0, #16
 80a2cfe:	f7ff fff1 	bl	80a2ce4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2d02:	bd08      	pop	{r3, pc}

080a2d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2d04:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d06:	2300      	movs	r3, #0
 80a2d08:	6083      	str	r3, [r0, #8]
 80a2d0a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2d0c:	4604      	mov	r4, r0
 80a2d0e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2d10:	b12b      	cbz	r3, 80a2d1e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2d12:	2202      	movs	r2, #2
 80a2d14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2d16:	68eb      	ldr	r3, [r5, #12]
 80a2d18:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2d1a:	68ab      	ldr	r3, [r5, #8]
 80a2d1c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2d1e:	4620      	mov	r0, r4
 80a2d20:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d26:	b089      	sub	sp, #36	; 0x24
 80a2d28:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2d2a:	4668      	mov	r0, sp
 80a2d2c:	f7ff ff4d 	bl	80a2bca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2d30:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2d34:	2300      	movs	r3, #0
 80a2d36:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2d3a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2d3e:	2b00      	cmp	r3, #0
 80a2d40:	d103      	bne.n	80a2d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a2d42:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a2d46:	2900      	cmp	r1, #0
 80a2d48:	d1f7      	bne.n	80a2d3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2d4a:	d002      	beq.n	80a2d52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2d4c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2d50:	e063      	b.n	80a2e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2d52:	f114 050c 	adds.w	r5, r4, #12
 80a2d56:	d003      	beq.n	80a2d60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2d58:	4669      	mov	r1, sp
 80a2d5a:	4628      	mov	r0, r5
 80a2d5c:	f7ff ff35 	bl	80a2bca <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2d60:	f3bf 8f5f 	dmb	sy
 80a2d64:	2301      	movs	r3, #1
 80a2d66:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2d68:	f3bf 8f5f 	dmb	sy
 80a2d6c:	f104 0308 	add.w	r3, r4, #8
 80a2d70:	2000      	movs	r0, #0
 80a2d72:	e853 6f00 	ldrex	r6, [r3]
 80a2d76:	e843 0200 	strex	r2, r0, [r3]
 80a2d7a:	2a00      	cmp	r2, #0
 80a2d7c:	d1f9      	bne.n	80a2d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2d7e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2d82:	2e00      	cmp	r6, #0
 80a2d84:	d049      	beq.n	80a2e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2d86:	f7fe f975 	bl	80a1074 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2d8a:	b120      	cbz	r0, 80a2d96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2d8c:	4629      	mov	r1, r5
 80a2d8e:	4630      	mov	r0, r6
 80a2d90:	f7ff ff98 	bl	80a2cc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2d94:	e03a      	b.n	80a2e0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2d96:	4631      	mov	r1, r6
 80a2d98:	a802      	add	r0, sp, #8
 80a2d9a:	f7ff ffb3 	bl	80a2d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2d9e:	68e0      	ldr	r0, [r4, #12]
 80a2da0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2da4:	b108      	cbz	r0, 80a2daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a2da6:	f002 fb87 	bl	80a54b8 <strdup>
 80a2daa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2dac:	2010      	movs	r0, #16
 80a2dae:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2db2:	f7fd f974 	bl	80a009e <_Znwj>
 80a2db6:	4605      	mov	r5, r0
 80a2db8:	b1e8      	cbz	r0, 80a2df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2dba:	2700      	movs	r7, #0
 80a2dbc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2dbe:	2018      	movs	r0, #24
 80a2dc0:	f7fd f96d 	bl	80a009e <_Znwj>
 80a2dc4:	4604      	mov	r4, r0
 80a2dc6:	b188      	cbz	r0, 80a2dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2dc8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2dca:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2dcc:	a802      	add	r0, sp, #8
 80a2dce:	f7ff fe33 	bl	80a2a38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2dd2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2dd4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2dd6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2dd8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2dda:	9204      	str	r2, [sp, #16]
 80a2ddc:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2dde:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2de0:	60e3      	str	r3, [r4, #12]
 80a2de2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2de6:	9205      	str	r2, [sp, #20]
 80a2de8:	f7ff feef 	bl	80a2bca <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2dec:	4b0d      	ldr	r3, [pc, #52]	; (80a2e24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2dee:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2df0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2df2:	4b0d      	ldr	r3, [pc, #52]	; (80a2e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2df4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a2df6:	a806      	add	r0, sp, #24
 80a2df8:	f7ff fef6 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2dfc:	a802      	add	r0, sp, #8
 80a2dfe:	f7ff fe0c 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2e02:	2200      	movs	r2, #0
 80a2e04:	4629      	mov	r1, r5
 80a2e06:	4809      	ldr	r0, [pc, #36]	; (80a2e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2e08:	f7fe f93c 	bl	80a1084 <application_thread_invoke>
 80a2e0c:	4630      	mov	r0, r6
 80a2e0e:	f7ff fe04 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2e12:	2110      	movs	r1, #16
 80a2e14:	4630      	mov	r0, r6
 80a2e16:	f000 ff43 	bl	80a3ca0 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2e1a:	4668      	mov	r0, sp
 80a2e1c:	f7ff fee4 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
    }
 80a2e20:	b009      	add	sp, #36	; 0x24
 80a2e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2e24:	080a2cd7 	.word	0x080a2cd7
 80a2e28:	080a2f4d 	.word	0x080a2f4d
 80a2e2c:	080a3511 	.word	0x080a3511

080a2e30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2e34:	b08b      	sub	sp, #44	; 0x2c
 80a2e36:	4606      	mov	r6, r0
 80a2e38:	460f      	mov	r7, r1
 80a2e3a:	4690      	mov	r8, r2
 80a2e3c:	4699      	mov	r9, r3
 80a2e3e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2e42:	f7fe f9a3 	bl	80a118c <spark_cloud_flag_connected>
 80a2e46:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a2e48:	4683      	mov	fp, r0
 80a2e4a:	bb30      	cbnz	r0, 80a2e9a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2e4c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2e50:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2e52:	a905      	add	r1, sp, #20
 80a2e54:	4628      	mov	r0, r5
 80a2e56:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2e5a:	f7ff feb6 	bl	80a2bca <_ZN8particle5ErrorC1EOS0_>
 80a2e5e:	2014      	movs	r0, #20
 80a2e60:	f7fd f91d 	bl	80a009e <_Znwj>
 80a2e64:	4604      	mov	r4, r0
 80a2e66:	b158      	cbz	r0, 80a2e80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2e68:	2302      	movs	r3, #2
 80a2e6a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2e6c:	2301      	movs	r3, #1
 80a2e6e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2e70:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2e74:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2e78:	4629      	mov	r1, r5
 80a2e7a:	300c      	adds	r0, #12
 80a2e7c:	f7ff fea5 	bl	80a2bca <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2e80:	4630      	mov	r0, r6
 80a2e82:	4621      	mov	r1, r4
 80a2e84:	f840 4b04 	str.w	r4, [r0], #4
 80a2e88:	f7ff ff08 	bl	80a2c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2e8c:	4628      	mov	r0, r5
 80a2e8e:	f7ff feab 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2e92:	a805      	add	r0, sp, #20
 80a2e94:	f7ff fea8 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
 80a2e98:	e052      	b.n	80a2f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2e9a:	2400      	movs	r4, #0
 80a2e9c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2e9e:	2014      	movs	r0, #20
 80a2ea0:	606c      	str	r4, [r5, #4]
 80a2ea2:	60ac      	str	r4, [r5, #8]
 80a2ea4:	9307      	str	r3, [sp, #28]
 80a2ea6:	f7fd f8fa 	bl	80a009e <_Znwj>
 80a2eaa:	4601      	mov	r1, r0
 80a2eac:	b118      	cbz	r0, 80a2eb6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2eae:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2eb0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2eb2:	6044      	str	r4, [r0, #4]
 80a2eb4:	6084      	str	r4, [r0, #8]
 80a2eb6:	a804      	add	r0, sp, #16
 80a2eb8:	9103      	str	r1, [sp, #12]
 80a2eba:	f7ff feef 	bl	80a2c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2ebe:	4b22      	ldr	r3, [pc, #136]	; (80a2f48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2ec0:	2008      	movs	r0, #8
 80a2ec2:	9308      	str	r3, [sp, #32]
 80a2ec4:	f7fd f8eb 	bl	80a009e <_Znwj>
 80a2ec8:	4604      	mov	r4, r0
 80a2eca:	b128      	cbz	r0, 80a2ed8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2ecc:	9b03      	ldr	r3, [sp, #12]
 80a2ece:	a904      	add	r1, sp, #16
 80a2ed0:	f840 3b04 	str.w	r3, [r0], #4
 80a2ed4:	f7fe fe58 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2ed8:	9500      	str	r5, [sp, #0]
 80a2eda:	fa5f f38a 	uxtb.w	r3, sl
 80a2ede:	464a      	mov	r2, r9
 80a2ee0:	4641      	mov	r1, r8
 80a2ee2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2ee4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2ee6:	f7fe f959 	bl	80a119c <spark_send_event>
 80a2eea:	b920      	cbnz	r0, 80a2ef6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2eec:	9b03      	ldr	r3, [sp, #12]
 80a2eee:	785b      	ldrb	r3, [r3, #1]
 80a2ef0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2ef4:	b183      	cbz	r3, 80a2f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a2ef6:	9b03      	ldr	r3, [sp, #12]
 80a2ef8:	a904      	add	r1, sp, #16
 80a2efa:	a806      	add	r0, sp, #24
 80a2efc:	9305      	str	r3, [sp, #20]
 80a2efe:	f7fe fe43 	bl	80a1b88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2f02:	a905      	add	r1, sp, #20
 80a2f04:	4630      	mov	r0, r6
 80a2f06:	f7ff fe99 	bl	80a2c3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2f0a:	a806      	add	r0, sp, #24
 80a2f0c:	f7fe fe26 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2f10:	a804      	add	r0, sp, #16
 80a2f12:	f7fe fe23 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2f16:	e013      	b.n	80a2f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2f18:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2f1c:	a905      	add	r1, sp, #20
 80a2f1e:	a803      	add	r0, sp, #12
 80a2f20:	9205      	str	r2, [sp, #20]
 80a2f22:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2f26:	f7ff fefd 	bl	80a2d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2f2a:	a805      	add	r0, sp, #20
 80a2f2c:	f7ff fe5c 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2f30:	a805      	add	r0, sp, #20
 80a2f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2f34:	f7ff fe93 	bl	80a2c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2f38:	a806      	add	r0, sp, #24
 80a2f3a:	f7fe fe0f 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2f3e:	e7da      	b.n	80a2ef6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a2f40:	4630      	mov	r0, r6
 80a2f42:	b00b      	add	sp, #44	; 0x2c
 80a2f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f48:	080a30bd 	.word	0x080a30bd

080a2f4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2f4c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2f50:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2f52:	d006      	beq.n	80a2f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a2f54:	2a03      	cmp	r2, #3
 80a2f56:	d017      	beq.n	80a2f88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2f58:	2a01      	cmp	r2, #1
 80a2f5a:	d122      	bne.n	80a2fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2f5c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2f5e:	6003      	str	r3, [r0, #0]
	      break;
 80a2f60:	e01f      	b.n	80a2fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2f62:	2018      	movs	r0, #24
 80a2f64:	680e      	ldr	r6, [r1, #0]
 80a2f66:	f7fd f89a 	bl	80a009e <_Znwj>
 80a2f6a:	4605      	mov	r5, r0
 80a2f6c:	b150      	cbz	r0, 80a2f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2f6e:	4631      	mov	r1, r6
 80a2f70:	f7ff fec8 	bl	80a2d04 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2f74:	6930      	ldr	r0, [r6, #16]
 80a2f76:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2f7a:	b108      	cbz	r0, 80a2f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2f7c:	f002 fa9c 	bl	80a54b8 <strdup>
 80a2f80:	6128      	str	r0, [r5, #16]
 80a2f82:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2f84:	6025      	str	r5, [r4, #0]
 80a2f86:	e00c      	b.n	80a2fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f88:	6804      	ldr	r4, [r0, #0]
 80a2f8a:	b154      	cbz	r4, 80a2fa2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2f8c:	f104 0010 	add.w	r0, r4, #16
 80a2f90:	f7ff fe2a 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2f94:	4620      	mov	r0, r4
 80a2f96:	f7ff fd40 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f9a:	2118      	movs	r1, #24
 80a2f9c:	4620      	mov	r0, r4
 80a2f9e:	f000 fe7f 	bl	80a3ca0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2fa2:	2000      	movs	r0, #0
 80a2fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2fa6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2fa6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2fa8:	2300      	movs	r3, #0
 80a2faa:	6083      	str	r3, [r0, #8]
 80a2fac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2fae:	4604      	mov	r4, r0
 80a2fb0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2fb2:	b12b      	cbz	r3, 80a2fc0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2fb4:	2202      	movs	r2, #2
 80a2fb6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2fb8:	68eb      	ldr	r3, [r5, #12]
 80a2fba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2fbc:	68ab      	ldr	r3, [r5, #8]
 80a2fbe:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2fc0:	4620      	mov	r0, r4
 80a2fc2:	bd38      	pop	{r3, r4, r5, pc}

080a2fc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2fc4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2fc6:	b570      	push	{r4, r5, r6, lr}
 80a2fc8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2fca:	d006      	beq.n	80a2fda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2fcc:	2a03      	cmp	r2, #3
 80a2fce:	d011      	beq.n	80a2ff4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2fd0:	2a01      	cmp	r2, #1
 80a2fd2:	d118      	bne.n	80a3006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2fd4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2fd6:	6003      	str	r3, [r0, #0]
	      break;
 80a2fd8:	e015      	b.n	80a3006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2fda:	2014      	movs	r0, #20
 80a2fdc:	680e      	ldr	r6, [r1, #0]
 80a2fde:	f7fd f85e 	bl	80a009e <_Znwj>
 80a2fe2:	4605      	mov	r5, r0
 80a2fe4:	b120      	cbz	r0, 80a2ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2fe6:	4631      	mov	r1, r6
 80a2fe8:	f7ff ffdd 	bl	80a2fa6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2fec:	7c33      	ldrb	r3, [r6, #16]
 80a2fee:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2ff0:	6025      	str	r5, [r4, #0]
 80a2ff2:	e008      	b.n	80a3006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2ff4:	6804      	ldr	r4, [r0, #0]
 80a2ff6:	b134      	cbz	r4, 80a3006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2ff8:	4620      	mov	r0, r4
 80a2ffa:	f7ff fd0e 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2ffe:	2114      	movs	r1, #20
 80a3000:	4620      	mov	r0, r4
 80a3002:	f000 fe4d 	bl	80a3ca0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3006:	2000      	movs	r0, #0
 80a3008:	bd70      	pop	{r4, r5, r6, pc}
	...

080a300c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a300e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3010:	f3bf 8f5f 	dmb	sy
 80a3014:	b087      	sub	sp, #28
 80a3016:	2300      	movs	r3, #0
 80a3018:	e850 6f00 	ldrex	r6, [r0]
 80a301c:	e840 3200 	strex	r2, r3, [r0]
 80a3020:	2a00      	cmp	r2, #0
 80a3022:	d1f9      	bne.n	80a3018 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a3024:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3028:	2e00      	cmp	r6, #0
 80a302a:	d03f      	beq.n	80a30ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a302c:	4618      	mov	r0, r3
 80a302e:	f7fe f821 	bl	80a1074 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3032:	4607      	mov	r7, r0
 80a3034:	b120      	cbz	r0, 80a3040 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3036:	4621      	mov	r1, r4
 80a3038:	4630      	mov	r0, r6
 80a303a:	f7ff fe53 	bl	80a2ce4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a303e:	e02e      	b.n	80a309e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3040:	4631      	mov	r1, r6
 80a3042:	a801      	add	r0, sp, #4
 80a3044:	f7ff ffaf 	bl	80a2fa6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3048:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a304a:	2010      	movs	r0, #16
 80a304c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a3050:	f7fd f825 	bl	80a009e <_Znwj>
 80a3054:	4605      	mov	r5, r0
 80a3056:	b1d0      	cbz	r0, 80a308e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3058:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a305a:	2014      	movs	r0, #20
 80a305c:	f7fd f81f 	bl	80a009e <_Znwj>
 80a3060:	4604      	mov	r4, r0
 80a3062:	b178      	cbz	r0, 80a3084 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3064:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3066:	4601      	mov	r1, r0
 80a3068:	a801      	add	r0, sp, #4
 80a306a:	f7ff fce5 	bl	80a2a38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a306e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3070:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3072:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3074:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3076:	9203      	str	r2, [sp, #12]
 80a3078:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a307a:	60e3      	str	r3, [r4, #12]
 80a307c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3080:	9204      	str	r2, [sp, #16]
 80a3082:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3084:	4b0a      	ldr	r3, [pc, #40]	; (80a30b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3086:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3088:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a308a:	4b0a      	ldr	r3, [pc, #40]	; (80a30b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a308c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a308e:	a801      	add	r0, sp, #4
 80a3090:	f7ff fcc3 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3094:	2200      	movs	r2, #0
 80a3096:	4629      	mov	r1, r5
 80a3098:	4807      	ldr	r0, [pc, #28]	; (80a30b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a309a:	f7fd fff3 	bl	80a1084 <application_thread_invoke>
 80a309e:	4630      	mov	r0, r6
 80a30a0:	f7ff fcbb 	bl	80a2a1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a30a4:	2110      	movs	r1, #16
 80a30a6:	4630      	mov	r0, r6
 80a30a8:	f000 fdfa 	bl	80a3ca0 <_ZdlPvj>
        }
    }
 80a30ac:	b007      	add	sp, #28
 80a30ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a30b0:	080a2cf7 	.word	0x080a2cf7
 80a30b4:	080a2fc5 	.word	0x080a2fc5
 80a30b8:	080a3511 	.word	0x080a3511

080a30bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a30bc:	b530      	push	{r4, r5, lr}
 80a30be:	4604      	mov	r4, r0
 80a30c0:	b085      	sub	sp, #20
 80a30c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a30c4:	4668      	mov	r0, sp
 80a30c6:	4611      	mov	r1, r2
 80a30c8:	f7ff fdc9 	bl	80a2c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a30cc:	b17c      	cbz	r4, 80a30ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a30ce:	b224      	sxth	r4, r4
 80a30d0:	4628      	mov	r0, r5
 80a30d2:	b10d      	cbz	r5, 80a30d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a30d4:	f002 f9f0 	bl	80a54b8 <strdup>
 80a30d8:	9002      	str	r0, [sp, #8]
 80a30da:	a902      	add	r1, sp, #8
 80a30dc:	4668      	mov	r0, sp
 80a30de:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a30e2:	f7ff fe1f 	bl	80a2d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a30e6:	a802      	add	r0, sp, #8
 80a30e8:	f7ff fd7e 	bl	80a2be8 <_ZN8particle5ErrorD1Ev>
 80a30ec:	e01d      	b.n	80a312a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a30ee:	f04f 0201 	mov.w	r2, #1
 80a30f2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a30f4:	f88d 4008 	strb.w	r4, [sp, #8]
 80a30f8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a30fc:	42a3      	cmp	r3, r4
 80a30fe:	d103      	bne.n	80a3108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a3100:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a3104:	2900      	cmp	r1, #0
 80a3106:	d1f7      	bne.n	80a30f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a3108:	d002      	beq.n	80a3110 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a310a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a310e:	e00c      	b.n	80a312a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a3110:	f110 010c 	adds.w	r1, r0, #12
 80a3114:	f04f 0301 	mov.w	r3, #1
 80a3118:	bf18      	it	ne
 80a311a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a311c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a3120:	3004      	adds	r0, #4
 80a3122:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a3126:	f7ff ff71 	bl	80a300c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a312a:	a801      	add	r0, sp, #4
 80a312c:	f7fe fd16 	bl	80a1b5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a3130:	b005      	add	sp, #20
 80a3132:	bd30      	pop	{r4, r5, pc}

080a3134 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3134:	4770      	bx	lr

080a3136 <_ZN9IPAddressD0Ev>:
 80a3136:	b510      	push	{r4, lr}
 80a3138:	4604      	mov	r4, r0
 80a313a:	2118      	movs	r1, #24
 80a313c:	f000 fdb0 	bl	80a3ca0 <_ZdlPvj>
 80a3140:	4620      	mov	r0, r4
 80a3142:	bd10      	pop	{r4, pc}

080a3144 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3146:	460f      	mov	r7, r1
 80a3148:	f100 0608 	add.w	r6, r0, #8
 80a314c:	1d05      	adds	r5, r0, #4
 80a314e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a3150:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3154:	220a      	movs	r2, #10
 80a3156:	4638      	mov	r0, r7
 80a3158:	f7fe fb2c 	bl	80a17b4 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a315c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a315e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3160:	d007      	beq.n	80a3172 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3162:	2c00      	cmp	r4, #0
 80a3164:	d0f4      	beq.n	80a3150 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3166:	212e      	movs	r1, #46	; 0x2e
 80a3168:	4638      	mov	r0, r7
 80a316a:	f7fe fb0a 	bl	80a1782 <_ZN5Print5printEc>
 80a316e:	4404      	add	r4, r0
 80a3170:	e7ee      	b.n	80a3150 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3172:	4620      	mov	r0, r4
 80a3174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3178 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3178:	b510      	push	{r4, lr}
 80a317a:	4604      	mov	r4, r0
 80a317c:	4b04      	ldr	r3, [pc, #16]	; (80a3190 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a317e:	2211      	movs	r2, #17
 80a3180:	f840 3b04 	str.w	r3, [r0], #4
 80a3184:	2100      	movs	r1, #0
 80a3186:	f002 f93d 	bl	80a5404 <memset>
{
    clear();
}
 80a318a:	4620      	mov	r0, r4
 80a318c:	bd10      	pop	{r4, pc}
 80a318e:	bf00      	nop
 80a3190:	080a6334 	.word	0x080a6334

080a3194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3194:	4603      	mov	r3, r0
 80a3196:	4a07      	ldr	r2, [pc, #28]	; (80a31b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3198:	b510      	push	{r4, lr}
 80a319a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a319e:	f101 0210 	add.w	r2, r1, #16
 80a31a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a31a6:	4291      	cmp	r1, r2
 80a31a8:	f843 4b04 	str.w	r4, [r3], #4
 80a31ac:	d1f9      	bne.n	80a31a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a31ae:	780a      	ldrb	r2, [r1, #0]
 80a31b0:	701a      	strb	r2, [r3, #0]
}
 80a31b2:	bd10      	pop	{r4, pc}
 80a31b4:	080a6334 	.word	0x080a6334

080a31b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a31b8:	4a02      	ldr	r2, [pc, #8]	; (80a31c4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a31ba:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a31bc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a31be:	2204      	movs	r2, #4
 80a31c0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a31c2:	4770      	bx	lr
 80a31c4:	080a6334 	.word	0x080a6334

080a31c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a31c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a31ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a31ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a31d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a31d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a31da:	2304      	movs	r3, #4
 80a31dc:	6041      	str	r1, [r0, #4]
 80a31de:	7503      	strb	r3, [r0, #20]
 80a31e0:	bd10      	pop	{r4, pc}
	...

080a31e4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a31e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a31e6:	4d04      	ldr	r5, [pc, #16]	; (80a31f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a31e8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a31ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a31ee:	9500      	str	r5, [sp, #0]
 80a31f0:	f7ff ffea 	bl	80a31c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a31f4:	b003      	add	sp, #12
 80a31f6:	bd30      	pop	{r4, r5, pc}
 80a31f8:	080a6334 	.word	0x080a6334

080a31fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a31fc:	7441      	strb	r1, [r0, #17]
 80a31fe:	4770      	bx	lr

080a3200 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3200:	4770      	bx	lr

080a3202 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3202:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3204:	2100      	movs	r1, #0
 80a3206:	7c00      	ldrb	r0, [r0, #16]
 80a3208:	f7fd fedc 	bl	80a0fc4 <HAL_USB_USART_Receive_Data>
}
 80a320c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3210:	bf28      	it	cs
 80a3212:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3216:	bd08      	pop	{r3, pc}

080a3218 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3218:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a321a:	2101      	movs	r1, #1
 80a321c:	7c00      	ldrb	r0, [r0, #16]
 80a321e:	f7fd fed1 	bl	80a0fc4 <HAL_USB_USART_Receive_Data>
}
 80a3222:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3226:	bf28      	it	cs
 80a3228:	f04f 30ff 	movcs.w	r0, #4294967295
 80a322c:	bd08      	pop	{r3, pc}

080a322e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a322e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3230:	7c00      	ldrb	r0, [r0, #16]
 80a3232:	f7fd febf 	bl	80a0fb4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3236:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a323a:	bd08      	pop	{r3, pc}

080a323c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a323c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a323e:	7c00      	ldrb	r0, [r0, #16]
 80a3240:	f7fd feb0 	bl	80a0fa4 <HAL_USB_USART_Available_Data>
}
 80a3244:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3248:	bd08      	pop	{r3, pc}

080a324a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a324a:	7c00      	ldrb	r0, [r0, #16]
 80a324c:	f7fd beca 	b.w	80a0fe4 <HAL_USB_USART_Flush_Data>

080a3250 <_ZN9USBSerialD0Ev>:
 80a3250:	b510      	push	{r4, lr}
 80a3252:	4604      	mov	r4, r0
 80a3254:	2114      	movs	r1, #20
 80a3256:	f000 fd23 	bl	80a3ca0 <_ZdlPvj>
 80a325a:	4620      	mov	r0, r4
 80a325c:	bd10      	pop	{r4, pc}

080a325e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a325e:	b538      	push	{r3, r4, r5, lr}
 80a3260:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3262:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3264:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3266:	f7fd fea5 	bl	80a0fb4 <HAL_USB_USART_Available_Data_For_Write>
 80a326a:	2800      	cmp	r0, #0
 80a326c:	dc01      	bgt.n	80a3272 <_ZN9USBSerial5writeEh+0x14>
 80a326e:	7c60      	ldrb	r0, [r4, #17]
 80a3270:	b128      	cbz	r0, 80a327e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3272:	4629      	mov	r1, r5
 80a3274:	7c20      	ldrb	r0, [r4, #16]
 80a3276:	f7fd fead 	bl	80a0fd4 <HAL_USB_USART_Send_Data>
 80a327a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a327e:	bd38      	pop	{r3, r4, r5, pc}

080a3280 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3280:	b510      	push	{r4, lr}
 80a3282:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3284:	2300      	movs	r3, #0
 80a3286:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a328c:	60a3      	str	r3, [r4, #8]
 80a328e:	4b05      	ldr	r3, [pc, #20]	; (80a32a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3290:	4608      	mov	r0, r1
 80a3292:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3294:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3296:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3298:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a329a:	4611      	mov	r1, r2
 80a329c:	f7fd fe6a 	bl	80a0f74 <HAL_USB_USART_Init>
}
 80a32a0:	4620      	mov	r0, r4
 80a32a2:	bd10      	pop	{r4, pc}
 80a32a4:	080a6348 	.word	0x080a6348

080a32a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a32a8:	2200      	movs	r2, #0
 80a32aa:	7c00      	ldrb	r0, [r0, #16]
 80a32ac:	f7fd be6a 	b.w	80a0f84 <HAL_USB_USART_Begin>

080a32b0 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80a32b0:	7c00      	ldrb	r0, [r0, #16]
 80a32b2:	f7fd be6f 	b.w	80a0f94 <HAL_USB_USART_End>

080a32b6 <_Z19acquireSerialBufferv>:
 80a32b6:	b510      	push	{r4, lr}
 80a32b8:	4604      	mov	r4, r0
 80a32ba:	2214      	movs	r2, #20
 80a32bc:	2100      	movs	r1, #0
 80a32be:	f002 f8a1 	bl	80a5404 <memset>
 80a32c2:	4620      	mov	r0, r4
 80a32c4:	bd10      	pop	{r4, pc}
	...

080a32c8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a32c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a32ca:	4d0e      	ldr	r5, [pc, #56]	; (80a3304 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a32cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a32ce:	a801      	add	r0, sp, #4
 80a32d0:	f7ff fff1 	bl	80a32b6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a32d4:	6829      	ldr	r1, [r5, #0]
 80a32d6:	f011 0401 	ands.w	r4, r1, #1
 80a32da:	d110      	bne.n	80a32fe <_Z16_fetch_usbserialv+0x36>
 80a32dc:	4628      	mov	r0, r5
 80a32de:	f7fc feed 	bl	80a00bc <__cxa_guard_acquire>
 80a32e2:	b160      	cbz	r0, 80a32fe <_Z16_fetch_usbserialv+0x36>
 80a32e4:	aa01      	add	r2, sp, #4
 80a32e6:	4621      	mov	r1, r4
 80a32e8:	4807      	ldr	r0, [pc, #28]	; (80a3308 <_Z16_fetch_usbserialv+0x40>)
 80a32ea:	f7ff ffc9 	bl	80a3280 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a32ee:	4628      	mov	r0, r5
 80a32f0:	f7fc fee9 	bl	80a00c6 <__cxa_guard_release>
 80a32f4:	4a05      	ldr	r2, [pc, #20]	; (80a330c <_Z16_fetch_usbserialv+0x44>)
 80a32f6:	4906      	ldr	r1, [pc, #24]	; (80a3310 <_Z16_fetch_usbserialv+0x48>)
 80a32f8:	4803      	ldr	r0, [pc, #12]	; (80a3308 <_Z16_fetch_usbserialv+0x40>)
 80a32fa:	f000 fcc3 	bl	80a3c84 <__aeabi_atexit>
	return _usbserial;
}
 80a32fe:	4802      	ldr	r0, [pc, #8]	; (80a3308 <_Z16_fetch_usbserialv+0x40>)
 80a3300:	b007      	add	sp, #28
 80a3302:	bd30      	pop	{r4, r5, pc}
 80a3304:	2000033c 	.word	0x2000033c
 80a3308:	20000344 	.word	0x20000344
 80a330c:	200000c8 	.word	0x200000c8
 80a3310:	080a3201 	.word	0x080a3201

080a3314 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3314:	b510      	push	{r4, lr}
 80a3316:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3318:	2214      	movs	r2, #20
 80a331a:	2100      	movs	r1, #0
 80a331c:	f002 f872 	bl	80a5404 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3320:	4620      	mov	r0, r4
 80a3322:	bd10      	pop	{r4, pc}

080a3324 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3324:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3326:	4c0e      	ldr	r4, [pc, #56]	; (80a3360 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3328:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a332a:	a801      	add	r0, sp, #4
 80a332c:	f7ff fff2 	bl	80a3314 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3330:	6823      	ldr	r3, [r4, #0]
 80a3332:	07db      	lsls	r3, r3, #31
 80a3334:	d410      	bmi.n	80a3358 <_Z17_fetch_usbserial1v+0x34>
 80a3336:	4620      	mov	r0, r4
 80a3338:	f7fc fec0 	bl	80a00bc <__cxa_guard_acquire>
 80a333c:	b160      	cbz	r0, 80a3358 <_Z17_fetch_usbserial1v+0x34>
 80a333e:	aa01      	add	r2, sp, #4
 80a3340:	2101      	movs	r1, #1
 80a3342:	4808      	ldr	r0, [pc, #32]	; (80a3364 <_Z17_fetch_usbserial1v+0x40>)
 80a3344:	f7ff ff9c 	bl	80a3280 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3348:	4620      	mov	r0, r4
 80a334a:	f7fc febc 	bl	80a00c6 <__cxa_guard_release>
 80a334e:	4a06      	ldr	r2, [pc, #24]	; (80a3368 <_Z17_fetch_usbserial1v+0x44>)
 80a3350:	4906      	ldr	r1, [pc, #24]	; (80a336c <_Z17_fetch_usbserial1v+0x48>)
 80a3352:	4804      	ldr	r0, [pc, #16]	; (80a3364 <_Z17_fetch_usbserial1v+0x40>)
 80a3354:	f000 fc96 	bl	80a3c84 <__aeabi_atexit>
  return _usbserial1;
}
 80a3358:	4802      	ldr	r0, [pc, #8]	; (80a3364 <_Z17_fetch_usbserial1v+0x40>)
 80a335a:	b006      	add	sp, #24
 80a335c:	bd10      	pop	{r4, pc}
 80a335e:	bf00      	nop
 80a3360:	20000340 	.word	0x20000340
 80a3364:	20000358 	.word	0x20000358
 80a3368:	200000c8 	.word	0x200000c8
 80a336c:	080a3201 	.word	0x080a3201

080a3370 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a3370:	4700      	bx	r0
	...

080a3374 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a3374:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3376:	461c      	mov	r4, r3
 80a3378:	b085      	sub	sp, #20
 80a337a:	460e      	mov	r6, r1
 80a337c:	4617      	mov	r7, r2
 80a337e:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 80a3380:	f7fd fd06 	bl	80a0d90 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a3384:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a3386:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a3388:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a338c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a338e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a3392:	bfb4      	ite	lt
 80a3394:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a3396:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a339a:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a339c:	bfa4      	itt	ge
 80a339e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a33a2:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a33a4:	9300      	str	r3, [sp, #0]
 80a33a6:	4906      	ldr	r1, [pc, #24]	; (80a33c0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 80a33a8:	463b      	mov	r3, r7
 80a33aa:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a33ac:	bfa8      	it	ge
 80a33ae:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a33b2:	f7fd fce5 	bl	80a0d80 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a33b6:	fab0 f080 	clz	r0, r0
 80a33ba:	0940      	lsrs	r0, r0, #5
 80a33bc:	b005      	add	sp, #20
 80a33be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a33c0:	080a3371 	.word	0x080a3371

080a33c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a33c4:	4770      	bx	lr

080a33c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a33c6:	7441      	strb	r1, [r0, #17]
 80a33c8:	4770      	bx	lr

080a33ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a33ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a33cc:	7c00      	ldrb	r0, [r0, #16]
 80a33ce:	f7fd fd87 	bl	80a0ee0 <HAL_USART_Available_Data_For_Write>
}
 80a33d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33d6:	bd08      	pop	{r3, pc}

080a33d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a33d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a33da:	7c00      	ldrb	r0, [r0, #16]
 80a33dc:	f7fd fd58 	bl	80a0e90 <HAL_USART_Available_Data>
}
 80a33e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a33e4:	bd08      	pop	{r3, pc}

080a33e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a33e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a33e8:	7c00      	ldrb	r0, [r0, #16]
 80a33ea:	f7fd fd61 	bl	80a0eb0 <HAL_USART_Peek_Data>
}
 80a33ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a33f2:	bf28      	it	cs
 80a33f4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a33f8:	bd08      	pop	{r3, pc}

080a33fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a33fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a33fc:	7c00      	ldrb	r0, [r0, #16]
 80a33fe:	f7fd fd4f 	bl	80a0ea0 <HAL_USART_Read_Data>
}
 80a3402:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3406:	bf28      	it	cs
 80a3408:	f04f 30ff 	movcs.w	r0, #4294967295
 80a340c:	bd08      	pop	{r3, pc}

080a340e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a340e:	7c00      	ldrb	r0, [r0, #16]
 80a3410:	f7fd bd56 	b.w	80a0ec0 <HAL_USART_Flush_Data>

080a3414 <_ZN11USARTSerialD0Ev>:
 80a3414:	b510      	push	{r4, lr}
 80a3416:	4604      	mov	r4, r0
 80a3418:	2114      	movs	r1, #20
 80a341a:	f000 fc41 	bl	80a3ca0 <_ZdlPvj>
 80a341e:	4620      	mov	r0, r4
 80a3420:	bd10      	pop	{r4, pc}

080a3422 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3422:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3424:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3426:	4604      	mov	r4, r0
 80a3428:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a342a:	b925      	cbnz	r5, 80a3436 <_ZN11USARTSerial5writeEh+0x14>
 80a342c:	7c00      	ldrb	r0, [r0, #16]
 80a342e:	f7fd fd57 	bl	80a0ee0 <HAL_USART_Available_Data_For_Write>
 80a3432:	2800      	cmp	r0, #0
 80a3434:	dd05      	ble.n	80a3442 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3436:	4631      	mov	r1, r6
 80a3438:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a343a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a343e:	f7fd bd1f 	b.w	80a0e80 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a3442:	4628      	mov	r0, r5
 80a3444:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3448 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3448:	b510      	push	{r4, lr}
 80a344a:	4604      	mov	r4, r0
 80a344c:	4608      	mov	r0, r1
 80a344e:	4611      	mov	r1, r2
 80a3450:	2200      	movs	r2, #0
 80a3452:	6062      	str	r2, [r4, #4]
 80a3454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3458:	60a2      	str	r2, [r4, #8]
 80a345a:	4a05      	ldr	r2, [pc, #20]	; (80a3470 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a345c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a345e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a3460:	2201      	movs	r2, #1
 80a3462:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3464:	461a      	mov	r2, r3
 80a3466:	f7fd fcfb 	bl	80a0e60 <HAL_USART_Init>
}
 80a346a:	4620      	mov	r0, r4
 80a346c:	bd10      	pop	{r4, pc}
 80a346e:	bf00      	nop
 80a3470:	080a6378 	.word	0x080a6378

080a3474 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a3474:	2300      	movs	r3, #0
 80a3476:	7c00      	ldrb	r0, [r0, #16]
 80a3478:	f7fd bd3a 	b.w	80a0ef0 <HAL_USART_BeginConfig>

080a347c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a347c:	2200      	movs	r2, #0
 80a347e:	f7ff bff9 	b.w	80a3474 <_ZN11USARTSerial5beginEmm>

080a3482 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a3482:	7c00      	ldrb	r0, [r0, #16]
 80a3484:	f7fd bcf4 	b.w	80a0e70 <HAL_USART_End>

080a3488 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a3488:	7c00      	ldrb	r0, [r0, #16]
 80a348a:	f7fd bd21 	b.w	80a0ed0 <HAL_USART_Is_Enabled>
	...

080a3490 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a3492:	4c19      	ldr	r4, [pc, #100]	; (80a34f8 <_Z22__fetch_global_Serial1v+0x68>)
 80a3494:	6825      	ldr	r5, [r4, #0]
 80a3496:	b94d      	cbnz	r5, 80a34ac <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a3498:	2084      	movs	r0, #132	; 0x84
 80a349a:	f7fc fe00 	bl	80a009e <_Znwj>
 80a349e:	4606      	mov	r6, r0
 80a34a0:	b118      	cbz	r0, 80a34aa <_Z22__fetch_global_Serial1v+0x1a>
 80a34a2:	2284      	movs	r2, #132	; 0x84
 80a34a4:	4629      	mov	r1, r5
 80a34a6:	f001 ffad 	bl	80a5404 <memset>
 80a34aa:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a34ac:	4d13      	ldr	r5, [pc, #76]	; (80a34fc <_Z22__fetch_global_Serial1v+0x6c>)
 80a34ae:	682e      	ldr	r6, [r5, #0]
 80a34b0:	b94e      	cbnz	r6, 80a34c6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a34b2:	2084      	movs	r0, #132	; 0x84
 80a34b4:	f7fc fdf3 	bl	80a009e <_Znwj>
 80a34b8:	4607      	mov	r7, r0
 80a34ba:	b118      	cbz	r0, 80a34c4 <_Z22__fetch_global_Serial1v+0x34>
 80a34bc:	2284      	movs	r2, #132	; 0x84
 80a34be:	4631      	mov	r1, r6
 80a34c0:	f001 ffa0 	bl	80a5404 <memset>
 80a34c4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a34c6:	4f0e      	ldr	r7, [pc, #56]	; (80a3500 <_Z22__fetch_global_Serial1v+0x70>)
 80a34c8:	6839      	ldr	r1, [r7, #0]
 80a34ca:	f011 0601 	ands.w	r6, r1, #1
 80a34ce:	d111      	bne.n	80a34f4 <_Z22__fetch_global_Serial1v+0x64>
 80a34d0:	4638      	mov	r0, r7
 80a34d2:	f7fc fdf3 	bl	80a00bc <__cxa_guard_acquire>
 80a34d6:	b168      	cbz	r0, 80a34f4 <_Z22__fetch_global_Serial1v+0x64>
 80a34d8:	6822      	ldr	r2, [r4, #0]
 80a34da:	4631      	mov	r1, r6
 80a34dc:	682b      	ldr	r3, [r5, #0]
 80a34de:	4809      	ldr	r0, [pc, #36]	; (80a3504 <_Z22__fetch_global_Serial1v+0x74>)
 80a34e0:	f7ff ffb2 	bl	80a3448 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a34e4:	4638      	mov	r0, r7
 80a34e6:	f7fc fdee 	bl	80a00c6 <__cxa_guard_release>
 80a34ea:	4a07      	ldr	r2, [pc, #28]	; (80a3508 <_Z22__fetch_global_Serial1v+0x78>)
 80a34ec:	4907      	ldr	r1, [pc, #28]	; (80a350c <_Z22__fetch_global_Serial1v+0x7c>)
 80a34ee:	4805      	ldr	r0, [pc, #20]	; (80a3504 <_Z22__fetch_global_Serial1v+0x74>)
 80a34f0:	f000 fbc8 	bl	80a3c84 <__aeabi_atexit>
#endif
	return serial1;
}
 80a34f4:	4803      	ldr	r0, [pc, #12]	; (80a3504 <_Z22__fetch_global_Serial1v+0x74>)
 80a34f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a34f8:	20000388 	.word	0x20000388
 80a34fc:	20000380 	.word	0x20000380
 80a3500:	20000384 	.word	0x20000384
 80a3504:	2000036c 	.word	0x2000036c
 80a3508:	200000c8 	.word	0x200000c8
 80a350c:	080a33c5 	.word	0x080a33c5

080a3510 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3510:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3512:	6883      	ldr	r3, [r0, #8]
 80a3514:	4604      	mov	r4, r0
 80a3516:	b90b      	cbnz	r3, 80a351c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3518:	f000 fbd5 	bl	80a3cc6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a351c:	68c3      	ldr	r3, [r0, #12]
 80a351e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a3520:	68a3      	ldr	r3, [r4, #8]
 80a3522:	b11b      	cbz	r3, 80a352c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3524:	2203      	movs	r2, #3
 80a3526:	4621      	mov	r1, r4
 80a3528:	4620      	mov	r0, r4
 80a352a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a352c:	4620      	mov	r0, r4
}
 80a352e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3532:	2110      	movs	r1, #16
 80a3534:	f000 bbb4 	b.w	80a3ca0 <_ZdlPvj>

080a3538 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a3538:	4770      	bx	lr

080a353a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a353a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a353c:	4606      	mov	r6, r0
 80a353e:	4615      	mov	r5, r2
 80a3540:	460c      	mov	r4, r1
 80a3542:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3544:	42bc      	cmp	r4, r7
 80a3546:	d006      	beq.n	80a3556 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3548:	6833      	ldr	r3, [r6, #0]
 80a354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a354e:	689b      	ldr	r3, [r3, #8]
 80a3550:	4630      	mov	r0, r6
 80a3552:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3554:	e7f6      	b.n	80a3544 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3556:	4628      	mov	r0, r5
 80a3558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a355a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a355a:	2200      	movs	r2, #0
 80a355c:	7c00      	ldrb	r0, [r0, #16]
 80a355e:	f7fd bccf 	b.w	80a0f00 <HAL_I2C_Write_Data>

080a3562 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a3562:	2100      	movs	r1, #0
 80a3564:	7c00      	ldrb	r0, [r0, #16]
 80a3566:	f7fd bcd3 	b.w	80a0f10 <HAL_I2C_Available_Data>

080a356a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a356a:	2100      	movs	r1, #0
 80a356c:	7c00      	ldrb	r0, [r0, #16]
 80a356e:	f7fd bcd7 	b.w	80a0f20 <HAL_I2C_Read_Data>

080a3572 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a3572:	2100      	movs	r1, #0
 80a3574:	7c00      	ldrb	r0, [r0, #16]
 80a3576:	f7fd bcdb 	b.w	80a0f30 <HAL_I2C_Peek_Data>

080a357a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a357a:	2100      	movs	r1, #0
 80a357c:	7c00      	ldrb	r0, [r0, #16]
 80a357e:	f7fd bcdf 	b.w	80a0f40 <HAL_I2C_Flush_Data>

080a3582 <_ZN7TwoWireD0Ev>:
 80a3582:	b510      	push	{r4, lr}
 80a3584:	4604      	mov	r4, r0
 80a3586:	2114      	movs	r1, #20
 80a3588:	f000 fb8a 	bl	80a3ca0 <_ZdlPvj>
 80a358c:	4620      	mov	r0, r4
 80a358e:	bd10      	pop	{r4, pc}

080a3590 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a3590:	b510      	push	{r4, lr}
 80a3592:	4604      	mov	r4, r0
 80a3594:	2300      	movs	r3, #0
 80a3596:	6063      	str	r3, [r4, #4]
 80a3598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a359c:	60a3      	str	r3, [r4, #8]
 80a359e:	4b04      	ldr	r3, [pc, #16]	; (80a35b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a35a0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a35a2:	4608      	mov	r0, r1
 80a35a4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a35a6:	4611      	mov	r1, r2
 80a35a8:	f7fd fcda 	bl	80a0f60 <HAL_I2C_Init>
}
 80a35ac:	4620      	mov	r0, r4
 80a35ae:	bd10      	pop	{r4, pc}
 80a35b0:	080a63a8 	.word	0x080a63a8

080a35b4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a35b4:	2100      	movs	r1, #0
 80a35b6:	7c00      	ldrb	r0, [r0, #16]
 80a35b8:	f7fd bcca 	b.w	80a0f50 <HAL_I2C_Is_Enabled>

080a35bc <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a35bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a35be:	4616      	mov	r6, r2
 80a35c0:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a35c2:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a35c4:	460f      	mov	r7, r1
 80a35c6:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a35c8:	2100      	movs	r1, #0
 80a35ca:	a803      	add	r0, sp, #12
 80a35cc:	f001 ff1a 	bl	80a5404 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a35d0:	4630      	mov	r0, r6
 80a35d2:	f001 ff8c 	bl	80a54ee <strlen>
 80a35d6:	2500      	movs	r5, #0
 80a35d8:	9500      	str	r5, [sp, #0]
 80a35da:	b281      	uxth	r1, r0
 80a35dc:	687b      	ldr	r3, [r7, #4]
 80a35de:	aa03      	add	r2, sp, #12
 80a35e0:	4630      	mov	r0, r6
 80a35e2:	f7fd fd07 	bl	80a0ff4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a35e6:	b120      	cbz	r0, 80a35f2 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a35e8:	4629      	mov	r1, r5
 80a35ea:	4620      	mov	r0, r4
 80a35ec:	f7ff fde4 	bl	80a31b8 <_ZN9IPAddressC1Em>
 80a35f0:	e003      	b.n	80a35fa <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a35f2:	a903      	add	r1, sp, #12
 80a35f4:	4620      	mov	r0, r4
 80a35f6:	f7ff fdcd 	bl	80a3194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a35fa:	4620      	mov	r0, r4
 80a35fc:	b009      	add	sp, #36	; 0x24
 80a35fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3600 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3600:	2200      	movs	r2, #0
 80a3602:	4611      	mov	r1, r2
 80a3604:	6840      	ldr	r0, [r0, #4]
 80a3606:	f7fd bd99 	b.w	80a113c <network_listening>

080a360a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a360a:	2200      	movs	r2, #0
 80a360c:	4611      	mov	r1, r2
 80a360e:	6840      	ldr	r0, [r0, #4]
 80a3610:	f7fd bda4 	b.w	80a115c <network_get_listen_timeout>

080a3614 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3614:	2200      	movs	r2, #0
 80a3616:	6840      	ldr	r0, [r0, #4]
 80a3618:	f7fd bd98 	b.w	80a114c <network_set_listen_timeout>

080a361c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a361c:	2200      	movs	r2, #0
 80a361e:	f081 0101 	eor.w	r1, r1, #1
 80a3622:	6840      	ldr	r0, [r0, #4]
 80a3624:	f7fd bd82 	b.w	80a112c <network_listen>

080a3628 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3628:	2300      	movs	r3, #0
 80a362a:	461a      	mov	r2, r3
 80a362c:	4619      	mov	r1, r3
 80a362e:	6840      	ldr	r0, [r0, #4]
 80a3630:	f7fd bd74 	b.w	80a111c <network_off>

080a3634 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3634:	2200      	movs	r2, #0
 80a3636:	2102      	movs	r1, #2
 80a3638:	6840      	ldr	r0, [r0, #4]
 80a363a:	f7fd bd57 	b.w	80a10ec <network_disconnect>

080a363e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a363e:	2300      	movs	r3, #0
 80a3640:	461a      	mov	r2, r3
 80a3642:	6840      	ldr	r0, [r0, #4]
 80a3644:	f7fd bd42 	b.w	80a10cc <network_connect>

080a3648 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3648:	4b02      	ldr	r3, [pc, #8]	; (80a3654 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a364a:	2204      	movs	r2, #4
 80a364c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a364e:	4a02      	ldr	r2, [pc, #8]	; (80a3658 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3650:	601a      	str	r2, [r3, #0]
 80a3652:	4770      	bx	lr
 80a3654:	2000038c 	.word	0x2000038c
 80a3658:	080a63d0 	.word	0x080a63d0

080a365c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a365c:	2300      	movs	r3, #0
 80a365e:	461a      	mov	r2, r3
 80a3660:	6840      	ldr	r0, [r0, #4]
 80a3662:	f7fd bd33 	b.w	80a10cc <network_connect>

080a3666 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3666:	2200      	movs	r2, #0
 80a3668:	2102      	movs	r1, #2
 80a366a:	6840      	ldr	r0, [r0, #4]
 80a366c:	f7fd bd3e 	b.w	80a10ec <network_disconnect>

080a3670 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3670:	2200      	movs	r2, #0
 80a3672:	4611      	mov	r1, r2
 80a3674:	6840      	ldr	r0, [r0, #4]
 80a3676:	f7fd bd31 	b.w	80a10dc <network_connecting>

080a367a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a367a:	2200      	movs	r2, #0
 80a367c:	4611      	mov	r1, r2
 80a367e:	6840      	ldr	r0, [r0, #4]
 80a3680:	f7fd bd3c 	b.w	80a10fc <network_ready>

080a3684 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3684:	2300      	movs	r3, #0
 80a3686:	461a      	mov	r2, r3
 80a3688:	4619      	mov	r1, r3
 80a368a:	6840      	ldr	r0, [r0, #4]
 80a368c:	f7fd bd3e 	b.w	80a110c <network_on>

080a3690 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3690:	2300      	movs	r3, #0
 80a3692:	461a      	mov	r2, r3
 80a3694:	4619      	mov	r1, r3
 80a3696:	6840      	ldr	r0, [r0, #4]
 80a3698:	f7fd bd40 	b.w	80a111c <network_off>

080a369c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a369c:	2200      	movs	r2, #0
 80a369e:	f081 0101 	eor.w	r1, r1, #1
 80a36a2:	6840      	ldr	r0, [r0, #4]
 80a36a4:	f7fd bd42 	b.w	80a112c <network_listen>

080a36a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a36a8:	2200      	movs	r2, #0
 80a36aa:	6840      	ldr	r0, [r0, #4]
 80a36ac:	f7fd bd4e 	b.w	80a114c <network_set_listen_timeout>

080a36b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a36b0:	2200      	movs	r2, #0
 80a36b2:	4611      	mov	r1, r2
 80a36b4:	6840      	ldr	r0, [r0, #4]
 80a36b6:	f7fd bd51 	b.w	80a115c <network_get_listen_timeout>

080a36ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a36ba:	2200      	movs	r2, #0
 80a36bc:	4611      	mov	r1, r2
 80a36be:	6840      	ldr	r0, [r0, #4]
 80a36c0:	f7fd bd3c 	b.w	80a113c <network_listening>

080a36c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a36c4:	b570      	push	{r4, r5, r6, lr}
 80a36c6:	4616      	mov	r6, r2
 80a36c8:	b08e      	sub	sp, #56	; 0x38
 80a36ca:	4604      	mov	r4, r0
    IPAddress addr;
 80a36cc:	a808      	add	r0, sp, #32
 80a36ce:	f7ff fd53 	bl	80a3178 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a36d2:	2211      	movs	r2, #17
 80a36d4:	2100      	movs	r1, #0
 80a36d6:	a803      	add	r0, sp, #12
 80a36d8:	f001 fe94 	bl	80a5404 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a36dc:	4630      	mov	r0, r6
 80a36de:	f001 ff06 	bl	80a54ee <strlen>
 80a36e2:	2500      	movs	r5, #0
 80a36e4:	4b0a      	ldr	r3, [pc, #40]	; (80a3710 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a36e6:	9500      	str	r5, [sp, #0]
 80a36e8:	b281      	uxth	r1, r0
 80a36ea:	685b      	ldr	r3, [r3, #4]
 80a36ec:	aa03      	add	r2, sp, #12
 80a36ee:	4630      	mov	r0, r6
 80a36f0:	f7fd fc80 	bl	80a0ff4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a36f4:	b120      	cbz	r0, 80a3700 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a36f6:	4629      	mov	r1, r5
 80a36f8:	4620      	mov	r0, r4
 80a36fa:	f7ff fd5d 	bl	80a31b8 <_ZN9IPAddressC1Em>
 80a36fe:	e003      	b.n	80a3708 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3700:	a903      	add	r1, sp, #12
 80a3702:	4620      	mov	r0, r4
 80a3704:	f7ff fd46 	bl	80a3194 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3708:	4620      	mov	r0, r4
 80a370a:	b00e      	add	sp, #56	; 0x38
 80a370c:	bd70      	pop	{r4, r5, r6, pc}
 80a370e:	bf00      	nop
 80a3710:	2000038c 	.word	0x2000038c

080a3714 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3714:	4b02      	ldr	r3, [pc, #8]	; (80a3720 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3716:	4a03      	ldr	r2, [pc, #12]	; (80a3724 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3718:	601a      	str	r2, [r3, #0]
 80a371a:	2200      	movs	r2, #0
 80a371c:	605a      	str	r2, [r3, #4]
 80a371e:	4770      	bx	lr
 80a3720:	20000394 	.word	0x20000394
 80a3724:	080a6404 	.word	0x080a6404

080a3728 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 80a3728:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 80a372c:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 80a372e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80a3732:	4610      	mov	r0, r2
 80a3734:	2901      	cmp	r1, #1
 80a3736:	d104      	bne.n	80a3742 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 80a3738:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80a373c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a3740:	e004      	b.n	80a374c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 80a3742:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a3744:	bf04      	itt	eq
 80a3746:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 80a374a:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 80a374c:	3b01      	subs	r3, #1
 80a374e:	f102 0210 	add.w	r2, r2, #16
 80a3752:	d1ec      	bne.n	80a372e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 80a3754:	4770      	bx	lr

080a3756 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a3756:	b40e      	push	{r1, r2, r3}
 80a3758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a375c:	b087      	sub	sp, #28
 80a375e:	af00      	add	r7, sp, #0
 80a3760:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80a3764:	f854 6b04 	ldr.w	r6, [r4], #4
 80a3768:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a376a:	4623      	mov	r3, r4
 80a376c:	4632      	mov	r2, r6
 80a376e:	2110      	movs	r1, #16
 80a3770:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 80a3774:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a3776:	f7fd fd51 	bl	80a121c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a377a:	280f      	cmp	r0, #15
 80a377c:	d916      	bls.n	80a37ac <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 80a377e:	f100 0308 	add.w	r3, r0, #8
 80a3782:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a3786:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 80a3788:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a378c:	4632      	mov	r2, r6
 80a378e:	1c41      	adds	r1, r0, #1
 80a3790:	4623      	mov	r3, r4
 80a3792:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 80a3794:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a3796:	f7fd fd41 	bl	80a121c <vsnprintf>
        va_end(args);
        if (n > 0) {
 80a379a:	1e02      	subs	r2, r0, #0
 80a379c:	dd04      	ble.n	80a37a8 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a379e:	682b      	ldr	r3, [r5, #0]
 80a37a0:	4669      	mov	r1, sp
 80a37a2:	689b      	ldr	r3, [r3, #8]
 80a37a4:	4628      	mov	r0, r5
 80a37a6:	4798      	blx	r3
 80a37a8:	46c5      	mov	sp, r8
 80a37aa:	e007      	b.n	80a37bc <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 80a37ac:	b130      	cbz	r0, 80a37bc <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 80a37ae:	682b      	ldr	r3, [r5, #0]
 80a37b0:	4602      	mov	r2, r0
 80a37b2:	689b      	ldr	r3, [r3, #8]
 80a37b4:	f107 0108 	add.w	r1, r7, #8
 80a37b8:	4628      	mov	r0, r5
 80a37ba:	4798      	blx	r3
    }
}
 80a37bc:	371c      	adds	r7, #28
 80a37be:	46bd      	mov	sp, r7
 80a37c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a37c4:	b003      	add	sp, #12
 80a37c6:	4770      	bx	lr

080a37c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a37c8:	b510      	push	{r4, lr}
 80a37ca:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a37cc:	6803      	ldr	r3, [r0, #0]
 80a37ce:	689b      	ldr	r3, [r3, #8]
 80a37d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a37d2:	68a3      	ldr	r3, [r4, #8]
 80a37d4:	3b01      	subs	r3, #1
 80a37d6:	60a3      	str	r3, [r4, #8]
 80a37d8:	b92b      	cbnz	r3, 80a37e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80a37da:	6823      	ldr	r3, [r4, #0]
 80a37dc:	4620      	mov	r0, r4
        }
    }
 80a37de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a37e2:	68db      	ldr	r3, [r3, #12]
 80a37e4:	4718      	bx	r3
 80a37e6:	bd10      	pop	{r4, pc}

080a37e8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a37e8:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a37ea:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a37ec:	ab02      	add	r3, sp, #8
 80a37ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a37f2:	6894      	ldr	r4, [r2, #8]
 80a37f4:	4619      	mov	r1, r3
 80a37f6:	2201      	movs	r2, #1
 80a37f8:	47a0      	blx	r4
}
 80a37fa:	b002      	add	sp, #8
 80a37fc:	bd10      	pop	{r4, pc}

080a37fe <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 80a37fe:	6883      	ldr	r3, [r0, #8]
 80a3800:	b1fb      	cbz	r3, 80a3842 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80a3802:	781a      	ldrb	r2, [r3, #0]
 80a3804:	2a03      	cmp	r2, #3
 80a3806:	d81a      	bhi.n	80a383e <_ZNK5spark9JSONValue4typeEv+0x40>
 80a3808:	e8df f002 	tbb	[pc, r2]
 80a380c:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 80a3810:	2005      	movs	r0, #5
 80a3812:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80a3814:	6802      	ldr	r2, [r0, #0]
 80a3816:	685b      	ldr	r3, [r3, #4]
 80a3818:	6852      	ldr	r2, [r2, #4]
 80a381a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a381c:	282d      	cmp	r0, #45	; 0x2d
 80a381e:	d014      	beq.n	80a384a <_ZNK5spark9JSONValue4typeEv+0x4c>
 80a3820:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a3824:	2b09      	cmp	r3, #9
 80a3826:	d910      	bls.n	80a384a <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a3828:	2874      	cmp	r0, #116	; 0x74
 80a382a:	d010      	beq.n	80a384e <_ZNK5spark9JSONValue4typeEv+0x50>
 80a382c:	2866      	cmp	r0, #102	; 0x66
 80a382e:	d00e      	beq.n	80a384e <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a3830:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a3834:	4258      	negs	r0, r3
 80a3836:	4158      	adcs	r0, r3
 80a3838:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 80a383a:	2006      	movs	r0, #6
 80a383c:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 80a383e:	2000      	movs	r0, #0
 80a3840:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a3842:	4618      	mov	r0, r3
 80a3844:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 80a3846:	2004      	movs	r0, #4
 80a3848:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 80a384a:	2003      	movs	r0, #3
 80a384c:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 80a384e:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 80a3850:	4770      	bx	lr

080a3852 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 80a3852:	b510      	push	{r4, lr}
 80a3854:	4604      	mov	r4, r0
    switch (type()) {
 80a3856:	f7ff ffd2 	bl	80a37fe <_ZNK5spark9JSONValue4typeEv>
 80a385a:	2802      	cmp	r0, #2
 80a385c:	d00d      	beq.n	80a387a <_ZNK5spark9JSONValue5toIntEv+0x28>
 80a385e:	d316      	bcc.n	80a388e <_ZNK5spark9JSONValue5toIntEv+0x3c>
 80a3860:	2804      	cmp	r0, #4
 80a3862:	d814      	bhi.n	80a388e <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 80a3864:	6822      	ldr	r2, [r4, #0]
 80a3866:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 80a3868:	6850      	ldr	r0, [r2, #4]
 80a386a:	685b      	ldr	r3, [r3, #4]
 80a386c:	220a      	movs	r2, #10
 80a386e:	2100      	movs	r1, #0
 80a3870:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 80a3872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 80a3876:	f001 bef1 	b.w	80a565c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 80a387a:	6822      	ldr	r2, [r4, #0]
 80a387c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a387e:	6852      	ldr	r2, [r2, #4]
 80a3880:	685b      	ldr	r3, [r3, #4]
 80a3882:	5cd0      	ldrb	r0, [r2, r3]
 80a3884:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a3888:	4258      	negs	r0, r3
 80a388a:	4158      	adcs	r0, r3
 80a388c:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 80a388e:	2000      	movs	r0, #0
    }
}
 80a3890:	bd10      	pop	{r4, pc}

080a3892 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a3892:	b510      	push	{r4, lr}
    if (!n_) {
 80a3894:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a3896:	4604      	mov	r4, r0
    if (!n_) {
 80a3898:	b15b      	cbz	r3, 80a38b2 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 80a389a:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80a389c:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 80a389e:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a38a0:	3010      	adds	r0, #16
 80a38a2:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a38a4:	6120      	str	r0, [r4, #16]
    --n_;
 80a38a6:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a38a8:	b12b      	cbz	r3, 80a38b6 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 80a38aa:	f7ff ff3d 	bl	80a3728 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a38ae:	60a0      	str	r0, [r4, #8]
 80a38b0:	e001      	b.n	80a38b6 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 80a38b2:	4618      	mov	r0, r3
 80a38b4:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 80a38b6:	2001      	movs	r0, #1
}
 80a38b8:	bd10      	pop	{r4, pc}

080a38ba <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 80a38ba:	b510      	push	{r4, lr}
 80a38bc:	4604      	mov	r4, r0
    write('}');
 80a38be:	217d      	movs	r1, #125	; 0x7d
 80a38c0:	f7ff ff92 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a38c4:	2301      	movs	r3, #1
 80a38c6:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a38c8:	4620      	mov	r0, r4
 80a38ca:	bd10      	pop	{r4, pc}

080a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80a38cc:	b508      	push	{r3, lr}
    switch (state_) {
 80a38ce:	7903      	ldrb	r3, [r0, #4]
 80a38d0:	2b01      	cmp	r3, #1
 80a38d2:	d002      	beq.n	80a38da <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a38d4:	2b02      	cmp	r3, #2
 80a38d6:	d002      	beq.n	80a38de <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80a38d8:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80a38da:	212c      	movs	r1, #44	; 0x2c
 80a38dc:	e000      	b.n	80a38e0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80a38de:	213a      	movs	r1, #58	; 0x3a
 80a38e0:	f7ff ff82 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
 80a38e4:	bd08      	pop	{r3, pc}

080a38e6 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a38e6:	b510      	push	{r4, lr}
 80a38e8:	4604      	mov	r4, r0
    writeSeparator();
 80a38ea:	f7ff ffef 	bl	80a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a38ee:	4620      	mov	r0, r4
 80a38f0:	217b      	movs	r1, #123	; 0x7b
 80a38f2:	f7ff ff79 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a38f6:	2300      	movs	r3, #0
 80a38f8:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a38fa:	4620      	mov	r0, r4
 80a38fc:	bd10      	pop	{r4, pc}
	...

080a3900 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a3900:	b538      	push	{r3, r4, r5, lr}
 80a3902:	4604      	mov	r4, r0
 80a3904:	460d      	mov	r5, r1
    writeSeparator();
 80a3906:	f7ff ffe1 	bl	80a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a390a:	6823      	ldr	r3, [r4, #0]
 80a390c:	4620      	mov	r0, r4
 80a390e:	68db      	ldr	r3, [r3, #12]
 80a3910:	462a      	mov	r2, r5
 80a3912:	4903      	ldr	r1, [pc, #12]	; (80a3920 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a3914:	4798      	blx	r3
    state_ = NEXT;
 80a3916:	2301      	movs	r3, #1
 80a3918:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a391a:	4620      	mov	r0, r4
 80a391c:	bd38      	pop	{r3, r4, r5, pc}
 80a391e:	bf00      	nop
 80a3920:	080a6244 	.word	0x080a6244

080a3924 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a3924:	b538      	push	{r3, r4, r5, lr}
 80a3926:	4604      	mov	r4, r0
 80a3928:	460d      	mov	r5, r1
    writeSeparator();
 80a392a:	f7ff ffcf 	bl	80a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a392e:	6823      	ldr	r3, [r4, #0]
 80a3930:	4620      	mov	r0, r4
 80a3932:	68db      	ldr	r3, [r3, #12]
 80a3934:	462a      	mov	r2, r5
 80a3936:	4903      	ldr	r1, [pc, #12]	; (80a3944 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a3938:	4798      	blx	r3
    state_ = NEXT;
 80a393a:	2301      	movs	r3, #1
 80a393c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a393e:	4620      	mov	r0, r4
 80a3940:	bd38      	pop	{r3, r4, r5, pc}
 80a3942:	bf00      	nop
 80a3944:	080a643f 	.word	0x080a643f

080a3948 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a3948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a394a:	460d      	mov	r5, r1
 80a394c:	4617      	mov	r7, r2
    write('"');
 80a394e:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a3950:	4604      	mov	r4, r0
    write('"');
 80a3952:	f7ff ff49 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
 80a3956:	462a      	mov	r2, r5
    const char* const end = str + size;
 80a3958:	4629      	mov	r1, r5
 80a395a:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 80a395c:	42ba      	cmp	r2, r7
 80a395e:	d038      	beq.n	80a39d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 80a3960:	4616      	mov	r6, r2
 80a3962:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a3966:	2d22      	cmp	r5, #34	; 0x22
 80a3968:	d003      	beq.n	80a3972 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a396a:	2d5c      	cmp	r5, #92	; 0x5c
 80a396c:	d001      	beq.n	80a3972 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a396e:	2d1f      	cmp	r5, #31
 80a3970:	d82d      	bhi.n	80a39ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 80a3972:	6823      	ldr	r3, [r4, #0]
 80a3974:	1a52      	subs	r2, r2, r1
 80a3976:	689b      	ldr	r3, [r3, #8]
 80a3978:	4620      	mov	r0, r4
 80a397a:	4798      	blx	r3
            write('\\');
 80a397c:	215c      	movs	r1, #92	; 0x5c
 80a397e:	4620      	mov	r0, r4
 80a3980:	f7ff ff32 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a3984:	2d0c      	cmp	r5, #12
 80a3986:	d019      	beq.n	80a39bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 80a3988:	d807      	bhi.n	80a399a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 80a398a:	2d09      	cmp	r5, #9
 80a398c:	d00f      	beq.n	80a39ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 80a398e:	2d0a      	cmp	r5, #10
 80a3990:	d012      	beq.n	80a39b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 80a3992:	2d08      	cmp	r5, #8
 80a3994:	d114      	bne.n	80a39c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a3996:	2162      	movs	r1, #98	; 0x62
 80a3998:	e00a      	b.n	80a39b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 80a399a:	2d22      	cmp	r5, #34	; 0x22
 80a399c:	d005      	beq.n	80a39aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a399e:	2d5c      	cmp	r5, #92	; 0x5c
 80a39a0:	d003      	beq.n	80a39aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a39a2:	2d0d      	cmp	r5, #13
 80a39a4:	d10c      	bne.n	80a39c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 80a39a6:	2172      	movs	r1, #114	; 0x72
 80a39a8:	e002      	b.n	80a39b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 80a39aa:	4629      	mov	r1, r5
 80a39ac:	e000      	b.n	80a39b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 80a39ae:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a39b0:	4620      	mov	r0, r4
 80a39b2:	f7ff ff19 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
                break;
 80a39b6:	e009      	b.n	80a39cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 80a39b8:	216e      	movs	r1, #110	; 0x6e
 80a39ba:	e7f9      	b.n	80a39b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 80a39bc:	2166      	movs	r1, #102	; 0x66
 80a39be:	e7f7      	b.n	80a39b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a39c0:	6823      	ldr	r3, [r4, #0]
 80a39c2:	462a      	mov	r2, r5
 80a39c4:	68db      	ldr	r3, [r3, #12]
 80a39c6:	4909      	ldr	r1, [pc, #36]	; (80a39ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 80a39c8:	4620      	mov	r0, r4
 80a39ca:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80a39cc:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80a39ce:	4632      	mov	r2, r6
 80a39d0:	e7c4      	b.n	80a395c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80a39d2:	4291      	cmp	r1, r2
 80a39d4:	d004      	beq.n	80a39e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80a39d6:	6823      	ldr	r3, [r4, #0]
 80a39d8:	1a52      	subs	r2, r2, r1
 80a39da:	689d      	ldr	r5, [r3, #8]
 80a39dc:	4620      	mov	r0, r4
 80a39de:	47a8      	blx	r5
    }
    write('"');
 80a39e0:	2122      	movs	r1, #34	; 0x22
 80a39e2:	4620      	mov	r0, r4
 80a39e4:	f7ff ff00 	bl	80a37e8 <_ZN5spark10JSONWriter5writeEc>
 80a39e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a39ea:	bf00      	nop
 80a39ec:	080a6450 	.word	0x080a6450

080a39f0 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a39f0:	b570      	push	{r4, r5, r6, lr}
 80a39f2:	4604      	mov	r4, r0
 80a39f4:	460d      	mov	r5, r1
 80a39f6:	4616      	mov	r6, r2
    writeSeparator();
 80a39f8:	f7ff ff68 	bl	80a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a39fc:	4620      	mov	r0, r4
 80a39fe:	4632      	mov	r2, r6
 80a3a00:	4629      	mov	r1, r5
 80a3a02:	f7ff ffa1 	bl	80a3948 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a3a06:	2302      	movs	r3, #2
 80a3a08:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a3a0a:	4620      	mov	r0, r4
 80a3a0c:	bd70      	pop	{r4, r5, r6, pc}

080a3a0e <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a3a0e:	b570      	push	{r4, r5, r6, lr}
 80a3a10:	4604      	mov	r4, r0
 80a3a12:	460d      	mov	r5, r1
 80a3a14:	4616      	mov	r6, r2
    writeSeparator();
 80a3a16:	f7ff ff59 	bl	80a38cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a3a1a:	4620      	mov	r0, r4
 80a3a1c:	4632      	mov	r2, r6
 80a3a1e:	4629      	mov	r1, r5
 80a3a20:	f7ff ff92 	bl	80a3948 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a3a24:	2301      	movs	r3, #1
 80a3a26:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a3a28:	4620      	mov	r0, r4
 80a3a2a:	bd70      	pop	{r4, r5, r6, pc}

080a3a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a3a2c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3a2e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 80a3a30:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a3a32:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80a3a34:	429c      	cmp	r4, r3
 80a3a36:	d00c      	beq.n	80a3a52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 80a3a38:	b114      	cbz	r4, 80a3a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a3a3a:	6863      	ldr	r3, [r4, #4]
 80a3a3c:	3301      	adds	r3, #1
 80a3a3e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a3a40:	6828      	ldr	r0, [r5, #0]
 80a3a42:	b128      	cbz	r0, 80a3a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3a44:	6843      	ldr	r3, [r0, #4]
 80a3a46:	3b01      	subs	r3, #1
 80a3a48:	6043      	str	r3, [r0, #4]
 80a3a4a:	b90b      	cbnz	r3, 80a3a50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 80a3a4c:	f7ff febc 	bl	80a37c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a3a50:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 80a3a52:	4628      	mov	r0, r5
 80a3a54:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3a58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a3a58:	b510      	push	{r4, lr}
 80a3a5a:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a3a5c:	2300      	movs	r3, #0
 80a3a5e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3a60:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80a3a62:	4810      	ldr	r0, [pc, #64]	; (80a3aa4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 80a3a64:	60e3      	str	r3, [r4, #12]
 80a3a66:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a3a68:	b1d1      	cbz	r1, 80a3aa0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 80a3a6a:	780b      	ldrb	r3, [r1, #0]
 80a3a6c:	2b03      	cmp	r3, #3
 80a3a6e:	d006      	beq.n	80a3a7e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 80a3a70:	b9b3      	cbnz	r3, 80a3aa0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a3a72:	6813      	ldr	r3, [r2, #0]
 80a3a74:	6858      	ldr	r0, [r3, #4]
 80a3a76:	684b      	ldr	r3, [r1, #4]
 80a3a78:	5cc3      	ldrb	r3, [r0, r3]
 80a3a7a:	2b6e      	cmp	r3, #110	; 0x6e
 80a3a7c:	d008      	beq.n	80a3a90 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 80a3a7e:	6813      	ldr	r3, [r2, #0]
 80a3a80:	6858      	ldr	r0, [r3, #4]
 80a3a82:	684b      	ldr	r3, [r1, #4]
 80a3a84:	4403      	add	r3, r0
 80a3a86:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 80a3a88:	688b      	ldr	r3, [r1, #8]
 80a3a8a:	6849      	ldr	r1, [r1, #4]
 80a3a8c:	1a5b      	subs	r3, r3, r1
 80a3a8e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a3a90:	4611      	mov	r1, r2
 80a3a92:	4620      	mov	r0, r4
 80a3a94:	f851 3b04 	ldr.w	r3, [r1], #4
 80a3a98:	f840 3b04 	str.w	r3, [r0], #4
 80a3a9c:	f7ff ffc6 	bl	80a3a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 80a3aa0:	4620      	mov	r0, r4
 80a3aa2:	bd10      	pop	{r4, pc}
 80a3aa4:	080a5f40 	.word	0x080a5f40

080a3aa8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a3aa8:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a3aaa:	b510      	push	{r4, lr}
 80a3aac:	4604      	mov	r4, r0
 80a3aae:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3ab0:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80a3ab2:	6083      	str	r3, [r0, #8]
 80a3ab4:	60c3      	str	r3, [r0, #12]
 80a3ab6:	6103      	str	r3, [r0, #16]
 80a3ab8:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80a3aba:	b171      	cbz	r1, 80a3ada <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 80a3abc:	780b      	ldrb	r3, [r1, #0]
 80a3abe:	2b01      	cmp	r3, #1
 80a3ac0:	d10b      	bne.n	80a3ada <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 80a3ac2:	f101 0310 	add.w	r3, r1, #16
 80a3ac6:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 80a3ac8:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a3aca:	4611      	mov	r1, r2
 80a3acc:	6143      	str	r3, [r0, #20]
 80a3ace:	f851 3b04 	ldr.w	r3, [r1], #4
 80a3ad2:	f840 3b04 	str.w	r3, [r0], #4
 80a3ad6:	f7ff ffa9 	bl	80a3a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80a3ada:	4620      	mov	r0, r4
 80a3adc:	bd10      	pop	{r4, pc}

080a3ade <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a3ade:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a3ae0:	b510      	push	{r4, lr}
 80a3ae2:	4604      	mov	r4, r0
 80a3ae4:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3ae6:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80a3ae8:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80a3aea:	b131      	cbz	r1, 80a3afa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a3aec:	4611      	mov	r1, r2
 80a3aee:	f851 3b04 	ldr.w	r3, [r1], #4
 80a3af2:	f840 3b04 	str.w	r3, [r0], #4
 80a3af6:	f7ff ff99 	bl	80a3a2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 80a3afa:	4620      	mov	r0, r4
 80a3afc:	bd10      	pop	{r4, pc}

080a3afe <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a3afe:	b510      	push	{r4, lr}
 80a3b00:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3b02:	6880      	ldr	r0, [r0, #8]
 80a3b04:	b108      	cbz	r0, 80a3b0a <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3b06:	f7fd f993 	bl	80a0e30 <os_mutex_recursive_destroy>
 80a3b0a:	4620      	mov	r0, r4
 80a3b0c:	bd10      	pop	{r4, pc}
	...

080a3b10 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3b10:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3b12:	4e1a      	ldr	r6, [pc, #104]	; (80a3b7c <pinAvailable+0x6c>)
 80a3b14:	4604      	mov	r4, r0
 80a3b16:	6831      	ldr	r1, [r6, #0]
 80a3b18:	f011 0501 	ands.w	r5, r1, #1
 80a3b1c:	d10f      	bne.n	80a3b3e <pinAvailable+0x2e>
 80a3b1e:	4630      	mov	r0, r6
 80a3b20:	f7fc facc 	bl	80a00bc <__cxa_guard_acquire>
 80a3b24:	b158      	cbz	r0, 80a3b3e <pinAvailable+0x2e>
 80a3b26:	4629      	mov	r1, r5
 80a3b28:	4815      	ldr	r0, [pc, #84]	; (80a3b80 <pinAvailable+0x70>)
 80a3b2a:	f7fd fb92 	bl	80a1252 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3b2e:	4630      	mov	r0, r6
 80a3b30:	f7fc fac9 	bl	80a00c6 <__cxa_guard_release>
 80a3b34:	4a13      	ldr	r2, [pc, #76]	; (80a3b84 <pinAvailable+0x74>)
 80a3b36:	4914      	ldr	r1, [pc, #80]	; (80a3b88 <pinAvailable+0x78>)
 80a3b38:	4811      	ldr	r0, [pc, #68]	; (80a3b80 <pinAvailable+0x70>)
 80a3b3a:	f000 f8a3 	bl	80a3c84 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a3b3e:	4810      	ldr	r0, [pc, #64]	; (80a3b80 <pinAvailable+0x70>)
 80a3b40:	f7fd fb96 	bl	80a1270 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3b44:	b128      	cbz	r0, 80a3b52 <pinAvailable+0x42>
 80a3b46:	f1a4 030d 	sub.w	r3, r4, #13
 80a3b4a:	2b02      	cmp	r3, #2
 80a3b4c:	d801      	bhi.n	80a3b52 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a3b4e:	2000      	movs	r0, #0
 80a3b50:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3b52:	f000 f871 	bl	80a3c38 <_Z19__fetch_global_Wirev>
 80a3b56:	f7ff fd2d 	bl	80a35b4 <_ZN7TwoWire9isEnabledEv>
 80a3b5a:	b108      	cbz	r0, 80a3b60 <pinAvailable+0x50>
 80a3b5c:	2c01      	cmp	r4, #1
 80a3b5e:	d9f6      	bls.n	80a3b4e <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3b60:	f7ff fc96 	bl	80a3490 <_Z22__fetch_global_Serial1v>
 80a3b64:	f7ff fc90 	bl	80a3488 <_ZN11USARTSerial9isEnabledEv>
 80a3b68:	b118      	cbz	r0, 80a3b72 <pinAvailable+0x62>
 80a3b6a:	f1a4 0312 	sub.w	r3, r4, #18
 80a3b6e:	2b01      	cmp	r3, #1
 80a3b70:	d9ed      	bls.n	80a3b4e <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3b72:	2c17      	cmp	r4, #23
 80a3b74:	bf8c      	ite	hi
 80a3b76:	2000      	movhi	r0, #0
 80a3b78:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3b7a:	bd70      	pop	{r4, r5, r6, pc}
 80a3b7c:	2000039c 	.word	0x2000039c
 80a3b80:	200003a0 	.word	0x200003a0
 80a3b84:	200000c8 	.word	0x200000c8
 80a3b88:	080a3aff 	.word	0x080a3aff

080a3b8c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3b8c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3b8e:	b538      	push	{r3, r4, r5, lr}
 80a3b90:	4604      	mov	r4, r0
 80a3b92:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3b94:	d80a      	bhi.n	80a3bac <pinMode+0x20>
 80a3b96:	29ff      	cmp	r1, #255	; 0xff
 80a3b98:	d008      	beq.n	80a3bac <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3b9a:	f7ff ffb9 	bl	80a3b10 <pinAvailable>
 80a3b9e:	b128      	cbz	r0, 80a3bac <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3ba0:	4629      	mov	r1, r5
 80a3ba2:	4620      	mov	r0, r4
}
 80a3ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3ba8:	f7fd b8d2 	b.w	80a0d50 <HAL_Pin_Mode>
 80a3bac:	bd38      	pop	{r3, r4, r5, pc}

080a3bae <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3bae:	b510      	push	{r4, lr}
 80a3bb0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3bb2:	f7fd f8d5 	bl	80a0d60 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3bb6:	3804      	subs	r0, #4
 80a3bb8:	b2c0      	uxtb	r0, r0
 80a3bba:	2801      	cmp	r0, #1
 80a3bbc:	d908      	bls.n	80a3bd0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3bbe:	4620      	mov	r0, r4
 80a3bc0:	f7ff ffa6 	bl	80a3b10 <pinAvailable>
 80a3bc4:	b120      	cbz	r0, 80a3bd0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3bc6:	4620      	mov	r0, r4
}
 80a3bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3bcc:	f7fd b8d0 	b.w	80a0d70 <HAL_GPIO_Read>
}
 80a3bd0:	2000      	movs	r0, #0
 80a3bd2:	bd10      	pop	{r4, pc}

080a3bd4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3bd4:	b513      	push	{r0, r1, r4, lr}
 80a3bd6:	4c08      	ldr	r4, [pc, #32]	; (80a3bf8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3bd8:	2300      	movs	r3, #0
 80a3bda:	461a      	mov	r2, r3
 80a3bdc:	4619      	mov	r1, r3
 80a3bde:	9300      	str	r3, [sp, #0]
 80a3be0:	4620      	mov	r0, r4
 80a3be2:	f7ff faff 	bl	80a31e4 <_ZN9IPAddressC1Ehhhh>
 80a3be6:	4620      	mov	r0, r4
 80a3be8:	4a04      	ldr	r2, [pc, #16]	; (80a3bfc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3bea:	4905      	ldr	r1, [pc, #20]	; (80a3c00 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3bec:	b002      	add	sp, #8
 80a3bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3bf2:	f000 b847 	b.w	80a3c84 <__aeabi_atexit>
 80a3bf6:	bf00      	nop
 80a3bf8:	200003b0 	.word	0x200003b0
 80a3bfc:	200000c8 	.word	0x200000c8
 80a3c00:	080a3135 	.word	0x080a3135

080a3c04 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a3c04:	b570      	push	{r4, r5, r6, lr}
 80a3c06:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3c08:	2514      	movs	r5, #20
 80a3c0a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c0c:	4e09      	ldr	r6, [pc, #36]	; (80a3c34 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3c0e:	2100      	movs	r1, #0
 80a3c10:	f001 fbf8 	bl	80a5404 <memset>
 80a3c14:	8025      	strh	r5, [r4, #0]
 80a3c16:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c18:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3c1a:	60a5      	str	r5, [r4, #8]
 80a3c1c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c1e:	4628      	mov	r0, r5
 80a3c20:	f000 f840 	bl	80a3ca4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c24:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3c26:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3c28:	4628      	mov	r0, r5
 80a3c2a:	f000 f83b 	bl	80a3ca4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a3c2e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a3c30:	4620      	mov	r0, r4
 80a3c32:	bd70      	pop	{r4, r5, r6, pc}
 80a3c34:	080a6456 	.word	0x080a6456

080a3c38 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3c38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c3a:	4d0e      	ldr	r5, [pc, #56]	; (80a3c74 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3c3c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c3e:	6829      	ldr	r1, [r5, #0]
 80a3c40:	f011 0401 	ands.w	r4, r1, #1
 80a3c44:	d113      	bne.n	80a3c6e <_Z19__fetch_global_Wirev+0x36>
 80a3c46:	4628      	mov	r0, r5
 80a3c48:	f7fc fa38 	bl	80a00bc <__cxa_guard_acquire>
 80a3c4c:	b178      	cbz	r0, 80a3c6e <_Z19__fetch_global_Wirev+0x36>
 80a3c4e:	a801      	add	r0, sp, #4
 80a3c50:	f7ff ffd8 	bl	80a3c04 <_Z17acquireWireBufferv>
 80a3c54:	aa01      	add	r2, sp, #4
 80a3c56:	4621      	mov	r1, r4
 80a3c58:	4807      	ldr	r0, [pc, #28]	; (80a3c78 <_Z19__fetch_global_Wirev+0x40>)
 80a3c5a:	f7ff fc99 	bl	80a3590 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a3c5e:	4628      	mov	r0, r5
 80a3c60:	f7fc fa31 	bl	80a00c6 <__cxa_guard_release>
 80a3c64:	4a05      	ldr	r2, [pc, #20]	; (80a3c7c <_Z19__fetch_global_Wirev+0x44>)
 80a3c66:	4906      	ldr	r1, [pc, #24]	; (80a3c80 <_Z19__fetch_global_Wirev+0x48>)
 80a3c68:	4803      	ldr	r0, [pc, #12]	; (80a3c78 <_Z19__fetch_global_Wirev+0x40>)
 80a3c6a:	f000 f80b 	bl	80a3c84 <__aeabi_atexit>
	return wire;
}
 80a3c6e:	4802      	ldr	r0, [pc, #8]	; (80a3c78 <_Z19__fetch_global_Wirev+0x40>)
 80a3c70:	b007      	add	sp, #28
 80a3c72:	bd30      	pop	{r4, r5, pc}
 80a3c74:	200003c8 	.word	0x200003c8
 80a3c78:	200003cc 	.word	0x200003cc
 80a3c7c:	200000c8 	.word	0x200000c8
 80a3c80:	080a3539 	.word	0x080a3539

080a3c84 <__aeabi_atexit>:
 80a3c84:	460b      	mov	r3, r1
 80a3c86:	4601      	mov	r1, r0
 80a3c88:	4618      	mov	r0, r3
 80a3c8a:	f001 ba7b 	b.w	80a5184 <__cxa_atexit>
	...

080a3c90 <_ZSt15get_new_handlerv>:
 80a3c90:	4b02      	ldr	r3, [pc, #8]	; (80a3c9c <_ZSt15get_new_handlerv+0xc>)
 80a3c92:	6818      	ldr	r0, [r3, #0]
 80a3c94:	f3bf 8f5f 	dmb	sy
 80a3c98:	4770      	bx	lr
 80a3c9a:	bf00      	nop
 80a3c9c:	200003e0 	.word	0x200003e0

080a3ca0 <_ZdlPvj>:
 80a3ca0:	f7fc b9ff 	b.w	80a00a2 <_ZdlPv>

080a3ca4 <_ZnajRKSt9nothrow_t>:
 80a3ca4:	f000 b800 	b.w	80a3ca8 <_ZnwjRKSt9nothrow_t>

080a3ca8 <_ZnwjRKSt9nothrow_t>:
 80a3ca8:	b510      	push	{r4, lr}
 80a3caa:	2800      	cmp	r0, #0
 80a3cac:	bf14      	ite	ne
 80a3cae:	4604      	movne	r4, r0
 80a3cb0:	2401      	moveq	r4, #1
 80a3cb2:	4620      	mov	r0, r4
 80a3cb4:	f7fd fa92 	bl	80a11dc <malloc>
 80a3cb8:	b920      	cbnz	r0, 80a3cc4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3cba:	f7ff ffe9 	bl	80a3c90 <_ZSt15get_new_handlerv>
 80a3cbe:	b108      	cbz	r0, 80a3cc4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3cc0:	4780      	blx	r0
 80a3cc2:	e7f6      	b.n	80a3cb2 <_ZnwjRKSt9nothrow_t+0xa>
 80a3cc4:	bd10      	pop	{r4, pc}

080a3cc6 <_ZSt25__throw_bad_function_callv>:
 80a3cc6:	b508      	push	{r3, lr}
 80a3cc8:	f7fd fab0 	bl	80a122c <abort>

080a3ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3ccc:	4b18      	ldr	r3, [pc, #96]	; (80a3d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3cce:	681a      	ldr	r2, [r3, #0]
 80a3cd0:	07d1      	lsls	r1, r2, #31
 80a3cd2:	bf5c      	itt	pl
 80a3cd4:	2201      	movpl	r2, #1
 80a3cd6:	601a      	strpl	r2, [r3, #0]
 80a3cd8:	4b16      	ldr	r3, [pc, #88]	; (80a3d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3cda:	681a      	ldr	r2, [r3, #0]
 80a3cdc:	07d2      	lsls	r2, r2, #31
 80a3cde:	bf5c      	itt	pl
 80a3ce0:	2201      	movpl	r2, #1
 80a3ce2:	601a      	strpl	r2, [r3, #0]
 80a3ce4:	4b14      	ldr	r3, [pc, #80]	; (80a3d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3ce6:	681a      	ldr	r2, [r3, #0]
 80a3ce8:	07d0      	lsls	r0, r2, #31
 80a3cea:	bf5c      	itt	pl
 80a3cec:	2201      	movpl	r2, #1
 80a3cee:	601a      	strpl	r2, [r3, #0]
 80a3cf0:	4b12      	ldr	r3, [pc, #72]	; (80a3d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3cf2:	681a      	ldr	r2, [r3, #0]
 80a3cf4:	07d1      	lsls	r1, r2, #31
 80a3cf6:	bf5c      	itt	pl
 80a3cf8:	2201      	movpl	r2, #1
 80a3cfa:	601a      	strpl	r2, [r3, #0]
 80a3cfc:	4b10      	ldr	r3, [pc, #64]	; (80a3d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3cfe:	681a      	ldr	r2, [r3, #0]
 80a3d00:	07d2      	lsls	r2, r2, #31
 80a3d02:	bf5c      	itt	pl
 80a3d04:	2201      	movpl	r2, #1
 80a3d06:	601a      	strpl	r2, [r3, #0]
 80a3d08:	4b0e      	ldr	r3, [pc, #56]	; (80a3d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3d0a:	681a      	ldr	r2, [r3, #0]
 80a3d0c:	07d0      	lsls	r0, r2, #31
 80a3d0e:	bf5c      	itt	pl
 80a3d10:	2201      	movpl	r2, #1
 80a3d12:	601a      	strpl	r2, [r3, #0]
 80a3d14:	4b0c      	ldr	r3, [pc, #48]	; (80a3d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3d16:	681a      	ldr	r2, [r3, #0]
 80a3d18:	07d1      	lsls	r1, r2, #31
 80a3d1a:	bf5c      	itt	pl
 80a3d1c:	2201      	movpl	r2, #1
 80a3d1e:	601a      	strpl	r2, [r3, #0]
 80a3d20:	4b0a      	ldr	r3, [pc, #40]	; (80a3d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3d22:	681a      	ldr	r2, [r3, #0]
 80a3d24:	07d2      	lsls	r2, r2, #31
 80a3d26:	bf5c      	itt	pl
 80a3d28:	2201      	movpl	r2, #1
 80a3d2a:	601a      	strpl	r2, [r3, #0]
 80a3d2c:	4770      	bx	lr
 80a3d2e:	bf00      	nop
 80a3d30:	20000400 	.word	0x20000400
 80a3d34:	200003fc 	.word	0x200003fc
 80a3d38:	200003f8 	.word	0x200003f8
 80a3d3c:	200003f4 	.word	0x200003f4
 80a3d40:	200003f0 	.word	0x200003f0
 80a3d44:	200003ec 	.word	0x200003ec
 80a3d48:	200003e8 	.word	0x200003e8
 80a3d4c:	200003e4 	.word	0x200003e4

080a3d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3d50:	4b24      	ldr	r3, [pc, #144]	; (80a3de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3d52:	681a      	ldr	r2, [r3, #0]
 80a3d54:	07d0      	lsls	r0, r2, #31
 80a3d56:	bf5c      	itt	pl
 80a3d58:	2201      	movpl	r2, #1
 80a3d5a:	601a      	strpl	r2, [r3, #0]
 80a3d5c:	4b22      	ldr	r3, [pc, #136]	; (80a3de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3d5e:	681a      	ldr	r2, [r3, #0]
 80a3d60:	07d1      	lsls	r1, r2, #31
 80a3d62:	bf5c      	itt	pl
 80a3d64:	2201      	movpl	r2, #1
 80a3d66:	601a      	strpl	r2, [r3, #0]
 80a3d68:	4b20      	ldr	r3, [pc, #128]	; (80a3dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3d6a:	681a      	ldr	r2, [r3, #0]
 80a3d6c:	07d2      	lsls	r2, r2, #31
 80a3d6e:	bf5c      	itt	pl
 80a3d70:	2201      	movpl	r2, #1
 80a3d72:	601a      	strpl	r2, [r3, #0]
 80a3d74:	4b1e      	ldr	r3, [pc, #120]	; (80a3df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3d76:	681a      	ldr	r2, [r3, #0]
 80a3d78:	07d0      	lsls	r0, r2, #31
 80a3d7a:	bf5c      	itt	pl
 80a3d7c:	2201      	movpl	r2, #1
 80a3d7e:	601a      	strpl	r2, [r3, #0]
 80a3d80:	4b1c      	ldr	r3, [pc, #112]	; (80a3df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3d82:	681a      	ldr	r2, [r3, #0]
 80a3d84:	07d1      	lsls	r1, r2, #31
 80a3d86:	bf5c      	itt	pl
 80a3d88:	2201      	movpl	r2, #1
 80a3d8a:	601a      	strpl	r2, [r3, #0]
 80a3d8c:	4b1a      	ldr	r3, [pc, #104]	; (80a3df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3d8e:	681a      	ldr	r2, [r3, #0]
 80a3d90:	07d2      	lsls	r2, r2, #31
 80a3d92:	bf5c      	itt	pl
 80a3d94:	2201      	movpl	r2, #1
 80a3d96:	601a      	strpl	r2, [r3, #0]
 80a3d98:	4b18      	ldr	r3, [pc, #96]	; (80a3dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3d9a:	681a      	ldr	r2, [r3, #0]
 80a3d9c:	07d0      	lsls	r0, r2, #31
 80a3d9e:	bf5c      	itt	pl
 80a3da0:	2201      	movpl	r2, #1
 80a3da2:	601a      	strpl	r2, [r3, #0]
 80a3da4:	4b16      	ldr	r3, [pc, #88]	; (80a3e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3da6:	681a      	ldr	r2, [r3, #0]
 80a3da8:	07d1      	lsls	r1, r2, #31
 80a3daa:	bf5c      	itt	pl
 80a3dac:	2201      	movpl	r2, #1
 80a3dae:	601a      	strpl	r2, [r3, #0]
 80a3db0:	4b14      	ldr	r3, [pc, #80]	; (80a3e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3db2:	681a      	ldr	r2, [r3, #0]
 80a3db4:	07d2      	lsls	r2, r2, #31
 80a3db6:	bf5c      	itt	pl
 80a3db8:	2201      	movpl	r2, #1
 80a3dba:	601a      	strpl	r2, [r3, #0]
 80a3dbc:	4b12      	ldr	r3, [pc, #72]	; (80a3e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3dbe:	681a      	ldr	r2, [r3, #0]
 80a3dc0:	07d0      	lsls	r0, r2, #31
 80a3dc2:	bf5c      	itt	pl
 80a3dc4:	2201      	movpl	r2, #1
 80a3dc6:	601a      	strpl	r2, [r3, #0]
 80a3dc8:	4b10      	ldr	r3, [pc, #64]	; (80a3e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3dca:	681a      	ldr	r2, [r3, #0]
 80a3dcc:	07d1      	lsls	r1, r2, #31
 80a3dce:	bf5c      	itt	pl
 80a3dd0:	2201      	movpl	r2, #1
 80a3dd2:	601a      	strpl	r2, [r3, #0]
 80a3dd4:	4b0e      	ldr	r3, [pc, #56]	; (80a3e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3dd6:	681a      	ldr	r2, [r3, #0]
 80a3dd8:	07d2      	lsls	r2, r2, #31
 80a3dda:	bf5c      	itt	pl
 80a3ddc:	2201      	movpl	r2, #1
 80a3dde:	601a      	strpl	r2, [r3, #0]
 80a3de0:	4770      	bx	lr
 80a3de2:	bf00      	nop
 80a3de4:	20000430 	.word	0x20000430
 80a3de8:	2000042c 	.word	0x2000042c
 80a3dec:	20000428 	.word	0x20000428
 80a3df0:	20000424 	.word	0x20000424
 80a3df4:	20000420 	.word	0x20000420
 80a3df8:	2000041c 	.word	0x2000041c
 80a3dfc:	20000418 	.word	0x20000418
 80a3e00:	20000414 	.word	0x20000414
 80a3e04:	20000410 	.word	0x20000410
 80a3e08:	2000040c 	.word	0x2000040c
 80a3e0c:	20000408 	.word	0x20000408
 80a3e10:	20000404 	.word	0x20000404

080a3e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a3e14:	4b24      	ldr	r3, [pc, #144]	; (80a3ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a3e16:	681a      	ldr	r2, [r3, #0]
 80a3e18:	07d0      	lsls	r0, r2, #31
 80a3e1a:	bf5c      	itt	pl
 80a3e1c:	2201      	movpl	r2, #1
 80a3e1e:	601a      	strpl	r2, [r3, #0]
 80a3e20:	4b22      	ldr	r3, [pc, #136]	; (80a3eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a3e22:	681a      	ldr	r2, [r3, #0]
 80a3e24:	07d1      	lsls	r1, r2, #31
 80a3e26:	bf5c      	itt	pl
 80a3e28:	2201      	movpl	r2, #1
 80a3e2a:	601a      	strpl	r2, [r3, #0]
 80a3e2c:	4b20      	ldr	r3, [pc, #128]	; (80a3eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3e2e:	681a      	ldr	r2, [r3, #0]
 80a3e30:	07d2      	lsls	r2, r2, #31
 80a3e32:	bf5c      	itt	pl
 80a3e34:	2201      	movpl	r2, #1
 80a3e36:	601a      	strpl	r2, [r3, #0]
 80a3e38:	4b1e      	ldr	r3, [pc, #120]	; (80a3eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3e3a:	681a      	ldr	r2, [r3, #0]
 80a3e3c:	07d0      	lsls	r0, r2, #31
 80a3e3e:	bf5c      	itt	pl
 80a3e40:	2201      	movpl	r2, #1
 80a3e42:	601a      	strpl	r2, [r3, #0]
 80a3e44:	4b1c      	ldr	r3, [pc, #112]	; (80a3eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3e46:	681a      	ldr	r2, [r3, #0]
 80a3e48:	07d1      	lsls	r1, r2, #31
 80a3e4a:	bf5c      	itt	pl
 80a3e4c:	2201      	movpl	r2, #1
 80a3e4e:	601a      	strpl	r2, [r3, #0]
 80a3e50:	4b1a      	ldr	r3, [pc, #104]	; (80a3ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3e52:	681a      	ldr	r2, [r3, #0]
 80a3e54:	07d2      	lsls	r2, r2, #31
 80a3e56:	bf5c      	itt	pl
 80a3e58:	2201      	movpl	r2, #1
 80a3e5a:	601a      	strpl	r2, [r3, #0]
 80a3e5c:	4b18      	ldr	r3, [pc, #96]	; (80a3ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3e5e:	681a      	ldr	r2, [r3, #0]
 80a3e60:	07d0      	lsls	r0, r2, #31
 80a3e62:	bf5c      	itt	pl
 80a3e64:	2201      	movpl	r2, #1
 80a3e66:	601a      	strpl	r2, [r3, #0]
 80a3e68:	4b16      	ldr	r3, [pc, #88]	; (80a3ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3e6a:	681a      	ldr	r2, [r3, #0]
 80a3e6c:	07d1      	lsls	r1, r2, #31
 80a3e6e:	bf5c      	itt	pl
 80a3e70:	2201      	movpl	r2, #1
 80a3e72:	601a      	strpl	r2, [r3, #0]
 80a3e74:	4b14      	ldr	r3, [pc, #80]	; (80a3ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3e76:	681a      	ldr	r2, [r3, #0]
 80a3e78:	07d2      	lsls	r2, r2, #31
 80a3e7a:	bf5c      	itt	pl
 80a3e7c:	2201      	movpl	r2, #1
 80a3e7e:	601a      	strpl	r2, [r3, #0]
 80a3e80:	4b12      	ldr	r3, [pc, #72]	; (80a3ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3e82:	681a      	ldr	r2, [r3, #0]
 80a3e84:	07d0      	lsls	r0, r2, #31
 80a3e86:	bf5c      	itt	pl
 80a3e88:	2201      	movpl	r2, #1
 80a3e8a:	601a      	strpl	r2, [r3, #0]
 80a3e8c:	4b10      	ldr	r3, [pc, #64]	; (80a3ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3e8e:	681a      	ldr	r2, [r3, #0]
 80a3e90:	07d1      	lsls	r1, r2, #31
 80a3e92:	bf5c      	itt	pl
 80a3e94:	2201      	movpl	r2, #1
 80a3e96:	601a      	strpl	r2, [r3, #0]
 80a3e98:	4b0e      	ldr	r3, [pc, #56]	; (80a3ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3e9a:	681a      	ldr	r2, [r3, #0]
 80a3e9c:	07d2      	lsls	r2, r2, #31
 80a3e9e:	bf5c      	itt	pl
 80a3ea0:	2201      	movpl	r2, #1
 80a3ea2:	601a      	strpl	r2, [r3, #0]
 80a3ea4:	4770      	bx	lr
 80a3ea6:	bf00      	nop
 80a3ea8:	20000460 	.word	0x20000460
 80a3eac:	2000045c 	.word	0x2000045c
 80a3eb0:	20000458 	.word	0x20000458
 80a3eb4:	20000454 	.word	0x20000454
 80a3eb8:	20000450 	.word	0x20000450
 80a3ebc:	2000044c 	.word	0x2000044c
 80a3ec0:	20000448 	.word	0x20000448
 80a3ec4:	20000444 	.word	0x20000444
 80a3ec8:	20000440 	.word	0x20000440
 80a3ecc:	2000043c 	.word	0x2000043c
 80a3ed0:	20000438 	.word	0x20000438
 80a3ed4:	20000434 	.word	0x20000434

080a3ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3ed8:	4b18      	ldr	r3, [pc, #96]	; (80a3f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3eda:	681a      	ldr	r2, [r3, #0]
 80a3edc:	07d1      	lsls	r1, r2, #31
 80a3ede:	bf5c      	itt	pl
 80a3ee0:	2201      	movpl	r2, #1
 80a3ee2:	601a      	strpl	r2, [r3, #0]
 80a3ee4:	4b16      	ldr	r3, [pc, #88]	; (80a3f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3ee6:	681a      	ldr	r2, [r3, #0]
 80a3ee8:	07d2      	lsls	r2, r2, #31
 80a3eea:	bf5c      	itt	pl
 80a3eec:	2201      	movpl	r2, #1
 80a3eee:	601a      	strpl	r2, [r3, #0]
 80a3ef0:	4b14      	ldr	r3, [pc, #80]	; (80a3f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3ef2:	681a      	ldr	r2, [r3, #0]
 80a3ef4:	07d0      	lsls	r0, r2, #31
 80a3ef6:	bf5c      	itt	pl
 80a3ef8:	2201      	movpl	r2, #1
 80a3efa:	601a      	strpl	r2, [r3, #0]
 80a3efc:	4b12      	ldr	r3, [pc, #72]	; (80a3f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3efe:	681a      	ldr	r2, [r3, #0]
 80a3f00:	07d1      	lsls	r1, r2, #31
 80a3f02:	bf5c      	itt	pl
 80a3f04:	2201      	movpl	r2, #1
 80a3f06:	601a      	strpl	r2, [r3, #0]
 80a3f08:	4b10      	ldr	r3, [pc, #64]	; (80a3f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3f0a:	681a      	ldr	r2, [r3, #0]
 80a3f0c:	07d2      	lsls	r2, r2, #31
 80a3f0e:	bf5c      	itt	pl
 80a3f10:	2201      	movpl	r2, #1
 80a3f12:	601a      	strpl	r2, [r3, #0]
 80a3f14:	4b0e      	ldr	r3, [pc, #56]	; (80a3f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3f16:	681a      	ldr	r2, [r3, #0]
 80a3f18:	07d0      	lsls	r0, r2, #31
 80a3f1a:	bf5c      	itt	pl
 80a3f1c:	2201      	movpl	r2, #1
 80a3f1e:	601a      	strpl	r2, [r3, #0]
 80a3f20:	4b0c      	ldr	r3, [pc, #48]	; (80a3f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3f22:	681a      	ldr	r2, [r3, #0]
 80a3f24:	07d1      	lsls	r1, r2, #31
 80a3f26:	bf5c      	itt	pl
 80a3f28:	2201      	movpl	r2, #1
 80a3f2a:	601a      	strpl	r2, [r3, #0]
 80a3f2c:	4b0a      	ldr	r3, [pc, #40]	; (80a3f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3f2e:	681a      	ldr	r2, [r3, #0]
 80a3f30:	07d2      	lsls	r2, r2, #31
 80a3f32:	bf5c      	itt	pl
 80a3f34:	2201      	movpl	r2, #1
 80a3f36:	601a      	strpl	r2, [r3, #0]
 80a3f38:	4770      	bx	lr
 80a3f3a:	bf00      	nop
 80a3f3c:	20000480 	.word	0x20000480
 80a3f40:	2000047c 	.word	0x2000047c
 80a3f44:	20000478 	.word	0x20000478
 80a3f48:	20000474 	.word	0x20000474
 80a3f4c:	20000470 	.word	0x20000470
 80a3f50:	2000046c 	.word	0x2000046c
 80a3f54:	20000468 	.word	0x20000468
 80a3f58:	20000464 	.word	0x20000464
 80a3f5c:	00000000 	.word	0x00000000

080a3f60 <floor>:
 80a3f60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a3f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3f68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a3f6c:	2e13      	cmp	r6, #19
 80a3f6e:	460b      	mov	r3, r1
 80a3f70:	4604      	mov	r4, r0
 80a3f72:	460d      	mov	r5, r1
 80a3f74:	4688      	mov	r8, r1
 80a3f76:	4607      	mov	r7, r0
 80a3f78:	dc1c      	bgt.n	80a3fb4 <floor+0x54>
 80a3f7a:	2e00      	cmp	r6, #0
 80a3f7c:	db3f      	blt.n	80a3ffe <floor+0x9e>
 80a3f7e:	4a3a      	ldr	r2, [pc, #232]	; (80a4068 <floor+0x108>)
 80a3f80:	4686      	mov	lr, r0
 80a3f82:	fa42 f906 	asr.w	r9, r2, r6
 80a3f86:	ea01 0209 	and.w	r2, r1, r9
 80a3f8a:	4302      	orrs	r2, r0
 80a3f8c:	d017      	beq.n	80a3fbe <floor+0x5e>
 80a3f8e:	a334      	add	r3, pc, #208	; (adr r3, 80a4060 <floor+0x100>)
 80a3f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f94:	f000 f872 	bl	80a407c <__adddf3>
 80a3f98:	2200      	movs	r2, #0
 80a3f9a:	2300      	movs	r3, #0
 80a3f9c:	f000 fcb0 	bl	80a4900 <__aeabi_dcmpgt>
 80a3fa0:	b120      	cbz	r0, 80a3fac <floor+0x4c>
 80a3fa2:	2d00      	cmp	r5, #0
 80a3fa4:	db40      	blt.n	80a4028 <floor+0xc8>
 80a3fa6:	ea28 0509 	bic.w	r5, r8, r9
 80a3faa:	2700      	movs	r7, #0
 80a3fac:	4638      	mov	r0, r7
 80a3fae:	4629      	mov	r1, r5
 80a3fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3fb4:	2e33      	cmp	r6, #51	; 0x33
 80a3fb6:	dd06      	ble.n	80a3fc6 <floor+0x66>
 80a3fb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a3fbc:	d02f      	beq.n	80a401e <floor+0xbe>
 80a3fbe:	4620      	mov	r0, r4
 80a3fc0:	4619      	mov	r1, r3
 80a3fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3fc6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a3fca:	f04f 39ff 	mov.w	r9, #4294967295
 80a3fce:	fa29 f902 	lsr.w	r9, r9, r2
 80a3fd2:	ea10 0f09 	tst.w	r0, r9
 80a3fd6:	d0f2      	beq.n	80a3fbe <floor+0x5e>
 80a3fd8:	a321      	add	r3, pc, #132	; (adr r3, 80a4060 <floor+0x100>)
 80a3fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fde:	f000 f84d 	bl	80a407c <__adddf3>
 80a3fe2:	2200      	movs	r2, #0
 80a3fe4:	2300      	movs	r3, #0
 80a3fe6:	f000 fc8b 	bl	80a4900 <__aeabi_dcmpgt>
 80a3fea:	2800      	cmp	r0, #0
 80a3fec:	d0de      	beq.n	80a3fac <floor+0x4c>
 80a3fee:	2d00      	cmp	r5, #0
 80a3ff0:	db20      	blt.n	80a4034 <floor+0xd4>
 80a3ff2:	4645      	mov	r5, r8
 80a3ff4:	ea27 0709 	bic.w	r7, r7, r9
 80a3ff8:	4638      	mov	r0, r7
 80a3ffa:	4629      	mov	r1, r5
 80a3ffc:	e7d8      	b.n	80a3fb0 <floor+0x50>
 80a3ffe:	a318      	add	r3, pc, #96	; (adr r3, 80a4060 <floor+0x100>)
 80a4000:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4004:	f000 f83a 	bl	80a407c <__adddf3>
 80a4008:	2200      	movs	r2, #0
 80a400a:	2300      	movs	r3, #0
 80a400c:	f000 fc78 	bl	80a4900 <__aeabi_dcmpgt>
 80a4010:	2800      	cmp	r0, #0
 80a4012:	d0cb      	beq.n	80a3fac <floor+0x4c>
 80a4014:	2d00      	cmp	r5, #0
 80a4016:	db18      	blt.n	80a404a <floor+0xea>
 80a4018:	2700      	movs	r7, #0
 80a401a:	463d      	mov	r5, r7
 80a401c:	e7c6      	b.n	80a3fac <floor+0x4c>
 80a401e:	4602      	mov	r2, r0
 80a4020:	460b      	mov	r3, r1
 80a4022:	f000 f82b 	bl	80a407c <__adddf3>
 80a4026:	e7cc      	b.n	80a3fc2 <floor+0x62>
 80a4028:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a402c:	fa43 f606 	asr.w	r6, r3, r6
 80a4030:	44b0      	add	r8, r6
 80a4032:	e7b8      	b.n	80a3fa6 <floor+0x46>
 80a4034:	2e14      	cmp	r6, #20
 80a4036:	d010      	beq.n	80a405a <floor+0xfa>
 80a4038:	2301      	movs	r3, #1
 80a403a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a403e:	fa03 f606 	lsl.w	r6, r3, r6
 80a4042:	1937      	adds	r7, r6, r4
 80a4044:	bf28      	it	cs
 80a4046:	4498      	addcs	r8, r3
 80a4048:	e7d3      	b.n	80a3ff2 <floor+0x92>
 80a404a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a404e:	4b07      	ldr	r3, [pc, #28]	; (80a406c <floor+0x10c>)
 80a4050:	4322      	orrs	r2, r4
 80a4052:	bf18      	it	ne
 80a4054:	461d      	movne	r5, r3
 80a4056:	2700      	movs	r7, #0
 80a4058:	e7a8      	b.n	80a3fac <floor+0x4c>
 80a405a:	f105 0801 	add.w	r8, r5, #1
 80a405e:	e7c8      	b.n	80a3ff2 <floor+0x92>
 80a4060:	8800759c 	.word	0x8800759c
 80a4064:	7e37e43c 	.word	0x7e37e43c
 80a4068:	000fffff 	.word	0x000fffff
 80a406c:	bff00000 	.word	0xbff00000

080a4070 <__aeabi_drsub>:
 80a4070:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4074:	e002      	b.n	80a407c <__adddf3>
 80a4076:	bf00      	nop

080a4078 <__aeabi_dsub>:
 80a4078:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a407c <__adddf3>:
 80a407c:	b530      	push	{r4, r5, lr}
 80a407e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4082:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4086:	ea94 0f05 	teq	r4, r5
 80a408a:	bf08      	it	eq
 80a408c:	ea90 0f02 	teqeq	r0, r2
 80a4090:	bf1f      	itttt	ne
 80a4092:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4096:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a409a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a409e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a40a2:	f000 80e2 	beq.w	80a426a <__adddf3+0x1ee>
 80a40a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a40aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a40ae:	bfb8      	it	lt
 80a40b0:	426d      	neglt	r5, r5
 80a40b2:	dd0c      	ble.n	80a40ce <__adddf3+0x52>
 80a40b4:	442c      	add	r4, r5
 80a40b6:	ea80 0202 	eor.w	r2, r0, r2
 80a40ba:	ea81 0303 	eor.w	r3, r1, r3
 80a40be:	ea82 0000 	eor.w	r0, r2, r0
 80a40c2:	ea83 0101 	eor.w	r1, r3, r1
 80a40c6:	ea80 0202 	eor.w	r2, r0, r2
 80a40ca:	ea81 0303 	eor.w	r3, r1, r3
 80a40ce:	2d36      	cmp	r5, #54	; 0x36
 80a40d0:	bf88      	it	hi
 80a40d2:	bd30      	pophi	{r4, r5, pc}
 80a40d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a40d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a40dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a40e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a40e4:	d002      	beq.n	80a40ec <__adddf3+0x70>
 80a40e6:	4240      	negs	r0, r0
 80a40e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a40ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a40f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a40f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a40f8:	d002      	beq.n	80a4100 <__adddf3+0x84>
 80a40fa:	4252      	negs	r2, r2
 80a40fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4100:	ea94 0f05 	teq	r4, r5
 80a4104:	f000 80a7 	beq.w	80a4256 <__adddf3+0x1da>
 80a4108:	f1a4 0401 	sub.w	r4, r4, #1
 80a410c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4110:	db0d      	blt.n	80a412e <__adddf3+0xb2>
 80a4112:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4116:	fa22 f205 	lsr.w	r2, r2, r5
 80a411a:	1880      	adds	r0, r0, r2
 80a411c:	f141 0100 	adc.w	r1, r1, #0
 80a4120:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4124:	1880      	adds	r0, r0, r2
 80a4126:	fa43 f305 	asr.w	r3, r3, r5
 80a412a:	4159      	adcs	r1, r3
 80a412c:	e00e      	b.n	80a414c <__adddf3+0xd0>
 80a412e:	f1a5 0520 	sub.w	r5, r5, #32
 80a4132:	f10e 0e20 	add.w	lr, lr, #32
 80a4136:	2a01      	cmp	r2, #1
 80a4138:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a413c:	bf28      	it	cs
 80a413e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4142:	fa43 f305 	asr.w	r3, r3, r5
 80a4146:	18c0      	adds	r0, r0, r3
 80a4148:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a414c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4150:	d507      	bpl.n	80a4162 <__adddf3+0xe6>
 80a4152:	f04f 0e00 	mov.w	lr, #0
 80a4156:	f1dc 0c00 	rsbs	ip, ip, #0
 80a415a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a415e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4162:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4166:	d31b      	bcc.n	80a41a0 <__adddf3+0x124>
 80a4168:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a416c:	d30c      	bcc.n	80a4188 <__adddf3+0x10c>
 80a416e:	0849      	lsrs	r1, r1, #1
 80a4170:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4174:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4178:	f104 0401 	add.w	r4, r4, #1
 80a417c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4180:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4184:	f080 809a 	bcs.w	80a42bc <__adddf3+0x240>
 80a4188:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a418c:	bf08      	it	eq
 80a418e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4192:	f150 0000 	adcs.w	r0, r0, #0
 80a4196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a419a:	ea41 0105 	orr.w	r1, r1, r5
 80a419e:	bd30      	pop	{r4, r5, pc}
 80a41a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a41a4:	4140      	adcs	r0, r0
 80a41a6:	eb41 0101 	adc.w	r1, r1, r1
 80a41aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a41ae:	f1a4 0401 	sub.w	r4, r4, #1
 80a41b2:	d1e9      	bne.n	80a4188 <__adddf3+0x10c>
 80a41b4:	f091 0f00 	teq	r1, #0
 80a41b8:	bf04      	itt	eq
 80a41ba:	4601      	moveq	r1, r0
 80a41bc:	2000      	moveq	r0, #0
 80a41be:	fab1 f381 	clz	r3, r1
 80a41c2:	bf08      	it	eq
 80a41c4:	3320      	addeq	r3, #32
 80a41c6:	f1a3 030b 	sub.w	r3, r3, #11
 80a41ca:	f1b3 0220 	subs.w	r2, r3, #32
 80a41ce:	da0c      	bge.n	80a41ea <__adddf3+0x16e>
 80a41d0:	320c      	adds	r2, #12
 80a41d2:	dd08      	ble.n	80a41e6 <__adddf3+0x16a>
 80a41d4:	f102 0c14 	add.w	ip, r2, #20
 80a41d8:	f1c2 020c 	rsb	r2, r2, #12
 80a41dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a41e0:	fa21 f102 	lsr.w	r1, r1, r2
 80a41e4:	e00c      	b.n	80a4200 <__adddf3+0x184>
 80a41e6:	f102 0214 	add.w	r2, r2, #20
 80a41ea:	bfd8      	it	le
 80a41ec:	f1c2 0c20 	rsble	ip, r2, #32
 80a41f0:	fa01 f102 	lsl.w	r1, r1, r2
 80a41f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a41f8:	bfdc      	itt	le
 80a41fa:	ea41 010c 	orrle.w	r1, r1, ip
 80a41fe:	4090      	lslle	r0, r2
 80a4200:	1ae4      	subs	r4, r4, r3
 80a4202:	bfa2      	ittt	ge
 80a4204:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4208:	4329      	orrge	r1, r5
 80a420a:	bd30      	popge	{r4, r5, pc}
 80a420c:	ea6f 0404 	mvn.w	r4, r4
 80a4210:	3c1f      	subs	r4, #31
 80a4212:	da1c      	bge.n	80a424e <__adddf3+0x1d2>
 80a4214:	340c      	adds	r4, #12
 80a4216:	dc0e      	bgt.n	80a4236 <__adddf3+0x1ba>
 80a4218:	f104 0414 	add.w	r4, r4, #20
 80a421c:	f1c4 0220 	rsb	r2, r4, #32
 80a4220:	fa20 f004 	lsr.w	r0, r0, r4
 80a4224:	fa01 f302 	lsl.w	r3, r1, r2
 80a4228:	ea40 0003 	orr.w	r0, r0, r3
 80a422c:	fa21 f304 	lsr.w	r3, r1, r4
 80a4230:	ea45 0103 	orr.w	r1, r5, r3
 80a4234:	bd30      	pop	{r4, r5, pc}
 80a4236:	f1c4 040c 	rsb	r4, r4, #12
 80a423a:	f1c4 0220 	rsb	r2, r4, #32
 80a423e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4242:	fa01 f304 	lsl.w	r3, r1, r4
 80a4246:	ea40 0003 	orr.w	r0, r0, r3
 80a424a:	4629      	mov	r1, r5
 80a424c:	bd30      	pop	{r4, r5, pc}
 80a424e:	fa21 f004 	lsr.w	r0, r1, r4
 80a4252:	4629      	mov	r1, r5
 80a4254:	bd30      	pop	{r4, r5, pc}
 80a4256:	f094 0f00 	teq	r4, #0
 80a425a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a425e:	bf06      	itte	eq
 80a4260:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4264:	3401      	addeq	r4, #1
 80a4266:	3d01      	subne	r5, #1
 80a4268:	e74e      	b.n	80a4108 <__adddf3+0x8c>
 80a426a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a426e:	bf18      	it	ne
 80a4270:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4274:	d029      	beq.n	80a42ca <__adddf3+0x24e>
 80a4276:	ea94 0f05 	teq	r4, r5
 80a427a:	bf08      	it	eq
 80a427c:	ea90 0f02 	teqeq	r0, r2
 80a4280:	d005      	beq.n	80a428e <__adddf3+0x212>
 80a4282:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4286:	bf04      	itt	eq
 80a4288:	4619      	moveq	r1, r3
 80a428a:	4610      	moveq	r0, r2
 80a428c:	bd30      	pop	{r4, r5, pc}
 80a428e:	ea91 0f03 	teq	r1, r3
 80a4292:	bf1e      	ittt	ne
 80a4294:	2100      	movne	r1, #0
 80a4296:	2000      	movne	r0, #0
 80a4298:	bd30      	popne	{r4, r5, pc}
 80a429a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a429e:	d105      	bne.n	80a42ac <__adddf3+0x230>
 80a42a0:	0040      	lsls	r0, r0, #1
 80a42a2:	4149      	adcs	r1, r1
 80a42a4:	bf28      	it	cs
 80a42a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a42aa:	bd30      	pop	{r4, r5, pc}
 80a42ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a42b0:	bf3c      	itt	cc
 80a42b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a42b6:	bd30      	popcc	{r4, r5, pc}
 80a42b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a42bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a42c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a42c4:	f04f 0000 	mov.w	r0, #0
 80a42c8:	bd30      	pop	{r4, r5, pc}
 80a42ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a42ce:	bf1a      	itte	ne
 80a42d0:	4619      	movne	r1, r3
 80a42d2:	4610      	movne	r0, r2
 80a42d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a42d8:	bf1c      	itt	ne
 80a42da:	460b      	movne	r3, r1
 80a42dc:	4602      	movne	r2, r0
 80a42de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a42e2:	bf06      	itte	eq
 80a42e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a42e8:	ea91 0f03 	teqeq	r1, r3
 80a42ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a42f0:	bd30      	pop	{r4, r5, pc}
 80a42f2:	bf00      	nop

080a42f4 <__aeabi_ui2d>:
 80a42f4:	f090 0f00 	teq	r0, #0
 80a42f8:	bf04      	itt	eq
 80a42fa:	2100      	moveq	r1, #0
 80a42fc:	4770      	bxeq	lr
 80a42fe:	b530      	push	{r4, r5, lr}
 80a4300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4308:	f04f 0500 	mov.w	r5, #0
 80a430c:	f04f 0100 	mov.w	r1, #0
 80a4310:	e750      	b.n	80a41b4 <__adddf3+0x138>
 80a4312:	bf00      	nop

080a4314 <__aeabi_i2d>:
 80a4314:	f090 0f00 	teq	r0, #0
 80a4318:	bf04      	itt	eq
 80a431a:	2100      	moveq	r1, #0
 80a431c:	4770      	bxeq	lr
 80a431e:	b530      	push	{r4, r5, lr}
 80a4320:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4324:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4328:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a432c:	bf48      	it	mi
 80a432e:	4240      	negmi	r0, r0
 80a4330:	f04f 0100 	mov.w	r1, #0
 80a4334:	e73e      	b.n	80a41b4 <__adddf3+0x138>
 80a4336:	bf00      	nop

080a4338 <__aeabi_f2d>:
 80a4338:	0042      	lsls	r2, r0, #1
 80a433a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a433e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4342:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4346:	bf1f      	itttt	ne
 80a4348:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a434c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4350:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4354:	4770      	bxne	lr
 80a4356:	f092 0f00 	teq	r2, #0
 80a435a:	bf14      	ite	ne
 80a435c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4360:	4770      	bxeq	lr
 80a4362:	b530      	push	{r4, r5, lr}
 80a4364:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4368:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a436c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4370:	e720      	b.n	80a41b4 <__adddf3+0x138>
 80a4372:	bf00      	nop

080a4374 <__aeabi_ul2d>:
 80a4374:	ea50 0201 	orrs.w	r2, r0, r1
 80a4378:	bf08      	it	eq
 80a437a:	4770      	bxeq	lr
 80a437c:	b530      	push	{r4, r5, lr}
 80a437e:	f04f 0500 	mov.w	r5, #0
 80a4382:	e00a      	b.n	80a439a <__aeabi_l2d+0x16>

080a4384 <__aeabi_l2d>:
 80a4384:	ea50 0201 	orrs.w	r2, r0, r1
 80a4388:	bf08      	it	eq
 80a438a:	4770      	bxeq	lr
 80a438c:	b530      	push	{r4, r5, lr}
 80a438e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4392:	d502      	bpl.n	80a439a <__aeabi_l2d+0x16>
 80a4394:	4240      	negs	r0, r0
 80a4396:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a439a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a439e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a43a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a43a6:	f43f aedc 	beq.w	80a4162 <__adddf3+0xe6>
 80a43aa:	f04f 0203 	mov.w	r2, #3
 80a43ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a43b2:	bf18      	it	ne
 80a43b4:	3203      	addne	r2, #3
 80a43b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a43ba:	bf18      	it	ne
 80a43bc:	3203      	addne	r2, #3
 80a43be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a43c2:	f1c2 0320 	rsb	r3, r2, #32
 80a43c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a43ca:	fa20 f002 	lsr.w	r0, r0, r2
 80a43ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80a43d2:	ea40 000e 	orr.w	r0, r0, lr
 80a43d6:	fa21 f102 	lsr.w	r1, r1, r2
 80a43da:	4414      	add	r4, r2
 80a43dc:	e6c1      	b.n	80a4162 <__adddf3+0xe6>
 80a43de:	bf00      	nop

080a43e0 <__aeabi_dmul>:
 80a43e0:	b570      	push	{r4, r5, r6, lr}
 80a43e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a43e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a43ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a43ee:	bf1d      	ittte	ne
 80a43f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a43f4:	ea94 0f0c 	teqne	r4, ip
 80a43f8:	ea95 0f0c 	teqne	r5, ip
 80a43fc:	f000 f8de 	bleq	80a45bc <__aeabi_dmul+0x1dc>
 80a4400:	442c      	add	r4, r5
 80a4402:	ea81 0603 	eor.w	r6, r1, r3
 80a4406:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a440a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a440e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4412:	bf18      	it	ne
 80a4414:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a441c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4420:	d038      	beq.n	80a4494 <__aeabi_dmul+0xb4>
 80a4422:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4426:	f04f 0500 	mov.w	r5, #0
 80a442a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a442e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4432:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4436:	f04f 0600 	mov.w	r6, #0
 80a443a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a443e:	f09c 0f00 	teq	ip, #0
 80a4442:	bf18      	it	ne
 80a4444:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4448:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a444c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4450:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4454:	d204      	bcs.n	80a4460 <__aeabi_dmul+0x80>
 80a4456:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a445a:	416d      	adcs	r5, r5
 80a445c:	eb46 0606 	adc.w	r6, r6, r6
 80a4460:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4464:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4468:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a446c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4470:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4474:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4478:	bf88      	it	hi
 80a447a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a447e:	d81e      	bhi.n	80a44be <__aeabi_dmul+0xde>
 80a4480:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4484:	bf08      	it	eq
 80a4486:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a448a:	f150 0000 	adcs.w	r0, r0, #0
 80a448e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4492:	bd70      	pop	{r4, r5, r6, pc}
 80a4494:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4498:	ea46 0101 	orr.w	r1, r6, r1
 80a449c:	ea40 0002 	orr.w	r0, r0, r2
 80a44a0:	ea81 0103 	eor.w	r1, r1, r3
 80a44a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a44a8:	bfc2      	ittt	gt
 80a44aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a44ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a44b2:	bd70      	popgt	{r4, r5, r6, pc}
 80a44b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a44b8:	f04f 0e00 	mov.w	lr, #0
 80a44bc:	3c01      	subs	r4, #1
 80a44be:	f300 80ab 	bgt.w	80a4618 <__aeabi_dmul+0x238>
 80a44c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a44c6:	bfde      	ittt	le
 80a44c8:	2000      	movle	r0, #0
 80a44ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a44ce:	bd70      	pople	{r4, r5, r6, pc}
 80a44d0:	f1c4 0400 	rsb	r4, r4, #0
 80a44d4:	3c20      	subs	r4, #32
 80a44d6:	da35      	bge.n	80a4544 <__aeabi_dmul+0x164>
 80a44d8:	340c      	adds	r4, #12
 80a44da:	dc1b      	bgt.n	80a4514 <__aeabi_dmul+0x134>
 80a44dc:	f104 0414 	add.w	r4, r4, #20
 80a44e0:	f1c4 0520 	rsb	r5, r4, #32
 80a44e4:	fa00 f305 	lsl.w	r3, r0, r5
 80a44e8:	fa20 f004 	lsr.w	r0, r0, r4
 80a44ec:	fa01 f205 	lsl.w	r2, r1, r5
 80a44f0:	ea40 0002 	orr.w	r0, r0, r2
 80a44f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a44f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a44fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4500:	fa21 f604 	lsr.w	r6, r1, r4
 80a4504:	eb42 0106 	adc.w	r1, r2, r6
 80a4508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a450c:	bf08      	it	eq
 80a450e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4512:	bd70      	pop	{r4, r5, r6, pc}
 80a4514:	f1c4 040c 	rsb	r4, r4, #12
 80a4518:	f1c4 0520 	rsb	r5, r4, #32
 80a451c:	fa00 f304 	lsl.w	r3, r0, r4
 80a4520:	fa20 f005 	lsr.w	r0, r0, r5
 80a4524:	fa01 f204 	lsl.w	r2, r1, r4
 80a4528:	ea40 0002 	orr.w	r0, r0, r2
 80a452c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4530:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4534:	f141 0100 	adc.w	r1, r1, #0
 80a4538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a453c:	bf08      	it	eq
 80a453e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4542:	bd70      	pop	{r4, r5, r6, pc}
 80a4544:	f1c4 0520 	rsb	r5, r4, #32
 80a4548:	fa00 f205 	lsl.w	r2, r0, r5
 80a454c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4550:	fa20 f304 	lsr.w	r3, r0, r4
 80a4554:	fa01 f205 	lsl.w	r2, r1, r5
 80a4558:	ea43 0302 	orr.w	r3, r3, r2
 80a455c:	fa21 f004 	lsr.w	r0, r1, r4
 80a4560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4564:	fa21 f204 	lsr.w	r2, r1, r4
 80a4568:	ea20 0002 	bic.w	r0, r0, r2
 80a456c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4570:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4574:	bf08      	it	eq
 80a4576:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a457a:	bd70      	pop	{r4, r5, r6, pc}
 80a457c:	f094 0f00 	teq	r4, #0
 80a4580:	d10f      	bne.n	80a45a2 <__aeabi_dmul+0x1c2>
 80a4582:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4586:	0040      	lsls	r0, r0, #1
 80a4588:	eb41 0101 	adc.w	r1, r1, r1
 80a458c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4590:	bf08      	it	eq
 80a4592:	3c01      	subeq	r4, #1
 80a4594:	d0f7      	beq.n	80a4586 <__aeabi_dmul+0x1a6>
 80a4596:	ea41 0106 	orr.w	r1, r1, r6
 80a459a:	f095 0f00 	teq	r5, #0
 80a459e:	bf18      	it	ne
 80a45a0:	4770      	bxne	lr
 80a45a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a45a6:	0052      	lsls	r2, r2, #1
 80a45a8:	eb43 0303 	adc.w	r3, r3, r3
 80a45ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a45b0:	bf08      	it	eq
 80a45b2:	3d01      	subeq	r5, #1
 80a45b4:	d0f7      	beq.n	80a45a6 <__aeabi_dmul+0x1c6>
 80a45b6:	ea43 0306 	orr.w	r3, r3, r6
 80a45ba:	4770      	bx	lr
 80a45bc:	ea94 0f0c 	teq	r4, ip
 80a45c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a45c4:	bf18      	it	ne
 80a45c6:	ea95 0f0c 	teqne	r5, ip
 80a45ca:	d00c      	beq.n	80a45e6 <__aeabi_dmul+0x206>
 80a45cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a45d0:	bf18      	it	ne
 80a45d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a45d6:	d1d1      	bne.n	80a457c <__aeabi_dmul+0x19c>
 80a45d8:	ea81 0103 	eor.w	r1, r1, r3
 80a45dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a45e0:	f04f 0000 	mov.w	r0, #0
 80a45e4:	bd70      	pop	{r4, r5, r6, pc}
 80a45e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a45ea:	bf06      	itte	eq
 80a45ec:	4610      	moveq	r0, r2
 80a45ee:	4619      	moveq	r1, r3
 80a45f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a45f4:	d019      	beq.n	80a462a <__aeabi_dmul+0x24a>
 80a45f6:	ea94 0f0c 	teq	r4, ip
 80a45fa:	d102      	bne.n	80a4602 <__aeabi_dmul+0x222>
 80a45fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4600:	d113      	bne.n	80a462a <__aeabi_dmul+0x24a>
 80a4602:	ea95 0f0c 	teq	r5, ip
 80a4606:	d105      	bne.n	80a4614 <__aeabi_dmul+0x234>
 80a4608:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a460c:	bf1c      	itt	ne
 80a460e:	4610      	movne	r0, r2
 80a4610:	4619      	movne	r1, r3
 80a4612:	d10a      	bne.n	80a462a <__aeabi_dmul+0x24a>
 80a4614:	ea81 0103 	eor.w	r1, r1, r3
 80a4618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a461c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4620:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4624:	f04f 0000 	mov.w	r0, #0
 80a4628:	bd70      	pop	{r4, r5, r6, pc}
 80a462a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a462e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4632:	bd70      	pop	{r4, r5, r6, pc}

080a4634 <__aeabi_ddiv>:
 80a4634:	b570      	push	{r4, r5, r6, lr}
 80a4636:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a463a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a463e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4642:	bf1d      	ittte	ne
 80a4644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4648:	ea94 0f0c 	teqne	r4, ip
 80a464c:	ea95 0f0c 	teqne	r5, ip
 80a4650:	f000 f8a7 	bleq	80a47a2 <__aeabi_ddiv+0x16e>
 80a4654:	eba4 0405 	sub.w	r4, r4, r5
 80a4658:	ea81 0e03 	eor.w	lr, r1, r3
 80a465c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4660:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4664:	f000 8088 	beq.w	80a4778 <__aeabi_ddiv+0x144>
 80a4668:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a466c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4670:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4674:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4678:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a467c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4680:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4684:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4688:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a468c:	429d      	cmp	r5, r3
 80a468e:	bf08      	it	eq
 80a4690:	4296      	cmpeq	r6, r2
 80a4692:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4696:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a469a:	d202      	bcs.n	80a46a2 <__aeabi_ddiv+0x6e>
 80a469c:	085b      	lsrs	r3, r3, #1
 80a469e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46a2:	1ab6      	subs	r6, r6, r2
 80a46a4:	eb65 0503 	sbc.w	r5, r5, r3
 80a46a8:	085b      	lsrs	r3, r3, #1
 80a46aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a46b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a46b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a46be:	bf22      	ittt	cs
 80a46c0:	1ab6      	subcs	r6, r6, r2
 80a46c2:	4675      	movcs	r5, lr
 80a46c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a46c8:	085b      	lsrs	r3, r3, #1
 80a46ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a46d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a46d6:	bf22      	ittt	cs
 80a46d8:	1ab6      	subcs	r6, r6, r2
 80a46da:	4675      	movcs	r5, lr
 80a46dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a46e0:	085b      	lsrs	r3, r3, #1
 80a46e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a46ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a46ee:	bf22      	ittt	cs
 80a46f0:	1ab6      	subcs	r6, r6, r2
 80a46f2:	4675      	movcs	r5, lr
 80a46f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a46f8:	085b      	lsrs	r3, r3, #1
 80a46fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a46fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4702:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4706:	bf22      	ittt	cs
 80a4708:	1ab6      	subcs	r6, r6, r2
 80a470a:	4675      	movcs	r5, lr
 80a470c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4710:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4714:	d018      	beq.n	80a4748 <__aeabi_ddiv+0x114>
 80a4716:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a471a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a471e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4722:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4726:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a472a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a472e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4732:	d1c0      	bne.n	80a46b6 <__aeabi_ddiv+0x82>
 80a4734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4738:	d10b      	bne.n	80a4752 <__aeabi_ddiv+0x11e>
 80a473a:	ea41 0100 	orr.w	r1, r1, r0
 80a473e:	f04f 0000 	mov.w	r0, #0
 80a4742:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4746:	e7b6      	b.n	80a46b6 <__aeabi_ddiv+0x82>
 80a4748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a474c:	bf04      	itt	eq
 80a474e:	4301      	orreq	r1, r0
 80a4750:	2000      	moveq	r0, #0
 80a4752:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4756:	bf88      	it	hi
 80a4758:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a475c:	f63f aeaf 	bhi.w	80a44be <__aeabi_dmul+0xde>
 80a4760:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4764:	bf04      	itt	eq
 80a4766:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a476a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a476e:	f150 0000 	adcs.w	r0, r0, #0
 80a4772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4776:	bd70      	pop	{r4, r5, r6, pc}
 80a4778:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a477c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4780:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4784:	bfc2      	ittt	gt
 80a4786:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a478a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a478e:	bd70      	popgt	{r4, r5, r6, pc}
 80a4790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4794:	f04f 0e00 	mov.w	lr, #0
 80a4798:	3c01      	subs	r4, #1
 80a479a:	e690      	b.n	80a44be <__aeabi_dmul+0xde>
 80a479c:	ea45 0e06 	orr.w	lr, r5, r6
 80a47a0:	e68d      	b.n	80a44be <__aeabi_dmul+0xde>
 80a47a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a47a6:	ea94 0f0c 	teq	r4, ip
 80a47aa:	bf08      	it	eq
 80a47ac:	ea95 0f0c 	teqeq	r5, ip
 80a47b0:	f43f af3b 	beq.w	80a462a <__aeabi_dmul+0x24a>
 80a47b4:	ea94 0f0c 	teq	r4, ip
 80a47b8:	d10a      	bne.n	80a47d0 <__aeabi_ddiv+0x19c>
 80a47ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a47be:	f47f af34 	bne.w	80a462a <__aeabi_dmul+0x24a>
 80a47c2:	ea95 0f0c 	teq	r5, ip
 80a47c6:	f47f af25 	bne.w	80a4614 <__aeabi_dmul+0x234>
 80a47ca:	4610      	mov	r0, r2
 80a47cc:	4619      	mov	r1, r3
 80a47ce:	e72c      	b.n	80a462a <__aeabi_dmul+0x24a>
 80a47d0:	ea95 0f0c 	teq	r5, ip
 80a47d4:	d106      	bne.n	80a47e4 <__aeabi_ddiv+0x1b0>
 80a47d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a47da:	f43f aefd 	beq.w	80a45d8 <__aeabi_dmul+0x1f8>
 80a47de:	4610      	mov	r0, r2
 80a47e0:	4619      	mov	r1, r3
 80a47e2:	e722      	b.n	80a462a <__aeabi_dmul+0x24a>
 80a47e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a47e8:	bf18      	it	ne
 80a47ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a47ee:	f47f aec5 	bne.w	80a457c <__aeabi_dmul+0x19c>
 80a47f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a47f6:	f47f af0d 	bne.w	80a4614 <__aeabi_dmul+0x234>
 80a47fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a47fe:	f47f aeeb 	bne.w	80a45d8 <__aeabi_dmul+0x1f8>
 80a4802:	e712      	b.n	80a462a <__aeabi_dmul+0x24a>

080a4804 <__gedf2>:
 80a4804:	f04f 3cff 	mov.w	ip, #4294967295
 80a4808:	e006      	b.n	80a4818 <__cmpdf2+0x4>
 80a480a:	bf00      	nop

080a480c <__ledf2>:
 80a480c:	f04f 0c01 	mov.w	ip, #1
 80a4810:	e002      	b.n	80a4818 <__cmpdf2+0x4>
 80a4812:	bf00      	nop

080a4814 <__cmpdf2>:
 80a4814:	f04f 0c01 	mov.w	ip, #1
 80a4818:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a481c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4824:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4828:	bf18      	it	ne
 80a482a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a482e:	d01b      	beq.n	80a4868 <__cmpdf2+0x54>
 80a4830:	b001      	add	sp, #4
 80a4832:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4836:	bf0c      	ite	eq
 80a4838:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a483c:	ea91 0f03 	teqne	r1, r3
 80a4840:	bf02      	ittt	eq
 80a4842:	ea90 0f02 	teqeq	r0, r2
 80a4846:	2000      	moveq	r0, #0
 80a4848:	4770      	bxeq	lr
 80a484a:	f110 0f00 	cmn.w	r0, #0
 80a484e:	ea91 0f03 	teq	r1, r3
 80a4852:	bf58      	it	pl
 80a4854:	4299      	cmppl	r1, r3
 80a4856:	bf08      	it	eq
 80a4858:	4290      	cmpeq	r0, r2
 80a485a:	bf2c      	ite	cs
 80a485c:	17d8      	asrcs	r0, r3, #31
 80a485e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4862:	f040 0001 	orr.w	r0, r0, #1
 80a4866:	4770      	bx	lr
 80a4868:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a486c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4870:	d102      	bne.n	80a4878 <__cmpdf2+0x64>
 80a4872:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4876:	d107      	bne.n	80a4888 <__cmpdf2+0x74>
 80a4878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a487c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4880:	d1d6      	bne.n	80a4830 <__cmpdf2+0x1c>
 80a4882:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4886:	d0d3      	beq.n	80a4830 <__cmpdf2+0x1c>
 80a4888:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a488c:	4770      	bx	lr
 80a488e:	bf00      	nop

080a4890 <__aeabi_cdrcmple>:
 80a4890:	4684      	mov	ip, r0
 80a4892:	4610      	mov	r0, r2
 80a4894:	4662      	mov	r2, ip
 80a4896:	468c      	mov	ip, r1
 80a4898:	4619      	mov	r1, r3
 80a489a:	4663      	mov	r3, ip
 80a489c:	e000      	b.n	80a48a0 <__aeabi_cdcmpeq>
 80a489e:	bf00      	nop

080a48a0 <__aeabi_cdcmpeq>:
 80a48a0:	b501      	push	{r0, lr}
 80a48a2:	f7ff ffb7 	bl	80a4814 <__cmpdf2>
 80a48a6:	2800      	cmp	r0, #0
 80a48a8:	bf48      	it	mi
 80a48aa:	f110 0f00 	cmnmi.w	r0, #0
 80a48ae:	bd01      	pop	{r0, pc}

080a48b0 <__aeabi_dcmpeq>:
 80a48b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48b4:	f7ff fff4 	bl	80a48a0 <__aeabi_cdcmpeq>
 80a48b8:	bf0c      	ite	eq
 80a48ba:	2001      	moveq	r0, #1
 80a48bc:	2000      	movne	r0, #0
 80a48be:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48c2:	bf00      	nop

080a48c4 <__aeabi_dcmplt>:
 80a48c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48c8:	f7ff ffea 	bl	80a48a0 <__aeabi_cdcmpeq>
 80a48cc:	bf34      	ite	cc
 80a48ce:	2001      	movcc	r0, #1
 80a48d0:	2000      	movcs	r0, #0
 80a48d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48d6:	bf00      	nop

080a48d8 <__aeabi_dcmple>:
 80a48d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48dc:	f7ff ffe0 	bl	80a48a0 <__aeabi_cdcmpeq>
 80a48e0:	bf94      	ite	ls
 80a48e2:	2001      	movls	r0, #1
 80a48e4:	2000      	movhi	r0, #0
 80a48e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48ea:	bf00      	nop

080a48ec <__aeabi_dcmpge>:
 80a48ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48f0:	f7ff ffce 	bl	80a4890 <__aeabi_cdrcmple>
 80a48f4:	bf94      	ite	ls
 80a48f6:	2001      	movls	r0, #1
 80a48f8:	2000      	movhi	r0, #0
 80a48fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48fe:	bf00      	nop

080a4900 <__aeabi_dcmpgt>:
 80a4900:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4904:	f7ff ffc4 	bl	80a4890 <__aeabi_cdrcmple>
 80a4908:	bf34      	ite	cc
 80a490a:	2001      	movcc	r0, #1
 80a490c:	2000      	movcs	r0, #0
 80a490e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4912:	bf00      	nop

080a4914 <__aeabi_d2iz>:
 80a4914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a491c:	d215      	bcs.n	80a494a <__aeabi_d2iz+0x36>
 80a491e:	d511      	bpl.n	80a4944 <__aeabi_d2iz+0x30>
 80a4920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4928:	d912      	bls.n	80a4950 <__aeabi_d2iz+0x3c>
 80a492a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a492e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4936:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a493a:	fa23 f002 	lsr.w	r0, r3, r2
 80a493e:	bf18      	it	ne
 80a4940:	4240      	negne	r0, r0
 80a4942:	4770      	bx	lr
 80a4944:	f04f 0000 	mov.w	r0, #0
 80a4948:	4770      	bx	lr
 80a494a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a494e:	d105      	bne.n	80a495c <__aeabi_d2iz+0x48>
 80a4950:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4954:	bf08      	it	eq
 80a4956:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a495a:	4770      	bx	lr
 80a495c:	f04f 0000 	mov.w	r0, #0
 80a4960:	4770      	bx	lr
 80a4962:	bf00      	nop

080a4964 <__aeabi_d2uiz>:
 80a4964:	004a      	lsls	r2, r1, #1
 80a4966:	d211      	bcs.n	80a498c <__aeabi_d2uiz+0x28>
 80a4968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a496c:	d211      	bcs.n	80a4992 <__aeabi_d2uiz+0x2e>
 80a496e:	d50d      	bpl.n	80a498c <__aeabi_d2uiz+0x28>
 80a4970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4978:	d40e      	bmi.n	80a4998 <__aeabi_d2uiz+0x34>
 80a497a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a497e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4986:	fa23 f002 	lsr.w	r0, r3, r2
 80a498a:	4770      	bx	lr
 80a498c:	f04f 0000 	mov.w	r0, #0
 80a4990:	4770      	bx	lr
 80a4992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4996:	d102      	bne.n	80a499e <__aeabi_d2uiz+0x3a>
 80a4998:	f04f 30ff 	mov.w	r0, #4294967295
 80a499c:	4770      	bx	lr
 80a499e:	f04f 0000 	mov.w	r0, #0
 80a49a2:	4770      	bx	lr

080a49a4 <__aeabi_d2f>:
 80a49a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a49a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a49ac:	bf24      	itt	cs
 80a49ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a49b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a49b6:	d90d      	bls.n	80a49d4 <__aeabi_d2f+0x30>
 80a49b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a49bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a49c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a49c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a49c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a49cc:	bf08      	it	eq
 80a49ce:	f020 0001 	biceq.w	r0, r0, #1
 80a49d2:	4770      	bx	lr
 80a49d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a49d8:	d121      	bne.n	80a4a1e <__aeabi_d2f+0x7a>
 80a49da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a49de:	bfbc      	itt	lt
 80a49e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a49e4:	4770      	bxlt	lr
 80a49e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a49ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a49ee:	f1c2 0218 	rsb	r2, r2, #24
 80a49f2:	f1c2 0c20 	rsb	ip, r2, #32
 80a49f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a49fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a49fe:	bf18      	it	ne
 80a4a00:	f040 0001 	orrne.w	r0, r0, #1
 80a4a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4a10:	ea40 000c 	orr.w	r0, r0, ip
 80a4a14:	fa23 f302 	lsr.w	r3, r3, r2
 80a4a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4a1c:	e7cc      	b.n	80a49b8 <__aeabi_d2f+0x14>
 80a4a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4a22:	d107      	bne.n	80a4a34 <__aeabi_d2f+0x90>
 80a4a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4a28:	bf1e      	ittt	ne
 80a4a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4a32:	4770      	bxne	lr
 80a4a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4a40:	4770      	bx	lr
 80a4a42:	bf00      	nop

080a4a44 <__aeabi_fmul>:
 80a4a44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4a4c:	bf1e      	ittt	ne
 80a4a4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4a52:	ea92 0f0c 	teqne	r2, ip
 80a4a56:	ea93 0f0c 	teqne	r3, ip
 80a4a5a:	d06f      	beq.n	80a4b3c <__aeabi_fmul+0xf8>
 80a4a5c:	441a      	add	r2, r3
 80a4a5e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4a62:	0240      	lsls	r0, r0, #9
 80a4a64:	bf18      	it	ne
 80a4a66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4a6a:	d01e      	beq.n	80a4aaa <__aeabi_fmul+0x66>
 80a4a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4a70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4a74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4a78:	fba0 3101 	umull	r3, r1, r0, r1
 80a4a7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4a80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4a84:	bf3e      	ittt	cc
 80a4a86:	0049      	lslcc	r1, r1, #1
 80a4a88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4a8c:	005b      	lslcc	r3, r3, #1
 80a4a8e:	ea40 0001 	orr.w	r0, r0, r1
 80a4a92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4a96:	2afd      	cmp	r2, #253	; 0xfd
 80a4a98:	d81d      	bhi.n	80a4ad6 <__aeabi_fmul+0x92>
 80a4a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4aa2:	bf08      	it	eq
 80a4aa4:	f020 0001 	biceq.w	r0, r0, #1
 80a4aa8:	4770      	bx	lr
 80a4aaa:	f090 0f00 	teq	r0, #0
 80a4aae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4ab2:	bf08      	it	eq
 80a4ab4:	0249      	lsleq	r1, r1, #9
 80a4ab6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4aba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4abe:	3a7f      	subs	r2, #127	; 0x7f
 80a4ac0:	bfc2      	ittt	gt
 80a4ac2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ac6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4aca:	4770      	bxgt	lr
 80a4acc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ad0:	f04f 0300 	mov.w	r3, #0
 80a4ad4:	3a01      	subs	r2, #1
 80a4ad6:	dc5d      	bgt.n	80a4b94 <__aeabi_fmul+0x150>
 80a4ad8:	f112 0f19 	cmn.w	r2, #25
 80a4adc:	bfdc      	itt	le
 80a4ade:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4ae2:	4770      	bxle	lr
 80a4ae4:	f1c2 0200 	rsb	r2, r2, #0
 80a4ae8:	0041      	lsls	r1, r0, #1
 80a4aea:	fa21 f102 	lsr.w	r1, r1, r2
 80a4aee:	f1c2 0220 	rsb	r2, r2, #32
 80a4af2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4af6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4afa:	f140 0000 	adc.w	r0, r0, #0
 80a4afe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4b02:	bf08      	it	eq
 80a4b04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4b08:	4770      	bx	lr
 80a4b0a:	f092 0f00 	teq	r2, #0
 80a4b0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4b12:	bf02      	ittt	eq
 80a4b14:	0040      	lsleq	r0, r0, #1
 80a4b16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4b1a:	3a01      	subeq	r2, #1
 80a4b1c:	d0f9      	beq.n	80a4b12 <__aeabi_fmul+0xce>
 80a4b1e:	ea40 000c 	orr.w	r0, r0, ip
 80a4b22:	f093 0f00 	teq	r3, #0
 80a4b26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4b2a:	bf02      	ittt	eq
 80a4b2c:	0049      	lsleq	r1, r1, #1
 80a4b2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4b32:	3b01      	subeq	r3, #1
 80a4b34:	d0f9      	beq.n	80a4b2a <__aeabi_fmul+0xe6>
 80a4b36:	ea41 010c 	orr.w	r1, r1, ip
 80a4b3a:	e78f      	b.n	80a4a5c <__aeabi_fmul+0x18>
 80a4b3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4b40:	ea92 0f0c 	teq	r2, ip
 80a4b44:	bf18      	it	ne
 80a4b46:	ea93 0f0c 	teqne	r3, ip
 80a4b4a:	d00a      	beq.n	80a4b62 <__aeabi_fmul+0x11e>
 80a4b4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4b50:	bf18      	it	ne
 80a4b52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4b56:	d1d8      	bne.n	80a4b0a <__aeabi_fmul+0xc6>
 80a4b58:	ea80 0001 	eor.w	r0, r0, r1
 80a4b5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4b60:	4770      	bx	lr
 80a4b62:	f090 0f00 	teq	r0, #0
 80a4b66:	bf17      	itett	ne
 80a4b68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4b6c:	4608      	moveq	r0, r1
 80a4b6e:	f091 0f00 	teqne	r1, #0
 80a4b72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4b76:	d014      	beq.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4b78:	ea92 0f0c 	teq	r2, ip
 80a4b7c:	d101      	bne.n	80a4b82 <__aeabi_fmul+0x13e>
 80a4b7e:	0242      	lsls	r2, r0, #9
 80a4b80:	d10f      	bne.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4b82:	ea93 0f0c 	teq	r3, ip
 80a4b86:	d103      	bne.n	80a4b90 <__aeabi_fmul+0x14c>
 80a4b88:	024b      	lsls	r3, r1, #9
 80a4b8a:	bf18      	it	ne
 80a4b8c:	4608      	movne	r0, r1
 80a4b8e:	d108      	bne.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4b90:	ea80 0001 	eor.w	r0, r0, r1
 80a4b94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ba0:	4770      	bx	lr
 80a4ba2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4ba6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4baa:	4770      	bx	lr

080a4bac <__aeabi_fdiv>:
 80a4bac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4bb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4bb4:	bf1e      	ittt	ne
 80a4bb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4bba:	ea92 0f0c 	teqne	r2, ip
 80a4bbe:	ea93 0f0c 	teqne	r3, ip
 80a4bc2:	d069      	beq.n	80a4c98 <__aeabi_fdiv+0xec>
 80a4bc4:	eba2 0203 	sub.w	r2, r2, r3
 80a4bc8:	ea80 0c01 	eor.w	ip, r0, r1
 80a4bcc:	0249      	lsls	r1, r1, #9
 80a4bce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4bd2:	d037      	beq.n	80a4c44 <__aeabi_fdiv+0x98>
 80a4bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4bd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4bdc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4be4:	428b      	cmp	r3, r1
 80a4be6:	bf38      	it	cc
 80a4be8:	005b      	lslcc	r3, r3, #1
 80a4bea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4bee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4bf2:	428b      	cmp	r3, r1
 80a4bf4:	bf24      	itt	cs
 80a4bf6:	1a5b      	subcs	r3, r3, r1
 80a4bf8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4bfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4c00:	bf24      	itt	cs
 80a4c02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4c06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4c0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4c0e:	bf24      	itt	cs
 80a4c10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4c14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4c18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4c1c:	bf24      	itt	cs
 80a4c1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4c22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4c26:	011b      	lsls	r3, r3, #4
 80a4c28:	bf18      	it	ne
 80a4c2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4c2e:	d1e0      	bne.n	80a4bf2 <__aeabi_fdiv+0x46>
 80a4c30:	2afd      	cmp	r2, #253	; 0xfd
 80a4c32:	f63f af50 	bhi.w	80a4ad6 <__aeabi_fmul+0x92>
 80a4c36:	428b      	cmp	r3, r1
 80a4c38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4c3c:	bf08      	it	eq
 80a4c3e:	f020 0001 	biceq.w	r0, r0, #1
 80a4c42:	4770      	bx	lr
 80a4c44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4c48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4c4c:	327f      	adds	r2, #127	; 0x7f
 80a4c4e:	bfc2      	ittt	gt
 80a4c50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4c54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4c58:	4770      	bxgt	lr
 80a4c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c5e:	f04f 0300 	mov.w	r3, #0
 80a4c62:	3a01      	subs	r2, #1
 80a4c64:	e737      	b.n	80a4ad6 <__aeabi_fmul+0x92>
 80a4c66:	f092 0f00 	teq	r2, #0
 80a4c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4c6e:	bf02      	ittt	eq
 80a4c70:	0040      	lsleq	r0, r0, #1
 80a4c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4c76:	3a01      	subeq	r2, #1
 80a4c78:	d0f9      	beq.n	80a4c6e <__aeabi_fdiv+0xc2>
 80a4c7a:	ea40 000c 	orr.w	r0, r0, ip
 80a4c7e:	f093 0f00 	teq	r3, #0
 80a4c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4c86:	bf02      	ittt	eq
 80a4c88:	0049      	lsleq	r1, r1, #1
 80a4c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4c8e:	3b01      	subeq	r3, #1
 80a4c90:	d0f9      	beq.n	80a4c86 <__aeabi_fdiv+0xda>
 80a4c92:	ea41 010c 	orr.w	r1, r1, ip
 80a4c96:	e795      	b.n	80a4bc4 <__aeabi_fdiv+0x18>
 80a4c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4c9c:	ea92 0f0c 	teq	r2, ip
 80a4ca0:	d108      	bne.n	80a4cb4 <__aeabi_fdiv+0x108>
 80a4ca2:	0242      	lsls	r2, r0, #9
 80a4ca4:	f47f af7d 	bne.w	80a4ba2 <__aeabi_fmul+0x15e>
 80a4ca8:	ea93 0f0c 	teq	r3, ip
 80a4cac:	f47f af70 	bne.w	80a4b90 <__aeabi_fmul+0x14c>
 80a4cb0:	4608      	mov	r0, r1
 80a4cb2:	e776      	b.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4cb4:	ea93 0f0c 	teq	r3, ip
 80a4cb8:	d104      	bne.n	80a4cc4 <__aeabi_fdiv+0x118>
 80a4cba:	024b      	lsls	r3, r1, #9
 80a4cbc:	f43f af4c 	beq.w	80a4b58 <__aeabi_fmul+0x114>
 80a4cc0:	4608      	mov	r0, r1
 80a4cc2:	e76e      	b.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4cc8:	bf18      	it	ne
 80a4cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4cce:	d1ca      	bne.n	80a4c66 <__aeabi_fdiv+0xba>
 80a4cd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4cd4:	f47f af5c 	bne.w	80a4b90 <__aeabi_fmul+0x14c>
 80a4cd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4cdc:	f47f af3c 	bne.w	80a4b58 <__aeabi_fmul+0x114>
 80a4ce0:	e75f      	b.n	80a4ba2 <__aeabi_fmul+0x15e>
 80a4ce2:	bf00      	nop

080a4ce4 <__gesf2>:
 80a4ce4:	f04f 3cff 	mov.w	ip, #4294967295
 80a4ce8:	e006      	b.n	80a4cf8 <__cmpsf2+0x4>
 80a4cea:	bf00      	nop

080a4cec <__lesf2>:
 80a4cec:	f04f 0c01 	mov.w	ip, #1
 80a4cf0:	e002      	b.n	80a4cf8 <__cmpsf2+0x4>
 80a4cf2:	bf00      	nop

080a4cf4 <__cmpsf2>:
 80a4cf4:	f04f 0c01 	mov.w	ip, #1
 80a4cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4d08:	bf18      	it	ne
 80a4d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4d0e:	d011      	beq.n	80a4d34 <__cmpsf2+0x40>
 80a4d10:	b001      	add	sp, #4
 80a4d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4d16:	bf18      	it	ne
 80a4d18:	ea90 0f01 	teqne	r0, r1
 80a4d1c:	bf58      	it	pl
 80a4d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4d22:	bf88      	it	hi
 80a4d24:	17c8      	asrhi	r0, r1, #31
 80a4d26:	bf38      	it	cc
 80a4d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4d2c:	bf18      	it	ne
 80a4d2e:	f040 0001 	orrne.w	r0, r0, #1
 80a4d32:	4770      	bx	lr
 80a4d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4d38:	d102      	bne.n	80a4d40 <__cmpsf2+0x4c>
 80a4d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4d3e:	d105      	bne.n	80a4d4c <__cmpsf2+0x58>
 80a4d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4d44:	d1e4      	bne.n	80a4d10 <__cmpsf2+0x1c>
 80a4d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4d4a:	d0e1      	beq.n	80a4d10 <__cmpsf2+0x1c>
 80a4d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4d50:	4770      	bx	lr
 80a4d52:	bf00      	nop

080a4d54 <__aeabi_cfrcmple>:
 80a4d54:	4684      	mov	ip, r0
 80a4d56:	4608      	mov	r0, r1
 80a4d58:	4661      	mov	r1, ip
 80a4d5a:	e7ff      	b.n	80a4d5c <__aeabi_cfcmpeq>

080a4d5c <__aeabi_cfcmpeq>:
 80a4d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4d5e:	f7ff ffc9 	bl	80a4cf4 <__cmpsf2>
 80a4d62:	2800      	cmp	r0, #0
 80a4d64:	bf48      	it	mi
 80a4d66:	f110 0f00 	cmnmi.w	r0, #0
 80a4d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4d6c <__aeabi_fcmpeq>:
 80a4d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d70:	f7ff fff4 	bl	80a4d5c <__aeabi_cfcmpeq>
 80a4d74:	bf0c      	ite	eq
 80a4d76:	2001      	moveq	r0, #1
 80a4d78:	2000      	movne	r0, #0
 80a4d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d7e:	bf00      	nop

080a4d80 <__aeabi_fcmplt>:
 80a4d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d84:	f7ff ffea 	bl	80a4d5c <__aeabi_cfcmpeq>
 80a4d88:	bf34      	ite	cc
 80a4d8a:	2001      	movcc	r0, #1
 80a4d8c:	2000      	movcs	r0, #0
 80a4d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d92:	bf00      	nop

080a4d94 <__aeabi_fcmple>:
 80a4d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d98:	f7ff ffe0 	bl	80a4d5c <__aeabi_cfcmpeq>
 80a4d9c:	bf94      	ite	ls
 80a4d9e:	2001      	movls	r0, #1
 80a4da0:	2000      	movhi	r0, #0
 80a4da2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4da6:	bf00      	nop

080a4da8 <__aeabi_fcmpge>:
 80a4da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4dac:	f7ff ffd2 	bl	80a4d54 <__aeabi_cfrcmple>
 80a4db0:	bf94      	ite	ls
 80a4db2:	2001      	movls	r0, #1
 80a4db4:	2000      	movhi	r0, #0
 80a4db6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4dba:	bf00      	nop

080a4dbc <__aeabi_fcmpgt>:
 80a4dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4dc0:	f7ff ffc8 	bl	80a4d54 <__aeabi_cfrcmple>
 80a4dc4:	bf34      	ite	cc
 80a4dc6:	2001      	movcc	r0, #1
 80a4dc8:	2000      	movcs	r0, #0
 80a4dca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4dce:	bf00      	nop

080a4dd0 <__aeabi_f2iz>:
 80a4dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4dd8:	d30f      	bcc.n	80a4dfa <__aeabi_f2iz+0x2a>
 80a4dda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4de2:	d90d      	bls.n	80a4e00 <__aeabi_f2iz+0x30>
 80a4de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4dec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4df0:	fa23 f002 	lsr.w	r0, r3, r2
 80a4df4:	bf18      	it	ne
 80a4df6:	4240      	negne	r0, r0
 80a4df8:	4770      	bx	lr
 80a4dfa:	f04f 0000 	mov.w	r0, #0
 80a4dfe:	4770      	bx	lr
 80a4e00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a4e04:	d101      	bne.n	80a4e0a <__aeabi_f2iz+0x3a>
 80a4e06:	0242      	lsls	r2, r0, #9
 80a4e08:	d105      	bne.n	80a4e16 <__aeabi_f2iz+0x46>
 80a4e0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4e0e:	bf08      	it	eq
 80a4e10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4e14:	4770      	bx	lr
 80a4e16:	f04f 0000 	mov.w	r0, #0
 80a4e1a:	4770      	bx	lr

080a4e1c <__aeabi_uldivmod>:
 80a4e1c:	b953      	cbnz	r3, 80a4e34 <__aeabi_uldivmod+0x18>
 80a4e1e:	b94a      	cbnz	r2, 80a4e34 <__aeabi_uldivmod+0x18>
 80a4e20:	2900      	cmp	r1, #0
 80a4e22:	bf08      	it	eq
 80a4e24:	2800      	cmpeq	r0, #0
 80a4e26:	bf1c      	itt	ne
 80a4e28:	f04f 31ff 	movne.w	r1, #4294967295
 80a4e2c:	f04f 30ff 	movne.w	r0, #4294967295
 80a4e30:	f000 b9a6 	b.w	80a5180 <__aeabi_idiv0>
 80a4e34:	f1ad 0c08 	sub.w	ip, sp, #8
 80a4e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a4e3c:	f000 f82a 	bl	80a4e94 <__udivmoddi4>
 80a4e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4e48:	b004      	add	sp, #16
 80a4e4a:	4770      	bx	lr

080a4e4c <__aeabi_d2ulz>:
 80a4e4c:	b5d0      	push	{r4, r6, r7, lr}
 80a4e4e:	2200      	movs	r2, #0
 80a4e50:	4b0e      	ldr	r3, [pc, #56]	; (80a4e8c <__aeabi_d2ulz+0x40>)
 80a4e52:	4606      	mov	r6, r0
 80a4e54:	460f      	mov	r7, r1
 80a4e56:	f7ff fac3 	bl	80a43e0 <__aeabi_dmul>
 80a4e5a:	f7ff fd83 	bl	80a4964 <__aeabi_d2uiz>
 80a4e5e:	4604      	mov	r4, r0
 80a4e60:	f7ff fa48 	bl	80a42f4 <__aeabi_ui2d>
 80a4e64:	2200      	movs	r2, #0
 80a4e66:	4b0a      	ldr	r3, [pc, #40]	; (80a4e90 <__aeabi_d2ulz+0x44>)
 80a4e68:	f7ff faba 	bl	80a43e0 <__aeabi_dmul>
 80a4e6c:	4602      	mov	r2, r0
 80a4e6e:	460b      	mov	r3, r1
 80a4e70:	4630      	mov	r0, r6
 80a4e72:	4639      	mov	r1, r7
 80a4e74:	f7ff f900 	bl	80a4078 <__aeabi_dsub>
 80a4e78:	f7ff fd74 	bl	80a4964 <__aeabi_d2uiz>
 80a4e7c:	4623      	mov	r3, r4
 80a4e7e:	2200      	movs	r2, #0
 80a4e80:	ea42 0200 	orr.w	r2, r2, r0
 80a4e84:	4610      	mov	r0, r2
 80a4e86:	4619      	mov	r1, r3
 80a4e88:	bdd0      	pop	{r4, r6, r7, pc}
 80a4e8a:	bf00      	nop
 80a4e8c:	3df00000 	.word	0x3df00000
 80a4e90:	41f00000 	.word	0x41f00000

080a4e94 <__udivmoddi4>:
 80a4e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4e98:	468c      	mov	ip, r1
 80a4e9a:	460c      	mov	r4, r1
 80a4e9c:	4605      	mov	r5, r0
 80a4e9e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a4ea0:	2b00      	cmp	r3, #0
 80a4ea2:	d14f      	bne.n	80a4f44 <__udivmoddi4+0xb0>
 80a4ea4:	428a      	cmp	r2, r1
 80a4ea6:	4617      	mov	r7, r2
 80a4ea8:	d96b      	bls.n	80a4f82 <__udivmoddi4+0xee>
 80a4eaa:	fab2 fe82 	clz	lr, r2
 80a4eae:	f1be 0f00 	cmp.w	lr, #0
 80a4eb2:	d00b      	beq.n	80a4ecc <__udivmoddi4+0x38>
 80a4eb4:	f1ce 0520 	rsb	r5, lr, #32
 80a4eb8:	fa20 f505 	lsr.w	r5, r0, r5
 80a4ebc:	fa01 f30e 	lsl.w	r3, r1, lr
 80a4ec0:	ea45 0c03 	orr.w	ip, r5, r3
 80a4ec4:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4ec8:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4ecc:	0c39      	lsrs	r1, r7, #16
 80a4ece:	fbbc f0f1 	udiv	r0, ip, r1
 80a4ed2:	b2ba      	uxth	r2, r7
 80a4ed4:	fb01 c310 	mls	r3, r1, r0, ip
 80a4ed8:	fb00 f802 	mul.w	r8, r0, r2
 80a4edc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4ee0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a4ee4:	45a0      	cmp	r8, r4
 80a4ee6:	d909      	bls.n	80a4efc <__udivmoddi4+0x68>
 80a4ee8:	19e4      	adds	r4, r4, r7
 80a4eea:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4eee:	f080 8128 	bcs.w	80a5142 <__udivmoddi4+0x2ae>
 80a4ef2:	45a0      	cmp	r8, r4
 80a4ef4:	f240 8125 	bls.w	80a5142 <__udivmoddi4+0x2ae>
 80a4ef8:	3802      	subs	r0, #2
 80a4efa:	443c      	add	r4, r7
 80a4efc:	ebc8 0404 	rsb	r4, r8, r4
 80a4f00:	fbb4 f3f1 	udiv	r3, r4, r1
 80a4f04:	fb01 4c13 	mls	ip, r1, r3, r4
 80a4f08:	fb03 f202 	mul.w	r2, r3, r2
 80a4f0c:	b2ac      	uxth	r4, r5
 80a4f0e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a4f12:	428a      	cmp	r2, r1
 80a4f14:	d909      	bls.n	80a4f2a <__udivmoddi4+0x96>
 80a4f16:	19c9      	adds	r1, r1, r7
 80a4f18:	f103 34ff 	add.w	r4, r3, #4294967295
 80a4f1c:	f080 810f 	bcs.w	80a513e <__udivmoddi4+0x2aa>
 80a4f20:	428a      	cmp	r2, r1
 80a4f22:	f240 810c 	bls.w	80a513e <__udivmoddi4+0x2aa>
 80a4f26:	3b02      	subs	r3, #2
 80a4f28:	4439      	add	r1, r7
 80a4f2a:	1a8a      	subs	r2, r1, r2
 80a4f2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a4f30:	2100      	movs	r1, #0
 80a4f32:	2e00      	cmp	r6, #0
 80a4f34:	d063      	beq.n	80a4ffe <__udivmoddi4+0x16a>
 80a4f36:	fa22 f20e 	lsr.w	r2, r2, lr
 80a4f3a:	2300      	movs	r3, #0
 80a4f3c:	e886 000c 	stmia.w	r6, {r2, r3}
 80a4f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4f44:	428b      	cmp	r3, r1
 80a4f46:	d907      	bls.n	80a4f58 <__udivmoddi4+0xc4>
 80a4f48:	2e00      	cmp	r6, #0
 80a4f4a:	d056      	beq.n	80a4ffa <__udivmoddi4+0x166>
 80a4f4c:	2100      	movs	r1, #0
 80a4f4e:	e886 0011 	stmia.w	r6, {r0, r4}
 80a4f52:	4608      	mov	r0, r1
 80a4f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4f58:	fab3 f183 	clz	r1, r3
 80a4f5c:	2900      	cmp	r1, #0
 80a4f5e:	f040 8093 	bne.w	80a5088 <__udivmoddi4+0x1f4>
 80a4f62:	42a3      	cmp	r3, r4
 80a4f64:	d302      	bcc.n	80a4f6c <__udivmoddi4+0xd8>
 80a4f66:	4282      	cmp	r2, r0
 80a4f68:	f200 80fe 	bhi.w	80a5168 <__udivmoddi4+0x2d4>
 80a4f6c:	1a85      	subs	r5, r0, r2
 80a4f6e:	eb64 0303 	sbc.w	r3, r4, r3
 80a4f72:	469c      	mov	ip, r3
 80a4f74:	2001      	movs	r0, #1
 80a4f76:	2e00      	cmp	r6, #0
 80a4f78:	d041      	beq.n	80a4ffe <__udivmoddi4+0x16a>
 80a4f7a:	e886 1020 	stmia.w	r6, {r5, ip}
 80a4f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4f82:	b912      	cbnz	r2, 80a4f8a <__udivmoddi4+0xf6>
 80a4f84:	2701      	movs	r7, #1
 80a4f86:	fbb7 f7f2 	udiv	r7, r7, r2
 80a4f8a:	fab7 fe87 	clz	lr, r7
 80a4f8e:	f1be 0f00 	cmp.w	lr, #0
 80a4f92:	d136      	bne.n	80a5002 <__udivmoddi4+0x16e>
 80a4f94:	1be4      	subs	r4, r4, r7
 80a4f96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4f9a:	fa1f f987 	uxth.w	r9, r7
 80a4f9e:	2101      	movs	r1, #1
 80a4fa0:	fbb4 f3f8 	udiv	r3, r4, r8
 80a4fa4:	fb08 4413 	mls	r4, r8, r3, r4
 80a4fa8:	fb09 f203 	mul.w	r2, r9, r3
 80a4fac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4fb0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a4fb4:	42a2      	cmp	r2, r4
 80a4fb6:	d907      	bls.n	80a4fc8 <__udivmoddi4+0x134>
 80a4fb8:	19e4      	adds	r4, r4, r7
 80a4fba:	f103 30ff 	add.w	r0, r3, #4294967295
 80a4fbe:	d202      	bcs.n	80a4fc6 <__udivmoddi4+0x132>
 80a4fc0:	42a2      	cmp	r2, r4
 80a4fc2:	f200 80d3 	bhi.w	80a516c <__udivmoddi4+0x2d8>
 80a4fc6:	4603      	mov	r3, r0
 80a4fc8:	1aa4      	subs	r4, r4, r2
 80a4fca:	fbb4 f0f8 	udiv	r0, r4, r8
 80a4fce:	fb08 4810 	mls	r8, r8, r0, r4
 80a4fd2:	fb09 f900 	mul.w	r9, r9, r0
 80a4fd6:	b2ac      	uxth	r4, r5
 80a4fd8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a4fdc:	4591      	cmp	r9, r2
 80a4fde:	d907      	bls.n	80a4ff0 <__udivmoddi4+0x15c>
 80a4fe0:	19d2      	adds	r2, r2, r7
 80a4fe2:	f100 34ff 	add.w	r4, r0, #4294967295
 80a4fe6:	d202      	bcs.n	80a4fee <__udivmoddi4+0x15a>
 80a4fe8:	4591      	cmp	r9, r2
 80a4fea:	f200 80ba 	bhi.w	80a5162 <__udivmoddi4+0x2ce>
 80a4fee:	4620      	mov	r0, r4
 80a4ff0:	ebc9 0202 	rsb	r2, r9, r2
 80a4ff4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4ff8:	e79b      	b.n	80a4f32 <__udivmoddi4+0x9e>
 80a4ffa:	4631      	mov	r1, r6
 80a4ffc:	4630      	mov	r0, r6
 80a4ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5002:	fa07 f70e 	lsl.w	r7, r7, lr
 80a5006:	f1ce 0c20 	rsb	ip, lr, #32
 80a500a:	fa24 f30c 	lsr.w	r3, r4, ip
 80a500e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a5012:	fbb3 faf8 	udiv	sl, r3, r8
 80a5016:	fa1f f987 	uxth.w	r9, r7
 80a501a:	fb08 351a 	mls	r5, r8, sl, r3
 80a501e:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5022:	fa04 f40e 	lsl.w	r4, r4, lr
 80a5026:	fb0a fb09 	mul.w	fp, sl, r9
 80a502a:	ea4c 0c04 	orr.w	ip, ip, r4
 80a502e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a5032:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a5036:	459b      	cmp	fp, r3
 80a5038:	fa00 f50e 	lsl.w	r5, r0, lr
 80a503c:	d90a      	bls.n	80a5054 <__udivmoddi4+0x1c0>
 80a503e:	19db      	adds	r3, r3, r7
 80a5040:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a5044:	f080 808b 	bcs.w	80a515e <__udivmoddi4+0x2ca>
 80a5048:	459b      	cmp	fp, r3
 80a504a:	f240 8088 	bls.w	80a515e <__udivmoddi4+0x2ca>
 80a504e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a5052:	443b      	add	r3, r7
 80a5054:	ebcb 0303 	rsb	r3, fp, r3
 80a5058:	fbb3 f0f8 	udiv	r0, r3, r8
 80a505c:	fb08 3310 	mls	r3, r8, r0, r3
 80a5060:	fb00 f409 	mul.w	r4, r0, r9
 80a5064:	fa1f fc8c 	uxth.w	ip, ip
 80a5068:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a506c:	429c      	cmp	r4, r3
 80a506e:	d907      	bls.n	80a5080 <__udivmoddi4+0x1ec>
 80a5070:	19db      	adds	r3, r3, r7
 80a5072:	f100 32ff 	add.w	r2, r0, #4294967295
 80a5076:	d26e      	bcs.n	80a5156 <__udivmoddi4+0x2c2>
 80a5078:	429c      	cmp	r4, r3
 80a507a:	d96c      	bls.n	80a5156 <__udivmoddi4+0x2c2>
 80a507c:	3802      	subs	r0, #2
 80a507e:	443b      	add	r3, r7
 80a5080:	1b1c      	subs	r4, r3, r4
 80a5082:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a5086:	e78b      	b.n	80a4fa0 <__udivmoddi4+0x10c>
 80a5088:	f1c1 0e20 	rsb	lr, r1, #32
 80a508c:	408b      	lsls	r3, r1
 80a508e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a5092:	ea4c 0c03 	orr.w	ip, ip, r3
 80a5096:	fa24 f70e 	lsr.w	r7, r4, lr
 80a509a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a509e:	fbb7 faf9 	udiv	sl, r7, r9
 80a50a2:	fa1f f38c 	uxth.w	r3, ip
 80a50a6:	fb09 771a 	mls	r7, r9, sl, r7
 80a50aa:	fa20 f80e 	lsr.w	r8, r0, lr
 80a50ae:	408c      	lsls	r4, r1
 80a50b0:	fb0a f503 	mul.w	r5, sl, r3
 80a50b4:	ea48 0404 	orr.w	r4, r8, r4
 80a50b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a50bc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a50c0:	42bd      	cmp	r5, r7
 80a50c2:	fa02 f201 	lsl.w	r2, r2, r1
 80a50c6:	fa00 fb01 	lsl.w	fp, r0, r1
 80a50ca:	d909      	bls.n	80a50e0 <__udivmoddi4+0x24c>
 80a50cc:	eb17 070c 	adds.w	r7, r7, ip
 80a50d0:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a50d4:	d241      	bcs.n	80a515a <__udivmoddi4+0x2c6>
 80a50d6:	42bd      	cmp	r5, r7
 80a50d8:	d93f      	bls.n	80a515a <__udivmoddi4+0x2c6>
 80a50da:	f1aa 0a02 	sub.w	sl, sl, #2
 80a50de:	4467      	add	r7, ip
 80a50e0:	1b7f      	subs	r7, r7, r5
 80a50e2:	fbb7 f5f9 	udiv	r5, r7, r9
 80a50e6:	fb09 7715 	mls	r7, r9, r5, r7
 80a50ea:	fb05 f303 	mul.w	r3, r5, r3
 80a50ee:	b2a4      	uxth	r4, r4
 80a50f0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a50f4:	42bb      	cmp	r3, r7
 80a50f6:	d908      	bls.n	80a510a <__udivmoddi4+0x276>
 80a50f8:	eb17 070c 	adds.w	r7, r7, ip
 80a50fc:	f105 30ff 	add.w	r0, r5, #4294967295
 80a5100:	d227      	bcs.n	80a5152 <__udivmoddi4+0x2be>
 80a5102:	42bb      	cmp	r3, r7
 80a5104:	d925      	bls.n	80a5152 <__udivmoddi4+0x2be>
 80a5106:	3d02      	subs	r5, #2
 80a5108:	4467      	add	r7, ip
 80a510a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a510e:	fba0 8902 	umull	r8, r9, r0, r2
 80a5112:	1aff      	subs	r7, r7, r3
 80a5114:	454f      	cmp	r7, r9
 80a5116:	4645      	mov	r5, r8
 80a5118:	464c      	mov	r4, r9
 80a511a:	d314      	bcc.n	80a5146 <__udivmoddi4+0x2b2>
 80a511c:	d029      	beq.n	80a5172 <__udivmoddi4+0x2de>
 80a511e:	b366      	cbz	r6, 80a517a <__udivmoddi4+0x2e6>
 80a5120:	ebbb 0305 	subs.w	r3, fp, r5
 80a5124:	eb67 0704 	sbc.w	r7, r7, r4
 80a5128:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a512c:	40cb      	lsrs	r3, r1
 80a512e:	40cf      	lsrs	r7, r1
 80a5130:	ea4e 0303 	orr.w	r3, lr, r3
 80a5134:	e886 0088 	stmia.w	r6, {r3, r7}
 80a5138:	2100      	movs	r1, #0
 80a513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a513e:	4623      	mov	r3, r4
 80a5140:	e6f3      	b.n	80a4f2a <__udivmoddi4+0x96>
 80a5142:	4618      	mov	r0, r3
 80a5144:	e6da      	b.n	80a4efc <__udivmoddi4+0x68>
 80a5146:	ebb8 0502 	subs.w	r5, r8, r2
 80a514a:	eb69 040c 	sbc.w	r4, r9, ip
 80a514e:	3801      	subs	r0, #1
 80a5150:	e7e5      	b.n	80a511e <__udivmoddi4+0x28a>
 80a5152:	4605      	mov	r5, r0
 80a5154:	e7d9      	b.n	80a510a <__udivmoddi4+0x276>
 80a5156:	4610      	mov	r0, r2
 80a5158:	e792      	b.n	80a5080 <__udivmoddi4+0x1ec>
 80a515a:	4682      	mov	sl, r0
 80a515c:	e7c0      	b.n	80a50e0 <__udivmoddi4+0x24c>
 80a515e:	4692      	mov	sl, r2
 80a5160:	e778      	b.n	80a5054 <__udivmoddi4+0x1c0>
 80a5162:	3802      	subs	r0, #2
 80a5164:	443a      	add	r2, r7
 80a5166:	e743      	b.n	80a4ff0 <__udivmoddi4+0x15c>
 80a5168:	4608      	mov	r0, r1
 80a516a:	e704      	b.n	80a4f76 <__udivmoddi4+0xe2>
 80a516c:	3b02      	subs	r3, #2
 80a516e:	443c      	add	r4, r7
 80a5170:	e72a      	b.n	80a4fc8 <__udivmoddi4+0x134>
 80a5172:	45c3      	cmp	fp, r8
 80a5174:	d3e7      	bcc.n	80a5146 <__udivmoddi4+0x2b2>
 80a5176:	463c      	mov	r4, r7
 80a5178:	e7d1      	b.n	80a511e <__udivmoddi4+0x28a>
 80a517a:	4631      	mov	r1, r6
 80a517c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5180 <__aeabi_idiv0>:
 80a5180:	4770      	bx	lr
 80a5182:	bf00      	nop

080a5184 <__cxa_atexit>:
 80a5184:	b510      	push	{r4, lr}
 80a5186:	4c05      	ldr	r4, [pc, #20]	; (80a519c <__cxa_atexit+0x18>)
 80a5188:	4613      	mov	r3, r2
 80a518a:	b12c      	cbz	r4, 80a5198 <__cxa_atexit+0x14>
 80a518c:	460a      	mov	r2, r1
 80a518e:	4601      	mov	r1, r0
 80a5190:	2002      	movs	r0, #2
 80a5192:	f3af 8000 	nop.w
 80a5196:	bd10      	pop	{r4, pc}
 80a5198:	4620      	mov	r0, r4
 80a519a:	bd10      	pop	{r4, pc}
 80a519c:	00000000 	.word	0x00000000

080a51a0 <localtime>:
 80a51a0:	b538      	push	{r3, r4, r5, lr}
 80a51a2:	4b07      	ldr	r3, [pc, #28]	; (80a51c0 <localtime+0x20>)
 80a51a4:	4605      	mov	r5, r0
 80a51a6:	681c      	ldr	r4, [r3, #0]
 80a51a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a51aa:	b91b      	cbnz	r3, 80a51b4 <localtime+0x14>
 80a51ac:	2024      	movs	r0, #36	; 0x24
 80a51ae:	f7fc f815 	bl	80a11dc <malloc>
 80a51b2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a51b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a51b6:	4628      	mov	r0, r5
 80a51b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a51bc:	f000 b802 	b.w	80a51c4 <localtime_r>
 80a51c0:	20000078 	.word	0x20000078

080a51c4 <localtime_r>:
 80a51c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a51c8:	460c      	mov	r4, r1
 80a51ca:	4680      	mov	r8, r0
 80a51cc:	f000 fd4c 	bl	80a5c68 <__gettzinfo>
 80a51d0:	4621      	mov	r1, r4
 80a51d2:	4607      	mov	r7, r0
 80a51d4:	4640      	mov	r0, r8
 80a51d6:	f000 fd4b 	bl	80a5c70 <gmtime_r>
 80a51da:	6946      	ldr	r6, [r0, #20]
 80a51dc:	4604      	mov	r4, r0
 80a51de:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a51e2:	07b3      	lsls	r3, r6, #30
 80a51e4:	d105      	bne.n	80a51f2 <localtime_r+0x2e>
 80a51e6:	2264      	movs	r2, #100	; 0x64
 80a51e8:	fb96 f3f2 	sdiv	r3, r6, r2
 80a51ec:	fb02 6313 	mls	r3, r2, r3, r6
 80a51f0:	b94b      	cbnz	r3, 80a5206 <localtime_r+0x42>
 80a51f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a51f6:	fb96 f3f5 	sdiv	r3, r6, r5
 80a51fa:	fb05 6513 	mls	r5, r5, r3, r6
 80a51fe:	fab5 f385 	clz	r3, r5
 80a5202:	095b      	lsrs	r3, r3, #5
 80a5204:	e000      	b.n	80a5208 <localtime_r+0x44>
 80a5206:	2301      	movs	r3, #1
 80a5208:	4a5f      	ldr	r2, [pc, #380]	; (80a5388 <localtime_r+0x1c4>)
 80a520a:	2530      	movs	r5, #48	; 0x30
 80a520c:	fb05 2503 	mla	r5, r5, r3, r2
 80a5210:	f000 fb5e 	bl	80a58d0 <__tz_lock>
 80a5214:	f000 fb5e 	bl	80a58d4 <_tzset_unlocked>
 80a5218:	4b5c      	ldr	r3, [pc, #368]	; (80a538c <localtime_r+0x1c8>)
 80a521a:	681b      	ldr	r3, [r3, #0]
 80a521c:	b1f3      	cbz	r3, 80a525c <localtime_r+0x98>
 80a521e:	687b      	ldr	r3, [r7, #4]
 80a5220:	429e      	cmp	r6, r3
 80a5222:	d105      	bne.n	80a5230 <localtime_r+0x6c>
 80a5224:	6839      	ldr	r1, [r7, #0]
 80a5226:	f8d8 3000 	ldr.w	r3, [r8]
 80a522a:	69fa      	ldr	r2, [r7, #28]
 80a522c:	b941      	cbnz	r1, 80a5240 <localtime_r+0x7c>
 80a522e:	e00a      	b.n	80a5246 <localtime_r+0x82>
 80a5230:	4630      	mov	r0, r6
 80a5232:	f000 faa5 	bl	80a5780 <__tzcalc_limits>
 80a5236:	2800      	cmp	r0, #0
 80a5238:	d1f4      	bne.n	80a5224 <localtime_r+0x60>
 80a523a:	f04f 33ff 	mov.w	r3, #4294967295
 80a523e:	e00d      	b.n	80a525c <localtime_r+0x98>
 80a5240:	4293      	cmp	r3, r2
 80a5242:	db08      	blt.n	80a5256 <localtime_r+0x92>
 80a5244:	e001      	b.n	80a524a <localtime_r+0x86>
 80a5246:	4293      	cmp	r3, r2
 80a5248:	da07      	bge.n	80a525a <localtime_r+0x96>
 80a524a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a524c:	4293      	cmp	r3, r2
 80a524e:	bfac      	ite	ge
 80a5250:	2300      	movge	r3, #0
 80a5252:	2301      	movlt	r3, #1
 80a5254:	e002      	b.n	80a525c <localtime_r+0x98>
 80a5256:	2300      	movs	r3, #0
 80a5258:	e000      	b.n	80a525c <localtime_r+0x98>
 80a525a:	2301      	movs	r3, #1
 80a525c:	6223      	str	r3, [r4, #32]
 80a525e:	6a23      	ldr	r3, [r4, #32]
 80a5260:	203c      	movs	r0, #60	; 0x3c
 80a5262:	2b01      	cmp	r3, #1
 80a5264:	bf0c      	ite	eq
 80a5266:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a5268:	6a39      	ldrne	r1, [r7, #32]
 80a526a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a526e:	fb91 f6f3 	sdiv	r6, r1, r3
 80a5272:	fb03 1316 	mls	r3, r3, r6, r1
 80a5276:	fb93 f2f0 	sdiv	r2, r3, r0
 80a527a:	fb00 3012 	mls	r0, r0, r2, r3
 80a527e:	6861      	ldr	r1, [r4, #4]
 80a5280:	6823      	ldr	r3, [r4, #0]
 80a5282:	1a89      	subs	r1, r1, r2
 80a5284:	68a2      	ldr	r2, [r4, #8]
 80a5286:	1a1b      	subs	r3, r3, r0
 80a5288:	1b92      	subs	r2, r2, r6
 80a528a:	2b3b      	cmp	r3, #59	; 0x3b
 80a528c:	6023      	str	r3, [r4, #0]
 80a528e:	6061      	str	r1, [r4, #4]
 80a5290:	60a2      	str	r2, [r4, #8]
 80a5292:	dd03      	ble.n	80a529c <localtime_r+0xd8>
 80a5294:	3101      	adds	r1, #1
 80a5296:	6061      	str	r1, [r4, #4]
 80a5298:	3b3c      	subs	r3, #60	; 0x3c
 80a529a:	e004      	b.n	80a52a6 <localtime_r+0xe2>
 80a529c:	2b00      	cmp	r3, #0
 80a529e:	da03      	bge.n	80a52a8 <localtime_r+0xe4>
 80a52a0:	3901      	subs	r1, #1
 80a52a2:	6061      	str	r1, [r4, #4]
 80a52a4:	333c      	adds	r3, #60	; 0x3c
 80a52a6:	6023      	str	r3, [r4, #0]
 80a52a8:	6863      	ldr	r3, [r4, #4]
 80a52aa:	2b3b      	cmp	r3, #59	; 0x3b
 80a52ac:	dd03      	ble.n	80a52b6 <localtime_r+0xf2>
 80a52ae:	3201      	adds	r2, #1
 80a52b0:	60a2      	str	r2, [r4, #8]
 80a52b2:	3b3c      	subs	r3, #60	; 0x3c
 80a52b4:	e004      	b.n	80a52c0 <localtime_r+0xfc>
 80a52b6:	2b00      	cmp	r3, #0
 80a52b8:	da03      	bge.n	80a52c2 <localtime_r+0xfe>
 80a52ba:	3a01      	subs	r2, #1
 80a52bc:	60a2      	str	r2, [r4, #8]
 80a52be:	333c      	adds	r3, #60	; 0x3c
 80a52c0:	6063      	str	r3, [r4, #4]
 80a52c2:	68a3      	ldr	r3, [r4, #8]
 80a52c4:	2b17      	cmp	r3, #23
 80a52c6:	dd22      	ble.n	80a530e <localtime_r+0x14a>
 80a52c8:	69e2      	ldr	r2, [r4, #28]
 80a52ca:	3b18      	subs	r3, #24
 80a52cc:	3201      	adds	r2, #1
 80a52ce:	61e2      	str	r2, [r4, #28]
 80a52d0:	69a2      	ldr	r2, [r4, #24]
 80a52d2:	60a3      	str	r3, [r4, #8]
 80a52d4:	3201      	adds	r2, #1
 80a52d6:	2a06      	cmp	r2, #6
 80a52d8:	bfc8      	it	gt
 80a52da:	2200      	movgt	r2, #0
 80a52dc:	61a2      	str	r2, [r4, #24]
 80a52de:	68e2      	ldr	r2, [r4, #12]
 80a52e0:	6923      	ldr	r3, [r4, #16]
 80a52e2:	3201      	adds	r2, #1
 80a52e4:	60e2      	str	r2, [r4, #12]
 80a52e6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a52ea:	428a      	cmp	r2, r1
 80a52ec:	dd46      	ble.n	80a537c <localtime_r+0x1b8>
 80a52ee:	3301      	adds	r3, #1
 80a52f0:	2b0c      	cmp	r3, #12
 80a52f2:	bf08      	it	eq
 80a52f4:	6963      	ldreq	r3, [r4, #20]
 80a52f6:	eba2 0201 	sub.w	r2, r2, r1
 80a52fa:	60e2      	str	r2, [r4, #12]
 80a52fc:	bf05      	ittet	eq
 80a52fe:	3301      	addeq	r3, #1
 80a5300:	2200      	moveq	r2, #0
 80a5302:	6123      	strne	r3, [r4, #16]
 80a5304:	6122      	streq	r2, [r4, #16]
 80a5306:	bf04      	itt	eq
 80a5308:	6163      	streq	r3, [r4, #20]
 80a530a:	61e2      	streq	r2, [r4, #28]
 80a530c:	e036      	b.n	80a537c <localtime_r+0x1b8>
 80a530e:	2b00      	cmp	r3, #0
 80a5310:	da34      	bge.n	80a537c <localtime_r+0x1b8>
 80a5312:	69e2      	ldr	r2, [r4, #28]
 80a5314:	3318      	adds	r3, #24
 80a5316:	3a01      	subs	r2, #1
 80a5318:	61e2      	str	r2, [r4, #28]
 80a531a:	69a2      	ldr	r2, [r4, #24]
 80a531c:	60a3      	str	r3, [r4, #8]
 80a531e:	3a01      	subs	r2, #1
 80a5320:	bf48      	it	mi
 80a5322:	2206      	movmi	r2, #6
 80a5324:	61a2      	str	r2, [r4, #24]
 80a5326:	68e2      	ldr	r2, [r4, #12]
 80a5328:	3a01      	subs	r2, #1
 80a532a:	60e2      	str	r2, [r4, #12]
 80a532c:	bb32      	cbnz	r2, 80a537c <localtime_r+0x1b8>
 80a532e:	6923      	ldr	r3, [r4, #16]
 80a5330:	3b01      	subs	r3, #1
 80a5332:	d401      	bmi.n	80a5338 <localtime_r+0x174>
 80a5334:	6123      	str	r3, [r4, #16]
 80a5336:	e01d      	b.n	80a5374 <localtime_r+0x1b0>
 80a5338:	230b      	movs	r3, #11
 80a533a:	6123      	str	r3, [r4, #16]
 80a533c:	6963      	ldr	r3, [r4, #20]
 80a533e:	1e5a      	subs	r2, r3, #1
 80a5340:	f012 0f03 	tst.w	r2, #3
 80a5344:	6162      	str	r2, [r4, #20]
 80a5346:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a534a:	d105      	bne.n	80a5358 <localtime_r+0x194>
 80a534c:	2164      	movs	r1, #100	; 0x64
 80a534e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5352:	fb01 3212 	mls	r2, r1, r2, r3
 80a5356:	b94a      	cbnz	r2, 80a536c <localtime_r+0x1a8>
 80a5358:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a535c:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5360:	fb01 3312 	mls	r3, r1, r2, r3
 80a5364:	fab3 f383 	clz	r3, r3
 80a5368:	095b      	lsrs	r3, r3, #5
 80a536a:	e000      	b.n	80a536e <localtime_r+0x1aa>
 80a536c:	2301      	movs	r3, #1
 80a536e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a5372:	61e3      	str	r3, [r4, #28]
 80a5374:	6923      	ldr	r3, [r4, #16]
 80a5376:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a537a:	60e3      	str	r3, [r4, #12]
 80a537c:	f000 faa9 	bl	80a58d2 <__tz_unlock>
 80a5380:	4620      	mov	r0, r4
 80a5382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5386:	bf00      	nop
 80a5388:	080a65bc 	.word	0x080a65bc
 80a538c:	200004a0 	.word	0x200004a0

080a5390 <ldiv>:
 80a5390:	b510      	push	{r4, lr}
 80a5392:	fb91 f4f2 	sdiv	r4, r1, r2
 80a5396:	2900      	cmp	r1, #0
 80a5398:	fb02 1314 	mls	r3, r2, r4, r1
 80a539c:	db04      	blt.n	80a53a8 <ldiv+0x18>
 80a539e:	2b00      	cmp	r3, #0
 80a53a0:	da07      	bge.n	80a53b2 <ldiv+0x22>
 80a53a2:	3401      	adds	r4, #1
 80a53a4:	1a9b      	subs	r3, r3, r2
 80a53a6:	e004      	b.n	80a53b2 <ldiv+0x22>
 80a53a8:	2b00      	cmp	r3, #0
 80a53aa:	bfc4      	itt	gt
 80a53ac:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a53b0:	189b      	addgt	r3, r3, r2
 80a53b2:	6004      	str	r4, [r0, #0]
 80a53b4:	6043      	str	r3, [r0, #4]
 80a53b6:	bd10      	pop	{r4, pc}

080a53b8 <memcpy>:
 80a53b8:	b510      	push	{r4, lr}
 80a53ba:	1e43      	subs	r3, r0, #1
 80a53bc:	440a      	add	r2, r1
 80a53be:	4291      	cmp	r1, r2
 80a53c0:	d004      	beq.n	80a53cc <memcpy+0x14>
 80a53c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a53c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a53ca:	e7f8      	b.n	80a53be <memcpy+0x6>
 80a53cc:	bd10      	pop	{r4, pc}

080a53ce <memmove>:
 80a53ce:	4288      	cmp	r0, r1
 80a53d0:	b510      	push	{r4, lr}
 80a53d2:	eb01 0302 	add.w	r3, r1, r2
 80a53d6:	d801      	bhi.n	80a53dc <memmove+0xe>
 80a53d8:	1e42      	subs	r2, r0, #1
 80a53da:	e00b      	b.n	80a53f4 <memmove+0x26>
 80a53dc:	4298      	cmp	r0, r3
 80a53de:	d2fb      	bcs.n	80a53d8 <memmove+0xa>
 80a53e0:	1881      	adds	r1, r0, r2
 80a53e2:	1ad2      	subs	r2, r2, r3
 80a53e4:	42d3      	cmn	r3, r2
 80a53e6:	d004      	beq.n	80a53f2 <memmove+0x24>
 80a53e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a53ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a53f0:	e7f8      	b.n	80a53e4 <memmove+0x16>
 80a53f2:	bd10      	pop	{r4, pc}
 80a53f4:	4299      	cmp	r1, r3
 80a53f6:	d004      	beq.n	80a5402 <memmove+0x34>
 80a53f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a53fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a5400:	e7f8      	b.n	80a53f4 <memmove+0x26>
 80a5402:	bd10      	pop	{r4, pc}

080a5404 <memset>:
 80a5404:	4603      	mov	r3, r0
 80a5406:	4402      	add	r2, r0
 80a5408:	4293      	cmp	r3, r2
 80a540a:	d002      	beq.n	80a5412 <memset+0xe>
 80a540c:	f803 1b01 	strb.w	r1, [r3], #1
 80a5410:	e7fa      	b.n	80a5408 <memset+0x4>
 80a5412:	4770      	bx	lr

080a5414 <srand>:
 80a5414:	b538      	push	{r3, r4, r5, lr}
 80a5416:	4b12      	ldr	r3, [pc, #72]	; (80a5460 <srand+0x4c>)
 80a5418:	4605      	mov	r5, r0
 80a541a:	681c      	ldr	r4, [r3, #0]
 80a541c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a541e:	b9d3      	cbnz	r3, 80a5456 <srand+0x42>
 80a5420:	2018      	movs	r0, #24
 80a5422:	f7fb fedb 	bl	80a11dc <malloc>
 80a5426:	f243 330e 	movw	r3, #13070	; 0x330e
 80a542a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a542c:	8003      	strh	r3, [r0, #0]
 80a542e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5432:	8043      	strh	r3, [r0, #2]
 80a5434:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5438:	8083      	strh	r3, [r0, #4]
 80a543a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a543e:	80c3      	strh	r3, [r0, #6]
 80a5440:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5444:	8103      	strh	r3, [r0, #8]
 80a5446:	2305      	movs	r3, #5
 80a5448:	8143      	strh	r3, [r0, #10]
 80a544a:	230b      	movs	r3, #11
 80a544c:	8183      	strh	r3, [r0, #12]
 80a544e:	2201      	movs	r2, #1
 80a5450:	2300      	movs	r3, #0
 80a5452:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5458:	2200      	movs	r2, #0
 80a545a:	611d      	str	r5, [r3, #16]
 80a545c:	615a      	str	r2, [r3, #20]
 80a545e:	bd38      	pop	{r3, r4, r5, pc}
 80a5460:	20000078 	.word	0x20000078

080a5464 <strchr>:
 80a5464:	b2c9      	uxtb	r1, r1
 80a5466:	4603      	mov	r3, r0
 80a5468:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a546c:	b11a      	cbz	r2, 80a5476 <strchr+0x12>
 80a546e:	4291      	cmp	r1, r2
 80a5470:	d1f9      	bne.n	80a5466 <strchr+0x2>
 80a5472:	4618      	mov	r0, r3
 80a5474:	4770      	bx	lr
 80a5476:	2900      	cmp	r1, #0
 80a5478:	bf0c      	ite	eq
 80a547a:	4618      	moveq	r0, r3
 80a547c:	2000      	movne	r0, #0
 80a547e:	4770      	bx	lr

080a5480 <strchrnul>:
 80a5480:	b510      	push	{r4, lr}
 80a5482:	4604      	mov	r4, r0
 80a5484:	f7ff ffee 	bl	80a5464 <strchr>
 80a5488:	b918      	cbnz	r0, 80a5492 <strchrnul+0x12>
 80a548a:	4620      	mov	r0, r4
 80a548c:	f000 f82f 	bl	80a54ee <strlen>
 80a5490:	4420      	add	r0, r4
 80a5492:	bd10      	pop	{r4, pc}

080a5494 <strcmp>:
 80a5494:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5498:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a549c:	2a01      	cmp	r2, #1
 80a549e:	bf28      	it	cs
 80a54a0:	429a      	cmpcs	r2, r3
 80a54a2:	d0f7      	beq.n	80a5494 <strcmp>
 80a54a4:	1ad0      	subs	r0, r2, r3
 80a54a6:	4770      	bx	lr

080a54a8 <strcpy>:
 80a54a8:	4603      	mov	r3, r0
 80a54aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a54ae:	f803 2b01 	strb.w	r2, [r3], #1
 80a54b2:	2a00      	cmp	r2, #0
 80a54b4:	d1f9      	bne.n	80a54aa <strcpy+0x2>
 80a54b6:	4770      	bx	lr

080a54b8 <strdup>:
 80a54b8:	4b02      	ldr	r3, [pc, #8]	; (80a54c4 <strdup+0xc>)
 80a54ba:	4601      	mov	r1, r0
 80a54bc:	6818      	ldr	r0, [r3, #0]
 80a54be:	f000 b803 	b.w	80a54c8 <_strdup_r>
 80a54c2:	bf00      	nop
 80a54c4:	20000078 	.word	0x20000078

080a54c8 <_strdup_r>:
 80a54c8:	b570      	push	{r4, r5, r6, lr}
 80a54ca:	4606      	mov	r6, r0
 80a54cc:	4608      	mov	r0, r1
 80a54ce:	460c      	mov	r4, r1
 80a54d0:	f000 f80d 	bl	80a54ee <strlen>
 80a54d4:	1c45      	adds	r5, r0, #1
 80a54d6:	4629      	mov	r1, r5
 80a54d8:	4630      	mov	r0, r6
 80a54da:	f7fb feaf 	bl	80a123c <_malloc_r>
 80a54de:	4606      	mov	r6, r0
 80a54e0:	b118      	cbz	r0, 80a54ea <_strdup_r+0x22>
 80a54e2:	462a      	mov	r2, r5
 80a54e4:	4621      	mov	r1, r4
 80a54e6:	f7ff ff67 	bl	80a53b8 <memcpy>
 80a54ea:	4630      	mov	r0, r6
 80a54ec:	bd70      	pop	{r4, r5, r6, pc}

080a54ee <strlen>:
 80a54ee:	4603      	mov	r3, r0
 80a54f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a54f4:	2a00      	cmp	r2, #0
 80a54f6:	d1fb      	bne.n	80a54f0 <strlen+0x2>
 80a54f8:	1a18      	subs	r0, r3, r0
 80a54fa:	3801      	subs	r0, #1
 80a54fc:	4770      	bx	lr

080a54fe <strncmp>:
 80a54fe:	b530      	push	{r4, r5, lr}
 80a5500:	b182      	cbz	r2, 80a5524 <strncmp+0x26>
 80a5502:	1e45      	subs	r5, r0, #1
 80a5504:	3901      	subs	r1, #1
 80a5506:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a550a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a550e:	42a3      	cmp	r3, r4
 80a5510:	d106      	bne.n	80a5520 <strncmp+0x22>
 80a5512:	43ec      	mvns	r4, r5
 80a5514:	4414      	add	r4, r2
 80a5516:	42e0      	cmn	r0, r4
 80a5518:	d001      	beq.n	80a551e <strncmp+0x20>
 80a551a:	2b00      	cmp	r3, #0
 80a551c:	d1f3      	bne.n	80a5506 <strncmp+0x8>
 80a551e:	461c      	mov	r4, r3
 80a5520:	1b18      	subs	r0, r3, r4
 80a5522:	bd30      	pop	{r4, r5, pc}
 80a5524:	4610      	mov	r0, r2
 80a5526:	bd30      	pop	{r4, r5, pc}

080a5528 <strrchr>:
 80a5528:	b538      	push	{r3, r4, r5, lr}
 80a552a:	4603      	mov	r3, r0
 80a552c:	460d      	mov	r5, r1
 80a552e:	b141      	cbz	r1, 80a5542 <strrchr+0x1a>
 80a5530:	2400      	movs	r4, #0
 80a5532:	4629      	mov	r1, r5
 80a5534:	4618      	mov	r0, r3
 80a5536:	f7ff ff95 	bl	80a5464 <strchr>
 80a553a:	b130      	cbz	r0, 80a554a <strrchr+0x22>
 80a553c:	1c43      	adds	r3, r0, #1
 80a553e:	4604      	mov	r4, r0
 80a5540:	e7f7      	b.n	80a5532 <strrchr+0xa>
 80a5542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a5546:	f7ff bf8d 	b.w	80a5464 <strchr>
 80a554a:	4620      	mov	r0, r4
 80a554c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a5550 <_strtol_r>:
 80a5550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5554:	460f      	mov	r7, r1
 80a5556:	4680      	mov	r8, r0
 80a5558:	483f      	ldr	r0, [pc, #252]	; (80a5658 <_strtol_r+0x108>)
 80a555a:	f8d0 9000 	ldr.w	r9, [r0]
 80a555e:	463d      	mov	r5, r7
 80a5560:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5564:	eb09 0004 	add.w	r0, r9, r4
 80a5568:	7840      	ldrb	r0, [r0, #1]
 80a556a:	f000 0008 	and.w	r0, r0, #8
 80a556e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a5572:	b108      	cbz	r0, 80a5578 <_strtol_r+0x28>
 80a5574:	462f      	mov	r7, r5
 80a5576:	e7f2      	b.n	80a555e <_strtol_r+0xe>
 80a5578:	2c2d      	cmp	r4, #45	; 0x2d
 80a557a:	d103      	bne.n	80a5584 <_strtol_r+0x34>
 80a557c:	1cbd      	adds	r5, r7, #2
 80a557e:	787c      	ldrb	r4, [r7, #1]
 80a5580:	2601      	movs	r6, #1
 80a5582:	e003      	b.n	80a558c <_strtol_r+0x3c>
 80a5584:	2c2b      	cmp	r4, #43	; 0x2b
 80a5586:	bf04      	itt	eq
 80a5588:	787c      	ldrbeq	r4, [r7, #1]
 80a558a:	1cbd      	addeq	r5, r7, #2
 80a558c:	b113      	cbz	r3, 80a5594 <_strtol_r+0x44>
 80a558e:	2b10      	cmp	r3, #16
 80a5590:	d10a      	bne.n	80a55a8 <_strtol_r+0x58>
 80a5592:	e05b      	b.n	80a564c <_strtol_r+0xfc>
 80a5594:	2c30      	cmp	r4, #48	; 0x30
 80a5596:	d157      	bne.n	80a5648 <_strtol_r+0xf8>
 80a5598:	7828      	ldrb	r0, [r5, #0]
 80a559a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a559e:	2858      	cmp	r0, #88	; 0x58
 80a55a0:	d14d      	bne.n	80a563e <_strtol_r+0xee>
 80a55a2:	786c      	ldrb	r4, [r5, #1]
 80a55a4:	2310      	movs	r3, #16
 80a55a6:	3502      	adds	r5, #2
 80a55a8:	2e00      	cmp	r6, #0
 80a55aa:	bf14      	ite	ne
 80a55ac:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a55b0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a55b4:	fbbc faf3 	udiv	sl, ip, r3
 80a55b8:	2700      	movs	r7, #0
 80a55ba:	4638      	mov	r0, r7
 80a55bc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a55c0:	eb09 0e04 	add.w	lr, r9, r4
 80a55c4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a55c8:	f01e 0f04 	tst.w	lr, #4
 80a55cc:	d001      	beq.n	80a55d2 <_strtol_r+0x82>
 80a55ce:	3c30      	subs	r4, #48	; 0x30
 80a55d0:	e00b      	b.n	80a55ea <_strtol_r+0x9a>
 80a55d2:	f01e 0e03 	ands.w	lr, lr, #3
 80a55d6:	d01b      	beq.n	80a5610 <_strtol_r+0xc0>
 80a55d8:	f1be 0f01 	cmp.w	lr, #1
 80a55dc:	bf0c      	ite	eq
 80a55de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a55e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a55e6:	ebce 0404 	rsb	r4, lr, r4
 80a55ea:	42a3      	cmp	r3, r4
 80a55ec:	dd10      	ble.n	80a5610 <_strtol_r+0xc0>
 80a55ee:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a55f2:	d00a      	beq.n	80a560a <_strtol_r+0xba>
 80a55f4:	4550      	cmp	r0, sl
 80a55f6:	d806      	bhi.n	80a5606 <_strtol_r+0xb6>
 80a55f8:	d101      	bne.n	80a55fe <_strtol_r+0xae>
 80a55fa:	4564      	cmp	r4, ip
 80a55fc:	dc03      	bgt.n	80a5606 <_strtol_r+0xb6>
 80a55fe:	fb03 4000 	mla	r0, r3, r0, r4
 80a5602:	2701      	movs	r7, #1
 80a5604:	e001      	b.n	80a560a <_strtol_r+0xba>
 80a5606:	f04f 37ff 	mov.w	r7, #4294967295
 80a560a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a560e:	e7d7      	b.n	80a55c0 <_strtol_r+0x70>
 80a5610:	1c7b      	adds	r3, r7, #1
 80a5612:	d10c      	bne.n	80a562e <_strtol_r+0xde>
 80a5614:	2e00      	cmp	r6, #0
 80a5616:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a561a:	bf14      	ite	ne
 80a561c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a5620:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5624:	f8c8 3000 	str.w	r3, [r8]
 80a5628:	b92a      	cbnz	r2, 80a5636 <_strtol_r+0xe6>
 80a562a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a562e:	b106      	cbz	r6, 80a5632 <_strtol_r+0xe2>
 80a5630:	4240      	negs	r0, r0
 80a5632:	b172      	cbz	r2, 80a5652 <_strtol_r+0x102>
 80a5634:	b107      	cbz	r7, 80a5638 <_strtol_r+0xe8>
 80a5636:	1e69      	subs	r1, r5, #1
 80a5638:	6011      	str	r1, [r2, #0]
 80a563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a563e:	2430      	movs	r4, #48	; 0x30
 80a5640:	2b00      	cmp	r3, #0
 80a5642:	d1b1      	bne.n	80a55a8 <_strtol_r+0x58>
 80a5644:	2308      	movs	r3, #8
 80a5646:	e7af      	b.n	80a55a8 <_strtol_r+0x58>
 80a5648:	230a      	movs	r3, #10
 80a564a:	e7ad      	b.n	80a55a8 <_strtol_r+0x58>
 80a564c:	2c30      	cmp	r4, #48	; 0x30
 80a564e:	d0a3      	beq.n	80a5598 <_strtol_r+0x48>
 80a5650:	e7aa      	b.n	80a55a8 <_strtol_r+0x58>
 80a5652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5656:	bf00      	nop
 80a5658:	20000014 	.word	0x20000014

080a565c <strtol>:
 80a565c:	4613      	mov	r3, r2
 80a565e:	460a      	mov	r2, r1
 80a5660:	4601      	mov	r1, r0
 80a5662:	4802      	ldr	r0, [pc, #8]	; (80a566c <strtol+0x10>)
 80a5664:	6800      	ldr	r0, [r0, #0]
 80a5666:	f7ff bf73 	b.w	80a5550 <_strtol_r>
 80a566a:	bf00      	nop
 80a566c:	20000078 	.word	0x20000078

080a5670 <_strtoul_r>:
 80a5670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5674:	460e      	mov	r6, r1
 80a5676:	4680      	mov	r8, r0
 80a5678:	483b      	ldr	r0, [pc, #236]	; (80a5768 <_strtoul_r+0xf8>)
 80a567a:	f8d0 9000 	ldr.w	r9, [r0]
 80a567e:	4635      	mov	r5, r6
 80a5680:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5684:	eb09 0004 	add.w	r0, r9, r4
 80a5688:	7840      	ldrb	r0, [r0, #1]
 80a568a:	f000 0008 	and.w	r0, r0, #8
 80a568e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5692:	b108      	cbz	r0, 80a5698 <_strtoul_r+0x28>
 80a5694:	462e      	mov	r6, r5
 80a5696:	e7f2      	b.n	80a567e <_strtoul_r+0xe>
 80a5698:	2c2d      	cmp	r4, #45	; 0x2d
 80a569a:	d103      	bne.n	80a56a4 <_strtoul_r+0x34>
 80a569c:	1cb5      	adds	r5, r6, #2
 80a569e:	7874      	ldrb	r4, [r6, #1]
 80a56a0:	2701      	movs	r7, #1
 80a56a2:	e003      	b.n	80a56ac <_strtoul_r+0x3c>
 80a56a4:	2c2b      	cmp	r4, #43	; 0x2b
 80a56a6:	bf04      	itt	eq
 80a56a8:	7874      	ldrbeq	r4, [r6, #1]
 80a56aa:	1cb5      	addeq	r5, r6, #2
 80a56ac:	b113      	cbz	r3, 80a56b4 <_strtoul_r+0x44>
 80a56ae:	2b10      	cmp	r3, #16
 80a56b0:	d10a      	bne.n	80a56c8 <_strtoul_r+0x58>
 80a56b2:	e053      	b.n	80a575c <_strtoul_r+0xec>
 80a56b4:	2c30      	cmp	r4, #48	; 0x30
 80a56b6:	d14f      	bne.n	80a5758 <_strtoul_r+0xe8>
 80a56b8:	7828      	ldrb	r0, [r5, #0]
 80a56ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a56be:	2858      	cmp	r0, #88	; 0x58
 80a56c0:	d145      	bne.n	80a574e <_strtoul_r+0xde>
 80a56c2:	786c      	ldrb	r4, [r5, #1]
 80a56c4:	2310      	movs	r3, #16
 80a56c6:	3502      	adds	r5, #2
 80a56c8:	f04f 3cff 	mov.w	ip, #4294967295
 80a56cc:	fbbc fcf3 	udiv	ip, ip, r3
 80a56d0:	fb03 fa0c 	mul.w	sl, r3, ip
 80a56d4:	2600      	movs	r6, #0
 80a56d6:	ea6f 0a0a 	mvn.w	sl, sl
 80a56da:	4630      	mov	r0, r6
 80a56dc:	eb09 0e04 	add.w	lr, r9, r4
 80a56e0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a56e4:	f01e 0f04 	tst.w	lr, #4
 80a56e8:	d001      	beq.n	80a56ee <_strtoul_r+0x7e>
 80a56ea:	3c30      	subs	r4, #48	; 0x30
 80a56ec:	e00b      	b.n	80a5706 <_strtoul_r+0x96>
 80a56ee:	f01e 0e03 	ands.w	lr, lr, #3
 80a56f2:	d01a      	beq.n	80a572a <_strtoul_r+0xba>
 80a56f4:	f1be 0f01 	cmp.w	lr, #1
 80a56f8:	bf0c      	ite	eq
 80a56fa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a56fe:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5702:	ebce 0404 	rsb	r4, lr, r4
 80a5706:	42a3      	cmp	r3, r4
 80a5708:	dd0f      	ble.n	80a572a <_strtoul_r+0xba>
 80a570a:	2e00      	cmp	r6, #0
 80a570c:	db08      	blt.n	80a5720 <_strtoul_r+0xb0>
 80a570e:	4560      	cmp	r0, ip
 80a5710:	d806      	bhi.n	80a5720 <_strtoul_r+0xb0>
 80a5712:	d101      	bne.n	80a5718 <_strtoul_r+0xa8>
 80a5714:	4554      	cmp	r4, sl
 80a5716:	dc03      	bgt.n	80a5720 <_strtoul_r+0xb0>
 80a5718:	fb03 4000 	mla	r0, r3, r0, r4
 80a571c:	2601      	movs	r6, #1
 80a571e:	e001      	b.n	80a5724 <_strtoul_r+0xb4>
 80a5720:	f04f 36ff 	mov.w	r6, #4294967295
 80a5724:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5728:	e7d8      	b.n	80a56dc <_strtoul_r+0x6c>
 80a572a:	2e00      	cmp	r6, #0
 80a572c:	da07      	bge.n	80a573e <_strtoul_r+0xce>
 80a572e:	2322      	movs	r3, #34	; 0x22
 80a5730:	f8c8 3000 	str.w	r3, [r8]
 80a5734:	f04f 30ff 	mov.w	r0, #4294967295
 80a5738:	b92a      	cbnz	r2, 80a5746 <_strtoul_r+0xd6>
 80a573a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a573e:	b107      	cbz	r7, 80a5742 <_strtoul_r+0xd2>
 80a5740:	4240      	negs	r0, r0
 80a5742:	b172      	cbz	r2, 80a5762 <_strtoul_r+0xf2>
 80a5744:	b106      	cbz	r6, 80a5748 <_strtoul_r+0xd8>
 80a5746:	1e69      	subs	r1, r5, #1
 80a5748:	6011      	str	r1, [r2, #0]
 80a574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a574e:	2430      	movs	r4, #48	; 0x30
 80a5750:	2b00      	cmp	r3, #0
 80a5752:	d1b9      	bne.n	80a56c8 <_strtoul_r+0x58>
 80a5754:	2308      	movs	r3, #8
 80a5756:	e7b7      	b.n	80a56c8 <_strtoul_r+0x58>
 80a5758:	230a      	movs	r3, #10
 80a575a:	e7b5      	b.n	80a56c8 <_strtoul_r+0x58>
 80a575c:	2c30      	cmp	r4, #48	; 0x30
 80a575e:	d0ab      	beq.n	80a56b8 <_strtoul_r+0x48>
 80a5760:	e7b2      	b.n	80a56c8 <_strtoul_r+0x58>
 80a5762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5766:	bf00      	nop
 80a5768:	20000014 	.word	0x20000014

080a576c <strtoul>:
 80a576c:	4613      	mov	r3, r2
 80a576e:	460a      	mov	r2, r1
 80a5770:	4601      	mov	r1, r0
 80a5772:	4802      	ldr	r0, [pc, #8]	; (80a577c <strtoul+0x10>)
 80a5774:	6800      	ldr	r0, [r0, #0]
 80a5776:	f7ff bf7b 	b.w	80a5670 <_strtoul_r>
 80a577a:	bf00      	nop
 80a577c:	20000078 	.word	0x20000078

080a5780 <__tzcalc_limits>:
 80a5780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5784:	4604      	mov	r4, r0
 80a5786:	f000 fa6f 	bl	80a5c68 <__gettzinfo>
 80a578a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a578e:	429c      	cmp	r4, r3
 80a5790:	f340 8096 	ble.w	80a58c0 <__tzcalc_limits+0x140>
 80a5794:	f240 156d 	movw	r5, #365	; 0x16d
 80a5798:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a579c:	18e3      	adds	r3, r4, r3
 80a579e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a57a2:	109b      	asrs	r3, r3, #2
 80a57a4:	fb05 3502 	mla	r5, r5, r2, r3
 80a57a8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a57ac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a57b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80a57b4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a57b8:	442b      	add	r3, r5
 80a57ba:	18a5      	adds	r5, r4, r2
 80a57bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a57c0:	fb94 f7f2 	sdiv	r7, r4, r2
 80a57c4:	fb95 f5f2 	sdiv	r5, r5, r2
 80a57c8:	fb02 4717 	mls	r7, r2, r7, r4
 80a57cc:	441d      	add	r5, r3
 80a57ce:	2364      	movs	r3, #100	; 0x64
 80a57d0:	fb94 f6f3 	sdiv	r6, r4, r3
 80a57d4:	fab7 fe87 	clz	lr, r7
 80a57d8:	4601      	mov	r1, r0
 80a57da:	fb03 4616 	mls	r6, r3, r6, r4
 80a57de:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a57e2:	9301      	str	r3, [sp, #4]
 80a57e4:	f004 0303 	and.w	r3, r4, #3
 80a57e8:	6044      	str	r4, [r0, #4]
 80a57ea:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a57ee:	9300      	str	r3, [sp, #0]
 80a57f0:	f04f 0c07 	mov.w	ip, #7
 80a57f4:	7a0b      	ldrb	r3, [r1, #8]
 80a57f6:	2b4a      	cmp	r3, #74	; 0x4a
 80a57f8:	d10e      	bne.n	80a5818 <__tzcalc_limits+0x98>
 80a57fa:	694b      	ldr	r3, [r1, #20]
 80a57fc:	9a00      	ldr	r2, [sp, #0]
 80a57fe:	18ec      	adds	r4, r5, r3
 80a5800:	b902      	cbnz	r2, 80a5804 <__tzcalc_limits+0x84>
 80a5802:	b906      	cbnz	r6, 80a5806 <__tzcalc_limits+0x86>
 80a5804:	b927      	cbnz	r7, 80a5810 <__tzcalc_limits+0x90>
 80a5806:	2b3b      	cmp	r3, #59	; 0x3b
 80a5808:	bfd4      	ite	le
 80a580a:	2300      	movle	r3, #0
 80a580c:	2301      	movgt	r3, #1
 80a580e:	e000      	b.n	80a5812 <__tzcalc_limits+0x92>
 80a5810:	2300      	movs	r3, #0
 80a5812:	4423      	add	r3, r4
 80a5814:	3b01      	subs	r3, #1
 80a5816:	e03f      	b.n	80a5898 <__tzcalc_limits+0x118>
 80a5818:	2b44      	cmp	r3, #68	; 0x44
 80a581a:	d102      	bne.n	80a5822 <__tzcalc_limits+0xa2>
 80a581c:	694b      	ldr	r3, [r1, #20]
 80a581e:	442b      	add	r3, r5
 80a5820:	e03a      	b.n	80a5898 <__tzcalc_limits+0x118>
 80a5822:	9b00      	ldr	r3, [sp, #0]
 80a5824:	b92b      	cbnz	r3, 80a5832 <__tzcalc_limits+0xb2>
 80a5826:	2e00      	cmp	r6, #0
 80a5828:	bf0c      	ite	eq
 80a582a:	46f0      	moveq	r8, lr
 80a582c:	f04f 0801 	movne.w	r8, #1
 80a5830:	e000      	b.n	80a5834 <__tzcalc_limits+0xb4>
 80a5832:	46f0      	mov	r8, lr
 80a5834:	46a9      	mov	r9, r5
 80a5836:	4b24      	ldr	r3, [pc, #144]	; (80a58c8 <__tzcalc_limits+0x148>)
 80a5838:	2230      	movs	r2, #48	; 0x30
 80a583a:	fb02 3808 	mla	r8, r2, r8, r3
 80a583e:	68cc      	ldr	r4, [r1, #12]
 80a5840:	f1a8 0a04 	sub.w	sl, r8, #4
 80a5844:	2301      	movs	r3, #1
 80a5846:	42a3      	cmp	r3, r4
 80a5848:	da04      	bge.n	80a5854 <__tzcalc_limits+0xd4>
 80a584a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a584e:	3301      	adds	r3, #1
 80a5850:	44d9      	add	r9, fp
 80a5852:	e7f8      	b.n	80a5846 <__tzcalc_limits+0xc6>
 80a5854:	f109 0304 	add.w	r3, r9, #4
 80a5858:	fb93 fbfc 	sdiv	fp, r3, ip
 80a585c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5860:	ebca 0a03 	rsb	sl, sl, r3
 80a5864:	694b      	ldr	r3, [r1, #20]
 80a5866:	2c01      	cmp	r4, #1
 80a5868:	bfb8      	it	lt
 80a586a:	2401      	movlt	r4, #1
 80a586c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5870:	690b      	ldr	r3, [r1, #16]
 80a5872:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a5876:	f103 33ff 	add.w	r3, r3, #4294967295
 80a587a:	f104 34ff 	add.w	r4, r4, #4294967295
 80a587e:	bf48      	it	mi
 80a5880:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5884:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5888:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a588c:	4453      	add	r3, sl
 80a588e:	42a3      	cmp	r3, r4
 80a5890:	db01      	blt.n	80a5896 <__tzcalc_limits+0x116>
 80a5892:	3b07      	subs	r3, #7
 80a5894:	e7fb      	b.n	80a588e <__tzcalc_limits+0x10e>
 80a5896:	444b      	add	r3, r9
 80a5898:	698c      	ldr	r4, [r1, #24]
 80a589a:	4a0c      	ldr	r2, [pc, #48]	; (80a58cc <__tzcalc_limits+0x14c>)
 80a589c:	fb02 4303 	mla	r3, r2, r3, r4
 80a58a0:	6a0c      	ldr	r4, [r1, #32]
 80a58a2:	4423      	add	r3, r4
 80a58a4:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a58a8:	9b01      	ldr	r3, [sp, #4]
 80a58aa:	4299      	cmp	r1, r3
 80a58ac:	d1a2      	bne.n	80a57f4 <__tzcalc_limits+0x74>
 80a58ae:	69c3      	ldr	r3, [r0, #28]
 80a58b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a58b2:	4293      	cmp	r3, r2
 80a58b4:	bfac      	ite	ge
 80a58b6:	2300      	movge	r3, #0
 80a58b8:	2301      	movlt	r3, #1
 80a58ba:	6003      	str	r3, [r0, #0]
 80a58bc:	2001      	movs	r0, #1
 80a58be:	e000      	b.n	80a58c2 <__tzcalc_limits+0x142>
 80a58c0:	2000      	movs	r0, #0
 80a58c2:	b003      	add	sp, #12
 80a58c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a58c8:	080a65bc 	.word	0x080a65bc
 80a58cc:	00015180 	.word	0x00015180

080a58d0 <__tz_lock>:
 80a58d0:	4770      	bx	lr

080a58d2 <__tz_unlock>:
 80a58d2:	4770      	bx	lr

080a58d4 <_tzset_unlocked>:
 80a58d4:	4b01      	ldr	r3, [pc, #4]	; (80a58dc <_tzset_unlocked+0x8>)
 80a58d6:	6818      	ldr	r0, [r3, #0]
 80a58d8:	f000 b802 	b.w	80a58e0 <_tzset_unlocked_r>
 80a58dc:	20000078 	.word	0x20000078

080a58e0 <_tzset_unlocked_r>:
 80a58e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a58e4:	b08d      	sub	sp, #52	; 0x34
 80a58e6:	4607      	mov	r7, r0
 80a58e8:	f000 f9be 	bl	80a5c68 <__gettzinfo>
 80a58ec:	49b0      	ldr	r1, [pc, #704]	; (80a5bb0 <_tzset_unlocked_r+0x2d0>)
 80a58ee:	4604      	mov	r4, r0
 80a58f0:	4638      	mov	r0, r7
 80a58f2:	f000 f9b1 	bl	80a5c58 <_getenv_r>
 80a58f6:	4eaf      	ldr	r6, [pc, #700]	; (80a5bb4 <_tzset_unlocked_r+0x2d4>)
 80a58f8:	4605      	mov	r5, r0
 80a58fa:	b960      	cbnz	r0, 80a5916 <_tzset_unlocked_r+0x36>
 80a58fc:	4bae      	ldr	r3, [pc, #696]	; (80a5bb8 <_tzset_unlocked_r+0x2d8>)
 80a58fe:	4aaf      	ldr	r2, [pc, #700]	; (80a5bbc <_tzset_unlocked_r+0x2dc>)
 80a5900:	6018      	str	r0, [r3, #0]
 80a5902:	4baf      	ldr	r3, [pc, #700]	; (80a5bc0 <_tzset_unlocked_r+0x2e0>)
 80a5904:	6018      	str	r0, [r3, #0]
 80a5906:	4baf      	ldr	r3, [pc, #700]	; (80a5bc4 <_tzset_unlocked_r+0x2e4>)
 80a5908:	6830      	ldr	r0, [r6, #0]
 80a590a:	601a      	str	r2, [r3, #0]
 80a590c:	605a      	str	r2, [r3, #4]
 80a590e:	f7fb fc6d 	bl	80a11ec <free>
 80a5912:	6035      	str	r5, [r6, #0]
 80a5914:	e148      	b.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5916:	6831      	ldr	r1, [r6, #0]
 80a5918:	b979      	cbnz	r1, 80a593a <_tzset_unlocked_r+0x5a>
 80a591a:	6830      	ldr	r0, [r6, #0]
 80a591c:	f7fb fc66 	bl	80a11ec <free>
 80a5920:	4628      	mov	r0, r5
 80a5922:	f7ff fde4 	bl	80a54ee <strlen>
 80a5926:	1c41      	adds	r1, r0, #1
 80a5928:	4638      	mov	r0, r7
 80a592a:	f7fb fc87 	bl	80a123c <_malloc_r>
 80a592e:	6030      	str	r0, [r6, #0]
 80a5930:	b148      	cbz	r0, 80a5946 <_tzset_unlocked_r+0x66>
 80a5932:	4629      	mov	r1, r5
 80a5934:	f7ff fdb8 	bl	80a54a8 <strcpy>
 80a5938:	e005      	b.n	80a5946 <_tzset_unlocked_r+0x66>
 80a593a:	f7ff fdab 	bl	80a5494 <strcmp>
 80a593e:	2800      	cmp	r0, #0
 80a5940:	f000 8132 	beq.w	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5944:	e7e9      	b.n	80a591a <_tzset_unlocked_r+0x3a>
 80a5946:	782b      	ldrb	r3, [r5, #0]
 80a5948:	ae0a      	add	r6, sp, #40	; 0x28
 80a594a:	2b3a      	cmp	r3, #58	; 0x3a
 80a594c:	bf08      	it	eq
 80a594e:	3501      	addeq	r5, #1
 80a5950:	4633      	mov	r3, r6
 80a5952:	4a9d      	ldr	r2, [pc, #628]	; (80a5bc8 <_tzset_unlocked_r+0x2e8>)
 80a5954:	499d      	ldr	r1, [pc, #628]	; (80a5bcc <_tzset_unlocked_r+0x2ec>)
 80a5956:	4628      	mov	r0, r5
 80a5958:	f7fb fc58 	bl	80a120c <siscanf>
 80a595c:	2800      	cmp	r0, #0
 80a595e:	f340 8123 	ble.w	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5964:	18ef      	adds	r7, r5, r3
 80a5966:	5ceb      	ldrb	r3, [r5, r3]
 80a5968:	2b2d      	cmp	r3, #45	; 0x2d
 80a596a:	d103      	bne.n	80a5974 <_tzset_unlocked_r+0x94>
 80a596c:	3701      	adds	r7, #1
 80a596e:	f04f 35ff 	mov.w	r5, #4294967295
 80a5972:	e003      	b.n	80a597c <_tzset_unlocked_r+0x9c>
 80a5974:	2b2b      	cmp	r3, #43	; 0x2b
 80a5976:	bf08      	it	eq
 80a5978:	3701      	addeq	r7, #1
 80a597a:	2501      	movs	r5, #1
 80a597c:	f10d 0a20 	add.w	sl, sp, #32
 80a5980:	f10d 0b1e 	add.w	fp, sp, #30
 80a5984:	f04f 0800 	mov.w	r8, #0
 80a5988:	9603      	str	r6, [sp, #12]
 80a598a:	f8cd a008 	str.w	sl, [sp, #8]
 80a598e:	9601      	str	r6, [sp, #4]
 80a5990:	f8cd b000 	str.w	fp, [sp]
 80a5994:	4633      	mov	r3, r6
 80a5996:	aa07      	add	r2, sp, #28
 80a5998:	498d      	ldr	r1, [pc, #564]	; (80a5bd0 <_tzset_unlocked_r+0x2f0>)
 80a599a:	4638      	mov	r0, r7
 80a599c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a59a0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a59a4:	f7fb fc32 	bl	80a120c <siscanf>
 80a59a8:	4540      	cmp	r0, r8
 80a59aa:	f340 80fd 	ble.w	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a59ae:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a59b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a59b6:	213c      	movs	r1, #60	; 0x3c
 80a59b8:	fb01 3302 	mla	r3, r1, r2, r3
 80a59bc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a59c0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a59c4:	fb01 3302 	mla	r3, r1, r2, r3
 80a59c8:	435d      	muls	r5, r3
 80a59ca:	4b7f      	ldr	r3, [pc, #508]	; (80a5bc8 <_tzset_unlocked_r+0x2e8>)
 80a59cc:	6225      	str	r5, [r4, #32]
 80a59ce:	4d7d      	ldr	r5, [pc, #500]	; (80a5bc4 <_tzset_unlocked_r+0x2e4>)
 80a59d0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5bdc <_tzset_unlocked_r+0x2fc>
 80a59d4:	602b      	str	r3, [r5, #0]
 80a59d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a59d8:	464a      	mov	r2, r9
 80a59da:	441f      	add	r7, r3
 80a59dc:	497b      	ldr	r1, [pc, #492]	; (80a5bcc <_tzset_unlocked_r+0x2ec>)
 80a59de:	4633      	mov	r3, r6
 80a59e0:	4638      	mov	r0, r7
 80a59e2:	f7fb fc13 	bl	80a120c <siscanf>
 80a59e6:	4540      	cmp	r0, r8
 80a59e8:	dc08      	bgt.n	80a59fc <_tzset_unlocked_r+0x11c>
 80a59ea:	682b      	ldr	r3, [r5, #0]
 80a59ec:	6a22      	ldr	r2, [r4, #32]
 80a59ee:	606b      	str	r3, [r5, #4]
 80a59f0:	4b71      	ldr	r3, [pc, #452]	; (80a5bb8 <_tzset_unlocked_r+0x2d8>)
 80a59f2:	601a      	str	r2, [r3, #0]
 80a59f4:	4b72      	ldr	r3, [pc, #456]	; (80a5bc0 <_tzset_unlocked_r+0x2e0>)
 80a59f6:	f8c3 8000 	str.w	r8, [r3]
 80a59fa:	e0d5      	b.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a59fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a59fe:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5a02:	18fd      	adds	r5, r7, r3
 80a5a04:	5cfb      	ldrb	r3, [r7, r3]
 80a5a06:	2b2d      	cmp	r3, #45	; 0x2d
 80a5a08:	d103      	bne.n	80a5a12 <_tzset_unlocked_r+0x132>
 80a5a0a:	3501      	adds	r5, #1
 80a5a0c:	f04f 37ff 	mov.w	r7, #4294967295
 80a5a10:	e003      	b.n	80a5a1a <_tzset_unlocked_r+0x13a>
 80a5a12:	2b2b      	cmp	r3, #43	; 0x2b
 80a5a14:	bf08      	it	eq
 80a5a16:	3501      	addeq	r5, #1
 80a5a18:	2701      	movs	r7, #1
 80a5a1a:	2300      	movs	r3, #0
 80a5a1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5a20:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5a24:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5a28:	930a      	str	r3, [sp, #40]	; 0x28
 80a5a2a:	9603      	str	r6, [sp, #12]
 80a5a2c:	f8cd a008 	str.w	sl, [sp, #8]
 80a5a30:	9601      	str	r6, [sp, #4]
 80a5a32:	f8cd b000 	str.w	fp, [sp]
 80a5a36:	4633      	mov	r3, r6
 80a5a38:	aa07      	add	r2, sp, #28
 80a5a3a:	4965      	ldr	r1, [pc, #404]	; (80a5bd0 <_tzset_unlocked_r+0x2f0>)
 80a5a3c:	4628      	mov	r0, r5
 80a5a3e:	f7fb fbe5 	bl	80a120c <siscanf>
 80a5a42:	2800      	cmp	r0, #0
 80a5a44:	dc04      	bgt.n	80a5a50 <_tzset_unlocked_r+0x170>
 80a5a46:	6a23      	ldr	r3, [r4, #32]
 80a5a48:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5a4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5a4e:	e00e      	b.n	80a5a6e <_tzset_unlocked_r+0x18e>
 80a5a50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5a54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5a58:	213c      	movs	r1, #60	; 0x3c
 80a5a5a:	fb01 3302 	mla	r3, r1, r2, r3
 80a5a5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5a62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5a66:	fb01 3302 	mla	r3, r1, r2, r3
 80a5a6a:	435f      	muls	r7, r3
 80a5a6c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5a6e:	4627      	mov	r7, r4
 80a5a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5a72:	f04f 0900 	mov.w	r9, #0
 80a5a76:	441d      	add	r5, r3
 80a5a78:	782b      	ldrb	r3, [r5, #0]
 80a5a7a:	2b2c      	cmp	r3, #44	; 0x2c
 80a5a7c:	bf08      	it	eq
 80a5a7e:	3501      	addeq	r5, #1
 80a5a80:	f895 8000 	ldrb.w	r8, [r5]
 80a5a84:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5a88:	d126      	bne.n	80a5ad8 <_tzset_unlocked_r+0x1f8>
 80a5a8a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5a8e:	9302      	str	r3, [sp, #8]
 80a5a90:	ab09      	add	r3, sp, #36	; 0x24
 80a5a92:	9300      	str	r3, [sp, #0]
 80a5a94:	9603      	str	r6, [sp, #12]
 80a5a96:	9601      	str	r6, [sp, #4]
 80a5a98:	4633      	mov	r3, r6
 80a5a9a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5a9e:	494d      	ldr	r1, [pc, #308]	; (80a5bd4 <_tzset_unlocked_r+0x2f4>)
 80a5aa0:	4628      	mov	r0, r5
 80a5aa2:	f7fb fbb3 	bl	80a120c <siscanf>
 80a5aa6:	2803      	cmp	r0, #3
 80a5aa8:	d17e      	bne.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5aaa:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5aae:	1e4b      	subs	r3, r1, #1
 80a5ab0:	2b0b      	cmp	r3, #11
 80a5ab2:	d879      	bhi.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5ab4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5ab8:	1e53      	subs	r3, r2, #1
 80a5aba:	2b04      	cmp	r3, #4
 80a5abc:	d874      	bhi.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5abe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5ac2:	2b06      	cmp	r3, #6
 80a5ac4:	d870      	bhi.n	80a5ba8 <_tzset_unlocked_r+0x2c8>
 80a5ac6:	f887 8008 	strb.w	r8, [r7, #8]
 80a5aca:	60f9      	str	r1, [r7, #12]
 80a5acc:	613a      	str	r2, [r7, #16]
 80a5ace:	617b      	str	r3, [r7, #20]
 80a5ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5ad2:	eb05 0803 	add.w	r8, r5, r3
 80a5ad6:	e02a      	b.n	80a5b2e <_tzset_unlocked_r+0x24e>
 80a5ad8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5adc:	bf06      	itte	eq
 80a5ade:	4643      	moveq	r3, r8
 80a5ae0:	3501      	addeq	r5, #1
 80a5ae2:	2344      	movne	r3, #68	; 0x44
 80a5ae4:	220a      	movs	r2, #10
 80a5ae6:	a90b      	add	r1, sp, #44	; 0x2c
 80a5ae8:	4628      	mov	r0, r5
 80a5aea:	9305      	str	r3, [sp, #20]
 80a5aec:	f7ff fe3e 	bl	80a576c <strtoul>
 80a5af0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5af4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5af8:	4545      	cmp	r5, r8
 80a5afa:	9b05      	ldr	r3, [sp, #20]
 80a5afc:	d114      	bne.n	80a5b28 <_tzset_unlocked_r+0x248>
 80a5afe:	234d      	movs	r3, #77	; 0x4d
 80a5b00:	f1b9 0f00 	cmp.w	r9, #0
 80a5b04:	d107      	bne.n	80a5b16 <_tzset_unlocked_r+0x236>
 80a5b06:	7223      	strb	r3, [r4, #8]
 80a5b08:	2303      	movs	r3, #3
 80a5b0a:	60e3      	str	r3, [r4, #12]
 80a5b0c:	2302      	movs	r3, #2
 80a5b0e:	6123      	str	r3, [r4, #16]
 80a5b10:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5b14:	e00b      	b.n	80a5b2e <_tzset_unlocked_r+0x24e>
 80a5b16:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5b1a:	230b      	movs	r3, #11
 80a5b1c:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5b1e:	2301      	movs	r3, #1
 80a5b20:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5b22:	2300      	movs	r3, #0
 80a5b24:	6323      	str	r3, [r4, #48]	; 0x30
 80a5b26:	e002      	b.n	80a5b2e <_tzset_unlocked_r+0x24e>
 80a5b28:	b280      	uxth	r0, r0
 80a5b2a:	723b      	strb	r3, [r7, #8]
 80a5b2c:	6178      	str	r0, [r7, #20]
 80a5b2e:	2302      	movs	r3, #2
 80a5b30:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5b34:	2300      	movs	r3, #0
 80a5b36:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5b3a:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5b3e:	930a      	str	r3, [sp, #40]	; 0x28
 80a5b40:	f898 3000 	ldrb.w	r3, [r8]
 80a5b44:	2b2f      	cmp	r3, #47	; 0x2f
 80a5b46:	d10b      	bne.n	80a5b60 <_tzset_unlocked_r+0x280>
 80a5b48:	9603      	str	r6, [sp, #12]
 80a5b4a:	f8cd a008 	str.w	sl, [sp, #8]
 80a5b4e:	9601      	str	r6, [sp, #4]
 80a5b50:	f8cd b000 	str.w	fp, [sp]
 80a5b54:	4633      	mov	r3, r6
 80a5b56:	aa07      	add	r2, sp, #28
 80a5b58:	491f      	ldr	r1, [pc, #124]	; (80a5bd8 <_tzset_unlocked_r+0x2f8>)
 80a5b5a:	4640      	mov	r0, r8
 80a5b5c:	f7fb fb56 	bl	80a120c <siscanf>
 80a5b60:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5b64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5b68:	213c      	movs	r1, #60	; 0x3c
 80a5b6a:	fb01 3302 	mla	r3, r1, r2, r3
 80a5b6e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5b72:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5b76:	fb01 3302 	mla	r3, r1, r2, r3
 80a5b7a:	61bb      	str	r3, [r7, #24]
 80a5b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5b7e:	f109 0901 	add.w	r9, r9, #1
 80a5b82:	f1b9 0f02 	cmp.w	r9, #2
 80a5b86:	4445      	add	r5, r8
 80a5b88:	f107 071c 	add.w	r7, r7, #28
 80a5b8c:	f47f af74 	bne.w	80a5a78 <_tzset_unlocked_r+0x198>
 80a5b90:	6860      	ldr	r0, [r4, #4]
 80a5b92:	f7ff fdf5 	bl	80a5780 <__tzcalc_limits>
 80a5b96:	6a22      	ldr	r2, [r4, #32]
 80a5b98:	4b07      	ldr	r3, [pc, #28]	; (80a5bb8 <_tzset_unlocked_r+0x2d8>)
 80a5b9a:	601a      	str	r2, [r3, #0]
 80a5b9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5b9e:	1a9b      	subs	r3, r3, r2
 80a5ba0:	4a07      	ldr	r2, [pc, #28]	; (80a5bc0 <_tzset_unlocked_r+0x2e0>)
 80a5ba2:	bf18      	it	ne
 80a5ba4:	2301      	movne	r3, #1
 80a5ba6:	6013      	str	r3, [r2, #0]
 80a5ba8:	b00d      	add	sp, #52	; 0x34
 80a5baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5bae:	bf00      	nop
 80a5bb0:	080a661c 	.word	0x080a661c
 80a5bb4:	2000049c 	.word	0x2000049c
 80a5bb8:	200004a4 	.word	0x200004a4
 80a5bbc:	080a661f 	.word	0x080a661f
 80a5bc0:	200004a0 	.word	0x200004a0
 80a5bc4:	2000007c 	.word	0x2000007c
 80a5bc8:	2000048f 	.word	0x2000048f
 80a5bcc:	080a6623 	.word	0x080a6623
 80a5bd0:	080a6646 	.word	0x080a6646
 80a5bd4:	080a6632 	.word	0x080a6632
 80a5bd8:	080a6645 	.word	0x080a6645
 80a5bdc:	20000484 	.word	0x20000484

080a5be0 <_findenv_r>:
 80a5be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5be4:	4607      	mov	r7, r0
 80a5be6:	468b      	mov	fp, r1
 80a5be8:	4690      	mov	r8, r2
 80a5bea:	f000 f8d7 	bl	80a5d9c <__env_lock>
 80a5bee:	4b19      	ldr	r3, [pc, #100]	; (80a5c54 <_findenv_r+0x74>)
 80a5bf0:	681d      	ldr	r5, [r3, #0]
 80a5bf2:	469a      	mov	sl, r3
 80a5bf4:	b13d      	cbz	r5, 80a5c06 <_findenv_r+0x26>
 80a5bf6:	465c      	mov	r4, fp
 80a5bf8:	4623      	mov	r3, r4
 80a5bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5bfe:	b142      	cbz	r2, 80a5c12 <_findenv_r+0x32>
 80a5c00:	2a3d      	cmp	r2, #61	; 0x3d
 80a5c02:	461c      	mov	r4, r3
 80a5c04:	d1f8      	bne.n	80a5bf8 <_findenv_r+0x18>
 80a5c06:	4638      	mov	r0, r7
 80a5c08:	f000 f8c9 	bl	80a5d9e <__env_unlock>
 80a5c0c:	2000      	movs	r0, #0
 80a5c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c12:	ebcb 0404 	rsb	r4, fp, r4
 80a5c16:	46a9      	mov	r9, r5
 80a5c18:	f859 0b04 	ldr.w	r0, [r9], #4
 80a5c1c:	2800      	cmp	r0, #0
 80a5c1e:	d0f2      	beq.n	80a5c06 <_findenv_r+0x26>
 80a5c20:	4622      	mov	r2, r4
 80a5c22:	4659      	mov	r1, fp
 80a5c24:	f7ff fc6b 	bl	80a54fe <strncmp>
 80a5c28:	b988      	cbnz	r0, 80a5c4e <_findenv_r+0x6e>
 80a5c2a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a5c2e:	191e      	adds	r6, r3, r4
 80a5c30:	5d1b      	ldrb	r3, [r3, r4]
 80a5c32:	2b3d      	cmp	r3, #61	; 0x3d
 80a5c34:	d10b      	bne.n	80a5c4e <_findenv_r+0x6e>
 80a5c36:	f8da 3000 	ldr.w	r3, [sl]
 80a5c3a:	4638      	mov	r0, r7
 80a5c3c:	1aed      	subs	r5, r5, r3
 80a5c3e:	10ad      	asrs	r5, r5, #2
 80a5c40:	f8c8 5000 	str.w	r5, [r8]
 80a5c44:	f000 f8ab 	bl	80a5d9e <__env_unlock>
 80a5c48:	1c70      	adds	r0, r6, #1
 80a5c4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c4e:	464d      	mov	r5, r9
 80a5c50:	e7e1      	b.n	80a5c16 <_findenv_r+0x36>
 80a5c52:	bf00      	nop
 80a5c54:	200000c4 	.word	0x200000c4

080a5c58 <_getenv_r>:
 80a5c58:	b507      	push	{r0, r1, r2, lr}
 80a5c5a:	aa01      	add	r2, sp, #4
 80a5c5c:	f7ff ffc0 	bl	80a5be0 <_findenv_r>
 80a5c60:	b003      	add	sp, #12
 80a5c62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5c68 <__gettzinfo>:
 80a5c68:	4800      	ldr	r0, [pc, #0]	; (80a5c6c <__gettzinfo+0x4>)
 80a5c6a:	4770      	bx	lr
 80a5c6c:	20000084 	.word	0x20000084

080a5c70 <gmtime_r>:
 80a5c70:	6802      	ldr	r2, [r0, #0]
 80a5c72:	4b46      	ldr	r3, [pc, #280]	; (80a5d8c <gmtime_r+0x11c>)
 80a5c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5c76:	fb92 f4f3 	sdiv	r4, r2, r3
 80a5c7a:	fb03 2214 	mls	r2, r3, r4, r2
 80a5c7e:	2a00      	cmp	r2, #0
 80a5c80:	bfbc      	itt	lt
 80a5c82:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a5c86:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a5c8a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a5c8e:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5c92:	fb00 2213 	mls	r2, r0, r3, r2
 80a5c96:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a5c9a:	608b      	str	r3, [r1, #8]
 80a5c9c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5ca0:	fb00 2213 	mls	r2, r0, r3, r2
 80a5ca4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a5ca8:	bfac      	ite	ge
 80a5caa:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a5cae:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a5cb2:	604b      	str	r3, [r1, #4]
 80a5cb4:	600a      	str	r2, [r1, #0]
 80a5cb6:	2307      	movs	r3, #7
 80a5cb8:	1ce2      	adds	r2, r4, #3
 80a5cba:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5cbe:	4d34      	ldr	r5, [pc, #208]	; (80a5d90 <gmtime_r+0x120>)
 80a5cc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5cc4:	fb94 f5f5 	sdiv	r5, r4, r5
 80a5cc8:	1ad3      	subs	r3, r2, r3
 80a5cca:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a5cce:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a5cd2:	618b      	str	r3, [r1, #24]
 80a5cd4:	4b2f      	ldr	r3, [pc, #188]	; (80a5d94 <gmtime_r+0x124>)
 80a5cd6:	4830      	ldr	r0, [pc, #192]	; (80a5d98 <gmtime_r+0x128>)
 80a5cd8:	fb03 4405 	mla	r4, r3, r5, r4
 80a5cdc:	fbb4 f2f2 	udiv	r2, r4, r2
 80a5ce0:	fbb4 f3f7 	udiv	r3, r4, r7
 80a5ce4:	fbb4 f0f0 	udiv	r0, r4, r0
 80a5ce8:	4422      	add	r2, r4
 80a5cea:	1ad2      	subs	r2, r2, r3
 80a5cec:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a5cf0:	1a13      	subs	r3, r2, r0
 80a5cf2:	f240 126d 	movw	r2, #365	; 0x16d
 80a5cf6:	fbb3 f6f6 	udiv	r6, r3, r6
 80a5cfa:	fbb3 f0f2 	udiv	r0, r3, r2
 80a5cfe:	fbb3 f3f7 	udiv	r3, r3, r7
 80a5d02:	4434      	add	r4, r6
 80a5d04:	1ae3      	subs	r3, r4, r3
 80a5d06:	fb02 3310 	mls	r3, r2, r0, r3
 80a5d0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a5d0e:	2499      	movs	r4, #153	; 0x99
 80a5d10:	3202      	adds	r2, #2
 80a5d12:	fbb2 f2f4 	udiv	r2, r2, r4
 80a5d16:	4354      	muls	r4, r2
 80a5d18:	1ca6      	adds	r6, r4, #2
 80a5d1a:	2405      	movs	r4, #5
 80a5d1c:	fbb6 f4f4 	udiv	r4, r6, r4
 80a5d20:	2a0a      	cmp	r2, #10
 80a5d22:	bf34      	ite	cc
 80a5d24:	2602      	movcc	r6, #2
 80a5d26:	f06f 0609 	mvncs.w	r6, #9
 80a5d2a:	4416      	add	r6, r2
 80a5d2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5d30:	fb02 0505 	mla	r5, r2, r5, r0
 80a5d34:	1c5f      	adds	r7, r3, #1
 80a5d36:	2e01      	cmp	r6, #1
 80a5d38:	bf98      	it	ls
 80a5d3a:	3501      	addls	r5, #1
 80a5d3c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a5d40:	eba7 0704 	sub.w	r7, r7, r4
 80a5d44:	d302      	bcc.n	80a5d4c <gmtime_r+0xdc>
 80a5d46:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a5d4a:	e014      	b.n	80a5d76 <gmtime_r+0x106>
 80a5d4c:	0782      	lsls	r2, r0, #30
 80a5d4e:	d105      	bne.n	80a5d5c <gmtime_r+0xec>
 80a5d50:	2464      	movs	r4, #100	; 0x64
 80a5d52:	fbb0 f2f4 	udiv	r2, r0, r4
 80a5d56:	fb04 0212 	mls	r2, r4, r2, r0
 80a5d5a:	b94a      	cbnz	r2, 80a5d70 <gmtime_r+0x100>
 80a5d5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5d60:	fbb0 f4f2 	udiv	r4, r0, r2
 80a5d64:	fb02 0014 	mls	r0, r2, r4, r0
 80a5d68:	fab0 f280 	clz	r2, r0
 80a5d6c:	0952      	lsrs	r2, r2, #5
 80a5d6e:	e000      	b.n	80a5d72 <gmtime_r+0x102>
 80a5d70:	2201      	movs	r2, #1
 80a5d72:	333b      	adds	r3, #59	; 0x3b
 80a5d74:	441a      	add	r2, r3
 80a5d76:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a5d7a:	2300      	movs	r3, #0
 80a5d7c:	61ca      	str	r2, [r1, #28]
 80a5d7e:	614d      	str	r5, [r1, #20]
 80a5d80:	610e      	str	r6, [r1, #16]
 80a5d82:	60cf      	str	r7, [r1, #12]
 80a5d84:	620b      	str	r3, [r1, #32]
 80a5d86:	4608      	mov	r0, r1
 80a5d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5d8a:	bf00      	nop
 80a5d8c:	00015180 	.word	0x00015180
 80a5d90:	00023ab1 	.word	0x00023ab1
 80a5d94:	fffdc54f 	.word	0xfffdc54f
 80a5d98:	00023ab0 	.word	0x00023ab0

080a5d9c <__env_lock>:
 80a5d9c:	4770      	bx	lr

080a5d9e <__env_unlock>:
 80a5d9e:	4770      	bx	lr

080a5da0 <dynalib_user>:
 80a5da0:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a5db0:	0000 0000                                   ....

080a5db4 <_ZTVN5spark10LogHandlerE>:
	...
 80a5dc4:	00a9 080a 00cd 080a                         ........

080a5dcc <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a5dd4:	01cd 080a 0201 080a 2529 080a 00cf 080a     ........)%......
 80a5de4:	7552 6e6e 6e69 2067 6553 7574 2070 6f66     Running Setup fo
 80a5df4:	2072 6f6c 706f 5f00 7b00 0020 4222 2274     r loop._.{ ."Bt"
 80a5e04:	003a 4222 2270 003a 4222 2268 003a 5922     :."Bp":."Bh":."Y
 80a5e14:	2272 003a 4d22 226f 003a 4422 2261 003a     r":."Mo":."Da":.
 80a5e24:	4822 2272 003a 4d22 2269 003a 5322 2263     "Hr":."Mi":."Sc"
 80a5e34:	003a 5a22 226f 003a 5022 2231 203a 0022     :."Zo":."P1": ".
 80a5e44:	2c22 0020 5022 2232 203a 0022 4422 2276     ", ."P2": "."Dv"
 80a5e54:	203a 5022 776f 7265 2231 7d20 4200 7275     : "Power1" }.Bur
 80a5e64:	6c6e 7965 5300 6e65 2074 6f74 7420 6568     nley.Sent to the
 80a5e74:	6320 6f6c 6475 2e2e 202e 4300 7275 6572      cloud... .Curre
 80a5e84:	746e 7920 6165 2072 7369 203a 4300 7275     nt year is: .Cur
 80a5e94:	6572 746e 7320 6365 6e6f 7364 6120 6572     rent seconds are
 80a5ea4:	3a3a 0020 6553 6f63 646e 2073 6f66 2072     :: .Seconds for 
 80a5eb4:	6874 2065 7473 7261 2074 666f 7920 6165     the start of yea
 80a5ec4:	3a72 0020 6544 6963 616d 206c 7268 2073     r: .Decimal hrs 
 80a5ed4:	7261 3a65 0020 6e4f 6f00 6666 6e00 776f     are: .On.off.now
 80a5ee4:	4820 6769 0068 6f6e 2077 6f4c 0077 6f54      High.now Low.To
 80a5ef4:	6174 206c 6f70 6577 2072 7369 0920 4300     tal power is ..C
 80a5f04:	0009 416d 0068 6f50 6577 2072 666f 6420     ..mAh.Power of d
 80a5f14:	7665 6369 2065 7773 7469 6863 6465 002e     evice switched..
 80a5f24:	6f50 6577 2072 7369 0020 6857 6e65 7020     Power is .When p
 80a5f34:	776f 7265 6920 2073 6e6f 0920 5700 6568     ower is on ..Whe
 80a5f44:	206e 6f70 6577 2072 7369 6f20 6666 0009     n power is off..
 80a5f54:	6e55 6e6b 776f 206e 5353 4449 203a 4300     Unknown SSID: .C
 80a5f64:	6e6f 656e 7463 6e69 2067 6957 6946 2e2e     onnecting WiFi..
 80a5f74:	002e 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
 80a5f84:	6c43 756f 2e64 2e2e 5700 6669 2069 7369     Cloud....Wifi is
 80a5f94:	7220 6165 7964 002e 6957 6966 6920 2073      ready..Wifi is 
 80a5fa4:	6f63 6e6e 6365 6974 676e 002e 6957 6966     connecting..Wifi
 80a5fb4:	6920 2073 6572 6461 2e79 6e20 776f 7420      is ready. now t
 80a5fc4:	206f 6f63 6e6e 6365 2074 6f74 7420 6568     o connect to the
 80a5fd4:	6320 6f6c 6475 202e 4300 6e6f 656e 7463      cloud. .Connect
 80a5fe4:	6465 7420 206f 6874 2065 6c63 756f 2e64     ed to the cloud.
 80a5ff4:	2e2e 0020 6c41 206c 6573 7574 2c70 6320     .. .All setup, c
 80a6004:	6e6f 656e 7463 6465 6120 646e 7220 6165     onnected and rea
 80a6014:	7964 7420 206f 6164 636e 2e65 4820 7a61     dy to dance. Haz
 80a6024:	7261 7300 6f68 6c75 2064 6562 6320 6e6f     ar.should be con
 80a6034:	656e 7463 6465 7420 206f 6c63 756f 2e64     nected to cloud.
 80a6044:	2e2e 0020 6957 6946 6320 6e6f 656e 7463     .. .WiFi connect
 80a6054:	6f69 206e 6974 656d 2064 756f 2c74 7720     ion timed out, w
 80a6064:	6c69 206c 7274 2079 6e61 2064 6f63 6e6e     ill try and conn
 80a6074:	6365 2e74 2e2e 5700 2065 7261 2065 7473     ect....We are st
 80a6084:	6c69 206c 6f63 6e6e 6365 6974 676e 7420     ill connecting t
 80a6094:	206f 6874 2065 6c63 756f 2e64 5720 6c69     o the cloud. Wil
 80a60a4:	206c 7274 2079 6f63 6e6e 6365 2074 6761     l try connect ag
 80a60b4:	6961 2e6e 4e00 746f 6320 6e6f 656e 7463     ain..Not connect
 80a60c4:	6465 7420 206f 6874 2065 6c63 756f 2e64     ed to the cloud.
 80a60d4:	7720 6c69 206c 7274 2079 6761 6961 2e6e      will try again.
 80a60e4:	2e2e 4300 6e6f 656e 7463 6e69 2067 6f74     ...Connecting to
 80a60f4:	7420 6568 6320 6f6c 6475 2e2e 202e 4900      the cloud... .I
 80a6104:	2073 2061 6c63 756f 2064 6f6c 706f 6220     s a cloud loop b
 80a6114:	7475 5720 6669 2069 7369 6e20 746f 6520     ut Wifi is not e
 80a6124:	616e 6c62 6465 202c 6977 6c6c 6e20 776f     nabled, will now
 80a6134:	6320 6e6f 656e 7463 002e 6870 3861 3331      connect..pha813
 80a6144:	6472 346c 3037 3400 6951 6475 3932 642d     rdl470.4Qiud29-d
 80a6154:	0061 4733 7520 6946 395f 3045 3300 2047     a.3G uFi_9E0.3G 
 80a6164:	4675 5f69 3136 0042 4733 7520 6946 435f     uFi_61B.3G uFi_C
 80a6174:	3338 3300 2047 4675 5f69 4539 0033 4733     83.3G uFi_9E3.3G
 80a6184:	7520 6946 435f 4236 0000 0000                uFi_C6B....

080a6190 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a6198:	1899 080a 18bf 080a 1873 080a 3757 080a     ........s...W7..

080a61a8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a61b0:	1d85 080a 1d99 080a 26dd 080a 187b 080a     .........&..{...
 80a61c0:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 80a61d0:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
 80a61e0:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
 80a61f0:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
 80a6200:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
 80a6210:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
 80a6220:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
 80a6230:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
 80a6240:	5d00 0020 6425 2800 3a29 0020 5b20 6300     .] .%d.(): . [.c
 80a6250:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 80a6260:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
 80a6270:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
 80a6280:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
 80a6290:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

080a62a0 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a62a8:	1d59 080a 1d71 080a 2529 080a 00cf 080a     Y...q...)%......

080a62b8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a62c0:	1897 080a 18cd 080a 2451 080a 187d 080a     ........Q$..}...

080a62d0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a62d8:	1895 080a 18db 080a 1c7d 080a 18e9 080a     ........}.......
 80a62e8:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
 80a62f8:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
 80a6308:	6373 6974 656d 0000                         sctime..

080a6310 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6318:	2bad 080a 2bb3 080a 2bf7 080a 2bc1 080a     .+...+...+...+..
 80a6328:	2baf 080a                                   .+..

080a632c <_ZTV9IPAddress>:
	...
 80a6334:	3145 080a 3135 080a 3137 080a               E1..51..71..

080a6340 <_ZTV9USBSerial>:
	...
 80a6348:	3201 080a 3251 080a 325f 080a 1737 080a     .2..Q2.._2..7...
 80a6358:	323d 080a 3203 080a 3219 080a 324b 080a     =2...2...2..K2..
 80a6368:	322f 080a 31fd 080a                         /2...1..

080a6370 <_ZTV11USARTSerial>:
	...
 80a6378:	33c5 080a 3415 080a 3423 080a 1737 080a     .3...4..#4..7...
 80a6388:	33d9 080a 33fb 080a 33e7 080a 340f 080a     .3...3...3...4..
 80a6398:	33c7 080a 33cb 080a                         .3...3..

080a63a0 <_ZTV7TwoWire>:
	...
 80a63a8:	3539 080a 3583 080a 355b 080a 353b 080a     95...5..[5..;5..
 80a63b8:	3563 080a 356b 080a 3573 080a 357b 080a     c5..k5..s5..{5..

080a63c8 <_ZTVN5spark9WiFiClassE>:
	...
 80a63d0:	363f 080a 3635 080a 0215 080a 021f 080a     ?6..56..........
 80a63e0:	1867 080a 3629 080a 361d 080a 3615 080a     g...)6...6...6..
 80a63f0:	360b 080a 3601 080a 35bd 080a               .6...6...5..

080a63fc <_ZTVN5spark12NetworkClassE>:
	...
 80a6404:	365d 080a 3667 080a 3671 080a 367b 080a     ]6..g6..q6..{6..
 80a6414:	3685 080a 3691 080a 369d 080a 36a9 080a     .6...6...6...6..
 80a6424:	36b1 080a 36bb 080a 36c5 080a 2e30 0030     .6...6...6..0.0.
 80a6434:	6166 736c 0065 7274 6575 2500 0075 2e25     false.true.%u.%.
 80a6444:	6c2a 0066 6725 6e00 6c75 006c 2575 3430     *lf.%g.null.u%04
 80a6454:	0078                                        x.

080a6456 <_ZSt7nothrow>:
	...

080a6457 <_ctype_>:
 80a6457:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a6467:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a6477:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a6487:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a6497:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a64a7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a64b7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a64c7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a64d7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a6558 <__sf_fake_stdin>:
	...

080a6578 <__sf_fake_stdout>:
	...

080a6598 <__sf_fake_stderr>:
	...
 80a65b8:	0043 0000                                   C...

080a65bc <__month_lengths>:
 80a65bc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a65cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a65dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a65ec:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a65fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a660c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a661c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a662c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a663c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a664c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a6658 <link_const_variable_data_end>:
 80a6658:	080a0bf5 	.word	0x080a0bf5
 80a665c:	080a1279 	.word	0x080a1279
 80a6660:	080a2519 	.word	0x080a2519
 80a6664:	080a2a01 	.word	0x080a2a01
 80a6668:	080a2a59 	.word	0x080a2a59
 80a666c:	080a3649 	.word	0x080a3649
 80a6670:	080a3715 	.word	0x080a3715
 80a6674:	080a3bd5 	.word	0x080a3bd5
 80a6678:	080a3ccd 	.word	0x080a3ccd
 80a667c:	080a3d51 	.word	0x080a3d51
 80a6680:	080a3e15 	.word	0x080a3e15
 80a6684:	080a3ed9 	.word	0x080a3ed9

080a6688 <link_constructors_end>:
	...
