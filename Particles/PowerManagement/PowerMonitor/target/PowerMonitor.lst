
c:/Users/julia/Documents/Particle/projects/PowerManagement/PowerMonitor/target/PowerMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004520  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a4540  080a4540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000008  40024000  080a4548  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000cc  20000000  080a4550  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000021c  200000d0  200000d0  000400d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a461c  080a461c  0003461c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a4644  080a4644  00034644  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000bba0e  00000000  00000000  00034648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010b26  00000000  00000000  000f0056  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00014ea9  00000000  00000000  00100b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000022f8  00000000  00000000  00115a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003720  00000000  00000000  00117d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000268ef  00000000  00000000  0011b43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000251cb  00000000  00000000  00141d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a6bb0  00000000  00000000  00166ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c4d4  00000000  00000000  0020daa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fa91 	bl	80a3558 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fa96 	bl	80a356e <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4550 	.word	0x080a4550
 80a0050:	200000cc 	.word	0x200000cc
 80a0054:	200000d0 	.word	0x200000d0
 80a0058:	200002ec 	.word	0x200002ec
 80a005c:	200002ec 	.word	0x200002ec

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fb43 	bl	80a16ec <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4504 	.word	0x080a4504
 80a0088:	080a4538 	.word	0x080a4538

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b8b8 	b.w	80a0200 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fbf5 	bl	80a0880 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bae9 	b.w	80a1670 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 bf31 	b.w	80a0f04 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f000 bf37 	b.w	80a0f14 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z9VoltSpikev>:
    Serial.println(message);

}


void VoltSpike(){
 80a00b8:	b510      	push	{r4, lr}
  total_mAh += mAh;
 80a00ba:	a31d      	add	r3, pc, #116	; (adr r3, 80a0130 <_Z9VoltSpikev+0x78>)
 80a00bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a00c0:	4c1f      	ldr	r4, [pc, #124]	; (80a0140 <_Z9VoltSpikev+0x88>)
 80a00c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a00c6:	f002 fb21 	bl	80a270c <__adddf3>
  totalCoulomb += coulomb;
 80a00ca:	a31b      	add	r3, pc, #108	; (adr r3, 80a0138 <_Z9VoltSpikev+0x80>)
 80a00cc:	e9d3 2300 	ldrd	r2, r3, [r3]

}


void VoltSpike(){
  total_mAh += mAh;
 80a00d0:	e9c4 0100 	strd	r0, r1, [r4]
  totalCoulomb += coulomb;
 80a00d4:	4c1b      	ldr	r4, [pc, #108]	; (80a0144 <_Z9VoltSpikev+0x8c>)
 80a00d6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a00da:	f002 fb17 	bl	80a270c <__adddf3>
  if (isPowered)
 80a00de:	4b1a      	ldr	r3, [pc, #104]	; (80a0148 <_Z9VoltSpikev+0x90>)
}


void VoltSpike(){
  total_mAh += mAh;
  totalCoulomb += coulomb;
 80a00e0:	e9c4 0100 	strd	r0, r1, [r4]
  if (isPowered)
 80a00e4:	781b      	ldrb	r3, [r3, #0]
 80a00e6:	b15b      	cbz	r3, 80a0100 <_Z9VoltSpikev+0x48>
  {
    on_mAh += mAh;
 80a00e8:	a311      	add	r3, pc, #68	; (adr r3, 80a0130 <_Z9VoltSpikev+0x78>)
 80a00ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a00ee:	4c17      	ldr	r4, [pc, #92]	; (80a014c <_Z9VoltSpikev+0x94>)
 80a00f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a00f4:	f002 fb0a 	bl	80a270c <__adddf3>
 80a00f8:	e9c4 0100 	strd	r0, r1, [r4]
    onCoulomb += coulomb;
 80a00fc:	4c14      	ldr	r4, [pc, #80]	; (80a0150 <_Z9VoltSpikev+0x98>)
 80a00fe:	e00a      	b.n	80a0116 <_Z9VoltSpikev+0x5e>
  }else
  {
    off_mAh += mAh;
 80a0100:	4c14      	ldr	r4, [pc, #80]	; (80a0154 <_Z9VoltSpikev+0x9c>)
 80a0102:	a30b      	add	r3, pc, #44	; (adr r3, 80a0130 <_Z9VoltSpikev+0x78>)
 80a0104:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0108:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a010c:	f002 fafe 	bl	80a270c <__adddf3>
 80a0110:	e9c4 0100 	strd	r0, r1, [r4]
    offCoulomb += coulomb;
 80a0114:	4c10      	ldr	r4, [pc, #64]	; (80a0158 <_Z9VoltSpikev+0xa0>)
 80a0116:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a011a:	a307      	add	r3, pc, #28	; (adr r3, 80a0138 <_Z9VoltSpikev+0x80>)
 80a011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0120:	f002 faf4 	bl	80a270c <__adddf3>
 80a0124:	e9c4 0100 	strd	r0, r1, [r4]
 80a0128:	bd10      	pop	{r4, pc}
 80a012a:	bf00      	nop
 80a012c:	f3af 8000 	nop.w
 80a0130:	60000000 	.word	0x60000000
 80a0134:	3fc5d97f 	.word	0x3fc5d97f
 80a0138:	00000000 	.word	0x00000000
 80a013c:	3fe3a97c 	.word	0x3fe3a97c
 80a0140:	20000110 	.word	0x20000110
 80a0144:	20000100 	.word	0x20000100
 80a0148:	200000dc 	.word	0x200000dc
 80a014c:	200000e8 	.word	0x200000e8
 80a0150:	200000f0 	.word	0x200000f0
 80a0154:	200000e0 	.word	0x200000e0
 80a0158:	200000f8 	.word	0x200000f8

080a015c <_Z12ChangedPowerv>:
  }
  
  
}

void ChangedPower() {
 80a015c:	b508      	push	{r3, lr}
  updateSerial = true;
 80a015e:	4b0e      	ldr	r3, [pc, #56]	; (80a0198 <_Z12ChangedPowerv+0x3c>)
 80a0160:	2201      	movs	r2, #1
 80a0162:	701a      	strb	r2, [r3, #0]
  if (digitalRead(pwr) == HIGH)
 80a0164:	4b0d      	ldr	r3, [pc, #52]	; (80a019c <_Z12ChangedPowerv+0x40>)
 80a0166:	8818      	ldrh	r0, [r3, #0]
 80a0168:	f002 f90b 	bl	80a2382 <digitalRead>
 80a016c:	2801      	cmp	r0, #1
 80a016e:	490c      	ldr	r1, [pc, #48]	; (80a01a0 <_Z12ChangedPowerv+0x44>)
 80a0170:	f04f 0200 	mov.w	r2, #0
 80a0174:	f04f 0300 	mov.w	r3, #0
 80a0178:	d105      	bne.n	80a0186 <_Z12ChangedPowerv+0x2a>
  {
    isPowered = true;
 80a017a:	7008      	strb	r0, [r1, #0]
    on_mAh = 0;
 80a017c:	4909      	ldr	r1, [pc, #36]	; (80a01a4 <_Z12ChangedPowerv+0x48>)
 80a017e:	e9c1 2300 	strd	r2, r3, [r1]
    onCoulomb = 0;
 80a0182:	4909      	ldr	r1, [pc, #36]	; (80a01a8 <_Z12ChangedPowerv+0x4c>)
 80a0184:	e005      	b.n	80a0192 <_Z12ChangedPowerv+0x36>
  }else{
    isPowered = false;
 80a0186:	2000      	movs	r0, #0
 80a0188:	7008      	strb	r0, [r1, #0]
    offCoulomb = 0;
 80a018a:	4908      	ldr	r1, [pc, #32]	; (80a01ac <_Z12ChangedPowerv+0x50>)
 80a018c:	e9c1 2300 	strd	r2, r3, [r1]
    off_mAh = 0;
 80a0190:	4907      	ldr	r1, [pc, #28]	; (80a01b0 <_Z12ChangedPowerv+0x54>)
 80a0192:	e9c1 2300 	strd	r2, r3, [r1]
 80a0196:	bd08      	pop	{r3, pc}
 80a0198:	200000dd 	.word	0x200000dd
 80a019c:	20000010 	.word	0x20000010
 80a01a0:	200000dc 	.word	0x200000dc
 80a01a4:	200000e8 	.word	0x200000e8
 80a01a8:	200000f0 	.word	0x200000f0
 80a01ac:	200000f8 	.word	0x200000f8
 80a01b0:	200000e0 	.word	0x200000e0

080a01b4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a01b4:	2200      	movs	r2, #0
 80a01b6:	4611      	mov	r1, r2
 80a01b8:	6840      	ldr	r0, [r0, #4]
 80a01ba:	f000 be23 	b.w	80a0e04 <network_connecting>

080a01be <_ZN5spark9WiFiClass5readyEv>:
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a01be:	2200      	movs	r2, #0
 80a01c0:	4611      	mov	r1, r2
 80a01c2:	6840      	ldr	r0, [r0, #4]
 80a01c4:	f000 be2e 	b.w	80a0e24 <network_ready>

080a01c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a01c8:	b40e      	push	{r1, r2, r3}
 80a01ca:	b500      	push	{lr}
 80a01cc:	b08c      	sub	sp, #48	; 0x30
 80a01ce:	aa0d      	add	r2, sp, #52	; 0x34
 80a01d0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a01d4:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01d6:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a01da:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a01dc:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01de:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01e0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01e2:	aa04      	add	r2, sp, #16
 80a01e4:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01e6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01e8:	f000 fdb0 	bl	80a0d4c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80a01ec:	b00c      	add	sp, #48	; 0x30
 80a01ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80a01f2:	b003      	add	sp, #12
 80a01f4:	4770      	bx	lr

080a01f6 <_Z13setup_Optionsv>:
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a01f6:	2101      	movs	r1, #1
 80a01f8:	4608      	mov	r0, r1
 80a01fa:	f000 bccd 	b.w	80a0b98 <HAL_Feature_Set>
	...

080a0200 <setup>:
/*DO NOT CHANGE*/ const char *SSID5 = "3G uFi_9E0";
/*DO NOT CHANGE*/ const char *PASS = "4Qiud29-da";


void setup() 
{ 
 80a0200:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pinMode(pwr, INPUT);  
 80a0202:	4d17      	ldr	r5, [pc, #92]	; (80a0260 <setup+0x60>)
  pinMode(interup, INPUT);
 80a0204:	4c17      	ldr	r4, [pc, #92]	; (80a0264 <setup+0x64>)
/*DO NOT CHANGE*/ const char *PASS = "4Qiud29-da";


void setup() 
{ 
  pinMode(pwr, INPUT);  
 80a0206:	8828      	ldrh	r0, [r5, #0]
 80a0208:	2100      	movs	r1, #0
 80a020a:	f002 f8a9 	bl	80a2360 <pinMode>
  pinMode(interup, INPUT);
 80a020e:	2100      	movs	r1, #0
 80a0210:	8820      	ldrh	r0, [r4, #0]
 80a0212:	f002 f8a5 	bl	80a2360 <pinMode>
  Serial.begin(9600);
 80a0216:	f001 fe1f 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a021a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a021e:	f001 fe0f 	bl	80a1e40 <_ZN9USBSerial5beginEl>

 // while (!Serial.isConnected())
 //     Particle.process();
  Serial.println("Running Setup for loop");
 80a0222:	f001 fe19 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a0226:	4910      	ldr	r1, [pc, #64]	; (80a0268 <setup+0x68>)
 80a0228:	f001 f8a9 	bl	80a137e <_ZN5Print7printlnEPKc>
  delay(100); 
 80a022c:	2064      	movs	r0, #100	; 0x64
 80a022e:	f001 f9bd 	bl	80a15ac <delay>
  attachInterrupt(interup, VoltSpike, FALLING); 
 80a0232:	8820      	ldrh	r0, [r4, #0]
 80a0234:	2400      	movs	r4, #0
 80a0236:	9400      	str	r4, [sp, #0]
 80a0238:	f04f 33ff 	mov.w	r3, #4294967295
 80a023c:	2202      	movs	r2, #2
 80a023e:	490b      	ldr	r1, [pc, #44]	; (80a026c <setup+0x6c>)
 80a0240:	f001 fe60 	bl	80a1f04 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(pwr, ChangedPower, CHANGE); 
 80a0244:	8828      	ldrh	r0, [r5, #0]
 80a0246:	9400      	str	r4, [sp, #0]
 80a0248:	f04f 33ff 	mov.w	r3, #4294967295
 80a024c:	4622      	mov	r2, r4
 80a024e:	4908      	ldr	r1, [pc, #32]	; (80a0270 <setup+0x70>)
 80a0250:	f001 fe58 	bl	80a1f04 <_Z15attachInterrupttPFvvE13InterruptModeah>
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
  Particle.connect();
}
 80a0254:	b003      	add	sp, #12
 80a0256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a025a:	f000 be2b 	b.w	80a0eb4 <spark_cloud_flag_connect>
 80a025e:	bf00      	nop
 80a0260:	20000010 	.word	0x20000010
 80a0264:	20000004 	.word	0x20000004
 80a0268:	080a3da8 	.word	0x080a3da8
 80a026c:	080a00b9 	.word	0x080a00b9
 80a0270:	080a015d 	.word	0x080a015d

080a0274 <_Z13publishValuesv>:
  delay(1000);

}


void publishValues(){
 80a0274:	b510      	push	{r4, lr}
 80a0276:	b08e      	sub	sp, #56	; 0x38

    String message = "";
 80a0278:	49af      	ldr	r1, [pc, #700]	; (80a0538 <_Z13publishValuesv+0x2c4>)
 80a027a:	a802      	add	r0, sp, #8
 80a027c:	f000 ff97 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat(String("{ "));
 80a0280:	49ae      	ldr	r1, [pc, #696]	; (80a053c <_Z13publishValuesv+0x2c8>)
 80a0282:	a80a      	add	r0, sp, #40	; 0x28
 80a0284:	f000 ff93 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
 80a0288:	a90a      	add	r1, sp, #40	; 0x28
 80a028a:	a802      	add	r0, sp, #8
 80a028c:	f001 f80d 	bl	80a12aa <_ZN6String6concatERKS_>
 80a0290:	a80a      	add	r0, sp, #40	; 0x28
 80a0292:	f000 ff45 	bl	80a1120 <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0296:	49aa      	ldr	r1, [pc, #680]	; (80a0540 <_Z13publishValuesv+0x2cc>)
 80a0298:	a80a      	add	r0, sp, #40	; 0x28
 80a029a:	f000 ff88 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>

      message.concat("\"Bt\":" + String(total_mAh, 3) + ", ");      
 80a029e:	2403      	movs	r4, #3
 80a02a0:	4ba8      	ldr	r3, [pc, #672]	; (80a0544 <_Z13publishValuesv+0x2d0>)
 80a02a2:	9400      	str	r4, [sp, #0]
 80a02a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02a8:	a806      	add	r0, sp, #24
 80a02aa:	f000 ffd1 	bl	80a1250 <_ZN6StringC1Edi>
 80a02ae:	a906      	add	r1, sp, #24
 80a02b0:	a80a      	add	r0, sp, #40	; 0x28
 80a02b2:	f001 f80d 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a02b6:	49a4      	ldr	r1, [pc, #656]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a02b8:	f001 f816 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a02bc:	4601      	mov	r1, r0
 80a02be:	a802      	add	r0, sp, #8
 80a02c0:	f000 fff3 	bl	80a12aa <_ZN6String6concatERKS_>
 80a02c4:	a806      	add	r0, sp, #24
 80a02c6:	f000 ff2b 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02ca:	a80a      	add	r0, sp, #40	; 0x28
 80a02cc:	f000 ff28 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a02d0:	499e      	ldr	r1, [pc, #632]	; (80a054c <_Z13publishValuesv+0x2d8>)
 80a02d2:	a80a      	add	r0, sp, #40	; 0x28
 80a02d4:	f000 ff6b 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Bp\":" + String(on_mAh, 3) + ", ");      
 80a02d8:	4b9d      	ldr	r3, [pc, #628]	; (80a0550 <_Z13publishValuesv+0x2dc>)
 80a02da:	9400      	str	r4, [sp, #0]
 80a02dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02e0:	a806      	add	r0, sp, #24
 80a02e2:	f000 ffb5 	bl	80a1250 <_ZN6StringC1Edi>
 80a02e6:	a906      	add	r1, sp, #24
 80a02e8:	a80a      	add	r0, sp, #40	; 0x28
 80a02ea:	f000 fff1 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a02ee:	4996      	ldr	r1, [pc, #600]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a02f0:	f000 fffa 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a02f4:	4601      	mov	r1, r0
 80a02f6:	a802      	add	r0, sp, #8
 80a02f8:	f000 ffd7 	bl	80a12aa <_ZN6String6concatERKS_>
 80a02fc:	a806      	add	r0, sp, #24
 80a02fe:	f000 ff0f 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0302:	a80a      	add	r0, sp, #40	; 0x28
 80a0304:	f000 ff0c 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0308:	4992      	ldr	r1, [pc, #584]	; (80a0554 <_Z13publishValuesv+0x2e0>)
 80a030a:	a80a      	add	r0, sp, #40	; 0x28
 80a030c:	f000 ff4f 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Bh\":" + String(off_mAh, 3) + ", ");   
 80a0310:	4b91      	ldr	r3, [pc, #580]	; (80a0558 <_Z13publishValuesv+0x2e4>)
 80a0312:	9400      	str	r4, [sp, #0]
 80a0314:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0318:	a806      	add	r0, sp, #24
 80a031a:	f000 ff99 	bl	80a1250 <_ZN6StringC1Edi>
 80a031e:	a906      	add	r1, sp, #24
 80a0320:	a80a      	add	r0, sp, #40	; 0x28
 80a0322:	f000 ffd5 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0326:	4988      	ldr	r1, [pc, #544]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0328:	f000 ffde 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a032c:	4601      	mov	r1, r0
 80a032e:	a802      	add	r0, sp, #8
 80a0330:	f000 ffbb 	bl	80a12aa <_ZN6String6concatERKS_>
 80a0334:	a806      	add	r0, sp, #24
 80a0336:	f000 fef3 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a033a:	a80a      	add	r0, sp, #40	; 0x28
 80a033c:	f000 fef0 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0340:	4986      	ldr	r1, [pc, #536]	; (80a055c <_Z13publishValuesv+0x2e8>)
 80a0342:	a80a      	add	r0, sp, #40	; 0x28
 80a0344:	f000 ff33 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Yr\":" + String(Time.year()) + ", ");
 80a0348:	f001 f91c 	bl	80a1584 <_ZN9TimeClass4yearEv>
 80a034c:	220a      	movs	r2, #10
 80a034e:	4601      	mov	r1, r0
 80a0350:	a806      	add	r0, sp, #24
 80a0352:	f000 ff6a 	bl	80a122a <_ZN6StringC1Eih>
 80a0356:	a906      	add	r1, sp, #24
 80a0358:	a80a      	add	r0, sp, #40	; 0x28
 80a035a:	f000 ffb9 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a035e:	497a      	ldr	r1, [pc, #488]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0360:	f000 ffc2 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a0364:	4601      	mov	r1, r0
 80a0366:	a802      	add	r0, sp, #8
 80a0368:	f000 ff9f 	bl	80a12aa <_ZN6String6concatERKS_>
 80a036c:	a806      	add	r0, sp, #24
 80a036e:	f000 fed7 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0372:	a80a      	add	r0, sp, #40	; 0x28
 80a0374:	f000 fed4 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0378:	4979      	ldr	r1, [pc, #484]	; (80a0560 <_Z13publishValuesv+0x2ec>)
 80a037a:	a80a      	add	r0, sp, #40	; 0x28
 80a037c:	f000 ff17 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Mo\":" + String(Time.month()) + ", ");
 80a0380:	f001 f8f8 	bl	80a1574 <_ZN9TimeClass5monthEv>
 80a0384:	220a      	movs	r2, #10
 80a0386:	4601      	mov	r1, r0
 80a0388:	a806      	add	r0, sp, #24
 80a038a:	f000 ff4e 	bl	80a122a <_ZN6StringC1Eih>
 80a038e:	a906      	add	r1, sp, #24
 80a0390:	a80a      	add	r0, sp, #40	; 0x28
 80a0392:	f000 ff9d 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0396:	496c      	ldr	r1, [pc, #432]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0398:	f000 ffa6 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a039c:	4601      	mov	r1, r0
 80a039e:	a802      	add	r0, sp, #8
 80a03a0:	f000 ff83 	bl	80a12aa <_ZN6String6concatERKS_>
 80a03a4:	a806      	add	r0, sp, #24
 80a03a6:	f000 febb 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03aa:	a80a      	add	r0, sp, #40	; 0x28
 80a03ac:	f000 feb8 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03b0:	496c      	ldr	r1, [pc, #432]	; (80a0564 <_Z13publishValuesv+0x2f0>)
 80a03b2:	a80a      	add	r0, sp, #40	; 0x28
 80a03b4:	f000 fefb 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Da\":" + String(Time.day()) + ", ");
 80a03b8:	f001 f8d2 	bl	80a1560 <_ZN9TimeClass3dayEv>
 80a03bc:	220a      	movs	r2, #10
 80a03be:	4601      	mov	r1, r0
 80a03c0:	a806      	add	r0, sp, #24
 80a03c2:	f000 ff32 	bl	80a122a <_ZN6StringC1Eih>
 80a03c6:	a906      	add	r1, sp, #24
 80a03c8:	a80a      	add	r0, sp, #40	; 0x28
 80a03ca:	f000 ff81 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a03ce:	495e      	ldr	r1, [pc, #376]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a03d0:	f000 ff8a 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a03d4:	4601      	mov	r1, r0
 80a03d6:	a802      	add	r0, sp, #8
 80a03d8:	f000 ff67 	bl	80a12aa <_ZN6String6concatERKS_>
 80a03dc:	a806      	add	r0, sp, #24
 80a03de:	f000 fe9f 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03e2:	a80a      	add	r0, sp, #40	; 0x28
 80a03e4:	f000 fe9c 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03e8:	495f      	ldr	r1, [pc, #380]	; (80a0568 <_Z13publishValuesv+0x2f4>)
 80a03ea:	a80a      	add	r0, sp, #40	; 0x28
 80a03ec:	f000 fedf 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Hr\":" + String(Time.hour()) + ", ");
 80a03f0:	f001 f898 	bl	80a1524 <_ZN9TimeClass4hourEv>
 80a03f4:	220a      	movs	r2, #10
 80a03f6:	4601      	mov	r1, r0
 80a03f8:	a806      	add	r0, sp, #24
 80a03fa:	f000 ff16 	bl	80a122a <_ZN6StringC1Eih>
 80a03fe:	a906      	add	r1, sp, #24
 80a0400:	a80a      	add	r0, sp, #40	; 0x28
 80a0402:	f000 ff65 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0406:	4950      	ldr	r1, [pc, #320]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0408:	f000 ff6e 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a040c:	4601      	mov	r1, r0
 80a040e:	a802      	add	r0, sp, #8
 80a0410:	f000 ff4b 	bl	80a12aa <_ZN6String6concatERKS_>
 80a0414:	a806      	add	r0, sp, #24
 80a0416:	f000 fe83 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a041a:	a80a      	add	r0, sp, #40	; 0x28
 80a041c:	f000 fe80 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0420:	4952      	ldr	r1, [pc, #328]	; (80a056c <_Z13publishValuesv+0x2f8>)
 80a0422:	a80a      	add	r0, sp, #40	; 0x28
 80a0424:	f000 fec3 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Mi\":" + String(Time.minute()) + ", ");
 80a0428:	f001 f886 	bl	80a1538 <_ZN9TimeClass6minuteEv>
 80a042c:	220a      	movs	r2, #10
 80a042e:	4601      	mov	r1, r0
 80a0430:	a806      	add	r0, sp, #24
 80a0432:	f000 fefa 	bl	80a122a <_ZN6StringC1Eih>
 80a0436:	a906      	add	r1, sp, #24
 80a0438:	a80a      	add	r0, sp, #40	; 0x28
 80a043a:	f000 ff49 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a043e:	4942      	ldr	r1, [pc, #264]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0440:	f000 ff52 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a0444:	4601      	mov	r1, r0
 80a0446:	a802      	add	r0, sp, #8
 80a0448:	f000 ff2f 	bl	80a12aa <_ZN6String6concatERKS_>
 80a044c:	a806      	add	r0, sp, #24
 80a044e:	f000 fe67 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0452:	a80a      	add	r0, sp, #40	; 0x28
 80a0454:	f000 fe64 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0458:	4945      	ldr	r1, [pc, #276]	; (80a0570 <_Z13publishValuesv+0x2fc>)
 80a045a:	a80a      	add	r0, sp, #40	; 0x28
 80a045c:	f000 fea7 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Sc\":" + String(Time.second()) + ", ");
 80a0460:	f001 f874 	bl	80a154c <_ZN9TimeClass6secondEv>
 80a0464:	220a      	movs	r2, #10
 80a0466:	4601      	mov	r1, r0
 80a0468:	a806      	add	r0, sp, #24
 80a046a:	f000 fede 	bl	80a122a <_ZN6StringC1Eih>
 80a046e:	a906      	add	r1, sp, #24
 80a0470:	a80a      	add	r0, sp, #40	; 0x28
 80a0472:	f000 ff2d 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0476:	4934      	ldr	r1, [pc, #208]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a0478:	f000 ff36 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a047c:	4601      	mov	r1, r0
 80a047e:	a802      	add	r0, sp, #8
 80a0480:	f000 ff13 	bl	80a12aa <_ZN6String6concatERKS_>
 80a0484:	a806      	add	r0, sp, #24
 80a0486:	f000 fe4b 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a048a:	a80a      	add	r0, sp, #40	; 0x28
 80a048c:	f000 fe48 	bl	80a1120 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0490:	4938      	ldr	r1, [pc, #224]	; (80a0574 <_Z13publishValuesv+0x300>)
 80a0492:	a80a      	add	r0, sp, #40	; 0x28
 80a0494:	f000 fe8b 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Zo\":" + String(10) + ", ");
 80a0498:	220a      	movs	r2, #10
 80a049a:	4611      	mov	r1, r2
 80a049c:	a806      	add	r0, sp, #24
 80a049e:	f000 fec4 	bl	80a122a <_ZN6StringC1Eih>
 80a04a2:	a906      	add	r1, sp, #24
 80a04a4:	a80a      	add	r0, sp, #40	; 0x28
 80a04a6:	f000 ff13 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a04aa:	4927      	ldr	r1, [pc, #156]	; (80a0548 <_Z13publishValuesv+0x2d4>)
 80a04ac:	f000 ff1c 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a04b0:	4601      	mov	r1, r0
 80a04b2:	a802      	add	r0, sp, #8
 80a04b4:	f000 fef9 	bl	80a12aa <_ZN6String6concatERKS_>
 80a04b8:	a806      	add	r0, sp, #24
 80a04ba:	f000 fe31 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04be:	a80a      	add	r0, sp, #40	; 0x28
 80a04c0:	f000 fe2e 	bl	80a1120 <_ZN6StringD1Ev>

    message.concat("\"Dv\": \"Power1\" }");
 80a04c4:	492c      	ldr	r1, [pc, #176]	; (80a0578 <_Z13publishValuesv+0x304>)
 80a04c6:	a802      	add	r0, sp, #8
 80a04c8:	f000 fef3 	bl	80a12b2 <_ZN6String6concatEPKc>

    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
 80a04cc:	a902      	add	r1, sp, #8
 80a04ce:	a80a      	add	r0, sp, #40	; 0x28
 80a04d0:	f000 fe8f 	bl	80a11f2 <_ZN6StringC1ERKS_>
 80a04d4:	4b29      	ldr	r3, [pc, #164]	; (80a057c <_Z13publishValuesv+0x308>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a04d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a04d8:	781b      	ldrb	r3, [r3, #0]
 80a04da:	4929      	ldr	r1, [pc, #164]	; (80a0580 <_Z13publishValuesv+0x30c>)
 80a04dc:	f88d 3000 	strb.w	r3, [sp]
 80a04e0:	a806      	add	r0, sp, #24
 80a04e2:	233c      	movs	r3, #60	; 0x3c
 80a04e4:	f001 fa70 	bl	80a19c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a04e8:	9c07      	ldr	r4, [sp, #28]
 80a04ea:	b17c      	cbz	r4, 80a050c <_Z13publishValuesv+0x298>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a04ec:	6863      	ldr	r3, [r4, #4]
 80a04ee:	3b01      	subs	r3, #1
 80a04f0:	6063      	str	r3, [r4, #4]
 80a04f2:	b95b      	cbnz	r3, 80a050c <_Z13publishValuesv+0x298>
        {
          _M_dispose();
 80a04f4:	6823      	ldr	r3, [r4, #0]
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	689b      	ldr	r3, [r3, #8]
 80a04fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a04fc:	68a3      	ldr	r3, [r4, #8]
 80a04fe:	3b01      	subs	r3, #1
 80a0500:	60a3      	str	r3, [r4, #8]
 80a0502:	b91b      	cbnz	r3, 80a050c <_Z13publishValuesv+0x298>
            _M_destroy();
 80a0504:	6823      	ldr	r3, [r4, #0]
 80a0506:	4620      	mov	r0, r4
 80a0508:	68db      	ldr	r3, [r3, #12]
 80a050a:	4798      	blx	r3
 80a050c:	a80a      	add	r0, sp, #40	; 0x28
 80a050e:	f000 fe07 	bl	80a1120 <_ZN6StringD1Ev>
    delay(1000);
 80a0512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0516:	f001 f849 	bl	80a15ac <delay>
    Serial.println("Sent to the cloud... ");
 80a051a:	f001 fc9d 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a051e:	4919      	ldr	r1, [pc, #100]	; (80a0584 <_Z13publishValuesv+0x310>)
 80a0520:	f000 ff2d 	bl	80a137e <_ZN5Print7printlnEPKc>
    Serial.println(message);
 80a0524:	f001 fc98 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a0528:	9902      	ldr	r1, [sp, #8]
 80a052a:	f000 ff28 	bl	80a137e <_ZN5Print7printlnEPKc>
}


void publishValues(){

    String message = "";
 80a052e:	a802      	add	r0, sp, #8
 80a0530:	f000 fdf6 	bl	80a1120 <_ZN6StringD1Ev>
    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
    delay(1000);
    Serial.println("Sent to the cloud... ");
    Serial.println(message);

}
 80a0534:	b00e      	add	sp, #56	; 0x38
 80a0536:	bd10      	pop	{r4, pc}
 80a0538:	080a406f 	.word	0x080a406f
 80a053c:	080a3dbf 	.word	0x080a3dbf
 80a0540:	080a3dc2 	.word	0x080a3dc2
 80a0544:	20000110 	.word	0x20000110
 80a0548:	080a3dc8 	.word	0x080a3dc8
 80a054c:	080a3dcb 	.word	0x080a3dcb
 80a0550:	200000e8 	.word	0x200000e8
 80a0554:	080a3dd1 	.word	0x080a3dd1
 80a0558:	200000e0 	.word	0x200000e0
 80a055c:	080a3dd7 	.word	0x080a3dd7
 80a0560:	080a3ddd 	.word	0x080a3ddd
 80a0564:	080a3de3 	.word	0x080a3de3
 80a0568:	080a3de9 	.word	0x080a3de9
 80a056c:	080a3def 	.word	0x080a3def
 80a0570:	080a3df5 	.word	0x080a3df5
 80a0574:	080a3dfb 	.word	0x080a3dfb
 80a0578:	080a3e01 	.word	0x080a3e01
 80a057c:	20000118 	.word	0x20000118
 80a0580:	080a3e12 	.word	0x080a3e12
 80a0584:	080a3e1a 	.word	0x080a3e1a

080a0588 <_Z12mycustomScanv>:
  }
#endif
}

void mycustomScan()
{
 80a0588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a058c:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 80a0590:	2400      	movs	r4, #0

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
 80a0592:	ae5c      	add	r6, sp, #368	; 0x170
 80a0594:	2538      	movs	r5, #56	; 0x38
 80a0596:	1930      	adds	r0, r6, r4
 80a0598:	2238      	movs	r2, #56	; 0x38
 80a059a:	2100      	movs	r1, #0
 80a059c:	f002 ffe7 	bl	80a356e <memset>
       size = sizeof(*this);
 80a05a0:	51a5      	str	r5, [r4, r6]
 80a05a2:	3438      	adds	r4, #56	; 0x38
  WiFiAccessPoint aps[20];
 80a05a4:	f5b4 6f8c 	cmp.w	r4, #1120	; 0x460
 80a05a8:	d1f5      	bne.n	80a0596 <_Z12mycustomScanv+0xe>
 80a05aa:	2400      	movs	r4, #0

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
 80a05ac:	ad16      	add	r5, sp, #88	; 0x58
 80a05ae:	2738      	movs	r7, #56	; 0x38
 80a05b0:	1928      	adds	r0, r5, r4
 80a05b2:	2238      	movs	r2, #56	; 0x38
 80a05b4:	2100      	movs	r1, #0
 80a05b6:	f002 ffda 	bl	80a356e <memset>
       size = sizeof(*this);
 80a05ba:	5167      	str	r7, [r4, r5]
 80a05bc:	3438      	adds	r4, #56	; 0x38
  WiFiAccessPoint Myap[5];
 80a05be:	f5b4 7f8c 	cmp.w	r4, #280	; 0x118
 80a05c2:	d1f5      	bne.n	80a05b0 <_Z12mycustomScanv+0x28>
  int foundMy = WiFi.getCredentials(Myap, 5); //-1;//
 80a05c4:	4629      	mov	r1, r5
 80a05c6:	2205      	movs	r2, #5
 80a05c8:	482d      	ldr	r0, [pc, #180]	; (80a0680 <_Z12mycustomScanv+0xf8>)
 80a05ca:	f001 fe23 	bl	80a2214 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
  int found = WiFi.scan(aps, 20);             //0;//
 80a05ce:	2214      	movs	r2, #20
 80a05d0:	4631      	mov	r1, r6
 80a05d2:	482b      	ldr	r0, [pc, #172]	; (80a0680 <_Z12mycustomScanv+0xf8>)
 80a05d4:	f001 fe0c 	bl	80a21f0 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>
 80a05d8:	4680      	mov	r8, r0
      }
      if (!haveGot)
      {
        Serial.print("SSID: ");
        Serial.println(ap.ssid);
        WiFi.setCredentials(ap.ssid, PASS); //
 80a05da:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80a0690 <_Z12mycustomScanv+0x108>
 80a05de:	ac5d      	add	r4, sp, #372	; 0x174
{
  WiFiAccessPoint aps[20];
  WiFiAccessPoint Myap[5];
  int foundMy = WiFi.getCredentials(Myap, 5); //-1;//
  int found = WiFi.scan(aps, 20);             //0;//
  for (int i = 0; i < found; i++)
 80a05e0:	2500      	movs	r5, #0
 80a05e2:	4545      	cmp	r5, r8
 80a05e4:	da48      	bge.n	80a0678 <_Z12mycustomScanv+0xf0>
  {
    WiFiAccessPoint &ap = aps[i];
    if (ap.ssid[0] == '3' && ap.ssid[1] == 'G')
 80a05e6:	2338      	movs	r3, #56	; 0x38
 80a05e8:	fb03 6305 	mla	r3, r3, r5, r6
 80a05ec:	889a      	ldrh	r2, [r3, #4]
 80a05ee:	f244 7333 	movw	r3, #18227	; 0x4733
 80a05f2:	429a      	cmp	r2, r3
 80a05f4:	d133      	bne.n	80a065e <_Z12mycustomScanv+0xd6>
          break;
        }
      }
      if (!haveGot)
      {
        Serial.print("SSID: ");
 80a05f6:	f001 fc2f 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a05fa:	4922      	ldr	r1, [pc, #136]	; (80a0684 <_Z12mycustomScanv+0xfc>)
 80a05fc:	f000 feac 	bl	80a1358 <_ZN5Print5printEPKc>
        Serial.println(ap.ssid);
 80a0600:	f001 fc2a 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a0604:	4621      	mov	r1, r4
 80a0606:	f000 feba 	bl	80a137e <_ZN5Print7printlnEPKc>
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 80a060a:	4620      	mov	r0, r4
 80a060c:	f003 f80d 	bl	80a362a <strlen>
        WiFi.setCredentials(ap.ssid, PASS); //
 80a0610:	f8d9 7000 	ldr.w	r7, [r9]
 80a0614:	4683      	mov	fp, r0
 80a0616:	b127      	cbz	r7, 80a0622 <_Z12mycustomScanv+0x9a>
 80a0618:	4638      	mov	r0, r7
 80a061a:	f003 f806 	bl	80a362a <strlen>
 80a061e:	4682      	mov	sl, r0
 80a0620:	e000      	b.n	80a0624 <_Z12mycustomScanv+0x9c>
 80a0622:	46ba      	mov	sl, r7

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
 80a0624:	234c      	movs	r3, #76	; 0x4c
 80a0626:	461a      	mov	r2, r3
 80a0628:	2100      	movs	r1, #0
 80a062a:	a803      	add	r0, sp, #12
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	f002 ff9e 	bl	80a356e <memset>
        creds.size = sizeof(creds);
 80a0632:	9b01      	ldr	r3, [sp, #4]
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0634:	4812      	ldr	r0, [pc, #72]	; (80a0680 <_Z12mycustomScanv+0xf8>)
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
 80a0636:	9303      	str	r3, [sp, #12]
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 80a0638:	2303      	movs	r3, #3
 80a063a:	f88d 3020 	strb.w	r3, [sp, #32]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a063e:	2300      	movs	r3, #0
 80a0640:	aa03      	add	r2, sp, #12
 80a0642:	4619      	mov	r1, r3
 80a0644:	6840      	ldr	r0, [r0, #4]
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
        creds.ssid = ssid;
 80a0646:	9404      	str	r4, [sp, #16]
        creds.ssid_len = ssidLen;
 80a0648:	f8cd b014 	str.w	fp, [sp, #20]
        creds.password = password;
 80a064c:	9706      	str	r7, [sp, #24]
        creds.password_len = passwordLen;
 80a064e:	f8cd a01c 	str.w	sl, [sp, #28]
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a0652:	f000 fc0f 	bl	80a0e74 <network_set_credentials>
        hasAddedNewSSID = true;
 80a0656:	4b0c      	ldr	r3, [pc, #48]	; (80a0688 <_Z12mycustomScanv+0x100>)
 80a0658:	2201      	movs	r2, #1
 80a065a:	701a      	strb	r2, [r3, #0]
 80a065c:	e009      	b.n	80a0672 <_Z12mycustomScanv+0xea>
      }
    }
    else
    {

      Serial.print("Unknown SSID: ");
 80a065e:	f001 fbfb 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a0662:	490a      	ldr	r1, [pc, #40]	; (80a068c <_Z12mycustomScanv+0x104>)
 80a0664:	f000 fe78 	bl	80a1358 <_ZN5Print5printEPKc>
      Serial.println(ap.ssid);
 80a0668:	f001 fbf6 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a066c:	4621      	mov	r1, r4
 80a066e:	f000 fe86 	bl	80a137e <_ZN5Print7printlnEPKc>
{
  WiFiAccessPoint aps[20];
  WiFiAccessPoint Myap[5];
  int foundMy = WiFi.getCredentials(Myap, 5); //-1;//
  int found = WiFi.scan(aps, 20);             //0;//
  for (int i = 0; i < found; i++)
 80a0672:	3501      	adds	r5, #1
 80a0674:	3438      	adds	r4, #56	; 0x38
 80a0676:	e7b4      	b.n	80a05e2 <_Z12mycustomScanv+0x5a>

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a0678:	f20d 5dd4 	addw	sp, sp, #1492	; 0x5d4
 80a067c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0680:	200001c0 	.word	0x200001c0
 80a0684:	080a3e38 	.word	0x080a3e38
 80a0688:	40024000 	.word	0x40024000
 80a068c:	080a3e30 	.word	0x080a3e30
 80a0690:	2000000c 	.word	0x2000000c

080a0694 <_Z14tryConnectWifiv>:
}



void tryConnectWifi()
{
 80a0694:	b510      	push	{r4, lr}
#if (PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION)
  if (wiFiConnectionAttempts < wiFiConnectionAttemptMAX)
 80a0696:	4b12      	ldr	r3, [pc, #72]	; (80a06e0 <_Z14tryConnectWifiv+0x4c>)
 80a0698:	681a      	ldr	r2, [r3, #0]
 80a069a:	4b12      	ldr	r3, [pc, #72]	; (80a06e4 <_Z14tryConnectWifiv+0x50>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	429a      	cmp	r2, r3
 80a06a0:	da1d      	bge.n	80a06de <_Z14tryConnectWifiv+0x4a>
 80a06a2:	4c11      	ldr	r4, [pc, #68]	; (80a06e8 <_Z14tryConnectWifiv+0x54>)
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a06a4:	2300      	movs	r3, #0
 80a06a6:	461a      	mov	r2, r3
 80a06a8:	4619      	mov	r1, r3
 80a06aa:	6860      	ldr	r0, [r4, #4]
 80a06ac:	f000 fbc2 	bl	80a0e34 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a06b0:	2300      	movs	r3, #0
 80a06b2:	4619      	mov	r1, r3
 80a06b4:	461a      	mov	r2, r3
 80a06b6:	6860      	ldr	r0, [r4, #4]
 80a06b8:	f000 fb9c 	bl	80a0df4 <network_connect>
  {
    WiFi.on();
    WiFi.connect();
    Log.info("Connecting WiFi...");
 80a06bc:	490b      	ldr	r1, [pc, #44]	; (80a06ec <_Z14tryConnectWifiv+0x58>)
 80a06be:	480c      	ldr	r0, [pc, #48]	; (80a06f0 <_Z14tryConnectWifiv+0x5c>)
 80a06c0:	f7ff fd82 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
    if (!hasAddedNewSSID)
 80a06c4:	4b0b      	ldr	r3, [pc, #44]	; (80a06f4 <_Z14tryConnectWifiv+0x60>)
 80a06c6:	781b      	ldrb	r3, [r3, #0]
 80a06c8:	b90b      	cbnz	r3, 80a06ce <_Z14tryConnectWifiv+0x3a>
    {
      mycustomScan();
 80a06ca:	f7ff ff5d 	bl	80a0588 <_Z12mycustomScanv>
    }
    Log.info("Connecting to Cloud..."); ///////////////////// UPDATE
 80a06ce:	490a      	ldr	r1, [pc, #40]	; (80a06f8 <_Z14tryConnectWifiv+0x64>)
 80a06d0:	4807      	ldr	r0, [pc, #28]	; (80a06f0 <_Z14tryConnectWifiv+0x5c>)
 80a06d2:	f7ff fd79 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
  else
  {
    //cancelWiFi();
  }
#endif
}
 80a06d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (!hasAddedNewSSID)
    {
      mycustomScan();
    }
    Log.info("Connecting to Cloud..."); ///////////////////// UPDATE
    tryConnectCloud();
 80a06da:	f000 b80f 	b.w	80a06fc <_Z15tryConnectCloudv>
 80a06de:	bd10      	pop	{r4, pc}
 80a06e0:	2000010c 	.word	0x2000010c
 80a06e4:	20000000 	.word	0x20000000
 80a06e8:	200001c0 	.word	0x200001c0
 80a06ec:	080a3e3f 	.word	0x080a3e3f
 80a06f0:	20000120 	.word	0x20000120
 80a06f4:	40024000 	.word	0x40024000
 80a06f8:	080a3e52 	.word	0x080a3e52

080a06fc <_Z15tryConnectCloudv>:
  }
#endif
}

void tryConnectCloud()
{
 80a06fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (PLATFORM_ID == PLATFORM_ARGON || PLATFORM_ID == PLATFORM_PHOTON_PRODUCTION)

  if (true)
  {
    if ((WiFi.ready() || WiFi.connecting())) //Mesh.ready() || Mesh.connecting())
 80a06fe:	484e      	ldr	r0, [pc, #312]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a0700:	f7ff fd5d 	bl	80a01be <_ZN5spark9WiFiClass5readyEv>
 80a0704:	bb38      	cbnz	r0, 80a0756 <_Z15tryConnectCloudv+0x5a>
 80a0706:	484c      	ldr	r0, [pc, #304]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a0708:	f7ff fd54 	bl	80a01b4 <_ZN5spark9WiFiClass10connectingEv>
 80a070c:	bb18      	cbnz	r0, 80a0756 <_Z15tryConnectCloudv+0x5a>
    }
    else
    {
      Log.info("Is a cloud loop but Wifi is not enabled, will now connect.");

      if (wiFiConnectionAttempts > 1)
 80a070e:	4c4b      	ldr	r4, [pc, #300]	; (80a083c <_Z15tryConnectCloudv+0x140>)
        tryConnectWifi();
      }
    }
    else
    {
      Log.info("Is a cloud loop but Wifi is not enabled, will now connect.");
 80a0710:	494b      	ldr	r1, [pc, #300]	; (80a0840 <_Z15tryConnectCloudv+0x144>)
 80a0712:	484c      	ldr	r0, [pc, #304]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0714:	f7ff fd58 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>

      if (wiFiConnectionAttempts > 1)
 80a0718:	6823      	ldr	r3, [r4, #0]
 80a071a:	2b01      	cmp	r3, #1
 80a071c:	dd03      	ble.n	80a0726 <_Z15tryConnectCloudv+0x2a>
        Log.info("Not connected to the cloud. will try again...");
 80a071e:	494a      	ldr	r1, [pc, #296]	; (80a0848 <_Z15tryConnectCloudv+0x14c>)
 80a0720:	4848      	ldr	r0, [pc, #288]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0722:	f7ff fd51 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>

      wiFiConnectionAttempts++;
 80a0726:	6823      	ldr	r3, [r4, #0]
 80a0728:	3301      	adds	r3, #1
 80a072a:	6023      	str	r3, [r4, #0]
      tryConnectWifi();
 80a072c:	f7ff ffb2 	bl	80a0694 <_Z14tryConnectWifiv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0730:	f000 fbc8 	bl	80a0ec4 <spark_cloud_flag_connected>
    }
  }
  if (Particle.connected() == false)
 80a0734:	2800      	cmp	r0, #0
 80a0736:	d17d      	bne.n	80a0834 <_Z15tryConnectCloudv+0x138>
 80a0738:	f000 fbc4 	bl	80a0ec4 <spark_cloud_flag_connected>
  {
    cloudReady = Particle.connected();
 80a073c:	4b43      	ldr	r3, [pc, #268]	; (80a084c <_Z15tryConnectCloudv+0x150>)
    Log.info("Connecting to the cloud... ");
 80a073e:	4944      	ldr	r1, [pc, #272]	; (80a0850 <_Z15tryConnectCloudv+0x154>)
      tryConnectWifi();
    }
  }
  if (Particle.connected() == false)
  {
    cloudReady = Particle.connected();
 80a0740:	7018      	strb	r0, [r3, #0]
    Log.info("Connecting to the cloud... ");
 80a0742:	4840      	ldr	r0, [pc, #256]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0744:	f7ff fd40 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a0748:	f000 fbb4 	bl	80a0eb4 <spark_cloud_flag_connect>
    Particle.connect();
    Log.info("should be connected to cloud... ");
 80a074c:	4941      	ldr	r1, [pc, #260]	; (80a0854 <_Z15tryConnectCloudv+0x158>)
 80a074e:	483d      	ldr	r0, [pc, #244]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0750:	f7ff fd3a 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
  }
#endif
}
 80a0754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (true)
  {
    if ((WiFi.ready() || WiFi.connecting())) //Mesh.ready() || Mesh.connecting())
    {
      if (WiFi.ready())
 80a0756:	4838      	ldr	r0, [pc, #224]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a0758:	f7ff fd31 	bl	80a01be <_ZN5spark9WiFiClass5readyEv>
 80a075c:	b118      	cbz	r0, 80a0766 <_Z15tryConnectCloudv+0x6a>
        Log.info("Wifi is ready.");
 80a075e:	493e      	ldr	r1, [pc, #248]	; (80a0858 <_Z15tryConnectCloudv+0x15c>)
 80a0760:	4838      	ldr	r0, [pc, #224]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0762:	f7ff fd31 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>

      if (WiFi.connecting())
 80a0766:	4834      	ldr	r0, [pc, #208]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a0768:	f7ff fd24 	bl	80a01b4 <_ZN5spark9WiFiClass10connectingEv>
 80a076c:	b118      	cbz	r0, 80a0776 <_Z15tryConnectCloudv+0x7a>
        Log.info("Wifi is connecting.");
 80a076e:	493b      	ldr	r1, [pc, #236]	; (80a085c <_Z15tryConnectCloudv+0x160>)
 80a0770:	4834      	ldr	r0, [pc, #208]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0772:	f7ff fd29 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>

      if (waitFor(WiFi.ready, wifiConnectionDuration)) //waitFor(Mesh.ready,wifiConnectionDuration))//
 80a0776:	4b3a      	ldr	r3, [pc, #232]	; (80a0860 <_Z15tryConnectCloudv+0x164>)
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0778:	2000      	movs	r0, #0
 80a077a:	681c      	ldr	r4, [r3, #0]
 80a077c:	f000 fa04 	bl	80a0b88 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0780:	4606      	mov	r6, r0
 80a0782:	2700      	movs	r7, #0
 80a0784:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0786:	2000      	movs	r0, #0
 80a0788:	f000 f9fe 	bl	80a0b88 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a078c:	1b80      	subs	r0, r0, r6
 80a078e:	eb61 0107 	sbc.w	r1, r1, r7
 80a0792:	42a9      	cmp	r1, r5
 80a0794:	bf08      	it	eq
 80a0796:	42a0      	cmpeq	r0, r4
 80a0798:	d206      	bcs.n	80a07a8 <_Z15tryConnectCloudv+0xac>
 80a079a:	4827      	ldr	r0, [pc, #156]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a079c:	f7ff fd0f 	bl	80a01be <_ZN5spark9WiFiClass5readyEv>
 80a07a0:	b910      	cbnz	r0, 80a07a8 <_Z15tryConnectCloudv+0xac>
            spark_process();
 80a07a2:	f000 fb7f 	bl	80a0ea4 <spark_process>
 80a07a6:	e7ee      	b.n	80a0786 <_Z15tryConnectCloudv+0x8a>
 80a07a8:	4823      	ldr	r0, [pc, #140]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a07aa:	f7ff fd08 	bl	80a01be <_ZN5spark9WiFiClass5readyEv>
 80a07ae:	b348      	cbz	r0, 80a0804 <_Z15tryConnectCloudv+0x108>
      {
        Log.info("Wifi is ready. now to connect to the cloud. ");
 80a07b0:	492c      	ldr	r1, [pc, #176]	; (80a0864 <_Z15tryConnectCloudv+0x168>)
 80a07b2:	4824      	ldr	r0, [pc, #144]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a07b4:	f7ff fd08 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
        wifiReady = true;
        connectingToCloud = true;
 80a07b8:	4d2b      	ldr	r5, [pc, #172]	; (80a0868 <_Z15tryConnectCloudv+0x16c>)
        Log.info("Wifi is connecting.");

      if (waitFor(WiFi.ready, wifiConnectionDuration)) //waitFor(Mesh.ready,wifiConnectionDuration))//
      {
        Log.info("Wifi is ready. now to connect to the cloud. ");
        wifiReady = true;
 80a07ba:	4b2c      	ldr	r3, [pc, #176]	; (80a086c <_Z15tryConnectCloudv+0x170>)
 80a07bc:	2401      	movs	r4, #1
 80a07be:	701c      	strb	r4, [r3, #0]
        connectingToCloud = true;
 80a07c0:	702c      	strb	r4, [r5, #0]
 80a07c2:	f000 fb77 	bl	80a0eb4 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a07c6:	f000 fb7d 	bl	80a0ec4 <spark_cloud_flag_connected>
        Particle.connect();

        if (Particle.connected())
 80a07ca:	b1a0      	cbz	r0, 80a07f6 <_Z15tryConnectCloudv+0xfa>
        {
          Log.info("Connected to the cloud... ");
 80a07cc:	4928      	ldr	r1, [pc, #160]	; (80a0870 <_Z15tryConnectCloudv+0x174>)
 80a07ce:	481d      	ldr	r0, [pc, #116]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a07d0:	f7ff fcfa 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
 80a07d4:	f000 fb76 	bl	80a0ec4 <spark_cloud_flag_connected>
          cloudReady = Particle.connected();
 80a07d8:	4b1c      	ldr	r3, [pc, #112]	; (80a084c <_Z15tryConnectCloudv+0x150>)
          connectingToCloud = false;
 80a07da:	2200      	movs	r2, #0
        Particle.connect();

        if (Particle.connected())
        {
          Log.info("Connected to the cloud... ");
          cloudReady = Particle.connected();
 80a07dc:	7018      	strb	r0, [r3, #0]
          connectingToCloud = false;
          wiFiConnectionAttempts = 0;
 80a07de:	4b17      	ldr	r3, [pc, #92]	; (80a083c <_Z15tryConnectCloudv+0x140>)
        return value;
    }

    static inline void set_flag(system_flag_t flag, uint8_t value)
    {
        system_set_flag(flag, value, nullptr);
 80a07e0:	4621      	mov	r1, r4
 80a07e2:	4620      	mov	r0, r4

        if (Particle.connected())
        {
          Log.info("Connected to the cloud... ");
          cloudReady = Particle.connected();
          connectingToCloud = false;
 80a07e4:	702a      	strb	r2, [r5, #0]
          wiFiConnectionAttempts = 0;
 80a07e6:	601a      	str	r2, [r3, #0]
 80a07e8:	f000 fad0 	bl	80a0d8c <system_set_flag>
          System.enableUpdates();
          Log.info("All setup, connected and ready to dance. Hazar");
 80a07ec:	4921      	ldr	r1, [pc, #132]	; (80a0874 <_Z15tryConnectCloudv+0x178>)
 80a07ee:	4815      	ldr	r0, [pc, #84]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a07f0:	f7ff fcea 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
 80a07f4:	e010      	b.n	80a0818 <_Z15tryConnectCloudv+0x11c>
        }
        else
        {
          Log.info("should be connected to cloud... ");
 80a07f6:	4917      	ldr	r1, [pc, #92]	; (80a0854 <_Z15tryConnectCloudv+0x158>)
 80a07f8:	4812      	ldr	r0, [pc, #72]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a07fa:	f7ff fce5 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a07fe:	f000 fb59 	bl	80a0eb4 <spark_cloud_flag_connect>
 80a0802:	e009      	b.n	80a0818 <_Z15tryConnectCloudv+0x11c>
          Particle.connect();
        }
      }
      else
      {
        Log.info("WiFi connection timed out, will try and connect...");
 80a0804:	491c      	ldr	r1, [pc, #112]	; (80a0878 <_Z15tryConnectCloudv+0x17c>)
 80a0806:	480f      	ldr	r0, [pc, #60]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0808:	f7ff fcde 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
        wiFiConnectionAttempts++;
 80a080c:	4a0b      	ldr	r2, [pc, #44]	; (80a083c <_Z15tryConnectCloudv+0x140>)
 80a080e:	6813      	ldr	r3, [r2, #0]
 80a0810:	3301      	adds	r3, #1
 80a0812:	6013      	str	r3, [r2, #0]
        tryConnectWifi();
 80a0814:	f7ff ff3e 	bl	80a0694 <_Z14tryConnectWifiv>
      }
      if (WiFi.connecting())
 80a0818:	4807      	ldr	r0, [pc, #28]	; (80a0838 <_Z15tryConnectCloudv+0x13c>)
 80a081a:	f7ff fccb 	bl	80a01b4 <_ZN5spark9WiFiClass10connectingEv>
 80a081e:	2800      	cmp	r0, #0
 80a0820:	d086      	beq.n	80a0730 <_Z15tryConnectCloudv+0x34>
      {
        Log.info("We are still connecting to the cloud. Will try connect again.");
 80a0822:	4916      	ldr	r1, [pc, #88]	; (80a087c <_Z15tryConnectCloudv+0x180>)
 80a0824:	4807      	ldr	r0, [pc, #28]	; (80a0844 <_Z15tryConnectCloudv+0x148>)
 80a0826:	f7ff fccf 	bl	80a01c8 <_ZNK5spark6Logger4infoEPKcz>
        wiFiConnectionAttempts++;
 80a082a:	4a04      	ldr	r2, [pc, #16]	; (80a083c <_Z15tryConnectCloudv+0x140>)
 80a082c:	6813      	ldr	r3, [r2, #0]
 80a082e:	3301      	adds	r3, #1
 80a0830:	6013      	str	r3, [r2, #0]
 80a0832:	e77b      	b.n	80a072c <_Z15tryConnectCloudv+0x30>
 80a0834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0836:	bf00      	nop
 80a0838:	200001c0 	.word	0x200001c0
 80a083c:	2000010c 	.word	0x2000010c
 80a0840:	080a3fdf 	.word	0x080a3fdf
 80a0844:	20000120 	.word	0x20000120
 80a0848:	080a3f95 	.word	0x080a3f95
 80a084c:	20000108 	.word	0x20000108
 80a0850:	080a3fc3 	.word	0x080a3fc3
 80a0854:	080a3f03 	.word	0x080a3f03
 80a0858:	080a3e69 	.word	0x080a3e69
 80a085c:	080a3e78 	.word	0x080a3e78
 80a0860:	20000008 	.word	0x20000008
 80a0864:	080a3e8c 	.word	0x080a3e8c
 80a0868:	200000d4 	.word	0x200000d4
 80a086c:	200000d5 	.word	0x200000d5
 80a0870:	080a3eb9 	.word	0x080a3eb9
 80a0874:	080a3ed4 	.word	0x080a3ed4
 80a0878:	080a3f24 	.word	0x080a3f24
 80a087c:	080a3f57 	.word	0x080a3f57

080a0880 <loop>:
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
  Particle.connect();
}

void loop()
{
 80a0880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0884:	b08e      	sub	sp, #56	; 0x38
  
  tryConnectCloud();  
 80a0886:	f7ff ff39 	bl	80a06fc <_Z15tryConnectCloudv>
Serial.println("Total power is \t" + String(totalCoulomb) +"C\t"+ String(total_mAh) + "mAh");
 80a088a:	f001 fae5 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a088e:	2406      	movs	r4, #6
 80a0890:	4605      	mov	r5, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0892:	4970      	ldr	r1, [pc, #448]	; (80a0a54 <loop+0x1d4>)
 80a0894:	a806      	add	r0, sp, #24
 80a0896:	4f70      	ldr	r7, [pc, #448]	; (80a0a58 <loop+0x1d8>)
 80a0898:	f000 fc89 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
 80a089c:	9400      	str	r4, [sp, #0]
 80a089e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a08a2:	a802      	add	r0, sp, #8
 80a08a4:	f000 fcd4 	bl	80a1250 <_ZN6StringC1Edi>
 80a08a8:	a902      	add	r1, sp, #8
 80a08aa:	a806      	add	r0, sp, #24
 80a08ac:	f000 fd10 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a08b0:	496a      	ldr	r1, [pc, #424]	; (80a0a5c <loop+0x1dc>)
 80a08b2:	f000 fd19 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a08b6:	4680      	mov	r8, r0
 80a08b8:	4e69      	ldr	r6, [pc, #420]	; (80a0a60 <loop+0x1e0>)
 80a08ba:	9400      	str	r4, [sp, #0]
 80a08bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a08c0:	a80a      	add	r0, sp, #40	; 0x28
 80a08c2:	f000 fcc5 	bl	80a1250 <_ZN6StringC1Edi>
 80a08c6:	a90a      	add	r1, sp, #40	; 0x28
 80a08c8:	4640      	mov	r0, r8
 80a08ca:	f000 fd01 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a08ce:	4965      	ldr	r1, [pc, #404]	; (80a0a64 <loop+0x1e4>)
 80a08d0:	f000 fd0a 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a08d4:	6801      	ldr	r1, [r0, #0]
 80a08d6:	4628      	mov	r0, r5
 80a08d8:	f000 fd51 	bl	80a137e <_ZN5Print7printlnEPKc>
 80a08dc:	a80a      	add	r0, sp, #40	; 0x28
 80a08de:	f000 fc1f 	bl	80a1120 <_ZN6StringD1Ev>
  if (updateSerial)
 80a08e2:	4d61      	ldr	r5, [pc, #388]	; (80a0a68 <loop+0x1e8>)

void loop()
{
  
  tryConnectCloud();  
Serial.println("Total power is \t" + String(totalCoulomb) +"C\t"+ String(total_mAh) + "mAh");
 80a08e4:	a802      	add	r0, sp, #8
 80a08e6:	f000 fc1b 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a08ea:	a806      	add	r0, sp, #24
 80a08ec:	f000 fc18 	bl	80a1120 <_ZN6StringD1Ev>
  if (updateSerial)
 80a08f0:	782b      	ldrb	r3, [r5, #0]
 80a08f2:	2b00      	cmp	r3, #0
 80a08f4:	f000 80a6 	beq.w	80a0a44 <loop+0x1c4>
  {
  Serial.println("Power of device switched.");
 80a08f8:	f001 faae 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a08fc:	495b      	ldr	r1, [pc, #364]	; (80a0a6c <loop+0x1ec>)
 80a08fe:	f000 fd3e 	bl	80a137e <_ZN5Print7printlnEPKc>
  Serial.println("Power is " + isPowered ? "On": "off");
 80a0902:	f001 faa9 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a0906:	4b5a      	ldr	r3, [pc, #360]	; (80a0a70 <loop+0x1f0>)
 80a0908:	495a      	ldr	r1, [pc, #360]	; (80a0a74 <loop+0x1f4>)
 80a090a:	781a      	ldrb	r2, [r3, #0]
 80a090c:	4b5a      	ldr	r3, [pc, #360]	; (80a0a78 <loop+0x1f8>)
 80a090e:	42d3      	cmn	r3, r2
 80a0910:	4b5a      	ldr	r3, [pc, #360]	; (80a0a7c <loop+0x1fc>)
 80a0912:	bf08      	it	eq
 80a0914:	4619      	moveq	r1, r3
 80a0916:	f000 fd32 	bl	80a137e <_ZN5Print7printlnEPKc>
  Serial.println("Total power is \t" + String(totalCoulomb) +"C\t"+ String(total_mAh) + "mAh");
 80a091a:	f001 fa9d 	bl	80a1e58 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a091e:	494d      	ldr	r1, [pc, #308]	; (80a0a54 <loop+0x1d4>)
 80a0920:	4680      	mov	r8, r0
 80a0922:	a806      	add	r0, sp, #24
 80a0924:	f000 fc43 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
 80a0928:	9400      	str	r4, [sp, #0]
 80a092a:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a092e:	a802      	add	r0, sp, #8
 80a0930:	f000 fc8e 	bl	80a1250 <_ZN6StringC1Edi>
 80a0934:	a902      	add	r1, sp, #8
 80a0936:	a806      	add	r0, sp, #24
 80a0938:	f000 fcca 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a093c:	4947      	ldr	r1, [pc, #284]	; (80a0a5c <loop+0x1dc>)
 80a093e:	f000 fcd3 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a0942:	4607      	mov	r7, r0
 80a0944:	9400      	str	r4, [sp, #0]
 80a0946:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a094a:	a80a      	add	r0, sp, #40	; 0x28
 80a094c:	f000 fc80 	bl	80a1250 <_ZN6StringC1Edi>
 80a0950:	a90a      	add	r1, sp, #40	; 0x28
 80a0952:	4638      	mov	r0, r7
 80a0954:	f000 fcbc 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0958:	4942      	ldr	r1, [pc, #264]	; (80a0a64 <loop+0x1e4>)
 80a095a:	f000 fcc5 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a095e:	6801      	ldr	r1, [r0, #0]
 80a0960:	4640      	mov	r0, r8
 80a0962:	f000 fd0c 	bl	80a137e <_ZN5Print7printlnEPKc>
 80a0966:	a80a      	add	r0, sp, #40	; 0x28
 80a0968:	f000 fbda 	bl	80a1120 <_ZN6StringD1Ev>
 80a096c:	a802      	add	r0, sp, #8
 80a096e:	f000 fbd7 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0972:	a806      	add	r0, sp, #24
 80a0974:	f000 fbd4 	bl	80a1120 <_ZN6StringD1Ev>
  Serial.println("When power is on \t" + String(onCoulomb) +"C\t"+ String(on_mAh) + "mAh");
 80a0978:	f001 fa6e 	bl	80a1e58 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a097c:	4940      	ldr	r1, [pc, #256]	; (80a0a80 <loop+0x200>)
 80a097e:	4606      	mov	r6, r0
 80a0980:	a806      	add	r0, sp, #24
 80a0982:	f000 fc14 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
 80a0986:	4b3f      	ldr	r3, [pc, #252]	; (80a0a84 <loop+0x204>)
 80a0988:	9400      	str	r4, [sp, #0]
 80a098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a098e:	a802      	add	r0, sp, #8
 80a0990:	f000 fc5e 	bl	80a1250 <_ZN6StringC1Edi>
 80a0994:	a902      	add	r1, sp, #8
 80a0996:	a806      	add	r0, sp, #24
 80a0998:	f000 fc9a 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a099c:	492f      	ldr	r1, [pc, #188]	; (80a0a5c <loop+0x1dc>)
 80a099e:	f000 fca3 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a09a2:	4607      	mov	r7, r0
 80a09a4:	4b38      	ldr	r3, [pc, #224]	; (80a0a88 <loop+0x208>)
 80a09a6:	9400      	str	r4, [sp, #0]
 80a09a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09ac:	a80a      	add	r0, sp, #40	; 0x28
 80a09ae:	f000 fc4f 	bl	80a1250 <_ZN6StringC1Edi>
 80a09b2:	a90a      	add	r1, sp, #40	; 0x28
 80a09b4:	4638      	mov	r0, r7
 80a09b6:	f000 fc8b 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a09ba:	492a      	ldr	r1, [pc, #168]	; (80a0a64 <loop+0x1e4>)
 80a09bc:	f000 fc94 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a09c0:	6801      	ldr	r1, [r0, #0]
 80a09c2:	4630      	mov	r0, r6
 80a09c4:	f000 fcdb 	bl	80a137e <_ZN5Print7printlnEPKc>
 80a09c8:	a80a      	add	r0, sp, #40	; 0x28
 80a09ca:	f000 fba9 	bl	80a1120 <_ZN6StringD1Ev>
 80a09ce:	a802      	add	r0, sp, #8
 80a09d0:	f000 fba6 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a09d4:	a806      	add	r0, sp, #24
 80a09d6:	f000 fba3 	bl	80a1120 <_ZN6StringD1Ev>
  Serial.println("When power is off\t" + String(offCoulomb) +"C\t"+ String(off_mAh) + "mAh");
 80a09da:	f001 fa3d 	bl	80a1e58 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a09de:	492b      	ldr	r1, [pc, #172]	; (80a0a8c <loop+0x20c>)
 80a09e0:	4606      	mov	r6, r0
 80a09e2:	a806      	add	r0, sp, #24
 80a09e4:	f000 fbe3 	bl	80a11ae <_ZN6StringC1EPK19__FlashStringHelper>
 80a09e8:	4b29      	ldr	r3, [pc, #164]	; (80a0a90 <loop+0x210>)
 80a09ea:	9400      	str	r4, [sp, #0]
 80a09ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09f0:	a802      	add	r0, sp, #8
 80a09f2:	f000 fc2d 	bl	80a1250 <_ZN6StringC1Edi>
 80a09f6:	a902      	add	r1, sp, #8
 80a09f8:	a806      	add	r0, sp, #24
 80a09fa:	f000 fc69 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a09fe:	4917      	ldr	r1, [pc, #92]	; (80a0a5c <loop+0x1dc>)
 80a0a00:	f000 fc72 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a0a04:	4607      	mov	r7, r0
 80a0a06:	4b23      	ldr	r3, [pc, #140]	; (80a0a94 <loop+0x214>)
 80a0a08:	9400      	str	r4, [sp, #0]
 80a0a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a0e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a10:	f000 fc1e 	bl	80a1250 <_ZN6StringC1Edi>
 80a0a14:	a90a      	add	r1, sp, #40	; 0x28
 80a0a16:	4638      	mov	r0, r7
 80a0a18:	f000 fc5a 	bl	80a12d0 <_ZplRK15StringSumHelperRK6String>
 80a0a1c:	4911      	ldr	r1, [pc, #68]	; (80a0a64 <loop+0x1e4>)
 80a0a1e:	f000 fc63 	bl	80a12e8 <_ZplRK15StringSumHelperPKc>
 80a0a22:	6801      	ldr	r1, [r0, #0]
 80a0a24:	4630      	mov	r0, r6
 80a0a26:	f000 fcaa 	bl	80a137e <_ZN5Print7printlnEPKc>
 80a0a2a:	a80a      	add	r0, sp, #40	; 0x28
 80a0a2c:	f000 fb78 	bl	80a1120 <_ZN6StringD1Ev>
 80a0a30:	a802      	add	r0, sp, #8
 80a0a32:	f000 fb75 	bl	80a1120 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a36:	a806      	add	r0, sp, #24
 80a0a38:	f000 fb72 	bl	80a1120 <_ZN6StringD1Ev>

  publishValues();
 80a0a3c:	f7ff fc1a 	bl	80a0274 <_Z13publishValuesv>

    updateSerial = false;
 80a0a40:	2300      	movs	r3, #0
 80a0a42:	702b      	strb	r3, [r5, #0]
  }
  delay(1000);
 80a0a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0a48:	f000 fdb0 	bl	80a15ac <delay>

}
 80a0a4c:	b00e      	add	sp, #56	; 0x38
 80a0a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a52:	bf00      	nop
 80a0a54:	080a4021 	.word	0x080a4021
 80a0a58:	20000100 	.word	0x20000100
 80a0a5c:	080a4032 	.word	0x080a4032
 80a0a60:	20000110 	.word	0x20000110
 80a0a64:	080a4035 	.word	0x080a4035
 80a0a68:	200000dd 	.word	0x200000dd
 80a0a6c:	080a4039 	.word	0x080a4039
 80a0a70:	200000dc 	.word	0x200000dc
 80a0a74:	080a401a 	.word	0x080a401a
 80a0a78:	080a4053 	.word	0x080a4053
 80a0a7c:	080a401d 	.word	0x080a401d
 80a0a80:	080a405d 	.word	0x080a405d
 80a0a84:	200000f0 	.word	0x200000f0
 80a0a88:	200000e8 	.word	0x200000e8
 80a0a8c:	080a4070 	.word	0x080a4070
 80a0a90:	200000f8 	.word	0x200000f8
 80a0a94:	200000e0 	.word	0x200000e0

080a0a98 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a98:	4b09      	ldr	r3, [pc, #36]	; (80a0ac0 <_GLOBAL__sub_I_SystemMode+0x28>)

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a0a9a:	b510      	push	{r4, lr}
 80a0a9c:	2400      	movs	r4, #0
 80a0a9e:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0aa0:	f000 f812 	bl	80a0ac8 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0aa8:	4b06      	ldr	r3, [pc, #24]	; (80a0ac4 <_GLOBAL__sub_I_SystemMode+0x2c>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0aaa:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0aac:	701c      	strb	r4, [r3, #0]
 80a0aae:	805c      	strh	r4, [r3, #2]
 80a0ab0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0ab2:	f000 f95b 	bl	80a0d6c <set_system_mode>
 80a0ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// It is designed to work with the other example rf95_client
// Tested with Anarduino MiniWirelessLoRa

SYSTEM_MODE(SEMI_AUTOMATIC);

STARTUP(setup_Options());
 80a0aba:	f7ff bb9c 	b.w	80a01f6 <_Z13setup_Optionsv>
 80a0abe:	bf00      	nop
 80a0ac0:	20000118 	.word	0x20000118
 80a0ac4:	200000d6 	.word	0x200000d6

080a0ac8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <HAL_Pin_Map+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	681b      	ldr	r3, [r3, #0]
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601b0 	.word	0x080601b0

080a0ad8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <HAL_Pin_Mode+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	689b      	ldr	r3, [r3, #8]
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601b0 	.word	0x080601b0

080a0ae8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <HAL_Get_Pin_Mode+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	68db      	ldr	r3, [r3, #12]
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601b0 	.word	0x080601b0

080a0af8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <HAL_GPIO_Read+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	695b      	ldr	r3, [r3, #20]
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601b0 	.word	0x080601b0

080a0b08 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <HAL_Interrupts_Attach+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	699b      	ldr	r3, [r3, #24]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601b0 	.word	0x080601b0

080a0b18 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <HAL_Interrupts_Detach+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	69db      	ldr	r3, [r3, #28]
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601b0 	.word	0x080601b0

080a0b28 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <HAL_SPI_Init+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	69db      	ldr	r3, [r3, #28]
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601b4 	.word	0x080601b4

080a0b38 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <HAL_SPI_Is_Enabled+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	6a1b      	ldr	r3, [r3, #32]
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601b4 	.word	0x080601b4

080a0b48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <HAL_RNG_GetRandomNumber+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	685b      	ldr	r3, [r3, #4]
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	0806019c 	.word	0x0806019c

080a0b58 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b02      	ldr	r3, [pc, #8]	; (80a0b64 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	695b      	ldr	r3, [r3, #20]
 80a0b60:	9301      	str	r3, [sp, #4]
 80a0b62:	bd08      	pop	{r3, pc}
 80a0b64:	0806019c 	.word	0x0806019c

080a0b68 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0b68:	b508      	push	{r3, lr}
 80a0b6a:	4b02      	ldr	r3, [pc, #8]	; (80a0b74 <HAL_RTC_Get_UnixTime+0xc>)
 80a0b6c:	681b      	ldr	r3, [r3, #0]
 80a0b6e:	69db      	ldr	r3, [r3, #28]
 80a0b70:	9301      	str	r3, [sp, #4]
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	0806019c 	.word	0x0806019c

080a0b78 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0b78:	b508      	push	{r3, lr}
 80a0b7a:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <HAL_RTC_Time_Is_Valid+0xc>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0b80:	9301      	str	r3, [sp, #4]
 80a0b82:	bd08      	pop	{r3, pc}
 80a0b84:	0806019c 	.word	0x0806019c

080a0b88 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a0b88:	b508      	push	{r3, lr}
 80a0b8a:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <hal_timer_millis+0xc>)
 80a0b8c:	681b      	ldr	r3, [r3, #0]
 80a0b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0b90:	9301      	str	r3, [sp, #4]
 80a0b92:	bd08      	pop	{r3, pc}
 80a0b94:	0806019c 	.word	0x0806019c

080a0b98 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <HAL_Feature_Set+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601b8 	.word	0x080601b8

080a0ba8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <os_mutex_create+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601d0 	.word	0x080601d0

080a0bb8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <HAL_USART_Init+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	699b      	ldr	r3, [r3, #24]
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601c4 	.word	0x080601c4

080a0bc8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <HAL_USART_Write_Data+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601c4 	.word	0x080601c4

080a0bd8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <HAL_USART_Available_Data+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601c4 	.word	0x080601c4

080a0be8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <HAL_USART_Read_Data+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601c4 	.word	0x080601c4

080a0bf8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0bf8:	b508      	push	{r3, lr}
 80a0bfa:	4b02      	ldr	r3, [pc, #8]	; (80a0c04 <HAL_USART_Peek_Data+0xc>)
 80a0bfc:	681b      	ldr	r3, [r3, #0]
 80a0bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c00:	9301      	str	r3, [sp, #4]
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	080601c4 	.word	0x080601c4

080a0c08 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0c08:	b508      	push	{r3, lr}
 80a0c0a:	4b02      	ldr	r3, [pc, #8]	; (80a0c14 <HAL_USART_Flush_Data+0xc>)
 80a0c0c:	681b      	ldr	r3, [r3, #0]
 80a0c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c10:	9301      	str	r3, [sp, #4]
 80a0c12:	bd08      	pop	{r3, pc}
 80a0c14:	080601c4 	.word	0x080601c4

080a0c18 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0c18:	b508      	push	{r3, lr}
 80a0c1a:	4b02      	ldr	r3, [pc, #8]	; (80a0c24 <HAL_USART_Is_Enabled+0xc>)
 80a0c1c:	681b      	ldr	r3, [r3, #0]
 80a0c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0c20:	9301      	str	r3, [sp, #4]
 80a0c22:	bd08      	pop	{r3, pc}
 80a0c24:	080601c4 	.word	0x080601c4

080a0c28 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0c28:	b508      	push	{r3, lr}
 80a0c2a:	4b02      	ldr	r3, [pc, #8]	; (80a0c34 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0c2c:	681b      	ldr	r3, [r3, #0]
 80a0c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0c30:	9301      	str	r3, [sp, #4]
 80a0c32:	bd08      	pop	{r3, pc}
 80a0c34:	080601c4 	.word	0x080601c4

080a0c38 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0c38:	b508      	push	{r3, lr}
 80a0c3a:	4b02      	ldr	r3, [pc, #8]	; (80a0c44 <HAL_I2C_Write_Data+0xc>)
 80a0c3c:	681b      	ldr	r3, [r3, #0]
 80a0c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c40:	9301      	str	r3, [sp, #4]
 80a0c42:	bd08      	pop	{r3, pc}
 80a0c44:	080601ac 	.word	0x080601ac

080a0c48 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c48:	b508      	push	{r3, lr}
 80a0c4a:	4b02      	ldr	r3, [pc, #8]	; (80a0c54 <HAL_I2C_Available_Data+0xc>)
 80a0c4c:	681b      	ldr	r3, [r3, #0]
 80a0c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0c50:	9301      	str	r3, [sp, #4]
 80a0c52:	bd08      	pop	{r3, pc}
 80a0c54:	080601ac 	.word	0x080601ac

080a0c58 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c58:	b508      	push	{r3, lr}
 80a0c5a:	4b02      	ldr	r3, [pc, #8]	; (80a0c64 <HAL_I2C_Read_Data+0xc>)
 80a0c5c:	681b      	ldr	r3, [r3, #0]
 80a0c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0c60:	9301      	str	r3, [sp, #4]
 80a0c62:	bd08      	pop	{r3, pc}
 80a0c64:	080601ac 	.word	0x080601ac

080a0c68 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c68:	b508      	push	{r3, lr}
 80a0c6a:	4b02      	ldr	r3, [pc, #8]	; (80a0c74 <HAL_I2C_Peek_Data+0xc>)
 80a0c6c:	681b      	ldr	r3, [r3, #0]
 80a0c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0c70:	9301      	str	r3, [sp, #4]
 80a0c72:	bd08      	pop	{r3, pc}
 80a0c74:	080601ac 	.word	0x080601ac

080a0c78 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0c78:	b508      	push	{r3, lr}
 80a0c7a:	4b02      	ldr	r3, [pc, #8]	; (80a0c84 <HAL_I2C_Flush_Data+0xc>)
 80a0c7c:	681b      	ldr	r3, [r3, #0]
 80a0c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0c80:	9301      	str	r3, [sp, #4]
 80a0c82:	bd08      	pop	{r3, pc}
 80a0c84:	080601ac 	.word	0x080601ac

080a0c88 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <HAL_I2C_Is_Enabled+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601ac 	.word	0x080601ac

080a0c98 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0c98:	b508      	push	{r3, lr}
 80a0c9a:	4b03      	ldr	r3, [pc, #12]	; (80a0ca8 <HAL_I2C_Init+0x10>)
 80a0c9c:	681b      	ldr	r3, [r3, #0]
 80a0c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0ca2:	9301      	str	r3, [sp, #4]
 80a0ca4:	bd08      	pop	{r3, pc}
 80a0ca6:	0000      	.short	0x0000
 80a0ca8:	080601ac 	.word	0x080601ac

080a0cac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <HAL_USB_USART_Init+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	681b      	ldr	r3, [r3, #0]
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601d8 	.word	0x080601d8

080a0cbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <HAL_USB_USART_Begin+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	685b      	ldr	r3, [r3, #4]
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601d8 	.word	0x080601d8

080a0ccc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <HAL_USB_USART_Available_Data+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	691b      	ldr	r3, [r3, #16]
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601d8 	.word	0x080601d8

080a0cdc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	695b      	ldr	r3, [r3, #20]
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601d8 	.word	0x080601d8

080a0cec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <HAL_USB_USART_Receive_Data+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	699b      	ldr	r3, [r3, #24]
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601d8 	.word	0x080601d8

080a0cfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_USB_USART_Send_Data+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	69db      	ldr	r3, [r3, #28]
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601d8 	.word	0x080601d8

080a0d0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_USB_USART_Flush_Data+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	6a1b      	ldr	r3, [r3, #32]
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601d8 	.word	0x080601d8

080a0d1c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <inet_gethostbyname+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601c0 	.word	0x080601c0

080a0d2c <wlan_scan>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <wlan_scan+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601c0 	.word	0x080601c0

080a0d3c <wlan_get_credentials>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <wlan_get_credentials+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601c0 	.word	0x080601c0

080a0d4c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <log_message_v+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080201a8 	.word	0x080201a8

080a0d5c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b02      	ldr	r3, [pc, #8]	; (80a0d68 <system_mode+0xc>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	681b      	ldr	r3, [r3, #0]
 80a0d64:	9301      	str	r3, [sp, #4]
 80a0d66:	bd08      	pop	{r3, pc}
 80a0d68:	080601a4 	.word	0x080601a4

080a0d6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0d6c:	b508      	push	{r3, lr}
 80a0d6e:	4b02      	ldr	r3, [pc, #8]	; (80a0d78 <set_system_mode+0xc>)
 80a0d70:	681b      	ldr	r3, [r3, #0]
 80a0d72:	685b      	ldr	r3, [r3, #4]
 80a0d74:	9301      	str	r3, [sp, #4]
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	080601a4 	.word	0x080601a4

080a0d7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0d7c:	b508      	push	{r3, lr}
 80a0d7e:	4b02      	ldr	r3, [pc, #8]	; (80a0d88 <system_delay_ms+0xc>)
 80a0d80:	681b      	ldr	r3, [r3, #0]
 80a0d82:	695b      	ldr	r3, [r3, #20]
 80a0d84:	9301      	str	r3, [sp, #4]
 80a0d86:	bd08      	pop	{r3, pc}
 80a0d88:	080601a4 	.word	0x080601a4

080a0d8c <system_set_flag>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
DYNALIB_FN(14, system, system_set_flag, int(system_flag_t, uint8_t, void*))
 80a0d8c:	b508      	push	{r3, lr}
 80a0d8e:	4b02      	ldr	r3, [pc, #8]	; (80a0d98 <system_set_flag+0xc>)
 80a0d90:	681b      	ldr	r3, [r3, #0]
 80a0d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0d94:	9301      	str	r3, [sp, #4]
 80a0d96:	bd08      	pop	{r3, pc}
 80a0d98:	080601a4 	.word	0x080601a4

080a0d9c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0d9c:	b508      	push	{r3, lr}
 80a0d9e:	4b02      	ldr	r3, [pc, #8]	; (80a0da8 <application_thread_current+0xc>)
 80a0da0:	681b      	ldr	r3, [r3, #0]
 80a0da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0da4:	9301      	str	r3, [sp, #4]
 80a0da6:	bd08      	pop	{r3, pc}
 80a0da8:	080601a4 	.word	0x080601a4

080a0dac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0dac:	b508      	push	{r3, lr}
 80a0dae:	4b02      	ldr	r3, [pc, #8]	; (80a0db8 <application_thread_invoke+0xc>)
 80a0db0:	681b      	ldr	r3, [r3, #0]
 80a0db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	bd08      	pop	{r3, pc}
 80a0db8:	080601a4 	.word	0x080601a4

080a0dbc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0dbc:	b508      	push	{r3, lr}
 80a0dbe:	4b02      	ldr	r3, [pc, #8]	; (80a0dc8 <system_thread_get_state+0xc>)
 80a0dc0:	681b      	ldr	r3, [r3, #0]
 80a0dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0dc4:	9301      	str	r3, [sp, #4]
 80a0dc6:	bd08      	pop	{r3, pc}
 80a0dc8:	080601a4 	.word	0x080601a4

080a0dcc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0dcc:	b508      	push	{r3, lr}
 80a0dce:	4b03      	ldr	r3, [pc, #12]	; (80a0ddc <system_ctrl_set_app_request_handler+0x10>)
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0dd6:	9301      	str	r3, [sp, #4]
 80a0dd8:	bd08      	pop	{r3, pc}
 80a0dda:	0000      	.short	0x0000
 80a0ddc:	080601a4 	.word	0x080601a4

080a0de0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b03      	ldr	r3, [pc, #12]	; (80a0df0 <system_ctrl_set_result+0x10>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0dea:	9301      	str	r3, [sp, #4]
 80a0dec:	bd08      	pop	{r3, pc}
 80a0dee:	0000      	.short	0x0000
 80a0df0:	080601a4 	.word	0x080601a4

080a0df4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0df4:	b508      	push	{r3, lr}
 80a0df6:	4b02      	ldr	r3, [pc, #8]	; (80a0e00 <network_connect+0xc>)
 80a0df8:	681b      	ldr	r3, [r3, #0]
 80a0dfa:	685b      	ldr	r3, [r3, #4]
 80a0dfc:	9301      	str	r3, [sp, #4]
 80a0dfe:	bd08      	pop	{r3, pc}
 80a0e00:	080601c8 	.word	0x080601c8

080a0e04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0e04:	b508      	push	{r3, lr}
 80a0e06:	4b02      	ldr	r3, [pc, #8]	; (80a0e10 <network_connecting+0xc>)
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	689b      	ldr	r3, [r3, #8]
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	bd08      	pop	{r3, pc}
 80a0e10:	080601c8 	.word	0x080601c8

080a0e14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0e14:	b508      	push	{r3, lr}
 80a0e16:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <network_disconnect+0xc>)
 80a0e18:	681b      	ldr	r3, [r3, #0]
 80a0e1a:	68db      	ldr	r3, [r3, #12]
 80a0e1c:	9301      	str	r3, [sp, #4]
 80a0e1e:	bd08      	pop	{r3, pc}
 80a0e20:	080601c8 	.word	0x080601c8

080a0e24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b02      	ldr	r3, [pc, #8]	; (80a0e30 <network_ready+0xc>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	691b      	ldr	r3, [r3, #16]
 80a0e2c:	9301      	str	r3, [sp, #4]
 80a0e2e:	bd08      	pop	{r3, pc}
 80a0e30:	080601c8 	.word	0x080601c8

080a0e34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e34:	b508      	push	{r3, lr}
 80a0e36:	4b02      	ldr	r3, [pc, #8]	; (80a0e40 <network_on+0xc>)
 80a0e38:	681b      	ldr	r3, [r3, #0]
 80a0e3a:	695b      	ldr	r3, [r3, #20]
 80a0e3c:	9301      	str	r3, [sp, #4]
 80a0e3e:	bd08      	pop	{r3, pc}
 80a0e40:	080601c8 	.word	0x080601c8

080a0e44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e44:	b508      	push	{r3, lr}
 80a0e46:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <network_off+0xc>)
 80a0e48:	681b      	ldr	r3, [r3, #0]
 80a0e4a:	699b      	ldr	r3, [r3, #24]
 80a0e4c:	9301      	str	r3, [sp, #4]
 80a0e4e:	bd08      	pop	{r3, pc}
 80a0e50:	080601c8 	.word	0x080601c8

080a0e54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0e54:	b508      	push	{r3, lr}
 80a0e56:	4b02      	ldr	r3, [pc, #8]	; (80a0e60 <network_listen+0xc>)
 80a0e58:	681b      	ldr	r3, [r3, #0]
 80a0e5a:	69db      	ldr	r3, [r3, #28]
 80a0e5c:	9301      	str	r3, [sp, #4]
 80a0e5e:	bd08      	pop	{r3, pc}
 80a0e60:	080601c8 	.word	0x080601c8

080a0e64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0e64:	b508      	push	{r3, lr}
 80a0e66:	4b02      	ldr	r3, [pc, #8]	; (80a0e70 <network_listening+0xc>)
 80a0e68:	681b      	ldr	r3, [r3, #0]
 80a0e6a:	6a1b      	ldr	r3, [r3, #32]
 80a0e6c:	9301      	str	r3, [sp, #4]
 80a0e6e:	bd08      	pop	{r3, pc}
 80a0e70:	080601c8 	.word	0x080601c8

080a0e74 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a0e74:	b508      	push	{r3, lr}
 80a0e76:	4b02      	ldr	r3, [pc, #8]	; (80a0e80 <network_set_credentials+0xc>)
 80a0e78:	681b      	ldr	r3, [r3, #0]
 80a0e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0e7c:	9301      	str	r3, [sp, #4]
 80a0e7e:	bd08      	pop	{r3, pc}
 80a0e80:	080601c8 	.word	0x080601c8

080a0e84 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0e84:	b508      	push	{r3, lr}
 80a0e86:	4b02      	ldr	r3, [pc, #8]	; (80a0e90 <network_set_listen_timeout+0xc>)
 80a0e88:	681b      	ldr	r3, [r3, #0]
 80a0e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e8c:	9301      	str	r3, [sp, #4]
 80a0e8e:	bd08      	pop	{r3, pc}
 80a0e90:	080601c8 	.word	0x080601c8

080a0e94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0e94:	b508      	push	{r3, lr}
 80a0e96:	4b02      	ldr	r3, [pc, #8]	; (80a0ea0 <network_get_listen_timeout+0xc>)
 80a0e98:	681b      	ldr	r3, [r3, #0]
 80a0e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e9c:	9301      	str	r3, [sp, #4]
 80a0e9e:	bd08      	pop	{r3, pc}
 80a0ea0:	080601c8 	.word	0x080601c8

080a0ea4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0ea4:	b508      	push	{r3, lr}
 80a0ea6:	4b02      	ldr	r3, [pc, #8]	; (80a0eb0 <spark_process+0xc>)
 80a0ea8:	681b      	ldr	r3, [r3, #0]
 80a0eaa:	689b      	ldr	r3, [r3, #8]
 80a0eac:	9301      	str	r3, [sp, #4]
 80a0eae:	bd08      	pop	{r3, pc}
 80a0eb0:	080601cc 	.word	0x080601cc

080a0eb4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a0eb4:	b508      	push	{r3, lr}
 80a0eb6:	4b02      	ldr	r3, [pc, #8]	; (80a0ec0 <spark_cloud_flag_connect+0xc>)
 80a0eb8:	681b      	ldr	r3, [r3, #0]
 80a0eba:	68db      	ldr	r3, [r3, #12]
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	bd08      	pop	{r3, pc}
 80a0ec0:	080601cc 	.word	0x080601cc

080a0ec4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0ec4:	b508      	push	{r3, lr}
 80a0ec6:	4b02      	ldr	r3, [pc, #8]	; (80a0ed0 <spark_cloud_flag_connected+0xc>)
 80a0ec8:	681b      	ldr	r3, [r3, #0]
 80a0eca:	695b      	ldr	r3, [r3, #20]
 80a0ecc:	9301      	str	r3, [sp, #4]
 80a0ece:	bd08      	pop	{r3, pc}
 80a0ed0:	080601cc 	.word	0x080601cc

080a0ed4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0ed4:	b508      	push	{r3, lr}
 80a0ed6:	4b02      	ldr	r3, [pc, #8]	; (80a0ee0 <spark_send_event+0xc>)
 80a0ed8:	681b      	ldr	r3, [r3, #0]
 80a0eda:	6a1b      	ldr	r3, [r3, #32]
 80a0edc:	9301      	str	r3, [sp, #4]
 80a0ede:	bd08      	pop	{r3, pc}
 80a0ee0:	080601cc 	.word	0x080601cc

080a0ee4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0ee4:	b508      	push	{r3, lr}
 80a0ee6:	4b02      	ldr	r3, [pc, #8]	; (80a0ef0 <spark_sync_time_pending+0xc>)
 80a0ee8:	681b      	ldr	r3, [r3, #0]
 80a0eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eec:	9301      	str	r3, [sp, #4]
 80a0eee:	bd08      	pop	{r3, pc}
 80a0ef0:	080601cc 	.word	0x080601cc

080a0ef4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0ef4:	b508      	push	{r3, lr}
 80a0ef6:	4b02      	ldr	r3, [pc, #8]	; (80a0f00 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0ef8:	681b      	ldr	r3, [r3, #0]
 80a0efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0efc:	9301      	str	r3, [sp, #4]
 80a0efe:	bd08      	pop	{r3, pc}
 80a0f00:	080601cc 	.word	0x080601cc

080a0f04 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0f04:	b508      	push	{r3, lr}
 80a0f06:	4b02      	ldr	r3, [pc, #8]	; (80a0f10 <malloc+0xc>)
 80a0f08:	681b      	ldr	r3, [r3, #0]
 80a0f0a:	681b      	ldr	r3, [r3, #0]
 80a0f0c:	9301      	str	r3, [sp, #4]
 80a0f0e:	bd08      	pop	{r3, pc}
 80a0f10:	080601a0 	.word	0x080601a0

080a0f14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0f14:	b508      	push	{r3, lr}
 80a0f16:	4b02      	ldr	r3, [pc, #8]	; (80a0f20 <free+0xc>)
 80a0f18:	681b      	ldr	r3, [r3, #0]
 80a0f1a:	685b      	ldr	r3, [r3, #4]
 80a0f1c:	9301      	str	r3, [sp, #4]
 80a0f1e:	bd08      	pop	{r3, pc}
 80a0f20:	080601a0 	.word	0x080601a0

080a0f24 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0f24:	b508      	push	{r3, lr}
 80a0f26:	4b02      	ldr	r3, [pc, #8]	; (80a0f30 <realloc+0xc>)
 80a0f28:	681b      	ldr	r3, [r3, #0]
 80a0f2a:	689b      	ldr	r3, [r3, #8]
 80a0f2c:	9301      	str	r3, [sp, #4]
 80a0f2e:	bd08      	pop	{r3, pc}
 80a0f30:	080601a0 	.word	0x080601a0

080a0f34 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0f34:	b508      	push	{r3, lr}
 80a0f36:	4b02      	ldr	r3, [pc, #8]	; (80a0f40 <siscanf+0xc>)
 80a0f38:	681b      	ldr	r3, [r3, #0]
 80a0f3a:	699b      	ldr	r3, [r3, #24]
 80a0f3c:	9301      	str	r3, [sp, #4]
 80a0f3e:	bd08      	pop	{r3, pc}
 80a0f40:	080601a0 	.word	0x080601a0

080a0f44 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0f44:	b508      	push	{r3, lr}
 80a0f46:	4b02      	ldr	r3, [pc, #8]	; (80a0f50 <abort+0xc>)
 80a0f48:	681b      	ldr	r3, [r3, #0]
 80a0f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0f4c:	9301      	str	r3, [sp, #4]
 80a0f4e:	bd08      	pop	{r3, pc}
 80a0f50:	080601a0 	.word	0x080601a0

080a0f54 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0f54:	b508      	push	{r3, lr}
 80a0f56:	4b02      	ldr	r3, [pc, #8]	; (80a0f60 <_malloc_r+0xc>)
 80a0f58:	681b      	ldr	r3, [r3, #0]
 80a0f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0f5c:	9301      	str	r3, [sp, #4]
 80a0f5e:	bd08      	pop	{r3, pc}
 80a0f60:	080601a0 	.word	0x080601a0

080a0f64 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0f64:	4770      	bx	lr

080a0f66 <_ZN8SPIClassD0Ev>:
 80a0f66:	b510      	push	{r4, lr}
 80a0f68:	4604      	mov	r4, r0
 80a0f6a:	2110      	movs	r1, #16
 80a0f6c:	f001 fa7b 	bl	80a2466 <_ZdlPvj>
 80a0f70:	4620      	mov	r0, r4
 80a0f72:	bd10      	pop	{r4, pc}

080a0f74 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0f74:	b570      	push	{r4, r5, r6, lr}
 80a0f76:	4604      	mov	r4, r0
 80a0f78:	460e      	mov	r6, r1
 80a0f7a:	4b07      	ldr	r3, [pc, #28]	; (80a0f98 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0f7c:	2500      	movs	r5, #0
 80a0f7e:	6003      	str	r3, [r0, #0]
 80a0f80:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0f84:	f7ff fe10 	bl	80a0ba8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0f88:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0f8a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0f8c:	f7ff fdcc 	bl	80a0b28 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0f90:	60a5      	str	r5, [r4, #8]
}
 80a0f92:	4620      	mov	r0, r4
 80a0f94:	bd70      	pop	{r4, r5, r6, pc}
 80a0f96:	bf00      	nop
 80a0f98:	080a40d0 	.word	0x080a40d0

080a0f9c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0f9c:	7900      	ldrb	r0, [r0, #4]
 80a0f9e:	f7ff bdcb 	b.w	80a0b38 <HAL_SPI_Is_Enabled>
	...

080a0fa4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0fa8:	4b03      	ldr	r3, [pc, #12]	; (80a0fb8 <_GLOBAL__sub_I_System+0x14>)
 80a0faa:	2000      	movs	r0, #0
 80a0fac:	7018      	strb	r0, [r3, #0]
 80a0fae:	8058      	strh	r0, [r3, #2]
 80a0fb0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0fb2:	f7ff bedb 	b.w	80a0d6c <set_system_mode>
 80a0fb6:	bf00      	nop
 80a0fb8:	2000011a 	.word	0x2000011a

080a0fbc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0fbc:	b510      	push	{r4, lr}
 80a0fbe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0fc0:	f002 fb33 	bl	80a362a <strlen>
 80a0fc4:	3801      	subs	r0, #1
 80a0fc6:	1823      	adds	r3, r4, r0
 80a0fc8:	4620      	mov	r0, r4
	while(i<j){
 80a0fca:	4298      	cmp	r0, r3
 80a0fcc:	d206      	bcs.n	80a0fdc <_Z11str_reversePc+0x20>
		c = *i;
 80a0fce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0fd0:	7819      	ldrb	r1, [r3, #0]
 80a0fd2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0fd6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a0fda:	e7f6      	b.n	80a0fca <_Z11str_reversePc+0xe>
 80a0fdc:	bd10      	pop	{r4, pc}

080a0fde <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0fde:	b570      	push	{r4, r5, r6, lr}
 80a0fe0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0fe2:	1e91      	subs	r1, r2, #2
 80a0fe4:	2922      	cmp	r1, #34	; 0x22
 80a0fe6:	d820      	bhi.n	80a102a <ultoa+0x4c>
 80a0fe8:	4625      	mov	r5, r4
 80a0fea:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0fec:	b910      	cbnz	r0, 80a0ff4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0fee:	4423      	add	r3, r4
            *ptr++ = '0';
 80a0ff0:	2230      	movs	r2, #48	; 0x30
 80a0ff2:	e00e      	b.n	80a1012 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0ff4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0ff8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0ffc:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0ffe:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1000:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1004:	bf94      	ite	ls
 80a1006:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1008:	3157      	addhi	r1, #87	; 0x57
 80a100a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a100e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1010:	e7eb      	b.n	80a0fea <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1012:	4299      	cmp	r1, r3
 80a1014:	d202      	bcs.n	80a101c <ultoa+0x3e>
            *ptr++ = '0';
 80a1016:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a101a:	e7fa      	b.n	80a1012 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a101c:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a101e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a1020:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a1022:	f7ff ffcb 	bl	80a0fbc <_Z11str_reversePc>
	return buffer;
 80a1026:	4620      	mov	r0, r4
 80a1028:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a102a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a102c:	bd70      	pop	{r4, r5, r6, pc}

080a102e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a102e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1030:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1032:	460c      	mov	r4, r1
 80a1034:	4615      	mov	r5, r2
	if(a<0){
 80a1036:	da0b      	bge.n	80a1050 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a103c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1040:	bf14      	ite	ne
 80a1042:	4258      	negne	r0, r3
 80a1044:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1046:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1048:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a104a:	462a      	mov	r2, r5
 80a104c:	4419      	add	r1, r3
 80a104e:	e000      	b.n	80a1052 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a1050:	2301      	movs	r3, #1
 80a1052:	f7ff ffc4 	bl	80a0fde <ultoa>
	}
	return buffer;
}
 80a1056:	4620      	mov	r0, r4
 80a1058:	bd38      	pop	{r3, r4, r5, pc}
	...

080a105c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a105c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1060:	4680      	mov	r8, r0
 80a1062:	460d      	mov	r5, r1
 80a1064:	4617      	mov	r7, r2
 80a1066:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a1068:	2200      	movs	r2, #0
 80a106a:	2300      	movs	r3, #0
 80a106c:	4640      	mov	r0, r8
 80a106e:	4629      	mov	r1, r5
 80a1070:	f001 ff70 	bl	80a2f54 <__aeabi_dcmplt>
 80a1074:	b120      	cbz	r0, 80a1080 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1076:	232d      	movs	r3, #45	; 0x2d
 80a1078:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a107a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a107e:	3601      	adds	r6, #1
 80a1080:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1082:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1084:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1086:	b2d9      	uxtb	r1, r3
 80a1088:	428f      	cmp	r7, r1
 80a108a:	d902      	bls.n	80a1092 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a108c:	4354      	muls	r4, r2
 80a108e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1090:	e7f9      	b.n	80a1086 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a1092:	4620      	mov	r0, r4
 80a1094:	f001 fc86 	bl	80a29a4 <__aeabi_i2d>
 80a1098:	4642      	mov	r2, r8
 80a109a:	462b      	mov	r3, r5
 80a109c:	f001 fce8 	bl	80a2a70 <__aeabi_dmul>
 80a10a0:	4682      	mov	sl, r0
 80a10a2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a10a4:	f001 ffb6 	bl	80a3014 <__aeabi_d2ulz>
 80a10a8:	4680      	mov	r8, r0
 80a10aa:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a10ac:	f001 fcaa 	bl	80a2a04 <__aeabi_ul2d>
 80a10b0:	4602      	mov	r2, r0
 80a10b2:	460b      	mov	r3, r1
 80a10b4:	4650      	mov	r0, sl
 80a10b6:	4659      	mov	r1, fp
 80a10b8:	f001 fb26 	bl	80a2708 <__aeabi_dsub>
 80a10bc:	2200      	movs	r2, #0
 80a10be:	4b17      	ldr	r3, [pc, #92]	; (80a111c <_Z4dtoadhPc+0xc0>)
 80a10c0:	f001 ff5c 	bl	80a2f7c <__aeabi_dcmpge>
 80a10c4:	b118      	cbz	r0, 80a10ce <_Z4dtoadhPc+0x72>
        fixed++;
 80a10c6:	f118 0801 	adds.w	r8, r8, #1
 80a10ca:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a10ce:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a10d0:	4622      	mov	r2, r4
 80a10d2:	462b      	mov	r3, r5
 80a10d4:	4640      	mov	r0, r8
 80a10d6:	4649      	mov	r1, r9
 80a10d8:	f001 ff84 	bl	80a2fe4 <__aeabi_uldivmod>
 80a10dc:	2301      	movs	r3, #1
 80a10de:	220a      	movs	r2, #10
 80a10e0:	4631      	mov	r1, r6
 80a10e2:	f7ff ff7c 	bl	80a0fde <ultoa>
    if (prec) {
 80a10e6:	b1af      	cbz	r7, 80a1114 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a10e8:	4630      	mov	r0, r6
 80a10ea:	f002 fa9e 	bl	80a362a <strlen>
        *sout++ = '.';
 80a10ee:	232e      	movs	r3, #46	; 0x2e
 80a10f0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a10f2:	3001      	adds	r0, #1
 80a10f4:	4406      	add	r6, r0
 80a10f6:	4622      	mov	r2, r4
 80a10f8:	462b      	mov	r3, r5
 80a10fa:	4640      	mov	r0, r8
 80a10fc:	4649      	mov	r1, r9
 80a10fe:	f001 ff71 	bl	80a2fe4 <__aeabi_uldivmod>
 80a1102:	463b      	mov	r3, r7
 80a1104:	4610      	mov	r0, r2
 80a1106:	4631      	mov	r1, r6
 80a1108:	220a      	movs	r2, #10
    }
}
 80a110a:	b001      	add	sp, #4
 80a110c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a1110:	f7ff bf65 	b.w	80a0fde <ultoa>
    }
}
 80a1114:	b001      	add	sp, #4
 80a1116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a111a:	bf00      	nop
 80a111c:	3fe00000 	.word	0x3fe00000

080a1120 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1120:	b510      	push	{r4, lr}
 80a1122:	4604      	mov	r4, r0
{
	free(buffer);
 80a1124:	6800      	ldr	r0, [r0, #0]
 80a1126:	f7ff fef5 	bl	80a0f14 <free>
}
 80a112a:	4620      	mov	r0, r4
 80a112c:	bd10      	pop	{r4, pc}

080a112e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a112e:	b510      	push	{r4, lr}
 80a1130:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1132:	6800      	ldr	r0, [r0, #0]
 80a1134:	b108      	cbz	r0, 80a113a <_ZN6String10invalidateEv+0xc>
 80a1136:	f7ff feed 	bl	80a0f14 <free>
	buffer = NULL;
 80a113a:	2300      	movs	r3, #0
 80a113c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a113e:	60a3      	str	r3, [r4, #8]
 80a1140:	6063      	str	r3, [r4, #4]
 80a1142:	bd10      	pop	{r4, pc}

080a1144 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1144:	b538      	push	{r3, r4, r5, lr}
 80a1146:	4604      	mov	r4, r0
 80a1148:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a114a:	6800      	ldr	r0, [r0, #0]
 80a114c:	3101      	adds	r1, #1
 80a114e:	f7ff fee9 	bl	80a0f24 <realloc>
	if (newbuffer) {
 80a1152:	b110      	cbz	r0, 80a115a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1154:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1158:	2001      	movs	r0, #1
	}
	return 0;
}
 80a115a:	bd38      	pop	{r3, r4, r5, pc}

080a115c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a115c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a115e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1160:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1162:	b113      	cbz	r3, 80a116a <_ZN6String7reserveEj+0xe>
 80a1164:	6843      	ldr	r3, [r0, #4]
 80a1166:	428b      	cmp	r3, r1
 80a1168:	d207      	bcs.n	80a117a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a116a:	4620      	mov	r0, r4
 80a116c:	f7ff ffea 	bl	80a1144 <_ZN6String12changeBufferEj>
 80a1170:	b120      	cbz	r0, 80a117c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1172:	68a3      	ldr	r3, [r4, #8]
 80a1174:	b90b      	cbnz	r3, 80a117a <_ZN6String7reserveEj+0x1e>
 80a1176:	6822      	ldr	r2, [r4, #0]
 80a1178:	7013      	strb	r3, [r2, #0]
 80a117a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a117c:	bd10      	pop	{r4, pc}

080a117e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a117e:	b570      	push	{r4, r5, r6, lr}
 80a1180:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1182:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1184:	4604      	mov	r4, r0
 80a1186:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1188:	f7ff ffe8 	bl	80a115c <_ZN6String7reserveEj>
 80a118c:	b918      	cbnz	r0, 80a1196 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a118e:	4620      	mov	r0, r4
 80a1190:	f7ff ffcd 	bl	80a112e <_ZN6String10invalidateEv>
		return *this;
 80a1194:	e009      	b.n	80a11aa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1196:	462a      	mov	r2, r5
 80a1198:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a119a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a119c:	6820      	ldr	r0, [r4, #0]
 80a119e:	f002 f9db 	bl	80a3558 <memcpy>
	buffer[len] = 0;
 80a11a2:	6822      	ldr	r2, [r4, #0]
 80a11a4:	68a3      	ldr	r3, [r4, #8]
 80a11a6:	2100      	movs	r1, #0
 80a11a8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a11aa:	4620      	mov	r0, r4
 80a11ac:	bd70      	pop	{r4, r5, r6, pc}

080a11ae <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a11ae:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11b0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a11b2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a11b6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a11b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a11ba:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a11bc:	460d      	mov	r5, r1
 80a11be:	b139      	cbz	r1, 80a11d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a11c0:	4608      	mov	r0, r1
 80a11c2:	f002 fa32 	bl	80a362a <strlen>
 80a11c6:	4629      	mov	r1, r5
 80a11c8:	4602      	mov	r2, r0
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	f7ff ffd7 	bl	80a117e <_ZN6String4copyEPKcj>
}
 80a11d0:	4620      	mov	r0, r4
 80a11d2:	bd38      	pop	{r3, r4, r5, pc}

080a11d4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a11d4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a11d6:	b510      	push	{r4, lr}
 80a11d8:	460b      	mov	r3, r1
 80a11da:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a11dc:	d007      	beq.n	80a11ee <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a11de:	6809      	ldr	r1, [r1, #0]
 80a11e0:	b119      	cbz	r1, 80a11ea <_ZN6StringaSERKS_+0x16>
 80a11e2:	689a      	ldr	r2, [r3, #8]
 80a11e4:	f7ff ffcb 	bl	80a117e <_ZN6String4copyEPKcj>
 80a11e8:	e001      	b.n	80a11ee <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a11ea:	f7ff ffa0 	bl	80a112e <_ZN6String10invalidateEv>

	return *this;
}
 80a11ee:	4620      	mov	r0, r4
 80a11f0:	bd10      	pop	{r4, pc}

080a11f2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a11f2:	b510      	push	{r4, lr}
 80a11f4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11f6:	2300      	movs	r3, #0
 80a11f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a11fa:	6043      	str	r3, [r0, #4]
	len = 0;
 80a11fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a11fe:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1200:	f7ff ffe8 	bl	80a11d4 <_ZN6StringaSERKS_>
}
 80a1204:	4620      	mov	r0, r4
 80a1206:	bd10      	pop	{r4, pc}

080a1208 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1208:	b538      	push	{r3, r4, r5, lr}
 80a120a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a120c:	460c      	mov	r4, r1
 80a120e:	b141      	cbz	r1, 80a1222 <_ZN6StringaSEPKc+0x1a>
 80a1210:	4608      	mov	r0, r1
 80a1212:	f002 fa0a 	bl	80a362a <strlen>
 80a1216:	4621      	mov	r1, r4
 80a1218:	4602      	mov	r2, r0
 80a121a:	4628      	mov	r0, r5
 80a121c:	f7ff ffaf 	bl	80a117e <_ZN6String4copyEPKcj>
 80a1220:	e001      	b.n	80a1226 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1222:	f7ff ff84 	bl	80a112e <_ZN6String10invalidateEv>

	return *this;
}
 80a1226:	4628      	mov	r0, r5
 80a1228:	bd38      	pop	{r3, r4, r5, pc}

080a122a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a122a:	b510      	push	{r4, lr}
 80a122c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a122e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1230:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1232:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1234:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1236:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1238:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a123a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a123c:	a901      	add	r1, sp, #4
 80a123e:	f7ff fef6 	bl	80a102e <itoa>
	*this = buf;
 80a1242:	a901      	add	r1, sp, #4
 80a1244:	4620      	mov	r0, r4
 80a1246:	f7ff ffdf 	bl	80a1208 <_ZN6StringaSEPKc>
}
 80a124a:	4620      	mov	r0, r4
 80a124c:	b00a      	add	sp, #40	; 0x28
 80a124e:	bd10      	pop	{r4, pc}

080a1250 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a1250:	b510      	push	{r4, lr}
 80a1252:	4604      	mov	r4, r0
 80a1254:	b08a      	sub	sp, #40	; 0x28
 80a1256:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1258:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a125a:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a125c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a125e:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1260:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1262:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a1264:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a1268:	ab01      	add	r3, sp, #4
 80a126a:	f7ff fef7 	bl	80a105c <_Z4dtoadhPc>
        *this = buf;
 80a126e:	a901      	add	r1, sp, #4
 80a1270:	4620      	mov	r0, r4
 80a1272:	f7ff ffc9 	bl	80a1208 <_ZN6StringaSEPKc>
}
 80a1276:	4620      	mov	r0, r4
 80a1278:	b00a      	add	sp, #40	; 0x28
 80a127a:	bd10      	pop	{r4, pc}

080a127c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a127c:	b570      	push	{r4, r5, r6, lr}
 80a127e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1280:	460e      	mov	r6, r1
 80a1282:	b909      	cbnz	r1, 80a1288 <_ZN6String6concatEPKcj+0xc>
 80a1284:	2000      	movs	r0, #0
 80a1286:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1288:	b16a      	cbz	r2, 80a12a6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a128a:	6883      	ldr	r3, [r0, #8]
 80a128c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a128e:	4629      	mov	r1, r5
 80a1290:	f7ff ff64 	bl	80a115c <_ZN6String7reserveEj>
 80a1294:	2800      	cmp	r0, #0
 80a1296:	d0f5      	beq.n	80a1284 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1298:	6820      	ldr	r0, [r4, #0]
 80a129a:	68a3      	ldr	r3, [r4, #8]
 80a129c:	4631      	mov	r1, r6
 80a129e:	4418      	add	r0, r3
 80a12a0:	f002 f9a0 	bl	80a35e4 <strcpy>
	len = newlen;
 80a12a4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a12a6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a12a8:	bd70      	pop	{r4, r5, r6, pc}

080a12aa <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a12aa:	688a      	ldr	r2, [r1, #8]
 80a12ac:	6809      	ldr	r1, [r1, #0]
 80a12ae:	f7ff bfe5 	b.w	80a127c <_ZN6String6concatEPKcj>

080a12b2 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a12b2:	b538      	push	{r3, r4, r5, lr}
 80a12b4:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a12b6:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a12b8:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a12ba:	b141      	cbz	r1, 80a12ce <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a12bc:	f002 f9b5 	bl	80a362a <strlen>
 80a12c0:	4621      	mov	r1, r4
 80a12c2:	4602      	mov	r2, r0
 80a12c4:	4628      	mov	r0, r5
}
 80a12c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a12ca:	f7ff bfd7 	b.w	80a127c <_ZN6String6concatEPKcj>
}
 80a12ce:	bd38      	pop	{r3, r4, r5, pc}

080a12d0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a12d0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a12d2:	688a      	ldr	r2, [r1, #8]
 80a12d4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a12d6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a12d8:	f7ff ffd0 	bl	80a127c <_ZN6String6concatEPKcj>
 80a12dc:	b910      	cbnz	r0, 80a12e4 <_ZplRK15StringSumHelperRK6String+0x14>
 80a12de:	4620      	mov	r0, r4
 80a12e0:	f7ff ff25 	bl	80a112e <_ZN6String10invalidateEv>
	return a;
}
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	bd10      	pop	{r4, pc}

080a12e8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a12e8:	b538      	push	{r3, r4, r5, lr}
 80a12ea:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a12ec:	460d      	mov	r5, r1
 80a12ee:	b141      	cbz	r1, 80a1302 <_ZplRK15StringSumHelperPKc+0x1a>
 80a12f0:	4608      	mov	r0, r1
 80a12f2:	f002 f99a 	bl	80a362a <strlen>
 80a12f6:	4629      	mov	r1, r5
 80a12f8:	4602      	mov	r2, r0
 80a12fa:	4620      	mov	r0, r4
 80a12fc:	f7ff ffbe 	bl	80a127c <_ZN6String6concatEPKcj>
 80a1300:	b910      	cbnz	r0, 80a1308 <_ZplRK15StringSumHelperPKc+0x20>
 80a1302:	4620      	mov	r0, r4
 80a1304:	f7ff ff13 	bl	80a112e <_ZN6String10invalidateEv>
	return a;
}
 80a1308:	4620      	mov	r0, r4
 80a130a:	bd38      	pop	{r3, r4, r5, pc}

080a130c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a130e:	4606      	mov	r6, r0
 80a1310:	460d      	mov	r5, r1
 80a1312:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1314:	2400      	movs	r4, #0
  while (size--) {
 80a1316:	42bd      	cmp	r5, r7
 80a1318:	d00c      	beq.n	80a1334 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a131a:	6833      	ldr	r3, [r6, #0]
 80a131c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1320:	689b      	ldr	r3, [r3, #8]
 80a1322:	4630      	mov	r0, r6
 80a1324:	4798      	blx	r3
     if (chunk>=0)
 80a1326:	2800      	cmp	r0, #0
 80a1328:	db01      	blt.n	80a132e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a132a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a132c:	e7f3      	b.n	80a1316 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a132e:	2c00      	cmp	r4, #0
 80a1330:	bf08      	it	eq
 80a1332:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1334:	4620      	mov	r0, r4
 80a1336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1338 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1338:	b570      	push	{r4, r5, r6, lr}
 80a133a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a133c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a133e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1340:	b149      	cbz	r1, 80a1356 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1342:	f002 f972 	bl	80a362a <strlen>
 80a1346:	682b      	ldr	r3, [r5, #0]
 80a1348:	4602      	mov	r2, r0
 80a134a:	4621      	mov	r1, r4
 80a134c:	4628      	mov	r0, r5
    }
 80a134e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1352:	68db      	ldr	r3, [r3, #12]
 80a1354:	4718      	bx	r3
    }
 80a1356:	bd70      	pop	{r4, r5, r6, pc}

080a1358 <_ZN5Print5printEPKc>:
 80a1358:	b508      	push	{r3, lr}
 80a135a:	f7ff ffed 	bl	80a1338 <_ZN5Print5writeEPKc>
 80a135e:	bd08      	pop	{r3, pc}

080a1360 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1360:	6803      	ldr	r3, [r0, #0]
 80a1362:	689b      	ldr	r3, [r3, #8]
 80a1364:	4718      	bx	r3

080a1366 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1366:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1368:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a136a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a136c:	f7ff fff8 	bl	80a1360 <_ZN5Print5printEc>
  n += print('\n');
 80a1370:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1372:	4604      	mov	r4, r0
  n += print('\n');
 80a1374:	4628      	mov	r0, r5
 80a1376:	f7ff fff3 	bl	80a1360 <_ZN5Print5printEc>
  return n;
}
 80a137a:	4420      	add	r0, r4
 80a137c:	bd38      	pop	{r3, r4, r5, pc}

080a137e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a137e:	b538      	push	{r3, r4, r5, lr}
 80a1380:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1382:	f7ff ffd9 	bl	80a1338 <_ZN5Print5writeEPKc>
 80a1386:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1388:	4628      	mov	r0, r5
 80a138a:	f7ff ffec 	bl	80a1366 <_ZN5Print7printlnEv>
  return n;
}
 80a138e:	4420      	add	r0, r4
 80a1390:	bd38      	pop	{r3, r4, r5, pc}

080a1392 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1392:	2a01      	cmp	r2, #1
 80a1394:	bf98      	it	ls
 80a1396:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1398:	b530      	push	{r4, r5, lr}
 80a139a:	460b      	mov	r3, r1
 80a139c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a139e:	2100      	movs	r1, #0
 80a13a0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a13a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a13a8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a13ac:	fb05 3312 	mls	r3, r5, r2, r3
 80a13b0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a13b2:	2b09      	cmp	r3, #9
 80a13b4:	bf94      	ite	ls
 80a13b6:	3330      	addls	r3, #48	; 0x30
 80a13b8:	3337      	addhi	r3, #55	; 0x37
 80a13ba:	b2db      	uxtb	r3, r3
 80a13bc:	4621      	mov	r1, r4
 80a13be:	f804 3901 	strb.w	r3, [r4], #-1
 80a13c2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a13c4:	2d00      	cmp	r5, #0
 80a13c6:	d1ef      	bne.n	80a13a8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a13c8:	f7ff ffb6 	bl	80a1338 <_ZN5Print5writeEPKc>
}
 80a13cc:	b00b      	add	sp, #44	; 0x2c
 80a13ce:	bd30      	pop	{r4, r5, pc}

080a13d0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a13d0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a13d2:	b922      	cbnz	r2, 80a13de <_ZN5Print5printEmi+0xe>
 80a13d4:	6803      	ldr	r3, [r0, #0]
 80a13d6:	b2c9      	uxtb	r1, r1
 80a13d8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a13da:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a13dc:	4718      	bx	r3
  else return printNumber(n, base);
 80a13de:	b2d2      	uxtb	r2, r2
}
 80a13e0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a13e2:	f7ff bfd6 	b.w	80a1392 <_ZN5Print11printNumberEmh>

080a13e6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a13e6:	f7ff bff3 	b.w	80a13d0 <_ZN5Print5printEmi>

080a13ea <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a13ea:	2300      	movs	r3, #0
 80a13ec:	461a      	mov	r2, r3
 80a13ee:	4619      	mov	r1, r3
 80a13f0:	6840      	ldr	r0, [r0, #4]
 80a13f2:	f7ff bd1f 	b.w	80a0e34 <network_on>

080a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a13f6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a13f8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a13fa:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a13fc:	b17c      	cbz	r4, 80a141e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a13fe:	6863      	ldr	r3, [r4, #4]
 80a1400:	3b01      	subs	r3, #1
 80a1402:	6063      	str	r3, [r4, #4]
 80a1404:	b95b      	cbnz	r3, 80a141e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1406:	6823      	ldr	r3, [r4, #0]
 80a1408:	4620      	mov	r0, r4
 80a140a:	689b      	ldr	r3, [r3, #8]
 80a140c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a140e:	68a3      	ldr	r3, [r4, #8]
 80a1410:	3b01      	subs	r3, #1
 80a1412:	60a3      	str	r3, [r4, #8]
 80a1414:	b91b      	cbnz	r3, 80a141e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1416:	6823      	ldr	r3, [r4, #0]
 80a1418:	4620      	mov	r0, r4
 80a141a:	68db      	ldr	r3, [r3, #12]
 80a141c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a141e:	4628      	mov	r0, r5
 80a1420:	bd38      	pop	{r3, r4, r5, pc}

080a1422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1422:	680b      	ldr	r3, [r1, #0]
 80a1424:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1426:	b113      	cbz	r3, 80a142e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1428:	685a      	ldr	r2, [r3, #4]
 80a142a:	3201      	adds	r2, #1
 80a142c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a142e:	4770      	bx	lr

080a1430 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1430:	4a01      	ldr	r2, [pc, #4]	; (80a1438 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1432:	4b02      	ldr	r3, [pc, #8]	; (80a143c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1434:	601a      	str	r2, [r3, #0]
 80a1436:	4770      	bx	lr
 80a1438:	080a414e 	.word	0x080a414e
 80a143c:	20000120 	.word	0x20000120

080a1440 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a1442:	4b14      	ldr	r3, [pc, #80]	; (80a1494 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1444:	4f14      	ldr	r7, [pc, #80]	; (80a1498 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a1446:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a1448:	4b14      	ldr	r3, [pc, #80]	; (80a149c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a144a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a144c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a144e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a1450:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a1452:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a1454:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a1456:	d01b      	beq.n	80a1490 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a1458:	a80a      	add	r0, sp, #40	; 0x28
 80a145a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a145e:	f001 ff83 	bl	80a3368 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a1462:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1464:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a1466:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a1468:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a146c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1476:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a147a:	4c09      	ldr	r4, [pc, #36]	; (80a14a0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a147c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a1480:	ad01      	add	r5, sp, #4
 80a1482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a148a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a148c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a1490:	b00b      	add	sp, #44	; 0x2c
 80a1492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1494:	20000154 	.word	0x20000154
 80a1498:	20000150 	.word	0x20000150
 80a149c:	2000014c 	.word	0x2000014c
 80a14a0:	20000124 	.word	0x20000124

080a14a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a14a4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a14a6:	2000      	movs	r0, #0
 80a14a8:	f7ff fd1c 	bl	80a0ee4 <spark_sync_time_pending>
 80a14ac:	b128      	cbz	r0, 80a14ba <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14ae:	f7ff fd09 	bl	80a0ec4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a14b2:	f080 0001 	eor.w	r0, r0, #1
 80a14b6:	b2c0      	uxtb	r0, r0
 80a14b8:	bd08      	pop	{r3, pc}
 80a14ba:	2001      	movs	r0, #1
    }
 80a14bc:	bd08      	pop	{r3, pc}
	...

080a14c0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a14c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a14c2:	f7ff ffbd 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <_ZN9TimeClass5monthEl+0x10>)
 80a14c8:	6918      	ldr	r0, [r3, #16]
}
 80a14ca:	3001      	adds	r0, #1
 80a14cc:	bd08      	pop	{r3, pc}
 80a14ce:	bf00      	nop
 80a14d0:	20000124 	.word	0x20000124

080a14d4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a14d4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a14d6:	2000      	movs	r0, #0
 80a14d8:	f7ff fb4e 	bl	80a0b78 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a14dc:	4604      	mov	r4, r0
 80a14de:	b968      	cbnz	r0, 80a14fc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a14e0:	f7ff fc3c 	bl	80a0d5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a14e4:	2801      	cmp	r0, #1
 80a14e6:	d10b      	bne.n	80a1500 <_ZN9TimeClass7isValidEv+0x2c>
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f7ff fc67 	bl	80a0dbc <system_thread_get_state>
 80a14ee:	b938      	cbnz	r0, 80a1500 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a14f0:	f7ff ffd8 	bl	80a14a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a14f4:	b930      	cbnz	r0, 80a1504 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a14f6:	f7ff fcd5 	bl	80a0ea4 <spark_process>
 80a14fa:	e7f9      	b.n	80a14f0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a14fc:	2001      	movs	r0, #1
 80a14fe:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a1500:	2000      	movs	r0, #0
 80a1502:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a1504:	f7ff ffce 	bl	80a14a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1508:	2000      	movs	r0, #0
 80a150a:	f7ff fb35 	bl	80a0b78 <HAL_RTC_Time_Is_Valid>
 80a150e:	3000      	adds	r0, #0
 80a1510:	bf18      	it	ne
 80a1512:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a1514:	bd10      	pop	{r4, pc}

080a1516 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a1516:	b508      	push	{r3, lr}
    (void)isValid();
 80a1518:	f7ff ffdc 	bl	80a14d4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a151c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a1520:	f7ff bb22 	b.w	80a0b68 <HAL_RTC_Get_UnixTime>

080a1524 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a1524:	b508      	push	{r3, lr}
	return hour(now());
 80a1526:	f7ff fff6 	bl	80a1516 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a152a:	f7ff ff89 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a152e:	4b01      	ldr	r3, [pc, #4]	; (80a1534 <_ZN9TimeClass4hourEv+0x10>)
 80a1530:	6898      	ldr	r0, [r3, #8]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	20000124 	.word	0x20000124

080a1538 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a1538:	b508      	push	{r3, lr}
	return minute(now());
 80a153a:	f7ff ffec 	bl	80a1516 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a153e:	f7ff ff7f 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a1542:	4b01      	ldr	r3, [pc, #4]	; (80a1548 <_ZN9TimeClass6minuteEv+0x10>)
 80a1544:	6858      	ldr	r0, [r3, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	20000124 	.word	0x20000124

080a154c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a154c:	b508      	push	{r3, lr}
	return second(now());
 80a154e:	f7ff ffe2 	bl	80a1516 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a1552:	f7ff ff75 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a1556:	4b01      	ldr	r3, [pc, #4]	; (80a155c <_ZN9TimeClass6secondEv+0x10>)
 80a1558:	6818      	ldr	r0, [r3, #0]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	20000124 	.word	0x20000124

080a1560 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a1560:	b508      	push	{r3, lr}
	return day(now());
 80a1562:	f7ff ffd8 	bl	80a1516 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a1566:	f7ff ff6b 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a156a:	4b01      	ldr	r3, [pc, #4]	; (80a1570 <_ZN9TimeClass3dayEv+0x10>)
 80a156c:	68d8      	ldr	r0, [r3, #12]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	20000124 	.word	0x20000124

080a1574 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a1574:	b508      	push	{r3, lr}
	return month(now());
 80a1576:	f7ff ffce 	bl	80a1516 <_ZN9TimeClass3nowEv>
}
 80a157a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a157e:	f7ff bf9f 	b.w	80a14c0 <_ZN9TimeClass5monthEl>
	...

080a1584 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80a1584:	b508      	push	{r3, lr}
	return year(now());
 80a1586:	f7ff ffc6 	bl	80a1516 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a158a:	f7ff ff59 	bl	80a1440 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80a158e:	4b01      	ldr	r3, [pc, #4]	; (80a1594 <_ZN9TimeClass4yearEv+0x10>)
 80a1590:	6958      	ldr	r0, [r3, #20]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	20000124 	.word	0x20000124

080a1598 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1598:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a159a:	681a      	ldr	r2, [r3, #0]
 80a159c:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a159e:	601a      	str	r2, [r3, #0]
 80a15a0:	4770      	bx	lr
 80a15a2:	bf00      	nop
 80a15a4:	20000014 	.word	0x20000014
 80a15a8:	20000148 	.word	0x20000148

080a15ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a15ac:	2100      	movs	r1, #0
 80a15ae:	f7ff bbe5 	b.w	80a0d7c <system_delay_ms>

080a15b2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a15b2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a15b4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a15b6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a15b8:	b113      	cbz	r3, 80a15c0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a15ba:	2203      	movs	r2, #3
 80a15bc:	4601      	mov	r1, r0
 80a15be:	4798      	blx	r3
    }
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	bd10      	pop	{r4, pc}

080a15c4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a15c4:	b510      	push	{r4, lr}
 80a15c6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a15c8:	f7ff fff3 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
 80a15cc:	4620      	mov	r0, r4
 80a15ce:	bd10      	pop	{r4, pc}

080a15d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a15d0:	b513      	push	{r0, r1, r4, lr}
 80a15d2:	460b      	mov	r3, r1
 80a15d4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a15d6:	c803      	ldmia	r0, {r0, r1}
 80a15d8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a15dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a15e0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a15e4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a15e8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a15ec:	b002      	add	sp, #8
 80a15ee:	bd10      	pop	{r4, pc}

080a15f0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a15f0:	4803      	ldr	r0, [pc, #12]	; (80a1600 <_GLOBAL__sub_I_RGB+0x10>)
 80a15f2:	2300      	movs	r3, #0
 80a15f4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a15f6:	4a03      	ldr	r2, [pc, #12]	; (80a1604 <_GLOBAL__sub_I_RGB+0x14>)
 80a15f8:	4903      	ldr	r1, [pc, #12]	; (80a1608 <_GLOBAL__sub_I_RGB+0x18>)
 80a15fa:	f000 bf2f 	b.w	80a245c <__aeabi_atexit>
 80a15fe:	bf00      	nop
 80a1600:	20000158 	.word	0x20000158
 80a1604:	200000d0 	.word	0x200000d0
 80a1608:	080a15c5 	.word	0x080a15c5

080a160c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a160c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a160e:	4b14      	ldr	r3, [pc, #80]	; (80a1660 <serialEventRun+0x54>)
 80a1610:	b133      	cbz	r3, 80a1620 <serialEventRun+0x14>
 80a1612:	f000 fc21 	bl	80a1e58 <_Z16_fetch_usbserialv>
 80a1616:	6803      	ldr	r3, [r0, #0]
 80a1618:	691b      	ldr	r3, [r3, #16]
 80a161a:	4798      	blx	r3
 80a161c:	2800      	cmp	r0, #0
 80a161e:	dc16      	bgt.n	80a164e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1620:	4b10      	ldr	r3, [pc, #64]	; (80a1664 <serialEventRun+0x58>)
 80a1622:	b133      	cbz	r3, 80a1632 <serialEventRun+0x26>
 80a1624:	f000 fcf0 	bl	80a2008 <_Z22__fetch_global_Serial1v>
 80a1628:	6803      	ldr	r3, [r0, #0]
 80a162a:	691b      	ldr	r3, [r3, #16]
 80a162c:	4798      	blx	r3
 80a162e:	2800      	cmp	r0, #0
 80a1630:	dc10      	bgt.n	80a1654 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1632:	4b0d      	ldr	r3, [pc, #52]	; (80a1668 <serialEventRun+0x5c>)
 80a1634:	b10b      	cbz	r3, 80a163a <serialEventRun+0x2e>
 80a1636:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a163a:	4b0c      	ldr	r3, [pc, #48]	; (80a166c <serialEventRun+0x60>)
 80a163c:	b17b      	cbz	r3, 80a165e <serialEventRun+0x52>
 80a163e:	f000 fc39 	bl	80a1eb4 <_Z17_fetch_usbserial1v>
 80a1642:	6803      	ldr	r3, [r0, #0]
 80a1644:	691b      	ldr	r3, [r3, #16]
 80a1646:	4798      	blx	r3
 80a1648:	2800      	cmp	r0, #0
 80a164a:	dc06      	bgt.n	80a165a <serialEventRun+0x4e>
 80a164c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a164e:	f3af 8000 	nop.w
 80a1652:	e7e5      	b.n	80a1620 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1654:	f3af 8000 	nop.w
 80a1658:	e7eb      	b.n	80a1632 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a165a:	f3af 8000 	nop.w
 80a165e:	bd08      	pop	{r3, pc}
	...

080a1670 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1670:	b508      	push	{r3, lr}
	serialEventRun();
 80a1672:	f7ff ffcb 	bl	80a160c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1676:	f7ff fa6f 	bl	80a0b58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a167a:	4b01      	ldr	r3, [pc, #4]	; (80a1680 <_post_loop+0x10>)
 80a167c:	6018      	str	r0, [r3, #0]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	200001f0 	.word	0x200001f0

080a1684 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1684:	4802      	ldr	r0, [pc, #8]	; (80a1690 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1686:	4a03      	ldr	r2, [pc, #12]	; (80a1694 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1688:	4903      	ldr	r1, [pc, #12]	; (80a1698 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a168a:	1a12      	subs	r2, r2, r0
 80a168c:	f001 bf64 	b.w	80a3558 <memcpy>
 80a1690:	40024000 	.word	0x40024000
 80a1694:	40024008 	.word	0x40024008
 80a1698:	080a4548 	.word	0x080a4548

080a169c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a169c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a169e:	2300      	movs	r3, #0
 80a16a0:	9300      	str	r3, [sp, #0]
 80a16a2:	461a      	mov	r2, r3
 80a16a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a16a8:	f7ff fb9a 	bl	80a0de0 <system_ctrl_set_result>
}
 80a16ac:	b003      	add	sp, #12
 80a16ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a16b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a16b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a16b6:	8843      	ldrh	r3, [r0, #2]
 80a16b8:	2b0a      	cmp	r3, #10
 80a16ba:	d008      	beq.n	80a16ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a16bc:	2b50      	cmp	r3, #80	; 0x50
 80a16be:	d109      	bne.n	80a16d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a16c0:	4b09      	ldr	r3, [pc, #36]	; (80a16e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a16c2:	681b      	ldr	r3, [r3, #0]
 80a16c4:	b13b      	cbz	r3, 80a16d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a16c6:	b003      	add	sp, #12
 80a16c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a16cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a16ce:	f7ff ffe5 	bl	80a169c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a16d2:	e006      	b.n	80a16e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a16d4:	2300      	movs	r3, #0
 80a16d6:	9300      	str	r3, [sp, #0]
 80a16d8:	461a      	mov	r2, r3
 80a16da:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a16de:	f7ff fb7f 	bl	80a0de0 <system_ctrl_set_result>
        break;
    }
}
 80a16e2:	b003      	add	sp, #12
 80a16e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a16e8:	20000168 	.word	0x20000168

080a16ec <module_user_init_hook>:

void module_user_init_hook()
{
 80a16ec:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a16ee:	4c10      	ldr	r4, [pc, #64]	; (80a1730 <module_user_init_hook+0x44>)
 80a16f0:	4d10      	ldr	r5, [pc, #64]	; (80a1734 <module_user_init_hook+0x48>)
 80a16f2:	6823      	ldr	r3, [r4, #0]
 80a16f4:	42ab      	cmp	r3, r5
 80a16f6:	4b10      	ldr	r3, [pc, #64]	; (80a1738 <module_user_init_hook+0x4c>)
 80a16f8:	bf0c      	ite	eq
 80a16fa:	2201      	moveq	r2, #1
 80a16fc:	2200      	movne	r2, #0
 80a16fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1700:	d002      	beq.n	80a1708 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1702:	f7ff ffbf 	bl	80a1684 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1706:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1708:	f7ff fa1e 	bl	80a0b48 <HAL_RNG_GetRandomNumber>
 80a170c:	4604      	mov	r4, r0
    srand(seed);
 80a170e:	f001 ff37 	bl	80a3580 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1712:	4b0a      	ldr	r3, [pc, #40]	; (80a173c <module_user_init_hook+0x50>)
 80a1714:	b113      	cbz	r3, 80a171c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1716:	4620      	mov	r0, r4
 80a1718:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a171c:	2100      	movs	r1, #0
 80a171e:	4807      	ldr	r0, [pc, #28]	; (80a173c <module_user_init_hook+0x50>)
 80a1720:	f7ff fbe8 	bl	80a0ef4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1728:	2100      	movs	r1, #0
 80a172a:	4805      	ldr	r0, [pc, #20]	; (80a1740 <module_user_init_hook+0x54>)
 80a172c:	f7ff bb4e 	b.w	80a0dcc <system_ctrl_set_app_request_handler>
 80a1730:	40024004 	.word	0x40024004
 80a1734:	9a271c1e 	.word	0x9a271c1e
 80a1738:	2000016c 	.word	0x2000016c
 80a173c:	00000000 	.word	0x00000000
 80a1740:	080a16b5 	.word	0x080a16b5

080a1744 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1744:	4770      	bx	lr

080a1746 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1746:	2000      	movs	r0, #0
 80a1748:	4770      	bx	lr

080a174a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a174a:	b510      	push	{r4, lr}
 80a174c:	4604      	mov	r4, r0
 80a174e:	2110      	movs	r1, #16
 80a1750:	f000 fe89 	bl	80a2466 <_ZdlPvj>
 80a1754:	4620      	mov	r0, r4
 80a1756:	bd10      	pop	{r4, pc}

080a1758 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1758:	b508      	push	{r3, lr}
      { delete this; }
 80a175a:	b108      	cbz	r0, 80a1760 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a175c:	f7ff fff5 	bl	80a174a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1760:	bd08      	pop	{r3, pc}

080a1762 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1762:	2200      	movs	r2, #0
 80a1764:	6002      	str	r2, [r0, #0]
 80a1766:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a176a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a176c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a176e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1772:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1774:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1776:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1778:	680c      	ldr	r4, [r1, #0]
 80a177a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a177c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a177e:	bd10      	pop	{r4, pc}

080a1780 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1780:	b510      	push	{r4, lr}
 80a1782:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1784:	6800      	ldr	r0, [r0, #0]
 80a1786:	f7ff fbc5 	bl	80a0f14 <free>
}
 80a178a:	4620      	mov	r0, r4
 80a178c:	bd10      	pop	{r4, pc}

080a178e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a178e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1790:	68c4      	ldr	r4, [r0, #12]
 80a1792:	b1f4      	cbz	r4, 80a17d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1794:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1796:	2b02      	cmp	r3, #2
 80a1798:	d103      	bne.n	80a17a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a179a:	f104 000c 	add.w	r0, r4, #12
 80a179e:	f7ff ffef 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a17a2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a17a4:	b135      	cbz	r5, 80a17b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a17a6:	4628      	mov	r0, r5
 80a17a8:	f7ff ff03 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
 80a17ac:	2110      	movs	r1, #16
 80a17ae:	4628      	mov	r0, r5
 80a17b0:	f000 fe59 	bl	80a2466 <_ZdlPvj>
 80a17b4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a17b6:	b135      	cbz	r5, 80a17c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a17b8:	4628      	mov	r0, r5
 80a17ba:	f7ff fefa 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
 80a17be:	2110      	movs	r1, #16
 80a17c0:	4628      	mov	r0, r5
 80a17c2:	f000 fe50 	bl	80a2466 <_ZdlPvj>
 80a17c6:	4620      	mov	r0, r4
 80a17c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a17cc:	2114      	movs	r1, #20
 80a17ce:	f000 be4a 	b.w	80a2466 <_ZdlPvj>
 80a17d2:	bd38      	pop	{r3, r4, r5, pc}

080a17d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a17d4:	b513      	push	{r0, r1, r4, lr}
 80a17d6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a17d8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a17dc:	2300      	movs	r3, #0
 80a17de:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a17e0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a17e2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a17e4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17e6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a17e8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a17ea:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17ec:	f7ff fe03 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17f0:	4620      	mov	r0, r4
 80a17f2:	b002      	add	sp, #8
 80a17f4:	bd10      	pop	{r4, pc}

080a17f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a17f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17f8:	460c      	mov	r4, r1
 80a17fa:	4606      	mov	r6, r0
 80a17fc:	460f      	mov	r7, r1
 80a17fe:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1802:	ad02      	add	r5, sp, #8
 80a1804:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1808:	4621      	mov	r1, r4
 80a180a:	a801      	add	r0, sp, #4
 80a180c:	f7ff fe09 	bl	80a1422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1810:	4629      	mov	r1, r5
 80a1812:	4630      	mov	r0, r6
 80a1814:	f7ff ffde 	bl	80a17d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1818:	a801      	add	r0, sp, #4
 80a181a:	f7ff fdec 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a181e:	4620      	mov	r0, r4
 80a1820:	f7ff fde9 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1824:	4638      	mov	r0, r7
 80a1826:	2108      	movs	r1, #8
 80a1828:	f000 fe1d 	bl	80a2466 <_ZdlPvj>
        return p;
    }
 80a182c:	4630      	mov	r0, r6
 80a182e:	b003      	add	sp, #12
 80a1830:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a1834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1834:	b538      	push	{r3, r4, r5, lr}
 80a1836:	2300      	movs	r3, #0
 80a1838:	4604      	mov	r4, r0
 80a183a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a183c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a183e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1840:	f7fe fc2d 	bl	80a009e <_Znwj>
 80a1844:	b128      	cbz	r0, 80a1852 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1846:	2301      	movs	r3, #1
 80a1848:	6043      	str	r3, [r0, #4]
 80a184a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a184c:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a184e:	60c5      	str	r5, [r0, #12]
 80a1850:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1852:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1854:	4620      	mov	r0, r4
 80a1856:	bd38      	pop	{r3, r4, r5, pc}
 80a1858:	080a41e8 	.word	0x080a41e8

080a185c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a185c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a185e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1860:	b90a      	cbnz	r2, 80a1866 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1862:	f000 fe02 	bl	80a246a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1866:	68c3      	ldr	r3, [r0, #12]
    }
 80a1868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a186c:	4718      	bx	r3

080a186e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a186e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1870:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1872:	f100 0110 	add.w	r1, r0, #16
 80a1876:	f7ff fff1 	bl	80a185c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a187a:	bd08      	pop	{r3, pc}

080a187c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a187c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a187e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1880:	b90a      	cbnz	r2, 80a1886 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1882:	f000 fdf2 	bl	80a246a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1886:	68c3      	ldr	r3, [r0, #12]
    }
 80a1888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a188c:	4718      	bx	r3

080a188e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a188e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1890:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1892:	f100 0110 	add.w	r1, r0, #16
 80a1896:	f7ff fff1 	bl	80a187c <_ZNKSt8functionIFvRKbEEclES1_>
 80a189a:	bd08      	pop	{r3, pc}

080a189c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a189c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a189e:	2300      	movs	r3, #0
 80a18a0:	6083      	str	r3, [r0, #8]
 80a18a2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18a4:	4604      	mov	r4, r0
 80a18a6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a18a8:	b12b      	cbz	r3, 80a18b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a18aa:	2202      	movs	r2, #2
 80a18ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a18ae:	68eb      	ldr	r3, [r5, #12]
 80a18b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a18b2:	68ab      	ldr	r3, [r5, #8]
 80a18b4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a18b6:	4620      	mov	r0, r4
 80a18b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a18bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18be:	b089      	sub	sp, #36	; 0x24
 80a18c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a18c2:	4668      	mov	r0, sp
 80a18c4:	f7ff ff4d 	bl	80a1762 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a18c8:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a18cc:	2300      	movs	r3, #0
 80a18ce:	f88d 3008 	strb.w	r3, [sp, #8]
 80a18d2:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a18d6:	2b00      	cmp	r3, #0
 80a18d8:	d103      	bne.n	80a18e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a18da:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a18de:	2900      	cmp	r1, #0
 80a18e0:	d1f7      	bne.n	80a18d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a18e2:	d002      	beq.n	80a18ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a18e4:	f88d 3008 	strb.w	r3, [sp, #8]
 80a18e8:	e063      	b.n	80a19b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a18ea:	f114 050c 	adds.w	r5, r4, #12
 80a18ee:	d003      	beq.n	80a18f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a18f0:	4669      	mov	r1, sp
 80a18f2:	4628      	mov	r0, r5
 80a18f4:	f7ff ff35 	bl	80a1762 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a18f8:	f3bf 8f5f 	dmb	sy
 80a18fc:	2301      	movs	r3, #1
 80a18fe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1900:	f3bf 8f5f 	dmb	sy
 80a1904:	f104 0308 	add.w	r3, r4, #8
 80a1908:	2000      	movs	r0, #0
 80a190a:	e853 6f00 	ldrex	r6, [r3]
 80a190e:	e843 0200 	strex	r2, r0, [r3]
 80a1912:	2a00      	cmp	r2, #0
 80a1914:	d1f9      	bne.n	80a190a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1916:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a191a:	2e00      	cmp	r6, #0
 80a191c:	d049      	beq.n	80a19b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a191e:	f7ff fa3d 	bl	80a0d9c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1922:	b120      	cbz	r0, 80a192e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1924:	4629      	mov	r1, r5
 80a1926:	4630      	mov	r0, r6
 80a1928:	f7ff ff98 	bl	80a185c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a192c:	e03a      	b.n	80a19a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a192e:	4631      	mov	r1, r6
 80a1930:	a802      	add	r0, sp, #8
 80a1932:	f7ff ffb3 	bl	80a189c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1936:	68e0      	ldr	r0, [r4, #12]
 80a1938:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a193c:	b108      	cbz	r0, 80a1942 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a193e:	f001 fe59 	bl	80a35f4 <strdup>
 80a1942:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1944:	2010      	movs	r0, #16
 80a1946:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a194a:	f7fe fba8 	bl	80a009e <_Znwj>
 80a194e:	4605      	mov	r5, r0
 80a1950:	b1e8      	cbz	r0, 80a198e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1952:	2700      	movs	r7, #0
 80a1954:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1956:	2018      	movs	r0, #24
 80a1958:	f7fe fba1 	bl	80a009e <_Znwj>
 80a195c:	4604      	mov	r4, r0
 80a195e:	b188      	cbz	r0, 80a1984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1960:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1962:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1964:	a802      	add	r0, sp, #8
 80a1966:	f7ff fe33 	bl	80a15d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a196a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a196c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a196e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1970:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1972:	9204      	str	r2, [sp, #16]
 80a1974:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1976:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1978:	60e3      	str	r3, [r4, #12]
 80a197a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a197e:	9205      	str	r2, [sp, #20]
 80a1980:	f7ff feef 	bl	80a1762 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1984:	4b0d      	ldr	r3, [pc, #52]	; (80a19bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1986:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1988:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a198a:	4b0d      	ldr	r3, [pc, #52]	; (80a19c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a198c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a198e:	a806      	add	r0, sp, #24
 80a1990:	f7ff fef6 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1994:	a802      	add	r0, sp, #8
 80a1996:	f7ff fe0c 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a199a:	2200      	movs	r2, #0
 80a199c:	4629      	mov	r1, r5
 80a199e:	4809      	ldr	r0, [pc, #36]	; (80a19c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a19a0:	f7ff fa04 	bl	80a0dac <application_thread_invoke>
 80a19a4:	4630      	mov	r0, r6
 80a19a6:	f7ff fe04 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a19aa:	2110      	movs	r1, #16
 80a19ac:	4630      	mov	r0, r6
 80a19ae:	f000 fd5a 	bl	80a2466 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a19b2:	4668      	mov	r0, sp
 80a19b4:	f7ff fee4 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
    }
 80a19b8:	b009      	add	sp, #36	; 0x24
 80a19ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a19bc:	080a186f 	.word	0x080a186f
 80a19c0:	080a1ae5 	.word	0x080a1ae5
 80a19c4:	080a2089 	.word	0x080a2089

080a19c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19cc:	b08b      	sub	sp, #44	; 0x2c
 80a19ce:	4606      	mov	r6, r0
 80a19d0:	460f      	mov	r7, r1
 80a19d2:	4690      	mov	r8, r2
 80a19d4:	4699      	mov	r9, r3
 80a19d6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a19da:	f7ff fa73 	bl	80a0ec4 <spark_cloud_flag_connected>
 80a19de:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a19e0:	4683      	mov	fp, r0
 80a19e2:	bb30      	cbnz	r0, 80a1a32 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a19e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a19e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a19ea:	a905      	add	r1, sp, #20
 80a19ec:	4628      	mov	r0, r5
 80a19ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a19f2:	f7ff feb6 	bl	80a1762 <_ZN8particle5ErrorC1EOS0_>
 80a19f6:	2014      	movs	r0, #20
 80a19f8:	f7fe fb51 	bl	80a009e <_Znwj>
 80a19fc:	4604      	mov	r4, r0
 80a19fe:	b158      	cbz	r0, 80a1a18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1a00:	2302      	movs	r3, #2
 80a1a02:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a04:	2301      	movs	r3, #1
 80a1a06:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a08:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1a0c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1a10:	4629      	mov	r1, r5
 80a1a12:	300c      	adds	r0, #12
 80a1a14:	f7ff fea5 	bl	80a1762 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1a18:	4630      	mov	r0, r6
 80a1a1a:	4621      	mov	r1, r4
 80a1a1c:	f840 4b04 	str.w	r4, [r0], #4
 80a1a20:	f7ff ff08 	bl	80a1834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1a24:	4628      	mov	r0, r5
 80a1a26:	f7ff feab 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1a2a:	a805      	add	r0, sp, #20
 80a1a2c:	f7ff fea8 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
 80a1a30:	e052      	b.n	80a1ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1a32:	2400      	movs	r4, #0
 80a1a34:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1a36:	2014      	movs	r0, #20
 80a1a38:	606c      	str	r4, [r5, #4]
 80a1a3a:	60ac      	str	r4, [r5, #8]
 80a1a3c:	9307      	str	r3, [sp, #28]
 80a1a3e:	f7fe fb2e 	bl	80a009e <_Znwj>
 80a1a42:	4601      	mov	r1, r0
 80a1a44:	b118      	cbz	r0, 80a1a4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1a46:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a48:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a4a:	6044      	str	r4, [r0, #4]
 80a1a4c:	6084      	str	r4, [r0, #8]
 80a1a4e:	a804      	add	r0, sp, #16
 80a1a50:	9103      	str	r1, [sp, #12]
 80a1a52:	f7ff feef 	bl	80a1834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1a56:	4b22      	ldr	r3, [pc, #136]	; (80a1ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1a58:	2008      	movs	r0, #8
 80a1a5a:	9308      	str	r3, [sp, #32]
 80a1a5c:	f7fe fb1f 	bl	80a009e <_Znwj>
 80a1a60:	4604      	mov	r4, r0
 80a1a62:	b128      	cbz	r0, 80a1a70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a64:	9b03      	ldr	r3, [sp, #12]
 80a1a66:	a904      	add	r1, sp, #16
 80a1a68:	f840 3b04 	str.w	r3, [r0], #4
 80a1a6c:	f7ff fcd9 	bl	80a1422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a70:	9500      	str	r5, [sp, #0]
 80a1a72:	fa5f f38a 	uxtb.w	r3, sl
 80a1a76:	464a      	mov	r2, r9
 80a1a78:	4641      	mov	r1, r8
 80a1a7a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1a7c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a7e:	f7ff fa29 	bl	80a0ed4 <spark_send_event>
 80a1a82:	b920      	cbnz	r0, 80a1a8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1a84:	9b03      	ldr	r3, [sp, #12]
 80a1a86:	785b      	ldrb	r3, [r3, #1]
 80a1a88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1a8c:	b183      	cbz	r3, 80a1ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1a8e:	9b03      	ldr	r3, [sp, #12]
 80a1a90:	a904      	add	r1, sp, #16
 80a1a92:	a806      	add	r0, sp, #24
 80a1a94:	9305      	str	r3, [sp, #20]
 80a1a96:	f7ff fcc4 	bl	80a1422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1a9a:	a905      	add	r1, sp, #20
 80a1a9c:	4630      	mov	r0, r6
 80a1a9e:	f7ff fe99 	bl	80a17d4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1aa2:	a806      	add	r0, sp, #24
 80a1aa4:	f7ff fca7 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1aa8:	a804      	add	r0, sp, #16
 80a1aaa:	f7ff fca4 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1aae:	e013      	b.n	80a1ad8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1ab0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1ab4:	a905      	add	r1, sp, #20
 80a1ab6:	a803      	add	r0, sp, #12
 80a1ab8:	9205      	str	r2, [sp, #20]
 80a1aba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1abe:	f7ff fefd 	bl	80a18bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1ac2:	a805      	add	r0, sp, #20
 80a1ac4:	f7ff fe5c 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1ac8:	a805      	add	r0, sp, #20
 80a1aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1acc:	f7ff fe93 	bl	80a17f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1ad0:	a806      	add	r0, sp, #24
 80a1ad2:	f7ff fc90 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ad6:	e7da      	b.n	80a1a8e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1ad8:	4630      	mov	r0, r6
 80a1ada:	b00b      	add	sp, #44	; 0x2c
 80a1adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1ae0:	080a1c55 	.word	0x080a1c55

080a1ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ae4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ae8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1aea:	d006      	beq.n	80a1afa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1aec:	2a03      	cmp	r2, #3
 80a1aee:	d017      	beq.n	80a1b20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1af0:	2a01      	cmp	r2, #1
 80a1af2:	d122      	bne.n	80a1b3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1af4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1af6:	6003      	str	r3, [r0, #0]
	      break;
 80a1af8:	e01f      	b.n	80a1b3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1afa:	2018      	movs	r0, #24
 80a1afc:	680e      	ldr	r6, [r1, #0]
 80a1afe:	f7fe face 	bl	80a009e <_Znwj>
 80a1b02:	4605      	mov	r5, r0
 80a1b04:	b150      	cbz	r0, 80a1b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b06:	4631      	mov	r1, r6
 80a1b08:	f7ff fec8 	bl	80a189c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1b0c:	6930      	ldr	r0, [r6, #16]
 80a1b0e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1b12:	b108      	cbz	r0, 80a1b18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1b14:	f001 fd6e 	bl	80a35f4 <strdup>
 80a1b18:	6128      	str	r0, [r5, #16]
 80a1b1a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b1c:	6025      	str	r5, [r4, #0]
 80a1b1e:	e00c      	b.n	80a1b3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b20:	6804      	ldr	r4, [r0, #0]
 80a1b22:	b154      	cbz	r4, 80a1b3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1b24:	f104 0010 	add.w	r0, r4, #16
 80a1b28:	f7ff fe2a 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b2c:	4620      	mov	r0, r4
 80a1b2e:	f7ff fd40 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b32:	2118      	movs	r1, #24
 80a1b34:	4620      	mov	r0, r4
 80a1b36:	f000 fc96 	bl	80a2466 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b3a:	2000      	movs	r0, #0
 80a1b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b3e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b3e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b40:	2300      	movs	r3, #0
 80a1b42:	6083      	str	r3, [r0, #8]
 80a1b44:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b46:	4604      	mov	r4, r0
 80a1b48:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1b4a:	b12b      	cbz	r3, 80a1b58 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b4c:	2202      	movs	r2, #2
 80a1b4e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b50:	68eb      	ldr	r3, [r5, #12]
 80a1b52:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b54:	68ab      	ldr	r3, [r5, #8]
 80a1b56:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1b58:	4620      	mov	r0, r4
 80a1b5a:	bd38      	pop	{r3, r4, r5, pc}

080a1b5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b5c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b5e:	b570      	push	{r4, r5, r6, lr}
 80a1b60:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b62:	d006      	beq.n	80a1b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b64:	2a03      	cmp	r2, #3
 80a1b66:	d011      	beq.n	80a1b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b68:	2a01      	cmp	r2, #1
 80a1b6a:	d118      	bne.n	80a1b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b6c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b6e:	6003      	str	r3, [r0, #0]
	      break;
 80a1b70:	e015      	b.n	80a1b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b72:	2014      	movs	r0, #20
 80a1b74:	680e      	ldr	r6, [r1, #0]
 80a1b76:	f7fe fa92 	bl	80a009e <_Znwj>
 80a1b7a:	4605      	mov	r5, r0
 80a1b7c:	b120      	cbz	r0, 80a1b88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b7e:	4631      	mov	r1, r6
 80a1b80:	f7ff ffdd 	bl	80a1b3e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b84:	7c33      	ldrb	r3, [r6, #16]
 80a1b86:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b88:	6025      	str	r5, [r4, #0]
 80a1b8a:	e008      	b.n	80a1b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b8c:	6804      	ldr	r4, [r0, #0]
 80a1b8e:	b134      	cbz	r4, 80a1b9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	f7ff fd0e 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b96:	2114      	movs	r1, #20
 80a1b98:	4620      	mov	r0, r4
 80a1b9a:	f000 fc64 	bl	80a2466 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b9e:	2000      	movs	r0, #0
 80a1ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1ba4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ba6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1ba8:	f3bf 8f5f 	dmb	sy
 80a1bac:	b087      	sub	sp, #28
 80a1bae:	2300      	movs	r3, #0
 80a1bb0:	e850 6f00 	ldrex	r6, [r0]
 80a1bb4:	e840 3200 	strex	r2, r3, [r0]
 80a1bb8:	2a00      	cmp	r2, #0
 80a1bba:	d1f9      	bne.n	80a1bb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1bbc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1bc0:	2e00      	cmp	r6, #0
 80a1bc2:	d03f      	beq.n	80a1c44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1bc4:	4618      	mov	r0, r3
 80a1bc6:	f7ff f8e9 	bl	80a0d9c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1bca:	4607      	mov	r7, r0
 80a1bcc:	b120      	cbz	r0, 80a1bd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1bce:	4621      	mov	r1, r4
 80a1bd0:	4630      	mov	r0, r6
 80a1bd2:	f7ff fe53 	bl	80a187c <_ZNKSt8functionIFvRKbEEclES1_>
 80a1bd6:	e02e      	b.n	80a1c36 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1bd8:	4631      	mov	r1, r6
 80a1bda:	a801      	add	r0, sp, #4
 80a1bdc:	f7ff ffaf 	bl	80a1b3e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1be0:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1be2:	2010      	movs	r0, #16
 80a1be4:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1be8:	f7fe fa59 	bl	80a009e <_Znwj>
 80a1bec:	4605      	mov	r5, r0
 80a1bee:	b1d0      	cbz	r0, 80a1c26 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1bf0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1bf2:	2014      	movs	r0, #20
 80a1bf4:	f7fe fa53 	bl	80a009e <_Znwj>
 80a1bf8:	4604      	mov	r4, r0
 80a1bfa:	b178      	cbz	r0, 80a1c1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1bfc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1bfe:	4601      	mov	r1, r0
 80a1c00:	a801      	add	r0, sp, #4
 80a1c02:	f7ff fce5 	bl	80a15d0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c06:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1c08:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c0a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c0c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1c0e:	9203      	str	r2, [sp, #12]
 80a1c10:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c12:	60e3      	str	r3, [r4, #12]
 80a1c14:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c18:	9204      	str	r2, [sp, #16]
 80a1c1a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c1c:	4b0a      	ldr	r3, [pc, #40]	; (80a1c48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c1e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c20:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c22:	4b0a      	ldr	r3, [pc, #40]	; (80a1c4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1c24:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c26:	a801      	add	r0, sp, #4
 80a1c28:	f7ff fcc3 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1c2c:	2200      	movs	r2, #0
 80a1c2e:	4629      	mov	r1, r5
 80a1c30:	4807      	ldr	r0, [pc, #28]	; (80a1c50 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1c32:	f7ff f8bb 	bl	80a0dac <application_thread_invoke>
 80a1c36:	4630      	mov	r0, r6
 80a1c38:	f7ff fcbb 	bl	80a15b2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1c3c:	2110      	movs	r1, #16
 80a1c3e:	4630      	mov	r0, r6
 80a1c40:	f000 fc11 	bl	80a2466 <_ZdlPvj>
        }
    }
 80a1c44:	b007      	add	sp, #28
 80a1c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c48:	080a188f 	.word	0x080a188f
 80a1c4c:	080a1b5d 	.word	0x080a1b5d
 80a1c50:	080a2089 	.word	0x080a2089

080a1c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1c54:	b530      	push	{r4, r5, lr}
 80a1c56:	4604      	mov	r4, r0
 80a1c58:	b085      	sub	sp, #20
 80a1c5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1c5c:	4668      	mov	r0, sp
 80a1c5e:	4611      	mov	r1, r2
 80a1c60:	f7ff fdc9 	bl	80a17f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c64:	b17c      	cbz	r4, 80a1c86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c66:	b224      	sxth	r4, r4
 80a1c68:	4628      	mov	r0, r5
 80a1c6a:	b10d      	cbz	r5, 80a1c70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c6c:	f001 fcc2 	bl	80a35f4 <strdup>
 80a1c70:	9002      	str	r0, [sp, #8]
 80a1c72:	a902      	add	r1, sp, #8
 80a1c74:	4668      	mov	r0, sp
 80a1c76:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1c7a:	f7ff fe1f 	bl	80a18bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1c7e:	a802      	add	r0, sp, #8
 80a1c80:	f7ff fd7e 	bl	80a1780 <_ZN8particle5ErrorD1Ev>
 80a1c84:	e01d      	b.n	80a1cc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c86:	f04f 0201 	mov.w	r2, #1
 80a1c8a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c8c:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1c90:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1c94:	42a3      	cmp	r3, r4
 80a1c96:	d103      	bne.n	80a1ca0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1c98:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1c9c:	2900      	cmp	r1, #0
 80a1c9e:	d1f7      	bne.n	80a1c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1ca0:	d002      	beq.n	80a1ca8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1ca2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1ca6:	e00c      	b.n	80a1cc2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1ca8:	f110 010c 	adds.w	r1, r0, #12
 80a1cac:	f04f 0301 	mov.w	r3, #1
 80a1cb0:	bf18      	it	ne
 80a1cb2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1cb4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1cb8:	3004      	adds	r0, #4
 80a1cba:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1cbe:	f7ff ff71 	bl	80a1ba4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1cc2:	a801      	add	r0, sp, #4
 80a1cc4:	f7ff fb97 	bl	80a13f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1cc8:	b005      	add	sp, #20
 80a1cca:	bd30      	pop	{r4, r5, pc}

080a1ccc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1ccc:	4770      	bx	lr

080a1cce <_ZN9IPAddressD0Ev>:
 80a1cce:	b510      	push	{r4, lr}
 80a1cd0:	4604      	mov	r4, r0
 80a1cd2:	2118      	movs	r1, #24
 80a1cd4:	f000 fbc7 	bl	80a2466 <_ZdlPvj>
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	bd10      	pop	{r4, pc}

080a1cdc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cde:	460f      	mov	r7, r1
 80a1ce0:	f100 0608 	add.w	r6, r0, #8
 80a1ce4:	1d05      	adds	r5, r0, #4
 80a1ce6:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1ce8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1cec:	220a      	movs	r2, #10
 80a1cee:	4638      	mov	r0, r7
 80a1cf0:	f7ff fb79 	bl	80a13e6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1cf4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1cf6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1cf8:	d007      	beq.n	80a1d0a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1cfa:	2c00      	cmp	r4, #0
 80a1cfc:	d0f4      	beq.n	80a1ce8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1cfe:	212e      	movs	r1, #46	; 0x2e
 80a1d00:	4638      	mov	r0, r7
 80a1d02:	f7ff fb2d 	bl	80a1360 <_ZN5Print5printEc>
 80a1d06:	4404      	add	r4, r0
 80a1d08:	e7ee      	b.n	80a1ce8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1d0a:	4620      	mov	r0, r4
 80a1d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1d10 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1d10:	b510      	push	{r4, lr}
 80a1d12:	4604      	mov	r4, r0
 80a1d14:	4b04      	ldr	r3, [pc, #16]	; (80a1d28 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1d16:	2211      	movs	r2, #17
 80a1d18:	f840 3b04 	str.w	r3, [r0], #4
 80a1d1c:	2100      	movs	r1, #0
 80a1d1e:	f001 fc26 	bl	80a356e <memset>
{
    clear();
}
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	bd10      	pop	{r4, pc}
 80a1d26:	bf00      	nop
 80a1d28:	080a4204 	.word	0x080a4204

080a1d2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1d2c:	4603      	mov	r3, r0
 80a1d2e:	4a07      	ldr	r2, [pc, #28]	; (80a1d4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1d30:	b510      	push	{r4, lr}
 80a1d32:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1d36:	f101 0210 	add.w	r2, r1, #16
 80a1d3a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1d3e:	4291      	cmp	r1, r2
 80a1d40:	f843 4b04 	str.w	r4, [r3], #4
 80a1d44:	d1f9      	bne.n	80a1d3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1d46:	780a      	ldrb	r2, [r1, #0]
 80a1d48:	701a      	strb	r2, [r3, #0]
}
 80a1d4a:	bd10      	pop	{r4, pc}
 80a1d4c:	080a4204 	.word	0x080a4204

080a1d50 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d50:	4a02      	ldr	r2, [pc, #8]	; (80a1d5c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1d52:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d54:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d56:	2204      	movs	r2, #4
 80a1d58:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1d5a:	4770      	bx	lr
 80a1d5c:	080a4204 	.word	0x080a4204

080a1d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1d72:	2304      	movs	r3, #4
 80a1d74:	6041      	str	r1, [r0, #4]
 80a1d76:	7503      	strb	r3, [r0, #20]
 80a1d78:	bd10      	pop	{r4, pc}
	...

080a1d7c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d7e:	4d04      	ldr	r5, [pc, #16]	; (80a1d90 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1d80:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1d82:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1d86:	9500      	str	r5, [sp, #0]
 80a1d88:	f7ff ffea 	bl	80a1d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1d8c:	b003      	add	sp, #12
 80a1d8e:	bd30      	pop	{r4, r5, pc}
 80a1d90:	080a4204 	.word	0x080a4204

080a1d94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d94:	7441      	strb	r1, [r0, #17]
 80a1d96:	4770      	bx	lr

080a1d98 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1d98:	4770      	bx	lr

080a1d9a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1d9a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1d9c:	2100      	movs	r1, #0
 80a1d9e:	7c00      	ldrb	r0, [r0, #16]
 80a1da0:	f7fe ffa4 	bl	80a0cec <HAL_USB_USART_Receive_Data>
}
 80a1da4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1da8:	bf28      	it	cs
 80a1daa:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1dae:	bd08      	pop	{r3, pc}

080a1db0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1db0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1db2:	2101      	movs	r1, #1
 80a1db4:	7c00      	ldrb	r0, [r0, #16]
 80a1db6:	f7fe ff99 	bl	80a0cec <HAL_USB_USART_Receive_Data>
}
 80a1dba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1dbe:	bf28      	it	cs
 80a1dc0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1dc4:	bd08      	pop	{r3, pc}

080a1dc6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1dc6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1dc8:	7c00      	ldrb	r0, [r0, #16]
 80a1dca:	f7fe ff87 	bl	80a0cdc <HAL_USB_USART_Available_Data_For_Write>
}
 80a1dce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1dd2:	bd08      	pop	{r3, pc}

080a1dd4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1dd4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1dd6:	7c00      	ldrb	r0, [r0, #16]
 80a1dd8:	f7fe ff78 	bl	80a0ccc <HAL_USB_USART_Available_Data>
}
 80a1ddc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1de0:	bd08      	pop	{r3, pc}

080a1de2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1de2:	7c00      	ldrb	r0, [r0, #16]
 80a1de4:	f7fe bf92 	b.w	80a0d0c <HAL_USB_USART_Flush_Data>

080a1de8 <_ZN9USBSerialD0Ev>:
 80a1de8:	b510      	push	{r4, lr}
 80a1dea:	4604      	mov	r4, r0
 80a1dec:	2114      	movs	r1, #20
 80a1dee:	f000 fb3a 	bl	80a2466 <_ZdlPvj>
 80a1df2:	4620      	mov	r0, r4
 80a1df4:	bd10      	pop	{r4, pc}

080a1df6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1df6:	b538      	push	{r3, r4, r5, lr}
 80a1df8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1dfa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1dfc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1dfe:	f7fe ff6d 	bl	80a0cdc <HAL_USB_USART_Available_Data_For_Write>
 80a1e02:	2800      	cmp	r0, #0
 80a1e04:	dc01      	bgt.n	80a1e0a <_ZN9USBSerial5writeEh+0x14>
 80a1e06:	7c60      	ldrb	r0, [r4, #17]
 80a1e08:	b128      	cbz	r0, 80a1e16 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1e0a:	4629      	mov	r1, r5
 80a1e0c:	7c20      	ldrb	r0, [r4, #16]
 80a1e0e:	f7fe ff75 	bl	80a0cfc <HAL_USB_USART_Send_Data>
 80a1e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1e16:	bd38      	pop	{r3, r4, r5, pc}

080a1e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1e18:	b510      	push	{r4, lr}
 80a1e1a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1e1c:	2300      	movs	r3, #0
 80a1e1e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e24:	60a3      	str	r3, [r4, #8]
 80a1e26:	4b05      	ldr	r3, [pc, #20]	; (80a1e3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1e28:	4608      	mov	r0, r1
 80a1e2a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1e2c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1e2e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1e30:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1e32:	4611      	mov	r1, r2
 80a1e34:	f7fe ff3a 	bl	80a0cac <HAL_USB_USART_Init>
}
 80a1e38:	4620      	mov	r0, r4
 80a1e3a:	bd10      	pop	{r4, pc}
 80a1e3c:	080a4218 	.word	0x080a4218

080a1e40 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1e40:	2200      	movs	r2, #0
 80a1e42:	7c00      	ldrb	r0, [r0, #16]
 80a1e44:	f7fe bf3a 	b.w	80a0cbc <HAL_USB_USART_Begin>

080a1e48 <_Z19acquireSerialBufferv>:
 80a1e48:	b510      	push	{r4, lr}
 80a1e4a:	4604      	mov	r4, r0
 80a1e4c:	2214      	movs	r2, #20
 80a1e4e:	2100      	movs	r1, #0
 80a1e50:	f001 fb8d 	bl	80a356e <memset>
 80a1e54:	4620      	mov	r0, r4
 80a1e56:	bd10      	pop	{r4, pc}

080a1e58 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1e58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e5a:	4d0e      	ldr	r5, [pc, #56]	; (80a1e94 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1e5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1e5e:	a801      	add	r0, sp, #4
 80a1e60:	f7ff fff2 	bl	80a1e48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e64:	6829      	ldr	r1, [r5, #0]
 80a1e66:	f011 0401 	ands.w	r4, r1, #1
 80a1e6a:	d110      	bne.n	80a1e8e <_Z16_fetch_usbserialv+0x36>
 80a1e6c:	4628      	mov	r0, r5
 80a1e6e:	f7fe f91a 	bl	80a00a6 <__cxa_guard_acquire>
 80a1e72:	b160      	cbz	r0, 80a1e8e <_Z16_fetch_usbserialv+0x36>
 80a1e74:	aa01      	add	r2, sp, #4
 80a1e76:	4621      	mov	r1, r4
 80a1e78:	4807      	ldr	r0, [pc, #28]	; (80a1e98 <_Z16_fetch_usbserialv+0x40>)
 80a1e7a:	f7ff ffcd 	bl	80a1e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e7e:	4628      	mov	r0, r5
 80a1e80:	f7fe f916 	bl	80a00b0 <__cxa_guard_release>
 80a1e84:	4a05      	ldr	r2, [pc, #20]	; (80a1e9c <_Z16_fetch_usbserialv+0x44>)
 80a1e86:	4906      	ldr	r1, [pc, #24]	; (80a1ea0 <_Z16_fetch_usbserialv+0x48>)
 80a1e88:	4803      	ldr	r0, [pc, #12]	; (80a1e98 <_Z16_fetch_usbserialv+0x40>)
 80a1e8a:	f000 fae7 	bl	80a245c <__aeabi_atexit>
	return _usbserial;
}
 80a1e8e:	4802      	ldr	r0, [pc, #8]	; (80a1e98 <_Z16_fetch_usbserialv+0x40>)
 80a1e90:	b007      	add	sp, #28
 80a1e92:	bd30      	pop	{r4, r5, pc}
 80a1e94:	20000170 	.word	0x20000170
 80a1e98:	20000178 	.word	0x20000178
 80a1e9c:	200000d0 	.word	0x200000d0
 80a1ea0:	080a1d99 	.word	0x080a1d99

080a1ea4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1ea4:	b510      	push	{r4, lr}
 80a1ea6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1ea8:	2214      	movs	r2, #20
 80a1eaa:	2100      	movs	r1, #0
 80a1eac:	f001 fb5f 	bl	80a356e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	bd10      	pop	{r4, pc}

080a1eb4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1eb4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1eb6:	4c0e      	ldr	r4, [pc, #56]	; (80a1ef0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1eb8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1eba:	a801      	add	r0, sp, #4
 80a1ebc:	f7ff fff2 	bl	80a1ea4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ec0:	6823      	ldr	r3, [r4, #0]
 80a1ec2:	07db      	lsls	r3, r3, #31
 80a1ec4:	d410      	bmi.n	80a1ee8 <_Z17_fetch_usbserial1v+0x34>
 80a1ec6:	4620      	mov	r0, r4
 80a1ec8:	f7fe f8ed 	bl	80a00a6 <__cxa_guard_acquire>
 80a1ecc:	b160      	cbz	r0, 80a1ee8 <_Z17_fetch_usbserial1v+0x34>
 80a1ece:	aa01      	add	r2, sp, #4
 80a1ed0:	2101      	movs	r1, #1
 80a1ed2:	4808      	ldr	r0, [pc, #32]	; (80a1ef4 <_Z17_fetch_usbserial1v+0x40>)
 80a1ed4:	f7ff ffa0 	bl	80a1e18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ed8:	4620      	mov	r0, r4
 80a1eda:	f7fe f8e9 	bl	80a00b0 <__cxa_guard_release>
 80a1ede:	4a06      	ldr	r2, [pc, #24]	; (80a1ef8 <_Z17_fetch_usbserial1v+0x44>)
 80a1ee0:	4906      	ldr	r1, [pc, #24]	; (80a1efc <_Z17_fetch_usbserial1v+0x48>)
 80a1ee2:	4804      	ldr	r0, [pc, #16]	; (80a1ef4 <_Z17_fetch_usbserial1v+0x40>)
 80a1ee4:	f000 faba 	bl	80a245c <__aeabi_atexit>
  return _usbserial1;
}
 80a1ee8:	4802      	ldr	r0, [pc, #8]	; (80a1ef4 <_Z17_fetch_usbserial1v+0x40>)
 80a1eea:	b006      	add	sp, #24
 80a1eec:	bd10      	pop	{r4, pc}
 80a1eee:	bf00      	nop
 80a1ef0:	20000174 	.word	0x20000174
 80a1ef4:	2000018c 	.word	0x2000018c
 80a1ef8:	200000d0 	.word	0x200000d0
 80a1efc:	080a1d99 	.word	0x080a1d99

080a1f00 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a1f00:	4700      	bx	r0
	...

080a1f04 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f06:	461c      	mov	r4, r3
 80a1f08:	b085      	sub	sp, #20
 80a1f0a:	4605      	mov	r5, r0
 80a1f0c:	460e      	mov	r6, r1
 80a1f0e:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a1f10:	f7fe fe02 	bl	80a0b18 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a1f14:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a1f16:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1f18:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a1f1c:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a1f1e:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a1f22:	bfb4      	ite	lt
 80a1f24:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1f26:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f2a:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a1f2c:	bfa4      	itt	ge
 80a1f2e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a1f32:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f34:	9300      	str	r3, [sp, #0]
 80a1f36:	4632      	mov	r2, r6
 80a1f38:	463b      	mov	r3, r7
 80a1f3a:	4904      	ldr	r1, [pc, #16]	; (80a1f4c <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a1f3c:	bfa8      	it	ge
 80a1f3e:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a1f42:	f7fe fde1 	bl	80a0b08 <HAL_Interrupts_Attach>
    return true;
}
 80a1f46:	2001      	movs	r0, #1
 80a1f48:	b005      	add	sp, #20
 80a1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f4c:	080a1f01 	.word	0x080a1f01

080a1f50 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1f50:	4770      	bx	lr

080a1f52 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f52:	7441      	strb	r1, [r0, #17]
 80a1f54:	4770      	bx	lr

080a1f56 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1f56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1f58:	7c00      	ldrb	r0, [r0, #16]
 80a1f5a:	f7fe fe65 	bl	80a0c28 <HAL_USART_Available_Data_For_Write>
}
 80a1f5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f62:	bd08      	pop	{r3, pc}

080a1f64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f66:	7c00      	ldrb	r0, [r0, #16]
 80a1f68:	f7fe fe36 	bl	80a0bd8 <HAL_USART_Available_Data>
}
 80a1f6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f70:	bd08      	pop	{r3, pc}

080a1f72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f74:	7c00      	ldrb	r0, [r0, #16]
 80a1f76:	f7fe fe3f 	bl	80a0bf8 <HAL_USART_Peek_Data>
}
 80a1f7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f7e:	bf28      	it	cs
 80a1f80:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1f84:	bd08      	pop	{r3, pc}

080a1f86 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f88:	7c00      	ldrb	r0, [r0, #16]
 80a1f8a:	f7fe fe2d 	bl	80a0be8 <HAL_USART_Read_Data>
}
 80a1f8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f92:	bf28      	it	cs
 80a1f94:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1f98:	bd08      	pop	{r3, pc}

080a1f9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f9a:	7c00      	ldrb	r0, [r0, #16]
 80a1f9c:	f7fe be34 	b.w	80a0c08 <HAL_USART_Flush_Data>

080a1fa0 <_ZN11USARTSerialD0Ev>:
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	2114      	movs	r1, #20
 80a1fa6:	f000 fa5e 	bl	80a2466 <_ZdlPvj>
 80a1faa:	4620      	mov	r0, r4
 80a1fac:	bd10      	pop	{r4, pc}

080a1fae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1fae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1fb0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1fb2:	4604      	mov	r4, r0
 80a1fb4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1fb6:	b925      	cbnz	r5, 80a1fc2 <_ZN11USARTSerial5writeEh+0x14>
 80a1fb8:	7c00      	ldrb	r0, [r0, #16]
 80a1fba:	f7fe fe35 	bl	80a0c28 <HAL_USART_Available_Data_For_Write>
 80a1fbe:	2800      	cmp	r0, #0
 80a1fc0:	dd05      	ble.n	80a1fce <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1fc2:	4631      	mov	r1, r6
 80a1fc4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1fca:	f7fe bdfd 	b.w	80a0bc8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1fce:	4628      	mov	r0, r5
 80a1fd0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1fd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fd4:	b510      	push	{r4, lr}
 80a1fd6:	4604      	mov	r4, r0
 80a1fd8:	4608      	mov	r0, r1
 80a1fda:	4611      	mov	r1, r2
 80a1fdc:	2200      	movs	r2, #0
 80a1fde:	6062      	str	r2, [r4, #4]
 80a1fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1fe4:	60a2      	str	r2, [r4, #8]
 80a1fe6:	4a05      	ldr	r2, [pc, #20]	; (80a1ffc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1fe8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1fea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1fec:	2201      	movs	r2, #1
 80a1fee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1ff0:	461a      	mov	r2, r3
 80a1ff2:	f7fe fde1 	bl	80a0bb8 <HAL_USART_Init>
}
 80a1ff6:	4620      	mov	r0, r4
 80a1ff8:	bd10      	pop	{r4, pc}
 80a1ffa:	bf00      	nop
 80a1ffc:	080a4248 	.word	0x080a4248

080a2000 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2000:	7c00      	ldrb	r0, [r0, #16]
 80a2002:	f7fe be09 	b.w	80a0c18 <HAL_USART_Is_Enabled>
	...

080a2008 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a200a:	4c19      	ldr	r4, [pc, #100]	; (80a2070 <_Z22__fetch_global_Serial1v+0x68>)
 80a200c:	6825      	ldr	r5, [r4, #0]
 80a200e:	b94d      	cbnz	r5, 80a2024 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a2010:	2084      	movs	r0, #132	; 0x84
 80a2012:	f7fe f844 	bl	80a009e <_Znwj>
 80a2016:	4606      	mov	r6, r0
 80a2018:	b118      	cbz	r0, 80a2022 <_Z22__fetch_global_Serial1v+0x1a>
 80a201a:	2284      	movs	r2, #132	; 0x84
 80a201c:	4629      	mov	r1, r5
 80a201e:	f001 faa6 	bl	80a356e <memset>
 80a2022:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2024:	4d13      	ldr	r5, [pc, #76]	; (80a2074 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2026:	682e      	ldr	r6, [r5, #0]
 80a2028:	b94e      	cbnz	r6, 80a203e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a202a:	2084      	movs	r0, #132	; 0x84
 80a202c:	f7fe f837 	bl	80a009e <_Znwj>
 80a2030:	4607      	mov	r7, r0
 80a2032:	b118      	cbz	r0, 80a203c <_Z22__fetch_global_Serial1v+0x34>
 80a2034:	2284      	movs	r2, #132	; 0x84
 80a2036:	4631      	mov	r1, r6
 80a2038:	f001 fa99 	bl	80a356e <memset>
 80a203c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a203e:	4f0e      	ldr	r7, [pc, #56]	; (80a2078 <_Z22__fetch_global_Serial1v+0x70>)
 80a2040:	6839      	ldr	r1, [r7, #0]
 80a2042:	f011 0601 	ands.w	r6, r1, #1
 80a2046:	d111      	bne.n	80a206c <_Z22__fetch_global_Serial1v+0x64>
 80a2048:	4638      	mov	r0, r7
 80a204a:	f7fe f82c 	bl	80a00a6 <__cxa_guard_acquire>
 80a204e:	b168      	cbz	r0, 80a206c <_Z22__fetch_global_Serial1v+0x64>
 80a2050:	6822      	ldr	r2, [r4, #0]
 80a2052:	4631      	mov	r1, r6
 80a2054:	682b      	ldr	r3, [r5, #0]
 80a2056:	4809      	ldr	r0, [pc, #36]	; (80a207c <_Z22__fetch_global_Serial1v+0x74>)
 80a2058:	f7ff ffbc 	bl	80a1fd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a205c:	4638      	mov	r0, r7
 80a205e:	f7fe f827 	bl	80a00b0 <__cxa_guard_release>
 80a2062:	4a07      	ldr	r2, [pc, #28]	; (80a2080 <_Z22__fetch_global_Serial1v+0x78>)
 80a2064:	4907      	ldr	r1, [pc, #28]	; (80a2084 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2066:	4805      	ldr	r0, [pc, #20]	; (80a207c <_Z22__fetch_global_Serial1v+0x74>)
 80a2068:	f000 f9f8 	bl	80a245c <__aeabi_atexit>
#endif
	return serial1;
}
 80a206c:	4803      	ldr	r0, [pc, #12]	; (80a207c <_Z22__fetch_global_Serial1v+0x74>)
 80a206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2070:	200001bc 	.word	0x200001bc
 80a2074:	200001b4 	.word	0x200001b4
 80a2078:	200001b8 	.word	0x200001b8
 80a207c:	200001a0 	.word	0x200001a0
 80a2080:	200000d0 	.word	0x200000d0
 80a2084:	080a1f51 	.word	0x080a1f51

080a2088 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2088:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a208a:	6883      	ldr	r3, [r0, #8]
 80a208c:	4604      	mov	r4, r0
 80a208e:	b90b      	cbnz	r3, 80a2094 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2090:	f000 f9eb 	bl	80a246a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2094:	68c3      	ldr	r3, [r0, #12]
 80a2096:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2098:	68a3      	ldr	r3, [r4, #8]
 80a209a:	b11b      	cbz	r3, 80a20a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a209c:	2203      	movs	r2, #3
 80a209e:	4621      	mov	r1, r4
 80a20a0:	4620      	mov	r0, r4
 80a20a2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a20a4:	4620      	mov	r0, r4
}
 80a20a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a20aa:	2110      	movs	r1, #16
 80a20ac:	f000 b9db 	b.w	80a2466 <_ZdlPvj>

080a20b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a20b0:	4770      	bx	lr

080a20b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a20b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20b4:	4606      	mov	r6, r0
 80a20b6:	4615      	mov	r5, r2
 80a20b8:	460c      	mov	r4, r1
 80a20ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20bc:	42bc      	cmp	r4, r7
 80a20be:	d006      	beq.n	80a20ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a20c0:	6833      	ldr	r3, [r6, #0]
 80a20c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a20c6:	689b      	ldr	r3, [r3, #8]
 80a20c8:	4630      	mov	r0, r6
 80a20ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a20cc:	e7f6      	b.n	80a20bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a20ce:	4628      	mov	r0, r5
 80a20d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a20d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a20d2:	2200      	movs	r2, #0
 80a20d4:	7c00      	ldrb	r0, [r0, #16]
 80a20d6:	f7fe bdaf 	b.w	80a0c38 <HAL_I2C_Write_Data>

080a20da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a20da:	2100      	movs	r1, #0
 80a20dc:	7c00      	ldrb	r0, [r0, #16]
 80a20de:	f7fe bdb3 	b.w	80a0c48 <HAL_I2C_Available_Data>

080a20e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a20e2:	2100      	movs	r1, #0
 80a20e4:	7c00      	ldrb	r0, [r0, #16]
 80a20e6:	f7fe bdb7 	b.w	80a0c58 <HAL_I2C_Read_Data>

080a20ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a20ea:	2100      	movs	r1, #0
 80a20ec:	7c00      	ldrb	r0, [r0, #16]
 80a20ee:	f7fe bdbb 	b.w	80a0c68 <HAL_I2C_Peek_Data>

080a20f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a20f2:	2100      	movs	r1, #0
 80a20f4:	7c00      	ldrb	r0, [r0, #16]
 80a20f6:	f7fe bdbf 	b.w	80a0c78 <HAL_I2C_Flush_Data>

080a20fa <_ZN7TwoWireD0Ev>:
 80a20fa:	b510      	push	{r4, lr}
 80a20fc:	4604      	mov	r4, r0
 80a20fe:	2114      	movs	r1, #20
 80a2100:	f000 f9b1 	bl	80a2466 <_ZdlPvj>
 80a2104:	4620      	mov	r0, r4
 80a2106:	bd10      	pop	{r4, pc}

080a2108 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2108:	b510      	push	{r4, lr}
 80a210a:	4604      	mov	r4, r0
 80a210c:	4608      	mov	r0, r1
 80a210e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2112:	60a3      	str	r3, [r4, #8]
 80a2114:	4b04      	ldr	r3, [pc, #16]	; (80a2128 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2116:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2118:	7420      	strb	r0, [r4, #16]
 80a211a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a211c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a211e:	f7fe fdbb 	bl	80a0c98 <HAL_I2C_Init>

}
 80a2122:	4620      	mov	r0, r4
 80a2124:	bd10      	pop	{r4, pc}
 80a2126:	bf00      	nop
 80a2128:	080a4278 	.word	0x080a4278

080a212c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a212c:	2100      	movs	r1, #0
 80a212e:	7c00      	ldrb	r0, [r0, #16]
 80a2130:	f7fe bdaa 	b.w	80a0c88 <HAL_I2C_Is_Enabled>

080a2134 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
 80a2134:	b530      	push	{r4, r5, lr}
        WiFiAccessPoint* results;

        int index;

        void addResult(WiFiAccessPoint* result) {
            if (index<count) {
 80a2136:	684b      	ldr	r3, [r1, #4]
 80a2138:	688a      	ldr	r2, [r1, #8]
 80a213a:	4293      	cmp	r3, r2
 80a213c:	da10      	bge.n	80a2160 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
 80a213e:	4605      	mov	r5, r0
 80a2140:	680a      	ldr	r2, [r1, #0]
 80a2142:	1c5c      	adds	r4, r3, #1
 80a2144:	604c      	str	r4, [r1, #4]
 80a2146:	2438      	movs	r4, #56	; 0x38
 80a2148:	fb04 2403 	mla	r4, r4, r3, r2
 80a214c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a214e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2158:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a215c:	e884 0003 	stmia.w	r4, {r0, r1}
 80a2160:	bd30      	pop	{r4, r5, pc}

080a2162 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2162:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2164:	4616      	mov	r6, r2
 80a2166:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2168:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a216a:	460f      	mov	r7, r1
 80a216c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a216e:	2100      	movs	r1, #0
 80a2170:	a803      	add	r0, sp, #12
 80a2172:	f001 f9fc 	bl	80a356e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2176:	4630      	mov	r0, r6
 80a2178:	f001 fa57 	bl	80a362a <strlen>
 80a217c:	2500      	movs	r5, #0
 80a217e:	9500      	str	r5, [sp, #0]
 80a2180:	b281      	uxth	r1, r0
 80a2182:	687b      	ldr	r3, [r7, #4]
 80a2184:	aa03      	add	r2, sp, #12
 80a2186:	4630      	mov	r0, r6
 80a2188:	f7fe fdc8 	bl	80a0d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a218c:	b120      	cbz	r0, 80a2198 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a218e:	4629      	mov	r1, r5
 80a2190:	4620      	mov	r0, r4
 80a2192:	f7ff fddd 	bl	80a1d50 <_ZN9IPAddressC1Em>
 80a2196:	e003      	b.n	80a21a0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2198:	a903      	add	r1, sp, #12
 80a219a:	4620      	mov	r0, r4
 80a219c:	f7ff fdc6 	bl	80a1d2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a21a0:	4620      	mov	r0, r4
 80a21a2:	b009      	add	sp, #36	; 0x24
 80a21a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a21a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a21a6:	2200      	movs	r2, #0
 80a21a8:	4611      	mov	r1, r2
 80a21aa:	6840      	ldr	r0, [r0, #4]
 80a21ac:	f7fe be5a 	b.w	80a0e64 <network_listening>

080a21b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a21b0:	2200      	movs	r2, #0
 80a21b2:	4611      	mov	r1, r2
 80a21b4:	6840      	ldr	r0, [r0, #4]
 80a21b6:	f7fe be6d 	b.w	80a0e94 <network_get_listen_timeout>

080a21ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a21ba:	2200      	movs	r2, #0
 80a21bc:	6840      	ldr	r0, [r0, #4]
 80a21be:	f7fe be61 	b.w	80a0e84 <network_set_listen_timeout>

080a21c2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a21c2:	2200      	movs	r2, #0
 80a21c4:	f081 0101 	eor.w	r1, r1, #1
 80a21c8:	6840      	ldr	r0, [r0, #4]
 80a21ca:	f7fe be43 	b.w	80a0e54 <network_listen>

080a21ce <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a21ce:	2300      	movs	r3, #0
 80a21d0:	461a      	mov	r2, r3
 80a21d2:	4619      	mov	r1, r3
 80a21d4:	6840      	ldr	r0, [r0, #4]
 80a21d6:	f7fe be35 	b.w	80a0e44 <network_off>

080a21da <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a21da:	2200      	movs	r2, #0
 80a21dc:	2102      	movs	r1, #2
 80a21de:	6840      	ldr	r0, [r0, #4]
 80a21e0:	f7fe be18 	b.w	80a0e14 <network_disconnect>

080a21e4 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a21e4:	2300      	movs	r3, #0
 80a21e6:	461a      	mov	r2, r3
 80a21e8:	6840      	ldr	r0, [r0, #4]
 80a21ea:	f7fe be03 	b.w	80a0df4 <network_connect>
	...

080a21f0 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
            return std::min(count, wlan_get_credentials(callback, this));
        }
    };


    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
 80a21f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a21f2:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
 80a21f4:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_scan(callback, this));
 80a21f6:	4806      	ldr	r0, [pc, #24]	; (80a2210 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x20>)
 80a21f8:	a901      	add	r1, sp, #4
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a21fa:	9302      	str	r3, [sp, #8]

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
 80a21fc:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_scan(callback, this));
 80a21fe:	f7fe fd95 	bl	80a0d2c <wlan_scan>


    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
        APScan apScan(results, result_count);
        return apScan.start();
    }
 80a2202:	9b03      	ldr	r3, [sp, #12]
 80a2204:	4298      	cmp	r0, r3
 80a2206:	bfa8      	it	ge
 80a2208:	4618      	movge	r0, r3
 80a220a:	b005      	add	sp, #20
 80a220c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2210:	080a2135 	.word	0x080a2135

080a2214 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
 80a2214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a2216:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
 80a2218:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
 80a221a:	4806      	ldr	r0, [pc, #24]	; (80a2234 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
 80a221c:	a901      	add	r1, sp, #4
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
 80a221e:	9302      	str	r3, [sp, #8]

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
 80a2220:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
 80a2222:	f7fe fd8b 	bl	80a0d3c <wlan_get_credentials>
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }
 80a2226:	9b03      	ldr	r3, [sp, #12]
 80a2228:	4298      	cmp	r0, r3
 80a222a:	bfa8      	it	ge
 80a222c:	4618      	movge	r0, r3
 80a222e:	b005      	add	sp, #20
 80a2230:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2234:	080a2135 	.word	0x080a2135

080a2238 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2238:	4b02      	ldr	r3, [pc, #8]	; (80a2244 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a223a:	2204      	movs	r2, #4
 80a223c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a223e:	4a02      	ldr	r2, [pc, #8]	; (80a2248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2240:	601a      	str	r2, [r3, #0]
 80a2242:	4770      	bx	lr
 80a2244:	200001c0 	.word	0x200001c0
 80a2248:	080a42a0 	.word	0x080a42a0

080a224c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a224c:	2300      	movs	r3, #0
 80a224e:	461a      	mov	r2, r3
 80a2250:	6840      	ldr	r0, [r0, #4]
 80a2252:	f7fe bdcf 	b.w	80a0df4 <network_connect>

080a2256 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2256:	2200      	movs	r2, #0
 80a2258:	2102      	movs	r1, #2
 80a225a:	6840      	ldr	r0, [r0, #4]
 80a225c:	f7fe bdda 	b.w	80a0e14 <network_disconnect>

080a2260 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2260:	2200      	movs	r2, #0
 80a2262:	4611      	mov	r1, r2
 80a2264:	6840      	ldr	r0, [r0, #4]
 80a2266:	f7fe bdcd 	b.w	80a0e04 <network_connecting>

080a226a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a226a:	2200      	movs	r2, #0
 80a226c:	4611      	mov	r1, r2
 80a226e:	6840      	ldr	r0, [r0, #4]
 80a2270:	f7fe bdd8 	b.w	80a0e24 <network_ready>

080a2274 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2274:	2300      	movs	r3, #0
 80a2276:	461a      	mov	r2, r3
 80a2278:	4619      	mov	r1, r3
 80a227a:	6840      	ldr	r0, [r0, #4]
 80a227c:	f7fe bdda 	b.w	80a0e34 <network_on>

080a2280 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2280:	2300      	movs	r3, #0
 80a2282:	461a      	mov	r2, r3
 80a2284:	4619      	mov	r1, r3
 80a2286:	6840      	ldr	r0, [r0, #4]
 80a2288:	f7fe bddc 	b.w	80a0e44 <network_off>

080a228c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a228c:	2200      	movs	r2, #0
 80a228e:	f081 0101 	eor.w	r1, r1, #1
 80a2292:	6840      	ldr	r0, [r0, #4]
 80a2294:	f7fe bdde 	b.w	80a0e54 <network_listen>

080a2298 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2298:	2200      	movs	r2, #0
 80a229a:	6840      	ldr	r0, [r0, #4]
 80a229c:	f7fe bdf2 	b.w	80a0e84 <network_set_listen_timeout>

080a22a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a22a0:	2200      	movs	r2, #0
 80a22a2:	4611      	mov	r1, r2
 80a22a4:	6840      	ldr	r0, [r0, #4]
 80a22a6:	f7fe bdf5 	b.w	80a0e94 <network_get_listen_timeout>

080a22aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a22aa:	2200      	movs	r2, #0
 80a22ac:	4611      	mov	r1, r2
 80a22ae:	6840      	ldr	r0, [r0, #4]
 80a22b0:	f7fe bdd8 	b.w	80a0e64 <network_listening>

080a22b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a22b4:	b570      	push	{r4, r5, r6, lr}
 80a22b6:	4616      	mov	r6, r2
 80a22b8:	b08e      	sub	sp, #56	; 0x38
 80a22ba:	4604      	mov	r4, r0
    IPAddress addr;
 80a22bc:	a808      	add	r0, sp, #32
 80a22be:	f7ff fd27 	bl	80a1d10 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a22c2:	2211      	movs	r2, #17
 80a22c4:	2100      	movs	r1, #0
 80a22c6:	a803      	add	r0, sp, #12
 80a22c8:	f001 f951 	bl	80a356e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a22cc:	4630      	mov	r0, r6
 80a22ce:	f001 f9ac 	bl	80a362a <strlen>
 80a22d2:	2500      	movs	r5, #0
 80a22d4:	4b0a      	ldr	r3, [pc, #40]	; (80a2300 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a22d6:	9500      	str	r5, [sp, #0]
 80a22d8:	b281      	uxth	r1, r0
 80a22da:	685b      	ldr	r3, [r3, #4]
 80a22dc:	aa03      	add	r2, sp, #12
 80a22de:	4630      	mov	r0, r6
 80a22e0:	f7fe fd1c 	bl	80a0d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a22e4:	b120      	cbz	r0, 80a22f0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a22e6:	4629      	mov	r1, r5
 80a22e8:	4620      	mov	r0, r4
 80a22ea:	f7ff fd31 	bl	80a1d50 <_ZN9IPAddressC1Em>
 80a22ee:	e003      	b.n	80a22f8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a22f0:	a903      	add	r1, sp, #12
 80a22f2:	4620      	mov	r0, r4
 80a22f4:	f7ff fd1a 	bl	80a1d2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a22f8:	4620      	mov	r0, r4
 80a22fa:	b00e      	add	sp, #56	; 0x38
 80a22fc:	bd70      	pop	{r4, r5, r6, pc}
 80a22fe:	bf00      	nop
 80a2300:	200001c0 	.word	0x200001c0

080a2304 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2304:	4b02      	ldr	r3, [pc, #8]	; (80a2310 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2306:	4a03      	ldr	r2, [pc, #12]	; (80a2314 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2308:	601a      	str	r2, [r3, #0]
 80a230a:	2200      	movs	r2, #0
 80a230c:	605a      	str	r2, [r3, #4]
 80a230e:	4770      	bx	lr
 80a2310:	200001c8 	.word	0x200001c8
 80a2314:	080a42d4 	.word	0x080a42d4

080a2318 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2318:	b510      	push	{r4, lr}
 80a231a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a231c:	480f      	ldr	r0, [pc, #60]	; (80a235c <pinAvailable+0x44>)
 80a231e:	f7fe fe3d 	bl	80a0f9c <_ZN8SPIClass9isEnabledEv>
 80a2322:	b128      	cbz	r0, 80a2330 <pinAvailable+0x18>
 80a2324:	f1a4 030d 	sub.w	r3, r4, #13
 80a2328:	2b02      	cmp	r3, #2
 80a232a:	d801      	bhi.n	80a2330 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a232c:	2000      	movs	r0, #0
 80a232e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2330:	f000 f874 	bl	80a241c <_Z19__fetch_global_Wirev>
 80a2334:	f7ff fefa 	bl	80a212c <_ZN7TwoWire9isEnabledEv>
 80a2338:	b108      	cbz	r0, 80a233e <pinAvailable+0x26>
 80a233a:	2c01      	cmp	r4, #1
 80a233c:	d9f6      	bls.n	80a232c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a233e:	f7ff fe63 	bl	80a2008 <_Z22__fetch_global_Serial1v>
 80a2342:	f7ff fe5d 	bl	80a2000 <_ZN11USARTSerial9isEnabledEv>
 80a2346:	b118      	cbz	r0, 80a2350 <pinAvailable+0x38>
 80a2348:	f1a4 0312 	sub.w	r3, r4, #18
 80a234c:	2b01      	cmp	r3, #1
 80a234e:	d9ed      	bls.n	80a232c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2350:	2c17      	cmp	r4, #23
 80a2352:	bf8c      	ite	hi
 80a2354:	2000      	movhi	r0, #0
 80a2356:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2358:	bd10      	pop	{r4, pc}
 80a235a:	bf00      	nop
 80a235c:	200001d0 	.word	0x200001d0

080a2360 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2360:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2362:	b538      	push	{r3, r4, r5, lr}
 80a2364:	4604      	mov	r4, r0
 80a2366:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2368:	d80a      	bhi.n	80a2380 <pinMode+0x20>
 80a236a:	29ff      	cmp	r1, #255	; 0xff
 80a236c:	d008      	beq.n	80a2380 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a236e:	f7ff ffd3 	bl	80a2318 <pinAvailable>
 80a2372:	b128      	cbz	r0, 80a2380 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2374:	4629      	mov	r1, r5
 80a2376:	4620      	mov	r0, r4
}
 80a2378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a237c:	f7fe bbac 	b.w	80a0ad8 <HAL_Pin_Mode>
 80a2380:	bd38      	pop	{r3, r4, r5, pc}

080a2382 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2382:	b510      	push	{r4, lr}
 80a2384:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2386:	f7fe fbaf 	bl	80a0ae8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a238a:	3804      	subs	r0, #4
 80a238c:	b2c0      	uxtb	r0, r0
 80a238e:	2801      	cmp	r0, #1
 80a2390:	d908      	bls.n	80a23a4 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2392:	4620      	mov	r0, r4
 80a2394:	f7ff ffc0 	bl	80a2318 <pinAvailable>
 80a2398:	b120      	cbz	r0, 80a23a4 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a239a:	4620      	mov	r0, r4
}
 80a239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a23a0:	f7fe bbaa 	b.w	80a0af8 <HAL_GPIO_Read>
}
 80a23a4:	2000      	movs	r0, #0
 80a23a6:	bd10      	pop	{r4, pc}

080a23a8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23a8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23aa:	4c0c      	ldr	r4, [pc, #48]	; (80a23dc <_GLOBAL__sub_I_SPI+0x34>)
 80a23ac:	4e0c      	ldr	r6, [pc, #48]	; (80a23e0 <_GLOBAL__sub_I_SPI+0x38>)
 80a23ae:	4d0d      	ldr	r5, [pc, #52]	; (80a23e4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a23b0:	2100      	movs	r1, #0
 80a23b2:	4620      	mov	r0, r4
 80a23b4:	f7fe fdde 	bl	80a0f74 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23b8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23ba:	4c0b      	ldr	r4, [pc, #44]	; (80a23e8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23bc:	4632      	mov	r2, r6
 80a23be:	4629      	mov	r1, r5
 80a23c0:	f000 f84c 	bl	80a245c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23c4:	2101      	movs	r1, #1
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f7fe fdd4 	bl	80a0f74 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23cc:	4632      	mov	r2, r6
 80a23ce:	4629      	mov	r1, r5
 80a23d0:	4620      	mov	r0, r4
 80a23d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a23d6:	f000 b841 	b.w	80a245c <__aeabi_atexit>
 80a23da:	bf00      	nop
 80a23dc:	200001d0 	.word	0x200001d0
 80a23e0:	200000d0 	.word	0x200000d0
 80a23e4:	080a0f65 	.word	0x080a0f65
 80a23e8:	200001e0 	.word	0x200001e0

080a23ec <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a23ec:	b513      	push	{r0, r1, r4, lr}
 80a23ee:	4c08      	ldr	r4, [pc, #32]	; (80a2410 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a23f0:	2300      	movs	r3, #0
 80a23f2:	461a      	mov	r2, r3
 80a23f4:	4619      	mov	r1, r3
 80a23f6:	9300      	str	r3, [sp, #0]
 80a23f8:	4620      	mov	r0, r4
 80a23fa:	f7ff fcbf 	bl	80a1d7c <_ZN9IPAddressC1Ehhhh>
 80a23fe:	4620      	mov	r0, r4
 80a2400:	4a04      	ldr	r2, [pc, #16]	; (80a2414 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2402:	4905      	ldr	r1, [pc, #20]	; (80a2418 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2404:	b002      	add	sp, #8
 80a2406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a240a:	f000 b827 	b.w	80a245c <__aeabi_atexit>
 80a240e:	bf00      	nop
 80a2410:	200001f4 	.word	0x200001f4
 80a2414:	200000d0 	.word	0x200000d0
 80a2418:	080a1ccd 	.word	0x080a1ccd

080a241c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a241c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a241e:	4d0b      	ldr	r5, [pc, #44]	; (80a244c <_Z19__fetch_global_Wirev+0x30>)
 80a2420:	6829      	ldr	r1, [r5, #0]
 80a2422:	f011 0401 	ands.w	r4, r1, #1
 80a2426:	d10f      	bne.n	80a2448 <_Z19__fetch_global_Wirev+0x2c>
 80a2428:	4628      	mov	r0, r5
 80a242a:	f7fd fe3c 	bl	80a00a6 <__cxa_guard_acquire>
 80a242e:	b158      	cbz	r0, 80a2448 <_Z19__fetch_global_Wirev+0x2c>
 80a2430:	4621      	mov	r1, r4
 80a2432:	4807      	ldr	r0, [pc, #28]	; (80a2450 <_Z19__fetch_global_Wirev+0x34>)
 80a2434:	f7ff fe68 	bl	80a2108 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2438:	4628      	mov	r0, r5
 80a243a:	f7fd fe39 	bl	80a00b0 <__cxa_guard_release>
 80a243e:	4a05      	ldr	r2, [pc, #20]	; (80a2454 <_Z19__fetch_global_Wirev+0x38>)
 80a2440:	4905      	ldr	r1, [pc, #20]	; (80a2458 <_Z19__fetch_global_Wirev+0x3c>)
 80a2442:	4803      	ldr	r0, [pc, #12]	; (80a2450 <_Z19__fetch_global_Wirev+0x34>)
 80a2444:	f000 f80a 	bl	80a245c <__aeabi_atexit>
	return wire;
}
 80a2448:	4801      	ldr	r0, [pc, #4]	; (80a2450 <_Z19__fetch_global_Wirev+0x34>)
 80a244a:	bd38      	pop	{r3, r4, r5, pc}
 80a244c:	2000020c 	.word	0x2000020c
 80a2450:	20000210 	.word	0x20000210
 80a2454:	200000d0 	.word	0x200000d0
 80a2458:	080a20b1 	.word	0x080a20b1

080a245c <__aeabi_atexit>:
 80a245c:	460b      	mov	r3, r1
 80a245e:	4601      	mov	r1, r0
 80a2460:	4618      	mov	r0, r3
 80a2462:	f000 bf73 	b.w	80a334c <__cxa_atexit>

080a2466 <_ZdlPvj>:
 80a2466:	f7fd be1c 	b.w	80a00a2 <_ZdlPv>

080a246a <_ZSt25__throw_bad_function_callv>:
 80a246a:	b508      	push	{r3, lr}
 80a246c:	f7fe fd6a 	bl	80a0f44 <abort>

080a2470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2470:	4b18      	ldr	r3, [pc, #96]	; (80a24d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2472:	681a      	ldr	r2, [r3, #0]
 80a2474:	07d1      	lsls	r1, r2, #31
 80a2476:	bf5c      	itt	pl
 80a2478:	2201      	movpl	r2, #1
 80a247a:	601a      	strpl	r2, [r3, #0]
 80a247c:	4b16      	ldr	r3, [pc, #88]	; (80a24d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a247e:	681a      	ldr	r2, [r3, #0]
 80a2480:	07d2      	lsls	r2, r2, #31
 80a2482:	bf5c      	itt	pl
 80a2484:	2201      	movpl	r2, #1
 80a2486:	601a      	strpl	r2, [r3, #0]
 80a2488:	4b14      	ldr	r3, [pc, #80]	; (80a24dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a248a:	681a      	ldr	r2, [r3, #0]
 80a248c:	07d0      	lsls	r0, r2, #31
 80a248e:	bf5c      	itt	pl
 80a2490:	2201      	movpl	r2, #1
 80a2492:	601a      	strpl	r2, [r3, #0]
 80a2494:	4b12      	ldr	r3, [pc, #72]	; (80a24e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2496:	681a      	ldr	r2, [r3, #0]
 80a2498:	07d1      	lsls	r1, r2, #31
 80a249a:	bf5c      	itt	pl
 80a249c:	2201      	movpl	r2, #1
 80a249e:	601a      	strpl	r2, [r3, #0]
 80a24a0:	4b10      	ldr	r3, [pc, #64]	; (80a24e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a24a2:	681a      	ldr	r2, [r3, #0]
 80a24a4:	07d2      	lsls	r2, r2, #31
 80a24a6:	bf5c      	itt	pl
 80a24a8:	2201      	movpl	r2, #1
 80a24aa:	601a      	strpl	r2, [r3, #0]
 80a24ac:	4b0e      	ldr	r3, [pc, #56]	; (80a24e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a24ae:	681a      	ldr	r2, [r3, #0]
 80a24b0:	07d0      	lsls	r0, r2, #31
 80a24b2:	bf5c      	itt	pl
 80a24b4:	2201      	movpl	r2, #1
 80a24b6:	601a      	strpl	r2, [r3, #0]
 80a24b8:	4b0c      	ldr	r3, [pc, #48]	; (80a24ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a24ba:	681a      	ldr	r2, [r3, #0]
 80a24bc:	07d1      	lsls	r1, r2, #31
 80a24be:	bf5c      	itt	pl
 80a24c0:	2201      	movpl	r2, #1
 80a24c2:	601a      	strpl	r2, [r3, #0]
 80a24c4:	4b0a      	ldr	r3, [pc, #40]	; (80a24f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a24c6:	681a      	ldr	r2, [r3, #0]
 80a24c8:	07d2      	lsls	r2, r2, #31
 80a24ca:	bf5c      	itt	pl
 80a24cc:	2201      	movpl	r2, #1
 80a24ce:	601a      	strpl	r2, [r3, #0]
 80a24d0:	4770      	bx	lr
 80a24d2:	bf00      	nop
 80a24d4:	20000240 	.word	0x20000240
 80a24d8:	2000023c 	.word	0x2000023c
 80a24dc:	20000238 	.word	0x20000238
 80a24e0:	20000234 	.word	0x20000234
 80a24e4:	20000230 	.word	0x20000230
 80a24e8:	2000022c 	.word	0x2000022c
 80a24ec:	20000228 	.word	0x20000228
 80a24f0:	20000224 	.word	0x20000224

080a24f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a24f4:	4b24      	ldr	r3, [pc, #144]	; (80a2588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a24f6:	681a      	ldr	r2, [r3, #0]
 80a24f8:	07d0      	lsls	r0, r2, #31
 80a24fa:	bf5c      	itt	pl
 80a24fc:	2201      	movpl	r2, #1
 80a24fe:	601a      	strpl	r2, [r3, #0]
 80a2500:	4b22      	ldr	r3, [pc, #136]	; (80a258c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2502:	681a      	ldr	r2, [r3, #0]
 80a2504:	07d1      	lsls	r1, r2, #31
 80a2506:	bf5c      	itt	pl
 80a2508:	2201      	movpl	r2, #1
 80a250a:	601a      	strpl	r2, [r3, #0]
 80a250c:	4b20      	ldr	r3, [pc, #128]	; (80a2590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a250e:	681a      	ldr	r2, [r3, #0]
 80a2510:	07d2      	lsls	r2, r2, #31
 80a2512:	bf5c      	itt	pl
 80a2514:	2201      	movpl	r2, #1
 80a2516:	601a      	strpl	r2, [r3, #0]
 80a2518:	4b1e      	ldr	r3, [pc, #120]	; (80a2594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a251a:	681a      	ldr	r2, [r3, #0]
 80a251c:	07d0      	lsls	r0, r2, #31
 80a251e:	bf5c      	itt	pl
 80a2520:	2201      	movpl	r2, #1
 80a2522:	601a      	strpl	r2, [r3, #0]
 80a2524:	4b1c      	ldr	r3, [pc, #112]	; (80a2598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2526:	681a      	ldr	r2, [r3, #0]
 80a2528:	07d1      	lsls	r1, r2, #31
 80a252a:	bf5c      	itt	pl
 80a252c:	2201      	movpl	r2, #1
 80a252e:	601a      	strpl	r2, [r3, #0]
 80a2530:	4b1a      	ldr	r3, [pc, #104]	; (80a259c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2532:	681a      	ldr	r2, [r3, #0]
 80a2534:	07d2      	lsls	r2, r2, #31
 80a2536:	bf5c      	itt	pl
 80a2538:	2201      	movpl	r2, #1
 80a253a:	601a      	strpl	r2, [r3, #0]
 80a253c:	4b18      	ldr	r3, [pc, #96]	; (80a25a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a253e:	681a      	ldr	r2, [r3, #0]
 80a2540:	07d0      	lsls	r0, r2, #31
 80a2542:	bf5c      	itt	pl
 80a2544:	2201      	movpl	r2, #1
 80a2546:	601a      	strpl	r2, [r3, #0]
 80a2548:	4b16      	ldr	r3, [pc, #88]	; (80a25a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a254a:	681a      	ldr	r2, [r3, #0]
 80a254c:	07d1      	lsls	r1, r2, #31
 80a254e:	bf5c      	itt	pl
 80a2550:	2201      	movpl	r2, #1
 80a2552:	601a      	strpl	r2, [r3, #0]
 80a2554:	4b14      	ldr	r3, [pc, #80]	; (80a25a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2556:	681a      	ldr	r2, [r3, #0]
 80a2558:	07d2      	lsls	r2, r2, #31
 80a255a:	bf5c      	itt	pl
 80a255c:	2201      	movpl	r2, #1
 80a255e:	601a      	strpl	r2, [r3, #0]
 80a2560:	4b12      	ldr	r3, [pc, #72]	; (80a25ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2562:	681a      	ldr	r2, [r3, #0]
 80a2564:	07d0      	lsls	r0, r2, #31
 80a2566:	bf5c      	itt	pl
 80a2568:	2201      	movpl	r2, #1
 80a256a:	601a      	strpl	r2, [r3, #0]
 80a256c:	4b10      	ldr	r3, [pc, #64]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a256e:	681a      	ldr	r2, [r3, #0]
 80a2570:	07d1      	lsls	r1, r2, #31
 80a2572:	bf5c      	itt	pl
 80a2574:	2201      	movpl	r2, #1
 80a2576:	601a      	strpl	r2, [r3, #0]
 80a2578:	4b0e      	ldr	r3, [pc, #56]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a257a:	681a      	ldr	r2, [r3, #0]
 80a257c:	07d2      	lsls	r2, r2, #31
 80a257e:	bf5c      	itt	pl
 80a2580:	2201      	movpl	r2, #1
 80a2582:	601a      	strpl	r2, [r3, #0]
 80a2584:	4770      	bx	lr
 80a2586:	bf00      	nop
 80a2588:	20000270 	.word	0x20000270
 80a258c:	2000026c 	.word	0x2000026c
 80a2590:	20000268 	.word	0x20000268
 80a2594:	20000264 	.word	0x20000264
 80a2598:	20000260 	.word	0x20000260
 80a259c:	2000025c 	.word	0x2000025c
 80a25a0:	20000258 	.word	0x20000258
 80a25a4:	20000254 	.word	0x20000254
 80a25a8:	20000250 	.word	0x20000250
 80a25ac:	2000024c 	.word	0x2000024c
 80a25b0:	20000248 	.word	0x20000248
 80a25b4:	20000244 	.word	0x20000244

080a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a25b8:	4b24      	ldr	r3, [pc, #144]	; (80a264c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a25ba:	681a      	ldr	r2, [r3, #0]
 80a25bc:	07d0      	lsls	r0, r2, #31
 80a25be:	bf5c      	itt	pl
 80a25c0:	2201      	movpl	r2, #1
 80a25c2:	601a      	strpl	r2, [r3, #0]
 80a25c4:	4b22      	ldr	r3, [pc, #136]	; (80a2650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a25c6:	681a      	ldr	r2, [r3, #0]
 80a25c8:	07d1      	lsls	r1, r2, #31
 80a25ca:	bf5c      	itt	pl
 80a25cc:	2201      	movpl	r2, #1
 80a25ce:	601a      	strpl	r2, [r3, #0]
 80a25d0:	4b20      	ldr	r3, [pc, #128]	; (80a2654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a25d2:	681a      	ldr	r2, [r3, #0]
 80a25d4:	07d2      	lsls	r2, r2, #31
 80a25d6:	bf5c      	itt	pl
 80a25d8:	2201      	movpl	r2, #1
 80a25da:	601a      	strpl	r2, [r3, #0]
 80a25dc:	4b1e      	ldr	r3, [pc, #120]	; (80a2658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a25de:	681a      	ldr	r2, [r3, #0]
 80a25e0:	07d0      	lsls	r0, r2, #31
 80a25e2:	bf5c      	itt	pl
 80a25e4:	2201      	movpl	r2, #1
 80a25e6:	601a      	strpl	r2, [r3, #0]
 80a25e8:	4b1c      	ldr	r3, [pc, #112]	; (80a265c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a25ea:	681a      	ldr	r2, [r3, #0]
 80a25ec:	07d1      	lsls	r1, r2, #31
 80a25ee:	bf5c      	itt	pl
 80a25f0:	2201      	movpl	r2, #1
 80a25f2:	601a      	strpl	r2, [r3, #0]
 80a25f4:	4b1a      	ldr	r3, [pc, #104]	; (80a2660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a25f6:	681a      	ldr	r2, [r3, #0]
 80a25f8:	07d2      	lsls	r2, r2, #31
 80a25fa:	bf5c      	itt	pl
 80a25fc:	2201      	movpl	r2, #1
 80a25fe:	601a      	strpl	r2, [r3, #0]
 80a2600:	4b18      	ldr	r3, [pc, #96]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2602:	681a      	ldr	r2, [r3, #0]
 80a2604:	07d0      	lsls	r0, r2, #31
 80a2606:	bf5c      	itt	pl
 80a2608:	2201      	movpl	r2, #1
 80a260a:	601a      	strpl	r2, [r3, #0]
 80a260c:	4b16      	ldr	r3, [pc, #88]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a260e:	681a      	ldr	r2, [r3, #0]
 80a2610:	07d1      	lsls	r1, r2, #31
 80a2612:	bf5c      	itt	pl
 80a2614:	2201      	movpl	r2, #1
 80a2616:	601a      	strpl	r2, [r3, #0]
 80a2618:	4b14      	ldr	r3, [pc, #80]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a261a:	681a      	ldr	r2, [r3, #0]
 80a261c:	07d2      	lsls	r2, r2, #31
 80a261e:	bf5c      	itt	pl
 80a2620:	2201      	movpl	r2, #1
 80a2622:	601a      	strpl	r2, [r3, #0]
 80a2624:	4b12      	ldr	r3, [pc, #72]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2626:	681a      	ldr	r2, [r3, #0]
 80a2628:	07d0      	lsls	r0, r2, #31
 80a262a:	bf5c      	itt	pl
 80a262c:	2201      	movpl	r2, #1
 80a262e:	601a      	strpl	r2, [r3, #0]
 80a2630:	4b10      	ldr	r3, [pc, #64]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d1      	lsls	r1, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4b0e      	ldr	r3, [pc, #56]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a263e:	681a      	ldr	r2, [r3, #0]
 80a2640:	07d2      	lsls	r2, r2, #31
 80a2642:	bf5c      	itt	pl
 80a2644:	2201      	movpl	r2, #1
 80a2646:	601a      	strpl	r2, [r3, #0]
 80a2648:	4770      	bx	lr
 80a264a:	bf00      	nop
 80a264c:	200002a0 	.word	0x200002a0
 80a2650:	2000029c 	.word	0x2000029c
 80a2654:	20000298 	.word	0x20000298
 80a2658:	20000294 	.word	0x20000294
 80a265c:	20000290 	.word	0x20000290
 80a2660:	2000028c 	.word	0x2000028c
 80a2664:	20000288 	.word	0x20000288
 80a2668:	20000284 	.word	0x20000284
 80a266c:	20000280 	.word	0x20000280
 80a2670:	2000027c 	.word	0x2000027c
 80a2674:	20000278 	.word	0x20000278
 80a2678:	20000274 	.word	0x20000274

080a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a267c:	4b18      	ldr	r3, [pc, #96]	; (80a26e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a267e:	681a      	ldr	r2, [r3, #0]
 80a2680:	07d1      	lsls	r1, r2, #31
 80a2682:	bf5c      	itt	pl
 80a2684:	2201      	movpl	r2, #1
 80a2686:	601a      	strpl	r2, [r3, #0]
 80a2688:	4b16      	ldr	r3, [pc, #88]	; (80a26e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a268a:	681a      	ldr	r2, [r3, #0]
 80a268c:	07d2      	lsls	r2, r2, #31
 80a268e:	bf5c      	itt	pl
 80a2690:	2201      	movpl	r2, #1
 80a2692:	601a      	strpl	r2, [r3, #0]
 80a2694:	4b14      	ldr	r3, [pc, #80]	; (80a26e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2696:	681a      	ldr	r2, [r3, #0]
 80a2698:	07d0      	lsls	r0, r2, #31
 80a269a:	bf5c      	itt	pl
 80a269c:	2201      	movpl	r2, #1
 80a269e:	601a      	strpl	r2, [r3, #0]
 80a26a0:	4b12      	ldr	r3, [pc, #72]	; (80a26ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a26a2:	681a      	ldr	r2, [r3, #0]
 80a26a4:	07d1      	lsls	r1, r2, #31
 80a26a6:	bf5c      	itt	pl
 80a26a8:	2201      	movpl	r2, #1
 80a26aa:	601a      	strpl	r2, [r3, #0]
 80a26ac:	4b10      	ldr	r3, [pc, #64]	; (80a26f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a26ae:	681a      	ldr	r2, [r3, #0]
 80a26b0:	07d2      	lsls	r2, r2, #31
 80a26b2:	bf5c      	itt	pl
 80a26b4:	2201      	movpl	r2, #1
 80a26b6:	601a      	strpl	r2, [r3, #0]
 80a26b8:	4b0e      	ldr	r3, [pc, #56]	; (80a26f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a26ba:	681a      	ldr	r2, [r3, #0]
 80a26bc:	07d0      	lsls	r0, r2, #31
 80a26be:	bf5c      	itt	pl
 80a26c0:	2201      	movpl	r2, #1
 80a26c2:	601a      	strpl	r2, [r3, #0]
 80a26c4:	4b0c      	ldr	r3, [pc, #48]	; (80a26f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a26c6:	681a      	ldr	r2, [r3, #0]
 80a26c8:	07d1      	lsls	r1, r2, #31
 80a26ca:	bf5c      	itt	pl
 80a26cc:	2201      	movpl	r2, #1
 80a26ce:	601a      	strpl	r2, [r3, #0]
 80a26d0:	4b0a      	ldr	r3, [pc, #40]	; (80a26fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a26d2:	681a      	ldr	r2, [r3, #0]
 80a26d4:	07d2      	lsls	r2, r2, #31
 80a26d6:	bf5c      	itt	pl
 80a26d8:	2201      	movpl	r2, #1
 80a26da:	601a      	strpl	r2, [r3, #0]
 80a26dc:	4770      	bx	lr
 80a26de:	bf00      	nop
 80a26e0:	200002c0 	.word	0x200002c0
 80a26e4:	200002bc 	.word	0x200002bc
 80a26e8:	200002b8 	.word	0x200002b8
 80a26ec:	200002b4 	.word	0x200002b4
 80a26f0:	200002b0 	.word	0x200002b0
 80a26f4:	200002ac 	.word	0x200002ac
 80a26f8:	200002a8 	.word	0x200002a8
 80a26fc:	200002a4 	.word	0x200002a4

080a2700 <__aeabi_drsub>:
 80a2700:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2704:	e002      	b.n	80a270c <__adddf3>
 80a2706:	bf00      	nop

080a2708 <__aeabi_dsub>:
 80a2708:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a270c <__adddf3>:
 80a270c:	b530      	push	{r4, r5, lr}
 80a270e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2712:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2716:	ea94 0f05 	teq	r4, r5
 80a271a:	bf08      	it	eq
 80a271c:	ea90 0f02 	teqeq	r0, r2
 80a2720:	bf1f      	itttt	ne
 80a2722:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2726:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a272a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a272e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2732:	f000 80e2 	beq.w	80a28fa <__adddf3+0x1ee>
 80a2736:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a273a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a273e:	bfb8      	it	lt
 80a2740:	426d      	neglt	r5, r5
 80a2742:	dd0c      	ble.n	80a275e <__adddf3+0x52>
 80a2744:	442c      	add	r4, r5
 80a2746:	ea80 0202 	eor.w	r2, r0, r2
 80a274a:	ea81 0303 	eor.w	r3, r1, r3
 80a274e:	ea82 0000 	eor.w	r0, r2, r0
 80a2752:	ea83 0101 	eor.w	r1, r3, r1
 80a2756:	ea80 0202 	eor.w	r2, r0, r2
 80a275a:	ea81 0303 	eor.w	r3, r1, r3
 80a275e:	2d36      	cmp	r5, #54	; 0x36
 80a2760:	bf88      	it	hi
 80a2762:	bd30      	pophi	{r4, r5, pc}
 80a2764:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a276c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2770:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2774:	d002      	beq.n	80a277c <__adddf3+0x70>
 80a2776:	4240      	negs	r0, r0
 80a2778:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a277c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2784:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2788:	d002      	beq.n	80a2790 <__adddf3+0x84>
 80a278a:	4252      	negs	r2, r2
 80a278c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2790:	ea94 0f05 	teq	r4, r5
 80a2794:	f000 80a7 	beq.w	80a28e6 <__adddf3+0x1da>
 80a2798:	f1a4 0401 	sub.w	r4, r4, #1
 80a279c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a27a0:	db0d      	blt.n	80a27be <__adddf3+0xb2>
 80a27a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a27a6:	fa22 f205 	lsr.w	r2, r2, r5
 80a27aa:	1880      	adds	r0, r0, r2
 80a27ac:	f141 0100 	adc.w	r1, r1, #0
 80a27b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a27b4:	1880      	adds	r0, r0, r2
 80a27b6:	fa43 f305 	asr.w	r3, r3, r5
 80a27ba:	4159      	adcs	r1, r3
 80a27bc:	e00e      	b.n	80a27dc <__adddf3+0xd0>
 80a27be:	f1a5 0520 	sub.w	r5, r5, #32
 80a27c2:	f10e 0e20 	add.w	lr, lr, #32
 80a27c6:	2a01      	cmp	r2, #1
 80a27c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a27cc:	bf28      	it	cs
 80a27ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a27d2:	fa43 f305 	asr.w	r3, r3, r5
 80a27d6:	18c0      	adds	r0, r0, r3
 80a27d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a27dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a27e0:	d507      	bpl.n	80a27f2 <__adddf3+0xe6>
 80a27e2:	f04f 0e00 	mov.w	lr, #0
 80a27e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a27ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a27ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80a27f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a27f6:	d31b      	bcc.n	80a2830 <__adddf3+0x124>
 80a27f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a27fc:	d30c      	bcc.n	80a2818 <__adddf3+0x10c>
 80a27fe:	0849      	lsrs	r1, r1, #1
 80a2800:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2804:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2808:	f104 0401 	add.w	r4, r4, #1
 80a280c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2810:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2814:	f080 809a 	bcs.w	80a294c <__adddf3+0x240>
 80a2818:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a281c:	bf08      	it	eq
 80a281e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2822:	f150 0000 	adcs.w	r0, r0, #0
 80a2826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a282a:	ea41 0105 	orr.w	r1, r1, r5
 80a282e:	bd30      	pop	{r4, r5, pc}
 80a2830:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2834:	4140      	adcs	r0, r0
 80a2836:	eb41 0101 	adc.w	r1, r1, r1
 80a283a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a283e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2842:	d1e9      	bne.n	80a2818 <__adddf3+0x10c>
 80a2844:	f091 0f00 	teq	r1, #0
 80a2848:	bf04      	itt	eq
 80a284a:	4601      	moveq	r1, r0
 80a284c:	2000      	moveq	r0, #0
 80a284e:	fab1 f381 	clz	r3, r1
 80a2852:	bf08      	it	eq
 80a2854:	3320      	addeq	r3, #32
 80a2856:	f1a3 030b 	sub.w	r3, r3, #11
 80a285a:	f1b3 0220 	subs.w	r2, r3, #32
 80a285e:	da0c      	bge.n	80a287a <__adddf3+0x16e>
 80a2860:	320c      	adds	r2, #12
 80a2862:	dd08      	ble.n	80a2876 <__adddf3+0x16a>
 80a2864:	f102 0c14 	add.w	ip, r2, #20
 80a2868:	f1c2 020c 	rsb	r2, r2, #12
 80a286c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2870:	fa21 f102 	lsr.w	r1, r1, r2
 80a2874:	e00c      	b.n	80a2890 <__adddf3+0x184>
 80a2876:	f102 0214 	add.w	r2, r2, #20
 80a287a:	bfd8      	it	le
 80a287c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2880:	fa01 f102 	lsl.w	r1, r1, r2
 80a2884:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2888:	bfdc      	itt	le
 80a288a:	ea41 010c 	orrle.w	r1, r1, ip
 80a288e:	4090      	lslle	r0, r2
 80a2890:	1ae4      	subs	r4, r4, r3
 80a2892:	bfa2      	ittt	ge
 80a2894:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2898:	4329      	orrge	r1, r5
 80a289a:	bd30      	popge	{r4, r5, pc}
 80a289c:	ea6f 0404 	mvn.w	r4, r4
 80a28a0:	3c1f      	subs	r4, #31
 80a28a2:	da1c      	bge.n	80a28de <__adddf3+0x1d2>
 80a28a4:	340c      	adds	r4, #12
 80a28a6:	dc0e      	bgt.n	80a28c6 <__adddf3+0x1ba>
 80a28a8:	f104 0414 	add.w	r4, r4, #20
 80a28ac:	f1c4 0220 	rsb	r2, r4, #32
 80a28b0:	fa20 f004 	lsr.w	r0, r0, r4
 80a28b4:	fa01 f302 	lsl.w	r3, r1, r2
 80a28b8:	ea40 0003 	orr.w	r0, r0, r3
 80a28bc:	fa21 f304 	lsr.w	r3, r1, r4
 80a28c0:	ea45 0103 	orr.w	r1, r5, r3
 80a28c4:	bd30      	pop	{r4, r5, pc}
 80a28c6:	f1c4 040c 	rsb	r4, r4, #12
 80a28ca:	f1c4 0220 	rsb	r2, r4, #32
 80a28ce:	fa20 f002 	lsr.w	r0, r0, r2
 80a28d2:	fa01 f304 	lsl.w	r3, r1, r4
 80a28d6:	ea40 0003 	orr.w	r0, r0, r3
 80a28da:	4629      	mov	r1, r5
 80a28dc:	bd30      	pop	{r4, r5, pc}
 80a28de:	fa21 f004 	lsr.w	r0, r1, r4
 80a28e2:	4629      	mov	r1, r5
 80a28e4:	bd30      	pop	{r4, r5, pc}
 80a28e6:	f094 0f00 	teq	r4, #0
 80a28ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a28ee:	bf06      	itte	eq
 80a28f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a28f4:	3401      	addeq	r4, #1
 80a28f6:	3d01      	subne	r5, #1
 80a28f8:	e74e      	b.n	80a2798 <__adddf3+0x8c>
 80a28fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a28fe:	bf18      	it	ne
 80a2900:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2904:	d029      	beq.n	80a295a <__adddf3+0x24e>
 80a2906:	ea94 0f05 	teq	r4, r5
 80a290a:	bf08      	it	eq
 80a290c:	ea90 0f02 	teqeq	r0, r2
 80a2910:	d005      	beq.n	80a291e <__adddf3+0x212>
 80a2912:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2916:	bf04      	itt	eq
 80a2918:	4619      	moveq	r1, r3
 80a291a:	4610      	moveq	r0, r2
 80a291c:	bd30      	pop	{r4, r5, pc}
 80a291e:	ea91 0f03 	teq	r1, r3
 80a2922:	bf1e      	ittt	ne
 80a2924:	2100      	movne	r1, #0
 80a2926:	2000      	movne	r0, #0
 80a2928:	bd30      	popne	{r4, r5, pc}
 80a292a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a292e:	d105      	bne.n	80a293c <__adddf3+0x230>
 80a2930:	0040      	lsls	r0, r0, #1
 80a2932:	4149      	adcs	r1, r1
 80a2934:	bf28      	it	cs
 80a2936:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a293a:	bd30      	pop	{r4, r5, pc}
 80a293c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2940:	bf3c      	itt	cc
 80a2942:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2946:	bd30      	popcc	{r4, r5, pc}
 80a2948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a294c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2954:	f04f 0000 	mov.w	r0, #0
 80a2958:	bd30      	pop	{r4, r5, pc}
 80a295a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a295e:	bf1a      	itte	ne
 80a2960:	4619      	movne	r1, r3
 80a2962:	4610      	movne	r0, r2
 80a2964:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2968:	bf1c      	itt	ne
 80a296a:	460b      	movne	r3, r1
 80a296c:	4602      	movne	r2, r0
 80a296e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2972:	bf06      	itte	eq
 80a2974:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2978:	ea91 0f03 	teqeq	r1, r3
 80a297c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2980:	bd30      	pop	{r4, r5, pc}
 80a2982:	bf00      	nop

080a2984 <__aeabi_ui2d>:
 80a2984:	f090 0f00 	teq	r0, #0
 80a2988:	bf04      	itt	eq
 80a298a:	2100      	moveq	r1, #0
 80a298c:	4770      	bxeq	lr
 80a298e:	b530      	push	{r4, r5, lr}
 80a2990:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2994:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2998:	f04f 0500 	mov.w	r5, #0
 80a299c:	f04f 0100 	mov.w	r1, #0
 80a29a0:	e750      	b.n	80a2844 <__adddf3+0x138>
 80a29a2:	bf00      	nop

080a29a4 <__aeabi_i2d>:
 80a29a4:	f090 0f00 	teq	r0, #0
 80a29a8:	bf04      	itt	eq
 80a29aa:	2100      	moveq	r1, #0
 80a29ac:	4770      	bxeq	lr
 80a29ae:	b530      	push	{r4, r5, lr}
 80a29b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a29b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a29b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a29bc:	bf48      	it	mi
 80a29be:	4240      	negmi	r0, r0
 80a29c0:	f04f 0100 	mov.w	r1, #0
 80a29c4:	e73e      	b.n	80a2844 <__adddf3+0x138>
 80a29c6:	bf00      	nop

080a29c8 <__aeabi_f2d>:
 80a29c8:	0042      	lsls	r2, r0, #1
 80a29ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a29ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a29d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a29d6:	bf1f      	itttt	ne
 80a29d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a29dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a29e4:	4770      	bxne	lr
 80a29e6:	f092 0f00 	teq	r2, #0
 80a29ea:	bf14      	ite	ne
 80a29ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a29f0:	4770      	bxeq	lr
 80a29f2:	b530      	push	{r4, r5, lr}
 80a29f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a29f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2a00:	e720      	b.n	80a2844 <__adddf3+0x138>
 80a2a02:	bf00      	nop

080a2a04 <__aeabi_ul2d>:
 80a2a04:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a08:	bf08      	it	eq
 80a2a0a:	4770      	bxeq	lr
 80a2a0c:	b530      	push	{r4, r5, lr}
 80a2a0e:	f04f 0500 	mov.w	r5, #0
 80a2a12:	e00a      	b.n	80a2a2a <__aeabi_l2d+0x16>

080a2a14 <__aeabi_l2d>:
 80a2a14:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a18:	bf08      	it	eq
 80a2a1a:	4770      	bxeq	lr
 80a2a1c:	b530      	push	{r4, r5, lr}
 80a2a1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2a22:	d502      	bpl.n	80a2a2a <__aeabi_l2d+0x16>
 80a2a24:	4240      	negs	r0, r0
 80a2a26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2a36:	f43f aedc 	beq.w	80a27f2 <__adddf3+0xe6>
 80a2a3a:	f04f 0203 	mov.w	r2, #3
 80a2a3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a42:	bf18      	it	ne
 80a2a44:	3203      	addne	r2, #3
 80a2a46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2a4a:	bf18      	it	ne
 80a2a4c:	3203      	addne	r2, #3
 80a2a4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2a52:	f1c2 0320 	rsb	r3, r2, #32
 80a2a56:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2a5a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2a5e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2a62:	ea40 000e 	orr.w	r0, r0, lr
 80a2a66:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a6a:	4414      	add	r4, r2
 80a2a6c:	e6c1      	b.n	80a27f2 <__adddf3+0xe6>
 80a2a6e:	bf00      	nop

080a2a70 <__aeabi_dmul>:
 80a2a70:	b570      	push	{r4, r5, r6, lr}
 80a2a72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2a76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2a7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2a7e:	bf1d      	ittte	ne
 80a2a80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2a84:	ea94 0f0c 	teqne	r4, ip
 80a2a88:	ea95 0f0c 	teqne	r5, ip
 80a2a8c:	f000 f8de 	bleq	80a2c4c <__aeabi_dmul+0x1dc>
 80a2a90:	442c      	add	r4, r5
 80a2a92:	ea81 0603 	eor.w	r6, r1, r3
 80a2a96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2a9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2a9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2aa2:	bf18      	it	ne
 80a2aa4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2ab0:	d038      	beq.n	80a2b24 <__aeabi_dmul+0xb4>
 80a2ab2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2ab6:	f04f 0500 	mov.w	r5, #0
 80a2aba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2abe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2ac2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2ac6:	f04f 0600 	mov.w	r6, #0
 80a2aca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2ace:	f09c 0f00 	teq	ip, #0
 80a2ad2:	bf18      	it	ne
 80a2ad4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2ad8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2adc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2ae0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2ae4:	d204      	bcs.n	80a2af0 <__aeabi_dmul+0x80>
 80a2ae6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2aea:	416d      	adcs	r5, r5
 80a2aec:	eb46 0606 	adc.w	r6, r6, r6
 80a2af0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2af4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2af8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2afc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2b00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2b04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2b08:	bf88      	it	hi
 80a2b0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2b0e:	d81e      	bhi.n	80a2b4e <__aeabi_dmul+0xde>
 80a2b10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2b14:	bf08      	it	eq
 80a2b16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2b1a:	f150 0000 	adcs.w	r0, r0, #0
 80a2b1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2b22:	bd70      	pop	{r4, r5, r6, pc}
 80a2b24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2b28:	ea46 0101 	orr.w	r1, r6, r1
 80a2b2c:	ea40 0002 	orr.w	r0, r0, r2
 80a2b30:	ea81 0103 	eor.w	r1, r1, r3
 80a2b34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2b38:	bfc2      	ittt	gt
 80a2b3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2b3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2b42:	bd70      	popgt	{r4, r5, r6, pc}
 80a2b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b48:	f04f 0e00 	mov.w	lr, #0
 80a2b4c:	3c01      	subs	r4, #1
 80a2b4e:	f300 80ab 	bgt.w	80a2ca8 <__aeabi_dmul+0x238>
 80a2b52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2b56:	bfde      	ittt	le
 80a2b58:	2000      	movle	r0, #0
 80a2b5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2b5e:	bd70      	pople	{r4, r5, r6, pc}
 80a2b60:	f1c4 0400 	rsb	r4, r4, #0
 80a2b64:	3c20      	subs	r4, #32
 80a2b66:	da35      	bge.n	80a2bd4 <__aeabi_dmul+0x164>
 80a2b68:	340c      	adds	r4, #12
 80a2b6a:	dc1b      	bgt.n	80a2ba4 <__aeabi_dmul+0x134>
 80a2b6c:	f104 0414 	add.w	r4, r4, #20
 80a2b70:	f1c4 0520 	rsb	r5, r4, #32
 80a2b74:	fa00 f305 	lsl.w	r3, r0, r5
 80a2b78:	fa20 f004 	lsr.w	r0, r0, r4
 80a2b7c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2b80:	ea40 0002 	orr.w	r0, r0, r2
 80a2b84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2b88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2b8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2b90:	fa21 f604 	lsr.w	r6, r1, r4
 80a2b94:	eb42 0106 	adc.w	r1, r2, r6
 80a2b98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2b9c:	bf08      	it	eq
 80a2b9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2ba2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ba4:	f1c4 040c 	rsb	r4, r4, #12
 80a2ba8:	f1c4 0520 	rsb	r5, r4, #32
 80a2bac:	fa00 f304 	lsl.w	r3, r0, r4
 80a2bb0:	fa20 f005 	lsr.w	r0, r0, r5
 80a2bb4:	fa01 f204 	lsl.w	r2, r1, r4
 80a2bb8:	ea40 0002 	orr.w	r0, r0, r2
 80a2bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2bc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2bc4:	f141 0100 	adc.w	r1, r1, #0
 80a2bc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2bcc:	bf08      	it	eq
 80a2bce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2bd2:	bd70      	pop	{r4, r5, r6, pc}
 80a2bd4:	f1c4 0520 	rsb	r5, r4, #32
 80a2bd8:	fa00 f205 	lsl.w	r2, r0, r5
 80a2bdc:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2be0:	fa20 f304 	lsr.w	r3, r0, r4
 80a2be4:	fa01 f205 	lsl.w	r2, r1, r5
 80a2be8:	ea43 0302 	orr.w	r3, r3, r2
 80a2bec:	fa21 f004 	lsr.w	r0, r1, r4
 80a2bf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2bf4:	fa21 f204 	lsr.w	r2, r1, r4
 80a2bf8:	ea20 0002 	bic.w	r0, r0, r2
 80a2bfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2c00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c04:	bf08      	it	eq
 80a2c06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c0a:	bd70      	pop	{r4, r5, r6, pc}
 80a2c0c:	f094 0f00 	teq	r4, #0
 80a2c10:	d10f      	bne.n	80a2c32 <__aeabi_dmul+0x1c2>
 80a2c12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2c16:	0040      	lsls	r0, r0, #1
 80a2c18:	eb41 0101 	adc.w	r1, r1, r1
 80a2c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c20:	bf08      	it	eq
 80a2c22:	3c01      	subeq	r4, #1
 80a2c24:	d0f7      	beq.n	80a2c16 <__aeabi_dmul+0x1a6>
 80a2c26:	ea41 0106 	orr.w	r1, r1, r6
 80a2c2a:	f095 0f00 	teq	r5, #0
 80a2c2e:	bf18      	it	ne
 80a2c30:	4770      	bxne	lr
 80a2c32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2c36:	0052      	lsls	r2, r2, #1
 80a2c38:	eb43 0303 	adc.w	r3, r3, r3
 80a2c3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2c40:	bf08      	it	eq
 80a2c42:	3d01      	subeq	r5, #1
 80a2c44:	d0f7      	beq.n	80a2c36 <__aeabi_dmul+0x1c6>
 80a2c46:	ea43 0306 	orr.w	r3, r3, r6
 80a2c4a:	4770      	bx	lr
 80a2c4c:	ea94 0f0c 	teq	r4, ip
 80a2c50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2c54:	bf18      	it	ne
 80a2c56:	ea95 0f0c 	teqne	r5, ip
 80a2c5a:	d00c      	beq.n	80a2c76 <__aeabi_dmul+0x206>
 80a2c5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2c60:	bf18      	it	ne
 80a2c62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2c66:	d1d1      	bne.n	80a2c0c <__aeabi_dmul+0x19c>
 80a2c68:	ea81 0103 	eor.w	r1, r1, r3
 80a2c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2c70:	f04f 0000 	mov.w	r0, #0
 80a2c74:	bd70      	pop	{r4, r5, r6, pc}
 80a2c76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2c7a:	bf06      	itte	eq
 80a2c7c:	4610      	moveq	r0, r2
 80a2c7e:	4619      	moveq	r1, r3
 80a2c80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2c84:	d019      	beq.n	80a2cba <__aeabi_dmul+0x24a>
 80a2c86:	ea94 0f0c 	teq	r4, ip
 80a2c8a:	d102      	bne.n	80a2c92 <__aeabi_dmul+0x222>
 80a2c8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2c90:	d113      	bne.n	80a2cba <__aeabi_dmul+0x24a>
 80a2c92:	ea95 0f0c 	teq	r5, ip
 80a2c96:	d105      	bne.n	80a2ca4 <__aeabi_dmul+0x234>
 80a2c98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2c9c:	bf1c      	itt	ne
 80a2c9e:	4610      	movne	r0, r2
 80a2ca0:	4619      	movne	r1, r3
 80a2ca2:	d10a      	bne.n	80a2cba <__aeabi_dmul+0x24a>
 80a2ca4:	ea81 0103 	eor.w	r1, r1, r3
 80a2ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2cb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2cb4:	f04f 0000 	mov.w	r0, #0
 80a2cb8:	bd70      	pop	{r4, r5, r6, pc}
 80a2cba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2cbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2cc2:	bd70      	pop	{r4, r5, r6, pc}

080a2cc4 <__aeabi_ddiv>:
 80a2cc4:	b570      	push	{r4, r5, r6, lr}
 80a2cc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2cca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2cce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2cd2:	bf1d      	ittte	ne
 80a2cd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2cd8:	ea94 0f0c 	teqne	r4, ip
 80a2cdc:	ea95 0f0c 	teqne	r5, ip
 80a2ce0:	f000 f8a7 	bleq	80a2e32 <__aeabi_ddiv+0x16e>
 80a2ce4:	eba4 0405 	sub.w	r4, r4, r5
 80a2ce8:	ea81 0e03 	eor.w	lr, r1, r3
 80a2cec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2cf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2cf4:	f000 8088 	beq.w	80a2e08 <__aeabi_ddiv+0x144>
 80a2cf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2cfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2d00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2d04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2d08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2d0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2d10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2d14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2d18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2d1c:	429d      	cmp	r5, r3
 80a2d1e:	bf08      	it	eq
 80a2d20:	4296      	cmpeq	r6, r2
 80a2d22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2d26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2d2a:	d202      	bcs.n	80a2d32 <__aeabi_ddiv+0x6e>
 80a2d2c:	085b      	lsrs	r3, r3, #1
 80a2d2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2d32:	1ab6      	subs	r6, r6, r2
 80a2d34:	eb65 0503 	sbc.w	r5, r5, r3
 80a2d38:	085b      	lsrs	r3, r3, #1
 80a2d3a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2d3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2d42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2d46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2d4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2d4e:	bf22      	ittt	cs
 80a2d50:	1ab6      	subcs	r6, r6, r2
 80a2d52:	4675      	movcs	r5, lr
 80a2d54:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2d58:	085b      	lsrs	r3, r3, #1
 80a2d5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2d5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2d62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2d66:	bf22      	ittt	cs
 80a2d68:	1ab6      	subcs	r6, r6, r2
 80a2d6a:	4675      	movcs	r5, lr
 80a2d6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2d70:	085b      	lsrs	r3, r3, #1
 80a2d72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2d76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2d7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2d7e:	bf22      	ittt	cs
 80a2d80:	1ab6      	subcs	r6, r6, r2
 80a2d82:	4675      	movcs	r5, lr
 80a2d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2d88:	085b      	lsrs	r3, r3, #1
 80a2d8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2d8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2d92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2d96:	bf22      	ittt	cs
 80a2d98:	1ab6      	subcs	r6, r6, r2
 80a2d9a:	4675      	movcs	r5, lr
 80a2d9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2da0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2da4:	d018      	beq.n	80a2dd8 <__aeabi_ddiv+0x114>
 80a2da6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2daa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2dae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2db2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2db6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2dba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2dbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2dc2:	d1c0      	bne.n	80a2d46 <__aeabi_ddiv+0x82>
 80a2dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2dc8:	d10b      	bne.n	80a2de2 <__aeabi_ddiv+0x11e>
 80a2dca:	ea41 0100 	orr.w	r1, r1, r0
 80a2dce:	f04f 0000 	mov.w	r0, #0
 80a2dd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2dd6:	e7b6      	b.n	80a2d46 <__aeabi_ddiv+0x82>
 80a2dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ddc:	bf04      	itt	eq
 80a2dde:	4301      	orreq	r1, r0
 80a2de0:	2000      	moveq	r0, #0
 80a2de2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2de6:	bf88      	it	hi
 80a2de8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2dec:	f63f aeaf 	bhi.w	80a2b4e <__aeabi_dmul+0xde>
 80a2df0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2df4:	bf04      	itt	eq
 80a2df6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2dfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2dfe:	f150 0000 	adcs.w	r0, r0, #0
 80a2e02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2e06:	bd70      	pop	{r4, r5, r6, pc}
 80a2e08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2e0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2e10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2e14:	bfc2      	ittt	gt
 80a2e16:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2e1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2e1e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2e20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2e24:	f04f 0e00 	mov.w	lr, #0
 80a2e28:	3c01      	subs	r4, #1
 80a2e2a:	e690      	b.n	80a2b4e <__aeabi_dmul+0xde>
 80a2e2c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2e30:	e68d      	b.n	80a2b4e <__aeabi_dmul+0xde>
 80a2e32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2e36:	ea94 0f0c 	teq	r4, ip
 80a2e3a:	bf08      	it	eq
 80a2e3c:	ea95 0f0c 	teqeq	r5, ip
 80a2e40:	f43f af3b 	beq.w	80a2cba <__aeabi_dmul+0x24a>
 80a2e44:	ea94 0f0c 	teq	r4, ip
 80a2e48:	d10a      	bne.n	80a2e60 <__aeabi_ddiv+0x19c>
 80a2e4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2e4e:	f47f af34 	bne.w	80a2cba <__aeabi_dmul+0x24a>
 80a2e52:	ea95 0f0c 	teq	r5, ip
 80a2e56:	f47f af25 	bne.w	80a2ca4 <__aeabi_dmul+0x234>
 80a2e5a:	4610      	mov	r0, r2
 80a2e5c:	4619      	mov	r1, r3
 80a2e5e:	e72c      	b.n	80a2cba <__aeabi_dmul+0x24a>
 80a2e60:	ea95 0f0c 	teq	r5, ip
 80a2e64:	d106      	bne.n	80a2e74 <__aeabi_ddiv+0x1b0>
 80a2e66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2e6a:	f43f aefd 	beq.w	80a2c68 <__aeabi_dmul+0x1f8>
 80a2e6e:	4610      	mov	r0, r2
 80a2e70:	4619      	mov	r1, r3
 80a2e72:	e722      	b.n	80a2cba <__aeabi_dmul+0x24a>
 80a2e74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e78:	bf18      	it	ne
 80a2e7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e7e:	f47f aec5 	bne.w	80a2c0c <__aeabi_dmul+0x19c>
 80a2e82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2e86:	f47f af0d 	bne.w	80a2ca4 <__aeabi_dmul+0x234>
 80a2e8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2e8e:	f47f aeeb 	bne.w	80a2c68 <__aeabi_dmul+0x1f8>
 80a2e92:	e712      	b.n	80a2cba <__aeabi_dmul+0x24a>

080a2e94 <__gedf2>:
 80a2e94:	f04f 3cff 	mov.w	ip, #4294967295
 80a2e98:	e006      	b.n	80a2ea8 <__cmpdf2+0x4>
 80a2e9a:	bf00      	nop

080a2e9c <__ledf2>:
 80a2e9c:	f04f 0c01 	mov.w	ip, #1
 80a2ea0:	e002      	b.n	80a2ea8 <__cmpdf2+0x4>
 80a2ea2:	bf00      	nop

080a2ea4 <__cmpdf2>:
 80a2ea4:	f04f 0c01 	mov.w	ip, #1
 80a2ea8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2eac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2eb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2eb8:	bf18      	it	ne
 80a2eba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2ebe:	d01b      	beq.n	80a2ef8 <__cmpdf2+0x54>
 80a2ec0:	b001      	add	sp, #4
 80a2ec2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2ec6:	bf0c      	ite	eq
 80a2ec8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2ecc:	ea91 0f03 	teqne	r1, r3
 80a2ed0:	bf02      	ittt	eq
 80a2ed2:	ea90 0f02 	teqeq	r0, r2
 80a2ed6:	2000      	moveq	r0, #0
 80a2ed8:	4770      	bxeq	lr
 80a2eda:	f110 0f00 	cmn.w	r0, #0
 80a2ede:	ea91 0f03 	teq	r1, r3
 80a2ee2:	bf58      	it	pl
 80a2ee4:	4299      	cmppl	r1, r3
 80a2ee6:	bf08      	it	eq
 80a2ee8:	4290      	cmpeq	r0, r2
 80a2eea:	bf2c      	ite	cs
 80a2eec:	17d8      	asrcs	r0, r3, #31
 80a2eee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2ef2:	f040 0001 	orr.w	r0, r0, #1
 80a2ef6:	4770      	bx	lr
 80a2ef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f00:	d102      	bne.n	80a2f08 <__cmpdf2+0x64>
 80a2f02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2f06:	d107      	bne.n	80a2f18 <__cmpdf2+0x74>
 80a2f08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2f0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f10:	d1d6      	bne.n	80a2ec0 <__cmpdf2+0x1c>
 80a2f12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2f16:	d0d3      	beq.n	80a2ec0 <__cmpdf2+0x1c>
 80a2f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2f1c:	4770      	bx	lr
 80a2f1e:	bf00      	nop

080a2f20 <__aeabi_cdrcmple>:
 80a2f20:	4684      	mov	ip, r0
 80a2f22:	4610      	mov	r0, r2
 80a2f24:	4662      	mov	r2, ip
 80a2f26:	468c      	mov	ip, r1
 80a2f28:	4619      	mov	r1, r3
 80a2f2a:	4663      	mov	r3, ip
 80a2f2c:	e000      	b.n	80a2f30 <__aeabi_cdcmpeq>
 80a2f2e:	bf00      	nop

080a2f30 <__aeabi_cdcmpeq>:
 80a2f30:	b501      	push	{r0, lr}
 80a2f32:	f7ff ffb7 	bl	80a2ea4 <__cmpdf2>
 80a2f36:	2800      	cmp	r0, #0
 80a2f38:	bf48      	it	mi
 80a2f3a:	f110 0f00 	cmnmi.w	r0, #0
 80a2f3e:	bd01      	pop	{r0, pc}

080a2f40 <__aeabi_dcmpeq>:
 80a2f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f44:	f7ff fff4 	bl	80a2f30 <__aeabi_cdcmpeq>
 80a2f48:	bf0c      	ite	eq
 80a2f4a:	2001      	moveq	r0, #1
 80a2f4c:	2000      	movne	r0, #0
 80a2f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f52:	bf00      	nop

080a2f54 <__aeabi_dcmplt>:
 80a2f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f58:	f7ff ffea 	bl	80a2f30 <__aeabi_cdcmpeq>
 80a2f5c:	bf34      	ite	cc
 80a2f5e:	2001      	movcc	r0, #1
 80a2f60:	2000      	movcs	r0, #0
 80a2f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f66:	bf00      	nop

080a2f68 <__aeabi_dcmple>:
 80a2f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f6c:	f7ff ffe0 	bl	80a2f30 <__aeabi_cdcmpeq>
 80a2f70:	bf94      	ite	ls
 80a2f72:	2001      	movls	r0, #1
 80a2f74:	2000      	movhi	r0, #0
 80a2f76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f7a:	bf00      	nop

080a2f7c <__aeabi_dcmpge>:
 80a2f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f80:	f7ff ffce 	bl	80a2f20 <__aeabi_cdrcmple>
 80a2f84:	bf94      	ite	ls
 80a2f86:	2001      	movls	r0, #1
 80a2f88:	2000      	movhi	r0, #0
 80a2f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2f8e:	bf00      	nop

080a2f90 <__aeabi_dcmpgt>:
 80a2f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2f94:	f7ff ffc4 	bl	80a2f20 <__aeabi_cdrcmple>
 80a2f98:	bf34      	ite	cc
 80a2f9a:	2001      	movcc	r0, #1
 80a2f9c:	2000      	movcs	r0, #0
 80a2f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2fa2:	bf00      	nop

080a2fa4 <__aeabi_d2uiz>:
 80a2fa4:	004a      	lsls	r2, r1, #1
 80a2fa6:	d211      	bcs.n	80a2fcc <__aeabi_d2uiz+0x28>
 80a2fa8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2fac:	d211      	bcs.n	80a2fd2 <__aeabi_d2uiz+0x2e>
 80a2fae:	d50d      	bpl.n	80a2fcc <__aeabi_d2uiz+0x28>
 80a2fb0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2fb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2fb8:	d40e      	bmi.n	80a2fd8 <__aeabi_d2uiz+0x34>
 80a2fba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a2fc2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2fc6:	fa23 f002 	lsr.w	r0, r3, r2
 80a2fca:	4770      	bx	lr
 80a2fcc:	f04f 0000 	mov.w	r0, #0
 80a2fd0:	4770      	bx	lr
 80a2fd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a2fd6:	d102      	bne.n	80a2fde <__aeabi_d2uiz+0x3a>
 80a2fd8:	f04f 30ff 	mov.w	r0, #4294967295
 80a2fdc:	4770      	bx	lr
 80a2fde:	f04f 0000 	mov.w	r0, #0
 80a2fe2:	4770      	bx	lr

080a2fe4 <__aeabi_uldivmod>:
 80a2fe4:	b953      	cbnz	r3, 80a2ffc <__aeabi_uldivmod+0x18>
 80a2fe6:	b94a      	cbnz	r2, 80a2ffc <__aeabi_uldivmod+0x18>
 80a2fe8:	2900      	cmp	r1, #0
 80a2fea:	bf08      	it	eq
 80a2fec:	2800      	cmpeq	r0, #0
 80a2fee:	bf1c      	itt	ne
 80a2ff0:	f04f 31ff 	movne.w	r1, #4294967295
 80a2ff4:	f04f 30ff 	movne.w	r0, #4294967295
 80a2ff8:	f000 b9a6 	b.w	80a3348 <__aeabi_idiv0>
 80a2ffc:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3000:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3004:	f000 f82a 	bl	80a305c <__udivmoddi4>
 80a3008:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a300c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3010:	b004      	add	sp, #16
 80a3012:	4770      	bx	lr

080a3014 <__aeabi_d2ulz>:
 80a3014:	b5d0      	push	{r4, r6, r7, lr}
 80a3016:	2200      	movs	r2, #0
 80a3018:	4b0e      	ldr	r3, [pc, #56]	; (80a3054 <__aeabi_d2ulz+0x40>)
 80a301a:	4606      	mov	r6, r0
 80a301c:	460f      	mov	r7, r1
 80a301e:	f7ff fd27 	bl	80a2a70 <__aeabi_dmul>
 80a3022:	f7ff ffbf 	bl	80a2fa4 <__aeabi_d2uiz>
 80a3026:	4604      	mov	r4, r0
 80a3028:	f7ff fcac 	bl	80a2984 <__aeabi_ui2d>
 80a302c:	2200      	movs	r2, #0
 80a302e:	4b0a      	ldr	r3, [pc, #40]	; (80a3058 <__aeabi_d2ulz+0x44>)
 80a3030:	f7ff fd1e 	bl	80a2a70 <__aeabi_dmul>
 80a3034:	4602      	mov	r2, r0
 80a3036:	460b      	mov	r3, r1
 80a3038:	4630      	mov	r0, r6
 80a303a:	4639      	mov	r1, r7
 80a303c:	f7ff fb64 	bl	80a2708 <__aeabi_dsub>
 80a3040:	f7ff ffb0 	bl	80a2fa4 <__aeabi_d2uiz>
 80a3044:	4623      	mov	r3, r4
 80a3046:	2200      	movs	r2, #0
 80a3048:	ea42 0200 	orr.w	r2, r2, r0
 80a304c:	4610      	mov	r0, r2
 80a304e:	4619      	mov	r1, r3
 80a3050:	bdd0      	pop	{r4, r6, r7, pc}
 80a3052:	bf00      	nop
 80a3054:	3df00000 	.word	0x3df00000
 80a3058:	41f00000 	.word	0x41f00000

080a305c <__udivmoddi4>:
 80a305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3060:	468c      	mov	ip, r1
 80a3062:	460c      	mov	r4, r1
 80a3064:	4605      	mov	r5, r0
 80a3066:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3068:	2b00      	cmp	r3, #0
 80a306a:	d14f      	bne.n	80a310c <__udivmoddi4+0xb0>
 80a306c:	428a      	cmp	r2, r1
 80a306e:	4617      	mov	r7, r2
 80a3070:	d96b      	bls.n	80a314a <__udivmoddi4+0xee>
 80a3072:	fab2 fe82 	clz	lr, r2
 80a3076:	f1be 0f00 	cmp.w	lr, #0
 80a307a:	d00b      	beq.n	80a3094 <__udivmoddi4+0x38>
 80a307c:	f1ce 0520 	rsb	r5, lr, #32
 80a3080:	fa20 f505 	lsr.w	r5, r0, r5
 80a3084:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3088:	ea45 0c03 	orr.w	ip, r5, r3
 80a308c:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3090:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3094:	0c39      	lsrs	r1, r7, #16
 80a3096:	fbbc f0f1 	udiv	r0, ip, r1
 80a309a:	b2ba      	uxth	r2, r7
 80a309c:	fb01 c310 	mls	r3, r1, r0, ip
 80a30a0:	fb00 f802 	mul.w	r8, r0, r2
 80a30a4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a30a8:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a30ac:	45a0      	cmp	r8, r4
 80a30ae:	d909      	bls.n	80a30c4 <__udivmoddi4+0x68>
 80a30b0:	19e4      	adds	r4, r4, r7
 80a30b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80a30b6:	f080 8128 	bcs.w	80a330a <__udivmoddi4+0x2ae>
 80a30ba:	45a0      	cmp	r8, r4
 80a30bc:	f240 8125 	bls.w	80a330a <__udivmoddi4+0x2ae>
 80a30c0:	3802      	subs	r0, #2
 80a30c2:	443c      	add	r4, r7
 80a30c4:	ebc8 0404 	rsb	r4, r8, r4
 80a30c8:	fbb4 f3f1 	udiv	r3, r4, r1
 80a30cc:	fb01 4c13 	mls	ip, r1, r3, r4
 80a30d0:	fb03 f202 	mul.w	r2, r3, r2
 80a30d4:	b2ac      	uxth	r4, r5
 80a30d6:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a30da:	428a      	cmp	r2, r1
 80a30dc:	d909      	bls.n	80a30f2 <__udivmoddi4+0x96>
 80a30de:	19c9      	adds	r1, r1, r7
 80a30e0:	f103 34ff 	add.w	r4, r3, #4294967295
 80a30e4:	f080 810f 	bcs.w	80a3306 <__udivmoddi4+0x2aa>
 80a30e8:	428a      	cmp	r2, r1
 80a30ea:	f240 810c 	bls.w	80a3306 <__udivmoddi4+0x2aa>
 80a30ee:	3b02      	subs	r3, #2
 80a30f0:	4439      	add	r1, r7
 80a30f2:	1a8a      	subs	r2, r1, r2
 80a30f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a30f8:	2100      	movs	r1, #0
 80a30fa:	2e00      	cmp	r6, #0
 80a30fc:	d063      	beq.n	80a31c6 <__udivmoddi4+0x16a>
 80a30fe:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3102:	2300      	movs	r3, #0
 80a3104:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a310c:	428b      	cmp	r3, r1
 80a310e:	d907      	bls.n	80a3120 <__udivmoddi4+0xc4>
 80a3110:	2e00      	cmp	r6, #0
 80a3112:	d056      	beq.n	80a31c2 <__udivmoddi4+0x166>
 80a3114:	2100      	movs	r1, #0
 80a3116:	e886 0011 	stmia.w	r6, {r0, r4}
 80a311a:	4608      	mov	r0, r1
 80a311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3120:	fab3 f183 	clz	r1, r3
 80a3124:	2900      	cmp	r1, #0
 80a3126:	f040 8093 	bne.w	80a3250 <__udivmoddi4+0x1f4>
 80a312a:	42a3      	cmp	r3, r4
 80a312c:	d302      	bcc.n	80a3134 <__udivmoddi4+0xd8>
 80a312e:	4282      	cmp	r2, r0
 80a3130:	f200 80fe 	bhi.w	80a3330 <__udivmoddi4+0x2d4>
 80a3134:	1a85      	subs	r5, r0, r2
 80a3136:	eb64 0303 	sbc.w	r3, r4, r3
 80a313a:	469c      	mov	ip, r3
 80a313c:	2001      	movs	r0, #1
 80a313e:	2e00      	cmp	r6, #0
 80a3140:	d041      	beq.n	80a31c6 <__udivmoddi4+0x16a>
 80a3142:	e886 1020 	stmia.w	r6, {r5, ip}
 80a3146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a314a:	b912      	cbnz	r2, 80a3152 <__udivmoddi4+0xf6>
 80a314c:	2701      	movs	r7, #1
 80a314e:	fbb7 f7f2 	udiv	r7, r7, r2
 80a3152:	fab7 fe87 	clz	lr, r7
 80a3156:	f1be 0f00 	cmp.w	lr, #0
 80a315a:	d136      	bne.n	80a31ca <__udivmoddi4+0x16e>
 80a315c:	1be4      	subs	r4, r4, r7
 80a315e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3162:	fa1f f987 	uxth.w	r9, r7
 80a3166:	2101      	movs	r1, #1
 80a3168:	fbb4 f3f8 	udiv	r3, r4, r8
 80a316c:	fb08 4413 	mls	r4, r8, r3, r4
 80a3170:	fb09 f203 	mul.w	r2, r9, r3
 80a3174:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3178:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a317c:	42a2      	cmp	r2, r4
 80a317e:	d907      	bls.n	80a3190 <__udivmoddi4+0x134>
 80a3180:	19e4      	adds	r4, r4, r7
 80a3182:	f103 30ff 	add.w	r0, r3, #4294967295
 80a3186:	d202      	bcs.n	80a318e <__udivmoddi4+0x132>
 80a3188:	42a2      	cmp	r2, r4
 80a318a:	f200 80d3 	bhi.w	80a3334 <__udivmoddi4+0x2d8>
 80a318e:	4603      	mov	r3, r0
 80a3190:	1aa4      	subs	r4, r4, r2
 80a3192:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3196:	fb08 4810 	mls	r8, r8, r0, r4
 80a319a:	fb09 f900 	mul.w	r9, r9, r0
 80a319e:	b2ac      	uxth	r4, r5
 80a31a0:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a31a4:	4591      	cmp	r9, r2
 80a31a6:	d907      	bls.n	80a31b8 <__udivmoddi4+0x15c>
 80a31a8:	19d2      	adds	r2, r2, r7
 80a31aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80a31ae:	d202      	bcs.n	80a31b6 <__udivmoddi4+0x15a>
 80a31b0:	4591      	cmp	r9, r2
 80a31b2:	f200 80ba 	bhi.w	80a332a <__udivmoddi4+0x2ce>
 80a31b6:	4620      	mov	r0, r4
 80a31b8:	ebc9 0202 	rsb	r2, r9, r2
 80a31bc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a31c0:	e79b      	b.n	80a30fa <__udivmoddi4+0x9e>
 80a31c2:	4631      	mov	r1, r6
 80a31c4:	4630      	mov	r0, r6
 80a31c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a31ca:	fa07 f70e 	lsl.w	r7, r7, lr
 80a31ce:	f1ce 0c20 	rsb	ip, lr, #32
 80a31d2:	fa24 f30c 	lsr.w	r3, r4, ip
 80a31d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a31da:	fbb3 faf8 	udiv	sl, r3, r8
 80a31de:	fa1f f987 	uxth.w	r9, r7
 80a31e2:	fb08 351a 	mls	r5, r8, sl, r3
 80a31e6:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a31ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80a31ee:	fb0a fb09 	mul.w	fp, sl, r9
 80a31f2:	ea4c 0c04 	orr.w	ip, ip, r4
 80a31f6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a31fa:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a31fe:	459b      	cmp	fp, r3
 80a3200:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3204:	d90a      	bls.n	80a321c <__udivmoddi4+0x1c0>
 80a3206:	19db      	adds	r3, r3, r7
 80a3208:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a320c:	f080 808b 	bcs.w	80a3326 <__udivmoddi4+0x2ca>
 80a3210:	459b      	cmp	fp, r3
 80a3212:	f240 8088 	bls.w	80a3326 <__udivmoddi4+0x2ca>
 80a3216:	f1aa 0a02 	sub.w	sl, sl, #2
 80a321a:	443b      	add	r3, r7
 80a321c:	ebcb 0303 	rsb	r3, fp, r3
 80a3220:	fbb3 f0f8 	udiv	r0, r3, r8
 80a3224:	fb08 3310 	mls	r3, r8, r0, r3
 80a3228:	fb00 f409 	mul.w	r4, r0, r9
 80a322c:	fa1f fc8c 	uxth.w	ip, ip
 80a3230:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a3234:	429c      	cmp	r4, r3
 80a3236:	d907      	bls.n	80a3248 <__udivmoddi4+0x1ec>
 80a3238:	19db      	adds	r3, r3, r7
 80a323a:	f100 32ff 	add.w	r2, r0, #4294967295
 80a323e:	d26e      	bcs.n	80a331e <__udivmoddi4+0x2c2>
 80a3240:	429c      	cmp	r4, r3
 80a3242:	d96c      	bls.n	80a331e <__udivmoddi4+0x2c2>
 80a3244:	3802      	subs	r0, #2
 80a3246:	443b      	add	r3, r7
 80a3248:	1b1c      	subs	r4, r3, r4
 80a324a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a324e:	e78b      	b.n	80a3168 <__udivmoddi4+0x10c>
 80a3250:	f1c1 0e20 	rsb	lr, r1, #32
 80a3254:	408b      	lsls	r3, r1
 80a3256:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a325a:	ea4c 0c03 	orr.w	ip, ip, r3
 80a325e:	fa24 f70e 	lsr.w	r7, r4, lr
 80a3262:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a3266:	fbb7 faf9 	udiv	sl, r7, r9
 80a326a:	fa1f f38c 	uxth.w	r3, ip
 80a326e:	fb09 771a 	mls	r7, r9, sl, r7
 80a3272:	fa20 f80e 	lsr.w	r8, r0, lr
 80a3276:	408c      	lsls	r4, r1
 80a3278:	fb0a f503 	mul.w	r5, sl, r3
 80a327c:	ea48 0404 	orr.w	r4, r8, r4
 80a3280:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3284:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a3288:	42bd      	cmp	r5, r7
 80a328a:	fa02 f201 	lsl.w	r2, r2, r1
 80a328e:	fa00 fb01 	lsl.w	fp, r0, r1
 80a3292:	d909      	bls.n	80a32a8 <__udivmoddi4+0x24c>
 80a3294:	eb17 070c 	adds.w	r7, r7, ip
 80a3298:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a329c:	d241      	bcs.n	80a3322 <__udivmoddi4+0x2c6>
 80a329e:	42bd      	cmp	r5, r7
 80a32a0:	d93f      	bls.n	80a3322 <__udivmoddi4+0x2c6>
 80a32a2:	f1aa 0a02 	sub.w	sl, sl, #2
 80a32a6:	4467      	add	r7, ip
 80a32a8:	1b7f      	subs	r7, r7, r5
 80a32aa:	fbb7 f5f9 	udiv	r5, r7, r9
 80a32ae:	fb09 7715 	mls	r7, r9, r5, r7
 80a32b2:	fb05 f303 	mul.w	r3, r5, r3
 80a32b6:	b2a4      	uxth	r4, r4
 80a32b8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a32bc:	42bb      	cmp	r3, r7
 80a32be:	d908      	bls.n	80a32d2 <__udivmoddi4+0x276>
 80a32c0:	eb17 070c 	adds.w	r7, r7, ip
 80a32c4:	f105 30ff 	add.w	r0, r5, #4294967295
 80a32c8:	d227      	bcs.n	80a331a <__udivmoddi4+0x2be>
 80a32ca:	42bb      	cmp	r3, r7
 80a32cc:	d925      	bls.n	80a331a <__udivmoddi4+0x2be>
 80a32ce:	3d02      	subs	r5, #2
 80a32d0:	4467      	add	r7, ip
 80a32d2:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a32d6:	fba0 8902 	umull	r8, r9, r0, r2
 80a32da:	1aff      	subs	r7, r7, r3
 80a32dc:	454f      	cmp	r7, r9
 80a32de:	4645      	mov	r5, r8
 80a32e0:	464c      	mov	r4, r9
 80a32e2:	d314      	bcc.n	80a330e <__udivmoddi4+0x2b2>
 80a32e4:	d029      	beq.n	80a333a <__udivmoddi4+0x2de>
 80a32e6:	b366      	cbz	r6, 80a3342 <__udivmoddi4+0x2e6>
 80a32e8:	ebbb 0305 	subs.w	r3, fp, r5
 80a32ec:	eb67 0704 	sbc.w	r7, r7, r4
 80a32f0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a32f4:	40cb      	lsrs	r3, r1
 80a32f6:	40cf      	lsrs	r7, r1
 80a32f8:	ea4e 0303 	orr.w	r3, lr, r3
 80a32fc:	e886 0088 	stmia.w	r6, {r3, r7}
 80a3300:	2100      	movs	r1, #0
 80a3302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3306:	4623      	mov	r3, r4
 80a3308:	e6f3      	b.n	80a30f2 <__udivmoddi4+0x96>
 80a330a:	4618      	mov	r0, r3
 80a330c:	e6da      	b.n	80a30c4 <__udivmoddi4+0x68>
 80a330e:	ebb8 0502 	subs.w	r5, r8, r2
 80a3312:	eb69 040c 	sbc.w	r4, r9, ip
 80a3316:	3801      	subs	r0, #1
 80a3318:	e7e5      	b.n	80a32e6 <__udivmoddi4+0x28a>
 80a331a:	4605      	mov	r5, r0
 80a331c:	e7d9      	b.n	80a32d2 <__udivmoddi4+0x276>
 80a331e:	4610      	mov	r0, r2
 80a3320:	e792      	b.n	80a3248 <__udivmoddi4+0x1ec>
 80a3322:	4682      	mov	sl, r0
 80a3324:	e7c0      	b.n	80a32a8 <__udivmoddi4+0x24c>
 80a3326:	4692      	mov	sl, r2
 80a3328:	e778      	b.n	80a321c <__udivmoddi4+0x1c0>
 80a332a:	3802      	subs	r0, #2
 80a332c:	443a      	add	r2, r7
 80a332e:	e743      	b.n	80a31b8 <__udivmoddi4+0x15c>
 80a3330:	4608      	mov	r0, r1
 80a3332:	e704      	b.n	80a313e <__udivmoddi4+0xe2>
 80a3334:	3b02      	subs	r3, #2
 80a3336:	443c      	add	r4, r7
 80a3338:	e72a      	b.n	80a3190 <__udivmoddi4+0x134>
 80a333a:	45c3      	cmp	fp, r8
 80a333c:	d3e7      	bcc.n	80a330e <__udivmoddi4+0x2b2>
 80a333e:	463c      	mov	r4, r7
 80a3340:	e7d1      	b.n	80a32e6 <__udivmoddi4+0x28a>
 80a3342:	4631      	mov	r1, r6
 80a3344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3348 <__aeabi_idiv0>:
 80a3348:	4770      	bx	lr
 80a334a:	bf00      	nop

080a334c <__cxa_atexit>:
 80a334c:	b510      	push	{r4, lr}
 80a334e:	4c05      	ldr	r4, [pc, #20]	; (80a3364 <__cxa_atexit+0x18>)
 80a3350:	4613      	mov	r3, r2
 80a3352:	b12c      	cbz	r4, 80a3360 <__cxa_atexit+0x14>
 80a3354:	460a      	mov	r2, r1
 80a3356:	4601      	mov	r1, r0
 80a3358:	2002      	movs	r0, #2
 80a335a:	f3af 8000 	nop.w
 80a335e:	bd10      	pop	{r4, pc}
 80a3360:	4620      	mov	r0, r4
 80a3362:	bd10      	pop	{r4, pc}
 80a3364:	00000000 	.word	0x00000000

080a3368 <localtime>:
 80a3368:	b538      	push	{r3, r4, r5, lr}
 80a336a:	4b07      	ldr	r3, [pc, #28]	; (80a3388 <localtime+0x20>)
 80a336c:	4605      	mov	r5, r0
 80a336e:	681c      	ldr	r4, [r3, #0]
 80a3370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3372:	b91b      	cbnz	r3, 80a337c <localtime+0x14>
 80a3374:	2024      	movs	r0, #36	; 0x24
 80a3376:	f7fd fdc5 	bl	80a0f04 <malloc>
 80a337a:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a337c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a337e:	4628      	mov	r0, r5
 80a3380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3384:	f000 b802 	b.w	80a338c <localtime_r>
 80a3388:	2000007c 	.word	0x2000007c

080a338c <localtime_r>:
 80a338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3390:	460c      	mov	r4, r1
 80a3392:	4680      	mov	r8, r0
 80a3394:	f000 fc62 	bl	80a3c5c <__gettzinfo>
 80a3398:	4621      	mov	r1, r4
 80a339a:	4607      	mov	r7, r0
 80a339c:	4640      	mov	r0, r8
 80a339e:	f000 fc61 	bl	80a3c64 <gmtime_r>
 80a33a2:	6946      	ldr	r6, [r0, #20]
 80a33a4:	4604      	mov	r4, r0
 80a33a6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a33aa:	07b3      	lsls	r3, r6, #30
 80a33ac:	d105      	bne.n	80a33ba <localtime_r+0x2e>
 80a33ae:	2264      	movs	r2, #100	; 0x64
 80a33b0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a33b4:	fb02 6313 	mls	r3, r2, r3, r6
 80a33b8:	b94b      	cbnz	r3, 80a33ce <localtime_r+0x42>
 80a33ba:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a33be:	fb96 f3f5 	sdiv	r3, r6, r5
 80a33c2:	fb05 6513 	mls	r5, r5, r3, r6
 80a33c6:	fab5 f385 	clz	r3, r5
 80a33ca:	095b      	lsrs	r3, r3, #5
 80a33cc:	e000      	b.n	80a33d0 <localtime_r+0x44>
 80a33ce:	2301      	movs	r3, #1
 80a33d0:	4a5f      	ldr	r2, [pc, #380]	; (80a3550 <localtime_r+0x1c4>)
 80a33d2:	2530      	movs	r5, #48	; 0x30
 80a33d4:	fb05 2503 	mla	r5, r5, r3, r2
 80a33d8:	f000 fa74 	bl	80a38c4 <__tz_lock>
 80a33dc:	f000 fa74 	bl	80a38c8 <_tzset_unlocked>
 80a33e0:	4b5c      	ldr	r3, [pc, #368]	; (80a3554 <localtime_r+0x1c8>)
 80a33e2:	681b      	ldr	r3, [r3, #0]
 80a33e4:	b1f3      	cbz	r3, 80a3424 <localtime_r+0x98>
 80a33e6:	687b      	ldr	r3, [r7, #4]
 80a33e8:	429e      	cmp	r6, r3
 80a33ea:	d105      	bne.n	80a33f8 <localtime_r+0x6c>
 80a33ec:	6839      	ldr	r1, [r7, #0]
 80a33ee:	f8d8 3000 	ldr.w	r3, [r8]
 80a33f2:	69fa      	ldr	r2, [r7, #28]
 80a33f4:	b941      	cbnz	r1, 80a3408 <localtime_r+0x7c>
 80a33f6:	e00a      	b.n	80a340e <localtime_r+0x82>
 80a33f8:	4630      	mov	r0, r6
 80a33fa:	f000 f9bb 	bl	80a3774 <__tzcalc_limits>
 80a33fe:	2800      	cmp	r0, #0
 80a3400:	d1f4      	bne.n	80a33ec <localtime_r+0x60>
 80a3402:	f04f 33ff 	mov.w	r3, #4294967295
 80a3406:	e00d      	b.n	80a3424 <localtime_r+0x98>
 80a3408:	4293      	cmp	r3, r2
 80a340a:	db08      	blt.n	80a341e <localtime_r+0x92>
 80a340c:	e001      	b.n	80a3412 <localtime_r+0x86>
 80a340e:	4293      	cmp	r3, r2
 80a3410:	da07      	bge.n	80a3422 <localtime_r+0x96>
 80a3412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a3414:	4293      	cmp	r3, r2
 80a3416:	bfac      	ite	ge
 80a3418:	2300      	movge	r3, #0
 80a341a:	2301      	movlt	r3, #1
 80a341c:	e002      	b.n	80a3424 <localtime_r+0x98>
 80a341e:	2300      	movs	r3, #0
 80a3420:	e000      	b.n	80a3424 <localtime_r+0x98>
 80a3422:	2301      	movs	r3, #1
 80a3424:	6223      	str	r3, [r4, #32]
 80a3426:	6a23      	ldr	r3, [r4, #32]
 80a3428:	203c      	movs	r0, #60	; 0x3c
 80a342a:	2b01      	cmp	r3, #1
 80a342c:	bf0c      	ite	eq
 80a342e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a3430:	6a39      	ldrne	r1, [r7, #32]
 80a3432:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a3436:	fb91 f6f3 	sdiv	r6, r1, r3
 80a343a:	fb03 1316 	mls	r3, r3, r6, r1
 80a343e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a3442:	fb00 3012 	mls	r0, r0, r2, r3
 80a3446:	6861      	ldr	r1, [r4, #4]
 80a3448:	6823      	ldr	r3, [r4, #0]
 80a344a:	1a89      	subs	r1, r1, r2
 80a344c:	68a2      	ldr	r2, [r4, #8]
 80a344e:	1a1b      	subs	r3, r3, r0
 80a3450:	1b92      	subs	r2, r2, r6
 80a3452:	2b3b      	cmp	r3, #59	; 0x3b
 80a3454:	6023      	str	r3, [r4, #0]
 80a3456:	6061      	str	r1, [r4, #4]
 80a3458:	60a2      	str	r2, [r4, #8]
 80a345a:	dd03      	ble.n	80a3464 <localtime_r+0xd8>
 80a345c:	3101      	adds	r1, #1
 80a345e:	6061      	str	r1, [r4, #4]
 80a3460:	3b3c      	subs	r3, #60	; 0x3c
 80a3462:	e004      	b.n	80a346e <localtime_r+0xe2>
 80a3464:	2b00      	cmp	r3, #0
 80a3466:	da03      	bge.n	80a3470 <localtime_r+0xe4>
 80a3468:	3901      	subs	r1, #1
 80a346a:	6061      	str	r1, [r4, #4]
 80a346c:	333c      	adds	r3, #60	; 0x3c
 80a346e:	6023      	str	r3, [r4, #0]
 80a3470:	6863      	ldr	r3, [r4, #4]
 80a3472:	2b3b      	cmp	r3, #59	; 0x3b
 80a3474:	dd03      	ble.n	80a347e <localtime_r+0xf2>
 80a3476:	3201      	adds	r2, #1
 80a3478:	60a2      	str	r2, [r4, #8]
 80a347a:	3b3c      	subs	r3, #60	; 0x3c
 80a347c:	e004      	b.n	80a3488 <localtime_r+0xfc>
 80a347e:	2b00      	cmp	r3, #0
 80a3480:	da03      	bge.n	80a348a <localtime_r+0xfe>
 80a3482:	3a01      	subs	r2, #1
 80a3484:	60a2      	str	r2, [r4, #8]
 80a3486:	333c      	adds	r3, #60	; 0x3c
 80a3488:	6063      	str	r3, [r4, #4]
 80a348a:	68a3      	ldr	r3, [r4, #8]
 80a348c:	2b17      	cmp	r3, #23
 80a348e:	dd22      	ble.n	80a34d6 <localtime_r+0x14a>
 80a3490:	69e2      	ldr	r2, [r4, #28]
 80a3492:	3b18      	subs	r3, #24
 80a3494:	3201      	adds	r2, #1
 80a3496:	61e2      	str	r2, [r4, #28]
 80a3498:	69a2      	ldr	r2, [r4, #24]
 80a349a:	60a3      	str	r3, [r4, #8]
 80a349c:	3201      	adds	r2, #1
 80a349e:	2a06      	cmp	r2, #6
 80a34a0:	bfc8      	it	gt
 80a34a2:	2200      	movgt	r2, #0
 80a34a4:	61a2      	str	r2, [r4, #24]
 80a34a6:	68e2      	ldr	r2, [r4, #12]
 80a34a8:	6923      	ldr	r3, [r4, #16]
 80a34aa:	3201      	adds	r2, #1
 80a34ac:	60e2      	str	r2, [r4, #12]
 80a34ae:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a34b2:	428a      	cmp	r2, r1
 80a34b4:	dd46      	ble.n	80a3544 <localtime_r+0x1b8>
 80a34b6:	3301      	adds	r3, #1
 80a34b8:	2b0c      	cmp	r3, #12
 80a34ba:	bf08      	it	eq
 80a34bc:	6963      	ldreq	r3, [r4, #20]
 80a34be:	eba2 0201 	sub.w	r2, r2, r1
 80a34c2:	60e2      	str	r2, [r4, #12]
 80a34c4:	bf05      	ittet	eq
 80a34c6:	3301      	addeq	r3, #1
 80a34c8:	2200      	moveq	r2, #0
 80a34ca:	6123      	strne	r3, [r4, #16]
 80a34cc:	6122      	streq	r2, [r4, #16]
 80a34ce:	bf04      	itt	eq
 80a34d0:	6163      	streq	r3, [r4, #20]
 80a34d2:	61e2      	streq	r2, [r4, #28]
 80a34d4:	e036      	b.n	80a3544 <localtime_r+0x1b8>
 80a34d6:	2b00      	cmp	r3, #0
 80a34d8:	da34      	bge.n	80a3544 <localtime_r+0x1b8>
 80a34da:	69e2      	ldr	r2, [r4, #28]
 80a34dc:	3318      	adds	r3, #24
 80a34de:	3a01      	subs	r2, #1
 80a34e0:	61e2      	str	r2, [r4, #28]
 80a34e2:	69a2      	ldr	r2, [r4, #24]
 80a34e4:	60a3      	str	r3, [r4, #8]
 80a34e6:	3a01      	subs	r2, #1
 80a34e8:	bf48      	it	mi
 80a34ea:	2206      	movmi	r2, #6
 80a34ec:	61a2      	str	r2, [r4, #24]
 80a34ee:	68e2      	ldr	r2, [r4, #12]
 80a34f0:	3a01      	subs	r2, #1
 80a34f2:	60e2      	str	r2, [r4, #12]
 80a34f4:	bb32      	cbnz	r2, 80a3544 <localtime_r+0x1b8>
 80a34f6:	6923      	ldr	r3, [r4, #16]
 80a34f8:	3b01      	subs	r3, #1
 80a34fa:	d401      	bmi.n	80a3500 <localtime_r+0x174>
 80a34fc:	6123      	str	r3, [r4, #16]
 80a34fe:	e01d      	b.n	80a353c <localtime_r+0x1b0>
 80a3500:	230b      	movs	r3, #11
 80a3502:	6123      	str	r3, [r4, #16]
 80a3504:	6963      	ldr	r3, [r4, #20]
 80a3506:	1e5a      	subs	r2, r3, #1
 80a3508:	f012 0f03 	tst.w	r2, #3
 80a350c:	6162      	str	r2, [r4, #20]
 80a350e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a3512:	d105      	bne.n	80a3520 <localtime_r+0x194>
 80a3514:	2164      	movs	r1, #100	; 0x64
 80a3516:	fb93 f2f1 	sdiv	r2, r3, r1
 80a351a:	fb01 3212 	mls	r2, r1, r2, r3
 80a351e:	b94a      	cbnz	r2, 80a3534 <localtime_r+0x1a8>
 80a3520:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a3524:	fb93 f2f1 	sdiv	r2, r3, r1
 80a3528:	fb01 3312 	mls	r3, r1, r2, r3
 80a352c:	fab3 f383 	clz	r3, r3
 80a3530:	095b      	lsrs	r3, r3, #5
 80a3532:	e000      	b.n	80a3536 <localtime_r+0x1aa>
 80a3534:	2301      	movs	r3, #1
 80a3536:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a353a:	61e3      	str	r3, [r4, #28]
 80a353c:	6923      	ldr	r3, [r4, #16]
 80a353e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a3542:	60e3      	str	r3, [r4, #12]
 80a3544:	f000 f9bf 	bl	80a38c6 <__tz_unlock>
 80a3548:	4620      	mov	r0, r4
 80a354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a354e:	bf00      	nop
 80a3550:	080a4468 	.word	0x080a4468
 80a3554:	200002e0 	.word	0x200002e0

080a3558 <memcpy>:
 80a3558:	b510      	push	{r4, lr}
 80a355a:	1e43      	subs	r3, r0, #1
 80a355c:	440a      	add	r2, r1
 80a355e:	4291      	cmp	r1, r2
 80a3560:	d004      	beq.n	80a356c <memcpy+0x14>
 80a3562:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3566:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a356a:	e7f8      	b.n	80a355e <memcpy+0x6>
 80a356c:	bd10      	pop	{r4, pc}

080a356e <memset>:
 80a356e:	4603      	mov	r3, r0
 80a3570:	4402      	add	r2, r0
 80a3572:	4293      	cmp	r3, r2
 80a3574:	d002      	beq.n	80a357c <memset+0xe>
 80a3576:	f803 1b01 	strb.w	r1, [r3], #1
 80a357a:	e7fa      	b.n	80a3572 <memset+0x4>
 80a357c:	4770      	bx	lr
	...

080a3580 <srand>:
 80a3580:	b538      	push	{r3, r4, r5, lr}
 80a3582:	4b12      	ldr	r3, [pc, #72]	; (80a35cc <srand+0x4c>)
 80a3584:	4605      	mov	r5, r0
 80a3586:	681c      	ldr	r4, [r3, #0]
 80a3588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a358a:	b9d3      	cbnz	r3, 80a35c2 <srand+0x42>
 80a358c:	2018      	movs	r0, #24
 80a358e:	f7fd fcb9 	bl	80a0f04 <malloc>
 80a3592:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3596:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3598:	8003      	strh	r3, [r0, #0]
 80a359a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a359e:	8043      	strh	r3, [r0, #2]
 80a35a0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a35a4:	8083      	strh	r3, [r0, #4]
 80a35a6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a35aa:	80c3      	strh	r3, [r0, #6]
 80a35ac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a35b0:	8103      	strh	r3, [r0, #8]
 80a35b2:	2305      	movs	r3, #5
 80a35b4:	8143      	strh	r3, [r0, #10]
 80a35b6:	230b      	movs	r3, #11
 80a35b8:	8183      	strh	r3, [r0, #12]
 80a35ba:	2201      	movs	r2, #1
 80a35bc:	2300      	movs	r3, #0
 80a35be:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a35c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a35c4:	2200      	movs	r2, #0
 80a35c6:	611d      	str	r5, [r3, #16]
 80a35c8:	615a      	str	r2, [r3, #20]
 80a35ca:	bd38      	pop	{r3, r4, r5, pc}
 80a35cc:	2000007c 	.word	0x2000007c

080a35d0 <strcmp>:
 80a35d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a35d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a35d8:	2a01      	cmp	r2, #1
 80a35da:	bf28      	it	cs
 80a35dc:	429a      	cmpcs	r2, r3
 80a35de:	d0f7      	beq.n	80a35d0 <strcmp>
 80a35e0:	1ad0      	subs	r0, r2, r3
 80a35e2:	4770      	bx	lr

080a35e4 <strcpy>:
 80a35e4:	4603      	mov	r3, r0
 80a35e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a35ea:	f803 2b01 	strb.w	r2, [r3], #1
 80a35ee:	2a00      	cmp	r2, #0
 80a35f0:	d1f9      	bne.n	80a35e6 <strcpy+0x2>
 80a35f2:	4770      	bx	lr

080a35f4 <strdup>:
 80a35f4:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <strdup+0xc>)
 80a35f6:	4601      	mov	r1, r0
 80a35f8:	6818      	ldr	r0, [r3, #0]
 80a35fa:	f000 b803 	b.w	80a3604 <_strdup_r>
 80a35fe:	bf00      	nop
 80a3600:	2000007c 	.word	0x2000007c

080a3604 <_strdup_r>:
 80a3604:	b570      	push	{r4, r5, r6, lr}
 80a3606:	4606      	mov	r6, r0
 80a3608:	4608      	mov	r0, r1
 80a360a:	460c      	mov	r4, r1
 80a360c:	f000 f80d 	bl	80a362a <strlen>
 80a3610:	1c45      	adds	r5, r0, #1
 80a3612:	4629      	mov	r1, r5
 80a3614:	4630      	mov	r0, r6
 80a3616:	f7fd fc9d 	bl	80a0f54 <_malloc_r>
 80a361a:	4606      	mov	r6, r0
 80a361c:	b118      	cbz	r0, 80a3626 <_strdup_r+0x22>
 80a361e:	462a      	mov	r2, r5
 80a3620:	4621      	mov	r1, r4
 80a3622:	f7ff ff99 	bl	80a3558 <memcpy>
 80a3626:	4630      	mov	r0, r6
 80a3628:	bd70      	pop	{r4, r5, r6, pc}

080a362a <strlen>:
 80a362a:	4603      	mov	r3, r0
 80a362c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3630:	2a00      	cmp	r2, #0
 80a3632:	d1fb      	bne.n	80a362c <strlen+0x2>
 80a3634:	1a18      	subs	r0, r3, r0
 80a3636:	3801      	subs	r0, #1
 80a3638:	4770      	bx	lr

080a363a <strncmp>:
 80a363a:	b530      	push	{r4, r5, lr}
 80a363c:	b182      	cbz	r2, 80a3660 <strncmp+0x26>
 80a363e:	1e45      	subs	r5, r0, #1
 80a3640:	3901      	subs	r1, #1
 80a3642:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a3646:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a364a:	42a3      	cmp	r3, r4
 80a364c:	d106      	bne.n	80a365c <strncmp+0x22>
 80a364e:	43ec      	mvns	r4, r5
 80a3650:	4414      	add	r4, r2
 80a3652:	42e0      	cmn	r0, r4
 80a3654:	d001      	beq.n	80a365a <strncmp+0x20>
 80a3656:	2b00      	cmp	r3, #0
 80a3658:	d1f3      	bne.n	80a3642 <strncmp+0x8>
 80a365a:	461c      	mov	r4, r3
 80a365c:	1b18      	subs	r0, r3, r4
 80a365e:	bd30      	pop	{r4, r5, pc}
 80a3660:	4610      	mov	r0, r2
 80a3662:	bd30      	pop	{r4, r5, pc}

080a3664 <_strtoul_r>:
 80a3664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3668:	460e      	mov	r6, r1
 80a366a:	4680      	mov	r8, r0
 80a366c:	483b      	ldr	r0, [pc, #236]	; (80a375c <_strtoul_r+0xf8>)
 80a366e:	f8d0 9000 	ldr.w	r9, [r0]
 80a3672:	4635      	mov	r5, r6
 80a3674:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3678:	eb09 0004 	add.w	r0, r9, r4
 80a367c:	7840      	ldrb	r0, [r0, #1]
 80a367e:	f000 0008 	and.w	r0, r0, #8
 80a3682:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a3686:	b108      	cbz	r0, 80a368c <_strtoul_r+0x28>
 80a3688:	462e      	mov	r6, r5
 80a368a:	e7f2      	b.n	80a3672 <_strtoul_r+0xe>
 80a368c:	2c2d      	cmp	r4, #45	; 0x2d
 80a368e:	d103      	bne.n	80a3698 <_strtoul_r+0x34>
 80a3690:	1cb5      	adds	r5, r6, #2
 80a3692:	7874      	ldrb	r4, [r6, #1]
 80a3694:	2701      	movs	r7, #1
 80a3696:	e003      	b.n	80a36a0 <_strtoul_r+0x3c>
 80a3698:	2c2b      	cmp	r4, #43	; 0x2b
 80a369a:	bf04      	itt	eq
 80a369c:	7874      	ldrbeq	r4, [r6, #1]
 80a369e:	1cb5      	addeq	r5, r6, #2
 80a36a0:	b113      	cbz	r3, 80a36a8 <_strtoul_r+0x44>
 80a36a2:	2b10      	cmp	r3, #16
 80a36a4:	d10a      	bne.n	80a36bc <_strtoul_r+0x58>
 80a36a6:	e053      	b.n	80a3750 <_strtoul_r+0xec>
 80a36a8:	2c30      	cmp	r4, #48	; 0x30
 80a36aa:	d14f      	bne.n	80a374c <_strtoul_r+0xe8>
 80a36ac:	7828      	ldrb	r0, [r5, #0]
 80a36ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a36b2:	2858      	cmp	r0, #88	; 0x58
 80a36b4:	d145      	bne.n	80a3742 <_strtoul_r+0xde>
 80a36b6:	786c      	ldrb	r4, [r5, #1]
 80a36b8:	2310      	movs	r3, #16
 80a36ba:	3502      	adds	r5, #2
 80a36bc:	f04f 3cff 	mov.w	ip, #4294967295
 80a36c0:	fbbc fcf3 	udiv	ip, ip, r3
 80a36c4:	fb03 fa0c 	mul.w	sl, r3, ip
 80a36c8:	2600      	movs	r6, #0
 80a36ca:	ea6f 0a0a 	mvn.w	sl, sl
 80a36ce:	4630      	mov	r0, r6
 80a36d0:	eb09 0e04 	add.w	lr, r9, r4
 80a36d4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a36d8:	f01e 0f04 	tst.w	lr, #4
 80a36dc:	d001      	beq.n	80a36e2 <_strtoul_r+0x7e>
 80a36de:	3c30      	subs	r4, #48	; 0x30
 80a36e0:	e00b      	b.n	80a36fa <_strtoul_r+0x96>
 80a36e2:	f01e 0e03 	ands.w	lr, lr, #3
 80a36e6:	d01a      	beq.n	80a371e <_strtoul_r+0xba>
 80a36e8:	f1be 0f01 	cmp.w	lr, #1
 80a36ec:	bf0c      	ite	eq
 80a36ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a36f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a36f6:	ebce 0404 	rsb	r4, lr, r4
 80a36fa:	42a3      	cmp	r3, r4
 80a36fc:	dd0f      	ble.n	80a371e <_strtoul_r+0xba>
 80a36fe:	2e00      	cmp	r6, #0
 80a3700:	db08      	blt.n	80a3714 <_strtoul_r+0xb0>
 80a3702:	4560      	cmp	r0, ip
 80a3704:	d806      	bhi.n	80a3714 <_strtoul_r+0xb0>
 80a3706:	d101      	bne.n	80a370c <_strtoul_r+0xa8>
 80a3708:	4554      	cmp	r4, sl
 80a370a:	dc03      	bgt.n	80a3714 <_strtoul_r+0xb0>
 80a370c:	fb03 4000 	mla	r0, r3, r0, r4
 80a3710:	2601      	movs	r6, #1
 80a3712:	e001      	b.n	80a3718 <_strtoul_r+0xb4>
 80a3714:	f04f 36ff 	mov.w	r6, #4294967295
 80a3718:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a371c:	e7d8      	b.n	80a36d0 <_strtoul_r+0x6c>
 80a371e:	2e00      	cmp	r6, #0
 80a3720:	da07      	bge.n	80a3732 <_strtoul_r+0xce>
 80a3722:	2322      	movs	r3, #34	; 0x22
 80a3724:	f8c8 3000 	str.w	r3, [r8]
 80a3728:	f04f 30ff 	mov.w	r0, #4294967295
 80a372c:	b92a      	cbnz	r2, 80a373a <_strtoul_r+0xd6>
 80a372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3732:	b107      	cbz	r7, 80a3736 <_strtoul_r+0xd2>
 80a3734:	4240      	negs	r0, r0
 80a3736:	b172      	cbz	r2, 80a3756 <_strtoul_r+0xf2>
 80a3738:	b106      	cbz	r6, 80a373c <_strtoul_r+0xd8>
 80a373a:	1e69      	subs	r1, r5, #1
 80a373c:	6011      	str	r1, [r2, #0]
 80a373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3742:	2430      	movs	r4, #48	; 0x30
 80a3744:	2b00      	cmp	r3, #0
 80a3746:	d1b9      	bne.n	80a36bc <_strtoul_r+0x58>
 80a3748:	2308      	movs	r3, #8
 80a374a:	e7b7      	b.n	80a36bc <_strtoul_r+0x58>
 80a374c:	230a      	movs	r3, #10
 80a374e:	e7b5      	b.n	80a36bc <_strtoul_r+0x58>
 80a3750:	2c30      	cmp	r4, #48	; 0x30
 80a3752:	d0ab      	beq.n	80a36ac <_strtoul_r+0x48>
 80a3754:	e7b2      	b.n	80a36bc <_strtoul_r+0x58>
 80a3756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a375a:	bf00      	nop
 80a375c:	20000018 	.word	0x20000018

080a3760 <strtoul>:
 80a3760:	4613      	mov	r3, r2
 80a3762:	460a      	mov	r2, r1
 80a3764:	4601      	mov	r1, r0
 80a3766:	4802      	ldr	r0, [pc, #8]	; (80a3770 <strtoul+0x10>)
 80a3768:	6800      	ldr	r0, [r0, #0]
 80a376a:	f7ff bf7b 	b.w	80a3664 <_strtoul_r>
 80a376e:	bf00      	nop
 80a3770:	2000007c 	.word	0x2000007c

080a3774 <__tzcalc_limits>:
 80a3774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3778:	4604      	mov	r4, r0
 80a377a:	f000 fa6f 	bl	80a3c5c <__gettzinfo>
 80a377e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a3782:	429c      	cmp	r4, r3
 80a3784:	f340 8096 	ble.w	80a38b4 <__tzcalc_limits+0x140>
 80a3788:	f240 156d 	movw	r5, #365	; 0x16d
 80a378c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a3790:	18e3      	adds	r3, r4, r3
 80a3792:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a3796:	109b      	asrs	r3, r3, #2
 80a3798:	fb05 3502 	mla	r5, r5, r2, r3
 80a379c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a37a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a37a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80a37a8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a37ac:	442b      	add	r3, r5
 80a37ae:	18a5      	adds	r5, r4, r2
 80a37b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a37b4:	fb94 f7f2 	sdiv	r7, r4, r2
 80a37b8:	fb95 f5f2 	sdiv	r5, r5, r2
 80a37bc:	fb02 4717 	mls	r7, r2, r7, r4
 80a37c0:	441d      	add	r5, r3
 80a37c2:	2364      	movs	r3, #100	; 0x64
 80a37c4:	fb94 f6f3 	sdiv	r6, r4, r3
 80a37c8:	fab7 fe87 	clz	lr, r7
 80a37cc:	4601      	mov	r1, r0
 80a37ce:	fb03 4616 	mls	r6, r3, r6, r4
 80a37d2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a37d6:	9301      	str	r3, [sp, #4]
 80a37d8:	f004 0303 	and.w	r3, r4, #3
 80a37dc:	6044      	str	r4, [r0, #4]
 80a37de:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a37e2:	9300      	str	r3, [sp, #0]
 80a37e4:	f04f 0c07 	mov.w	ip, #7
 80a37e8:	7a0b      	ldrb	r3, [r1, #8]
 80a37ea:	2b4a      	cmp	r3, #74	; 0x4a
 80a37ec:	d10e      	bne.n	80a380c <__tzcalc_limits+0x98>
 80a37ee:	694b      	ldr	r3, [r1, #20]
 80a37f0:	9a00      	ldr	r2, [sp, #0]
 80a37f2:	18ec      	adds	r4, r5, r3
 80a37f4:	b902      	cbnz	r2, 80a37f8 <__tzcalc_limits+0x84>
 80a37f6:	b906      	cbnz	r6, 80a37fa <__tzcalc_limits+0x86>
 80a37f8:	b927      	cbnz	r7, 80a3804 <__tzcalc_limits+0x90>
 80a37fa:	2b3b      	cmp	r3, #59	; 0x3b
 80a37fc:	bfd4      	ite	le
 80a37fe:	2300      	movle	r3, #0
 80a3800:	2301      	movgt	r3, #1
 80a3802:	e000      	b.n	80a3806 <__tzcalc_limits+0x92>
 80a3804:	2300      	movs	r3, #0
 80a3806:	4423      	add	r3, r4
 80a3808:	3b01      	subs	r3, #1
 80a380a:	e03f      	b.n	80a388c <__tzcalc_limits+0x118>
 80a380c:	2b44      	cmp	r3, #68	; 0x44
 80a380e:	d102      	bne.n	80a3816 <__tzcalc_limits+0xa2>
 80a3810:	694b      	ldr	r3, [r1, #20]
 80a3812:	442b      	add	r3, r5
 80a3814:	e03a      	b.n	80a388c <__tzcalc_limits+0x118>
 80a3816:	9b00      	ldr	r3, [sp, #0]
 80a3818:	b92b      	cbnz	r3, 80a3826 <__tzcalc_limits+0xb2>
 80a381a:	2e00      	cmp	r6, #0
 80a381c:	bf0c      	ite	eq
 80a381e:	46f0      	moveq	r8, lr
 80a3820:	f04f 0801 	movne.w	r8, #1
 80a3824:	e000      	b.n	80a3828 <__tzcalc_limits+0xb4>
 80a3826:	46f0      	mov	r8, lr
 80a3828:	46a9      	mov	r9, r5
 80a382a:	4b24      	ldr	r3, [pc, #144]	; (80a38bc <__tzcalc_limits+0x148>)
 80a382c:	2230      	movs	r2, #48	; 0x30
 80a382e:	fb02 3808 	mla	r8, r2, r8, r3
 80a3832:	68cc      	ldr	r4, [r1, #12]
 80a3834:	f1a8 0a04 	sub.w	sl, r8, #4
 80a3838:	2301      	movs	r3, #1
 80a383a:	42a3      	cmp	r3, r4
 80a383c:	da04      	bge.n	80a3848 <__tzcalc_limits+0xd4>
 80a383e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a3842:	3301      	adds	r3, #1
 80a3844:	44d9      	add	r9, fp
 80a3846:	e7f8      	b.n	80a383a <__tzcalc_limits+0xc6>
 80a3848:	f109 0304 	add.w	r3, r9, #4
 80a384c:	fb93 fbfc 	sdiv	fp, r3, ip
 80a3850:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a3854:	ebca 0a03 	rsb	sl, sl, r3
 80a3858:	694b      	ldr	r3, [r1, #20]
 80a385a:	2c01      	cmp	r4, #1
 80a385c:	bfb8      	it	lt
 80a385e:	2401      	movlt	r4, #1
 80a3860:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a3864:	690b      	ldr	r3, [r1, #16]
 80a3866:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a386a:	f103 33ff 	add.w	r3, r3, #4294967295
 80a386e:	f104 34ff 	add.w	r4, r4, #4294967295
 80a3872:	bf48      	it	mi
 80a3874:	f10a 0a07 	addmi.w	sl, sl, #7
 80a3878:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a387c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a3880:	4453      	add	r3, sl
 80a3882:	42a3      	cmp	r3, r4
 80a3884:	db01      	blt.n	80a388a <__tzcalc_limits+0x116>
 80a3886:	3b07      	subs	r3, #7
 80a3888:	e7fb      	b.n	80a3882 <__tzcalc_limits+0x10e>
 80a388a:	444b      	add	r3, r9
 80a388c:	698c      	ldr	r4, [r1, #24]
 80a388e:	4a0c      	ldr	r2, [pc, #48]	; (80a38c0 <__tzcalc_limits+0x14c>)
 80a3890:	fb02 4303 	mla	r3, r2, r3, r4
 80a3894:	6a0c      	ldr	r4, [r1, #32]
 80a3896:	4423      	add	r3, r4
 80a3898:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a389c:	9b01      	ldr	r3, [sp, #4]
 80a389e:	4299      	cmp	r1, r3
 80a38a0:	d1a2      	bne.n	80a37e8 <__tzcalc_limits+0x74>
 80a38a2:	69c3      	ldr	r3, [r0, #28]
 80a38a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a38a6:	4293      	cmp	r3, r2
 80a38a8:	bfac      	ite	ge
 80a38aa:	2300      	movge	r3, #0
 80a38ac:	2301      	movlt	r3, #1
 80a38ae:	6003      	str	r3, [r0, #0]
 80a38b0:	2001      	movs	r0, #1
 80a38b2:	e000      	b.n	80a38b6 <__tzcalc_limits+0x142>
 80a38b4:	2000      	movs	r0, #0
 80a38b6:	b003      	add	sp, #12
 80a38b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a38bc:	080a4468 	.word	0x080a4468
 80a38c0:	00015180 	.word	0x00015180

080a38c4 <__tz_lock>:
 80a38c4:	4770      	bx	lr

080a38c6 <__tz_unlock>:
 80a38c6:	4770      	bx	lr

080a38c8 <_tzset_unlocked>:
 80a38c8:	4b01      	ldr	r3, [pc, #4]	; (80a38d0 <_tzset_unlocked+0x8>)
 80a38ca:	6818      	ldr	r0, [r3, #0]
 80a38cc:	f000 b802 	b.w	80a38d4 <_tzset_unlocked_r>
 80a38d0:	2000007c 	.word	0x2000007c

080a38d4 <_tzset_unlocked_r>:
 80a38d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a38d8:	b08d      	sub	sp, #52	; 0x34
 80a38da:	4607      	mov	r7, r0
 80a38dc:	f000 f9be 	bl	80a3c5c <__gettzinfo>
 80a38e0:	49b0      	ldr	r1, [pc, #704]	; (80a3ba4 <_tzset_unlocked_r+0x2d0>)
 80a38e2:	4604      	mov	r4, r0
 80a38e4:	4638      	mov	r0, r7
 80a38e6:	f000 f9b1 	bl	80a3c4c <_getenv_r>
 80a38ea:	4eaf      	ldr	r6, [pc, #700]	; (80a3ba8 <_tzset_unlocked_r+0x2d4>)
 80a38ec:	4605      	mov	r5, r0
 80a38ee:	b960      	cbnz	r0, 80a390a <_tzset_unlocked_r+0x36>
 80a38f0:	4bae      	ldr	r3, [pc, #696]	; (80a3bac <_tzset_unlocked_r+0x2d8>)
 80a38f2:	4aaf      	ldr	r2, [pc, #700]	; (80a3bb0 <_tzset_unlocked_r+0x2dc>)
 80a38f4:	6018      	str	r0, [r3, #0]
 80a38f6:	4baf      	ldr	r3, [pc, #700]	; (80a3bb4 <_tzset_unlocked_r+0x2e0>)
 80a38f8:	6018      	str	r0, [r3, #0]
 80a38fa:	4baf      	ldr	r3, [pc, #700]	; (80a3bb8 <_tzset_unlocked_r+0x2e4>)
 80a38fc:	6830      	ldr	r0, [r6, #0]
 80a38fe:	601a      	str	r2, [r3, #0]
 80a3900:	605a      	str	r2, [r3, #4]
 80a3902:	f7fd fb07 	bl	80a0f14 <free>
 80a3906:	6035      	str	r5, [r6, #0]
 80a3908:	e148      	b.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a390a:	6831      	ldr	r1, [r6, #0]
 80a390c:	b979      	cbnz	r1, 80a392e <_tzset_unlocked_r+0x5a>
 80a390e:	6830      	ldr	r0, [r6, #0]
 80a3910:	f7fd fb00 	bl	80a0f14 <free>
 80a3914:	4628      	mov	r0, r5
 80a3916:	f7ff fe88 	bl	80a362a <strlen>
 80a391a:	1c41      	adds	r1, r0, #1
 80a391c:	4638      	mov	r0, r7
 80a391e:	f7fd fb19 	bl	80a0f54 <_malloc_r>
 80a3922:	6030      	str	r0, [r6, #0]
 80a3924:	b148      	cbz	r0, 80a393a <_tzset_unlocked_r+0x66>
 80a3926:	4629      	mov	r1, r5
 80a3928:	f7ff fe5c 	bl	80a35e4 <strcpy>
 80a392c:	e005      	b.n	80a393a <_tzset_unlocked_r+0x66>
 80a392e:	f7ff fe4f 	bl	80a35d0 <strcmp>
 80a3932:	2800      	cmp	r0, #0
 80a3934:	f000 8132 	beq.w	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3938:	e7e9      	b.n	80a390e <_tzset_unlocked_r+0x3a>
 80a393a:	782b      	ldrb	r3, [r5, #0]
 80a393c:	ae0a      	add	r6, sp, #40	; 0x28
 80a393e:	2b3a      	cmp	r3, #58	; 0x3a
 80a3940:	bf08      	it	eq
 80a3942:	3501      	addeq	r5, #1
 80a3944:	4633      	mov	r3, r6
 80a3946:	4a9d      	ldr	r2, [pc, #628]	; (80a3bbc <_tzset_unlocked_r+0x2e8>)
 80a3948:	499d      	ldr	r1, [pc, #628]	; (80a3bc0 <_tzset_unlocked_r+0x2ec>)
 80a394a:	4628      	mov	r0, r5
 80a394c:	f7fd faf2 	bl	80a0f34 <siscanf>
 80a3950:	2800      	cmp	r0, #0
 80a3952:	f340 8123 	ble.w	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3958:	18ef      	adds	r7, r5, r3
 80a395a:	5ceb      	ldrb	r3, [r5, r3]
 80a395c:	2b2d      	cmp	r3, #45	; 0x2d
 80a395e:	d103      	bne.n	80a3968 <_tzset_unlocked_r+0x94>
 80a3960:	3701      	adds	r7, #1
 80a3962:	f04f 35ff 	mov.w	r5, #4294967295
 80a3966:	e003      	b.n	80a3970 <_tzset_unlocked_r+0x9c>
 80a3968:	2b2b      	cmp	r3, #43	; 0x2b
 80a396a:	bf08      	it	eq
 80a396c:	3701      	addeq	r7, #1
 80a396e:	2501      	movs	r5, #1
 80a3970:	f10d 0a20 	add.w	sl, sp, #32
 80a3974:	f10d 0b1e 	add.w	fp, sp, #30
 80a3978:	f04f 0800 	mov.w	r8, #0
 80a397c:	9603      	str	r6, [sp, #12]
 80a397e:	f8cd a008 	str.w	sl, [sp, #8]
 80a3982:	9601      	str	r6, [sp, #4]
 80a3984:	f8cd b000 	str.w	fp, [sp]
 80a3988:	4633      	mov	r3, r6
 80a398a:	aa07      	add	r2, sp, #28
 80a398c:	498d      	ldr	r1, [pc, #564]	; (80a3bc4 <_tzset_unlocked_r+0x2f0>)
 80a398e:	4638      	mov	r0, r7
 80a3990:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a3994:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a3998:	f7fd facc 	bl	80a0f34 <siscanf>
 80a399c:	4540      	cmp	r0, r8
 80a399e:	f340 80fd 	ble.w	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a39a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a39a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a39aa:	213c      	movs	r1, #60	; 0x3c
 80a39ac:	fb01 3302 	mla	r3, r1, r2, r3
 80a39b0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a39b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a39b8:	fb01 3302 	mla	r3, r1, r2, r3
 80a39bc:	435d      	muls	r5, r3
 80a39be:	4b7f      	ldr	r3, [pc, #508]	; (80a3bbc <_tzset_unlocked_r+0x2e8>)
 80a39c0:	6225      	str	r5, [r4, #32]
 80a39c2:	4d7d      	ldr	r5, [pc, #500]	; (80a3bb8 <_tzset_unlocked_r+0x2e4>)
 80a39c4:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a3bd0 <_tzset_unlocked_r+0x2fc>
 80a39c8:	602b      	str	r3, [r5, #0]
 80a39ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a39cc:	464a      	mov	r2, r9
 80a39ce:	441f      	add	r7, r3
 80a39d0:	497b      	ldr	r1, [pc, #492]	; (80a3bc0 <_tzset_unlocked_r+0x2ec>)
 80a39d2:	4633      	mov	r3, r6
 80a39d4:	4638      	mov	r0, r7
 80a39d6:	f7fd faad 	bl	80a0f34 <siscanf>
 80a39da:	4540      	cmp	r0, r8
 80a39dc:	dc08      	bgt.n	80a39f0 <_tzset_unlocked_r+0x11c>
 80a39de:	682b      	ldr	r3, [r5, #0]
 80a39e0:	6a22      	ldr	r2, [r4, #32]
 80a39e2:	606b      	str	r3, [r5, #4]
 80a39e4:	4b71      	ldr	r3, [pc, #452]	; (80a3bac <_tzset_unlocked_r+0x2d8>)
 80a39e6:	601a      	str	r2, [r3, #0]
 80a39e8:	4b72      	ldr	r3, [pc, #456]	; (80a3bb4 <_tzset_unlocked_r+0x2e0>)
 80a39ea:	f8c3 8000 	str.w	r8, [r3]
 80a39ee:	e0d5      	b.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a39f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a39f2:	f8c5 9004 	str.w	r9, [r5, #4]
 80a39f6:	18fd      	adds	r5, r7, r3
 80a39f8:	5cfb      	ldrb	r3, [r7, r3]
 80a39fa:	2b2d      	cmp	r3, #45	; 0x2d
 80a39fc:	d103      	bne.n	80a3a06 <_tzset_unlocked_r+0x132>
 80a39fe:	3501      	adds	r5, #1
 80a3a00:	f04f 37ff 	mov.w	r7, #4294967295
 80a3a04:	e003      	b.n	80a3a0e <_tzset_unlocked_r+0x13a>
 80a3a06:	2b2b      	cmp	r3, #43	; 0x2b
 80a3a08:	bf08      	it	eq
 80a3a0a:	3501      	addeq	r5, #1
 80a3a0c:	2701      	movs	r7, #1
 80a3a0e:	2300      	movs	r3, #0
 80a3a10:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3a14:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3a18:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3a1c:	930a      	str	r3, [sp, #40]	; 0x28
 80a3a1e:	9603      	str	r6, [sp, #12]
 80a3a20:	f8cd a008 	str.w	sl, [sp, #8]
 80a3a24:	9601      	str	r6, [sp, #4]
 80a3a26:	f8cd b000 	str.w	fp, [sp]
 80a3a2a:	4633      	mov	r3, r6
 80a3a2c:	aa07      	add	r2, sp, #28
 80a3a2e:	4965      	ldr	r1, [pc, #404]	; (80a3bc4 <_tzset_unlocked_r+0x2f0>)
 80a3a30:	4628      	mov	r0, r5
 80a3a32:	f7fd fa7f 	bl	80a0f34 <siscanf>
 80a3a36:	2800      	cmp	r0, #0
 80a3a38:	dc04      	bgt.n	80a3a44 <_tzset_unlocked_r+0x170>
 80a3a3a:	6a23      	ldr	r3, [r4, #32]
 80a3a3c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a3a40:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a3a42:	e00e      	b.n	80a3a62 <_tzset_unlocked_r+0x18e>
 80a3a44:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3a48:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3a4c:	213c      	movs	r1, #60	; 0x3c
 80a3a4e:	fb01 3302 	mla	r3, r1, r2, r3
 80a3a52:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3a56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3a5a:	fb01 3302 	mla	r3, r1, r2, r3
 80a3a5e:	435f      	muls	r7, r3
 80a3a60:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a3a62:	4627      	mov	r7, r4
 80a3a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3a66:	f04f 0900 	mov.w	r9, #0
 80a3a6a:	441d      	add	r5, r3
 80a3a6c:	782b      	ldrb	r3, [r5, #0]
 80a3a6e:	2b2c      	cmp	r3, #44	; 0x2c
 80a3a70:	bf08      	it	eq
 80a3a72:	3501      	addeq	r5, #1
 80a3a74:	f895 8000 	ldrb.w	r8, [r5]
 80a3a78:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a3a7c:	d126      	bne.n	80a3acc <_tzset_unlocked_r+0x1f8>
 80a3a7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a3a82:	9302      	str	r3, [sp, #8]
 80a3a84:	ab09      	add	r3, sp, #36	; 0x24
 80a3a86:	9300      	str	r3, [sp, #0]
 80a3a88:	9603      	str	r6, [sp, #12]
 80a3a8a:	9601      	str	r6, [sp, #4]
 80a3a8c:	4633      	mov	r3, r6
 80a3a8e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a3a92:	494d      	ldr	r1, [pc, #308]	; (80a3bc8 <_tzset_unlocked_r+0x2f4>)
 80a3a94:	4628      	mov	r0, r5
 80a3a96:	f7fd fa4d 	bl	80a0f34 <siscanf>
 80a3a9a:	2803      	cmp	r0, #3
 80a3a9c:	d17e      	bne.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3a9e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a3aa2:	1e4b      	subs	r3, r1, #1
 80a3aa4:	2b0b      	cmp	r3, #11
 80a3aa6:	d879      	bhi.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3aa8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a3aac:	1e53      	subs	r3, r2, #1
 80a3aae:	2b04      	cmp	r3, #4
 80a3ab0:	d874      	bhi.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3ab2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a3ab6:	2b06      	cmp	r3, #6
 80a3ab8:	d870      	bhi.n	80a3b9c <_tzset_unlocked_r+0x2c8>
 80a3aba:	f887 8008 	strb.w	r8, [r7, #8]
 80a3abe:	60f9      	str	r1, [r7, #12]
 80a3ac0:	613a      	str	r2, [r7, #16]
 80a3ac2:	617b      	str	r3, [r7, #20]
 80a3ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3ac6:	eb05 0803 	add.w	r8, r5, r3
 80a3aca:	e02a      	b.n	80a3b22 <_tzset_unlocked_r+0x24e>
 80a3acc:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a3ad0:	bf06      	itte	eq
 80a3ad2:	4643      	moveq	r3, r8
 80a3ad4:	3501      	addeq	r5, #1
 80a3ad6:	2344      	movne	r3, #68	; 0x44
 80a3ad8:	220a      	movs	r2, #10
 80a3ada:	a90b      	add	r1, sp, #44	; 0x2c
 80a3adc:	4628      	mov	r0, r5
 80a3ade:	9305      	str	r3, [sp, #20]
 80a3ae0:	f7ff fe3e 	bl	80a3760 <strtoul>
 80a3ae4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a3ae8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a3aec:	4545      	cmp	r5, r8
 80a3aee:	9b05      	ldr	r3, [sp, #20]
 80a3af0:	d114      	bne.n	80a3b1c <_tzset_unlocked_r+0x248>
 80a3af2:	234d      	movs	r3, #77	; 0x4d
 80a3af4:	f1b9 0f00 	cmp.w	r9, #0
 80a3af8:	d107      	bne.n	80a3b0a <_tzset_unlocked_r+0x236>
 80a3afa:	7223      	strb	r3, [r4, #8]
 80a3afc:	2303      	movs	r3, #3
 80a3afe:	60e3      	str	r3, [r4, #12]
 80a3b00:	2302      	movs	r3, #2
 80a3b02:	6123      	str	r3, [r4, #16]
 80a3b04:	f8c4 9014 	str.w	r9, [r4, #20]
 80a3b08:	e00b      	b.n	80a3b22 <_tzset_unlocked_r+0x24e>
 80a3b0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a3b0e:	230b      	movs	r3, #11
 80a3b10:	62a3      	str	r3, [r4, #40]	; 0x28
 80a3b12:	2301      	movs	r3, #1
 80a3b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a3b16:	2300      	movs	r3, #0
 80a3b18:	6323      	str	r3, [r4, #48]	; 0x30
 80a3b1a:	e002      	b.n	80a3b22 <_tzset_unlocked_r+0x24e>
 80a3b1c:	b280      	uxth	r0, r0
 80a3b1e:	723b      	strb	r3, [r7, #8]
 80a3b20:	6178      	str	r0, [r7, #20]
 80a3b22:	2302      	movs	r3, #2
 80a3b24:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a3b28:	2300      	movs	r3, #0
 80a3b2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a3b2e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a3b32:	930a      	str	r3, [sp, #40]	; 0x28
 80a3b34:	f898 3000 	ldrb.w	r3, [r8]
 80a3b38:	2b2f      	cmp	r3, #47	; 0x2f
 80a3b3a:	d10b      	bne.n	80a3b54 <_tzset_unlocked_r+0x280>
 80a3b3c:	9603      	str	r6, [sp, #12]
 80a3b3e:	f8cd a008 	str.w	sl, [sp, #8]
 80a3b42:	9601      	str	r6, [sp, #4]
 80a3b44:	f8cd b000 	str.w	fp, [sp]
 80a3b48:	4633      	mov	r3, r6
 80a3b4a:	aa07      	add	r2, sp, #28
 80a3b4c:	491f      	ldr	r1, [pc, #124]	; (80a3bcc <_tzset_unlocked_r+0x2f8>)
 80a3b4e:	4640      	mov	r0, r8
 80a3b50:	f7fd f9f0 	bl	80a0f34 <siscanf>
 80a3b54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a3b58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a3b5c:	213c      	movs	r1, #60	; 0x3c
 80a3b5e:	fb01 3302 	mla	r3, r1, r2, r3
 80a3b62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a3b66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a3b6a:	fb01 3302 	mla	r3, r1, r2, r3
 80a3b6e:	61bb      	str	r3, [r7, #24]
 80a3b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a3b72:	f109 0901 	add.w	r9, r9, #1
 80a3b76:	f1b9 0f02 	cmp.w	r9, #2
 80a3b7a:	4445      	add	r5, r8
 80a3b7c:	f107 071c 	add.w	r7, r7, #28
 80a3b80:	f47f af74 	bne.w	80a3a6c <_tzset_unlocked_r+0x198>
 80a3b84:	6860      	ldr	r0, [r4, #4]
 80a3b86:	f7ff fdf5 	bl	80a3774 <__tzcalc_limits>
 80a3b8a:	6a22      	ldr	r2, [r4, #32]
 80a3b8c:	4b07      	ldr	r3, [pc, #28]	; (80a3bac <_tzset_unlocked_r+0x2d8>)
 80a3b8e:	601a      	str	r2, [r3, #0]
 80a3b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a3b92:	1a9b      	subs	r3, r3, r2
 80a3b94:	4a07      	ldr	r2, [pc, #28]	; (80a3bb4 <_tzset_unlocked_r+0x2e0>)
 80a3b96:	bf18      	it	ne
 80a3b98:	2301      	movne	r3, #1
 80a3b9a:	6013      	str	r3, [r2, #0]
 80a3b9c:	b00d      	add	sp, #52	; 0x34
 80a3b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3ba2:	bf00      	nop
 80a3ba4:	080a44c8 	.word	0x080a44c8
 80a3ba8:	200002dc 	.word	0x200002dc
 80a3bac:	200002e4 	.word	0x200002e4
 80a3bb0:	080a44cb 	.word	0x080a44cb
 80a3bb4:	200002e0 	.word	0x200002e0
 80a3bb8:	20000080 	.word	0x20000080
 80a3bbc:	200002cf 	.word	0x200002cf
 80a3bc0:	080a44cf 	.word	0x080a44cf
 80a3bc4:	080a44f2 	.word	0x080a44f2
 80a3bc8:	080a44de 	.word	0x080a44de
 80a3bcc:	080a44f1 	.word	0x080a44f1
 80a3bd0:	200002c4 	.word	0x200002c4

080a3bd4 <_findenv_r>:
 80a3bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3bd8:	4607      	mov	r7, r0
 80a3bda:	468b      	mov	fp, r1
 80a3bdc:	4690      	mov	r8, r2
 80a3bde:	f000 f8d7 	bl	80a3d90 <__env_lock>
 80a3be2:	4b19      	ldr	r3, [pc, #100]	; (80a3c48 <_findenv_r+0x74>)
 80a3be4:	681d      	ldr	r5, [r3, #0]
 80a3be6:	469a      	mov	sl, r3
 80a3be8:	b13d      	cbz	r5, 80a3bfa <_findenv_r+0x26>
 80a3bea:	465c      	mov	r4, fp
 80a3bec:	4623      	mov	r3, r4
 80a3bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3bf2:	b142      	cbz	r2, 80a3c06 <_findenv_r+0x32>
 80a3bf4:	2a3d      	cmp	r2, #61	; 0x3d
 80a3bf6:	461c      	mov	r4, r3
 80a3bf8:	d1f8      	bne.n	80a3bec <_findenv_r+0x18>
 80a3bfa:	4638      	mov	r0, r7
 80a3bfc:	f000 f8c9 	bl	80a3d92 <__env_unlock>
 80a3c00:	2000      	movs	r0, #0
 80a3c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c06:	ebcb 0404 	rsb	r4, fp, r4
 80a3c0a:	46a9      	mov	r9, r5
 80a3c0c:	f859 0b04 	ldr.w	r0, [r9], #4
 80a3c10:	2800      	cmp	r0, #0
 80a3c12:	d0f2      	beq.n	80a3bfa <_findenv_r+0x26>
 80a3c14:	4622      	mov	r2, r4
 80a3c16:	4659      	mov	r1, fp
 80a3c18:	f7ff fd0f 	bl	80a363a <strncmp>
 80a3c1c:	b988      	cbnz	r0, 80a3c42 <_findenv_r+0x6e>
 80a3c1e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a3c22:	191e      	adds	r6, r3, r4
 80a3c24:	5d1b      	ldrb	r3, [r3, r4]
 80a3c26:	2b3d      	cmp	r3, #61	; 0x3d
 80a3c28:	d10b      	bne.n	80a3c42 <_findenv_r+0x6e>
 80a3c2a:	f8da 3000 	ldr.w	r3, [sl]
 80a3c2e:	4638      	mov	r0, r7
 80a3c30:	1aed      	subs	r5, r5, r3
 80a3c32:	10ad      	asrs	r5, r5, #2
 80a3c34:	f8c8 5000 	str.w	r5, [r8]
 80a3c38:	f000 f8ab 	bl	80a3d92 <__env_unlock>
 80a3c3c:	1c70      	adds	r0, r6, #1
 80a3c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c42:	464d      	mov	r5, r9
 80a3c44:	e7e1      	b.n	80a3c0a <_findenv_r+0x36>
 80a3c46:	bf00      	nop
 80a3c48:	200000c8 	.word	0x200000c8

080a3c4c <_getenv_r>:
 80a3c4c:	b507      	push	{r0, r1, r2, lr}
 80a3c4e:	aa01      	add	r2, sp, #4
 80a3c50:	f7ff ffc0 	bl	80a3bd4 <_findenv_r>
 80a3c54:	b003      	add	sp, #12
 80a3c56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3c5c <__gettzinfo>:
 80a3c5c:	4800      	ldr	r0, [pc, #0]	; (80a3c60 <__gettzinfo+0x4>)
 80a3c5e:	4770      	bx	lr
 80a3c60:	20000088 	.word	0x20000088

080a3c64 <gmtime_r>:
 80a3c64:	6802      	ldr	r2, [r0, #0]
 80a3c66:	4b46      	ldr	r3, [pc, #280]	; (80a3d80 <gmtime_r+0x11c>)
 80a3c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3c6a:	fb92 f4f3 	sdiv	r4, r2, r3
 80a3c6e:	fb03 2214 	mls	r2, r3, r4, r2
 80a3c72:	2a00      	cmp	r2, #0
 80a3c74:	bfbc      	itt	lt
 80a3c76:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a3c7a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a3c7e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a3c82:	fb92 f3f0 	sdiv	r3, r2, r0
 80a3c86:	fb00 2213 	mls	r2, r0, r3, r2
 80a3c8a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a3c8e:	608b      	str	r3, [r1, #8]
 80a3c90:	fb92 f3f0 	sdiv	r3, r2, r0
 80a3c94:	fb00 2213 	mls	r2, r0, r3, r2
 80a3c98:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a3c9c:	bfac      	ite	ge
 80a3c9e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a3ca2:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a3ca6:	604b      	str	r3, [r1, #4]
 80a3ca8:	600a      	str	r2, [r1, #0]
 80a3caa:	2307      	movs	r3, #7
 80a3cac:	1ce2      	adds	r2, r4, #3
 80a3cae:	fb92 f3f3 	sdiv	r3, r2, r3
 80a3cb2:	4d34      	ldr	r5, [pc, #208]	; (80a3d84 <gmtime_r+0x120>)
 80a3cb4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a3cb8:	fb94 f5f5 	sdiv	r5, r4, r5
 80a3cbc:	1ad3      	subs	r3, r2, r3
 80a3cbe:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a3cc2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a3cc6:	618b      	str	r3, [r1, #24]
 80a3cc8:	4b2f      	ldr	r3, [pc, #188]	; (80a3d88 <gmtime_r+0x124>)
 80a3cca:	4830      	ldr	r0, [pc, #192]	; (80a3d8c <gmtime_r+0x128>)
 80a3ccc:	fb03 4405 	mla	r4, r3, r5, r4
 80a3cd0:	fbb4 f2f2 	udiv	r2, r4, r2
 80a3cd4:	fbb4 f3f7 	udiv	r3, r4, r7
 80a3cd8:	fbb4 f0f0 	udiv	r0, r4, r0
 80a3cdc:	4422      	add	r2, r4
 80a3cde:	1ad2      	subs	r2, r2, r3
 80a3ce0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a3ce4:	1a13      	subs	r3, r2, r0
 80a3ce6:	f240 126d 	movw	r2, #365	; 0x16d
 80a3cea:	fbb3 f6f6 	udiv	r6, r3, r6
 80a3cee:	fbb3 f0f2 	udiv	r0, r3, r2
 80a3cf2:	fbb3 f3f7 	udiv	r3, r3, r7
 80a3cf6:	4434      	add	r4, r6
 80a3cf8:	1ae3      	subs	r3, r4, r3
 80a3cfa:	fb02 3310 	mls	r3, r2, r0, r3
 80a3cfe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a3d02:	2499      	movs	r4, #153	; 0x99
 80a3d04:	3202      	adds	r2, #2
 80a3d06:	fbb2 f2f4 	udiv	r2, r2, r4
 80a3d0a:	4354      	muls	r4, r2
 80a3d0c:	1ca6      	adds	r6, r4, #2
 80a3d0e:	2405      	movs	r4, #5
 80a3d10:	fbb6 f4f4 	udiv	r4, r6, r4
 80a3d14:	2a0a      	cmp	r2, #10
 80a3d16:	bf34      	ite	cc
 80a3d18:	2602      	movcc	r6, #2
 80a3d1a:	f06f 0609 	mvncs.w	r6, #9
 80a3d1e:	4416      	add	r6, r2
 80a3d20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3d24:	fb02 0505 	mla	r5, r2, r5, r0
 80a3d28:	1c5f      	adds	r7, r3, #1
 80a3d2a:	2e01      	cmp	r6, #1
 80a3d2c:	bf98      	it	ls
 80a3d2e:	3501      	addls	r5, #1
 80a3d30:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a3d34:	eba7 0704 	sub.w	r7, r7, r4
 80a3d38:	d302      	bcc.n	80a3d40 <gmtime_r+0xdc>
 80a3d3a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a3d3e:	e014      	b.n	80a3d6a <gmtime_r+0x106>
 80a3d40:	0782      	lsls	r2, r0, #30
 80a3d42:	d105      	bne.n	80a3d50 <gmtime_r+0xec>
 80a3d44:	2464      	movs	r4, #100	; 0x64
 80a3d46:	fbb0 f2f4 	udiv	r2, r0, r4
 80a3d4a:	fb04 0212 	mls	r2, r4, r2, r0
 80a3d4e:	b94a      	cbnz	r2, 80a3d64 <gmtime_r+0x100>
 80a3d50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a3d54:	fbb0 f4f2 	udiv	r4, r0, r2
 80a3d58:	fb02 0014 	mls	r0, r2, r4, r0
 80a3d5c:	fab0 f280 	clz	r2, r0
 80a3d60:	0952      	lsrs	r2, r2, #5
 80a3d62:	e000      	b.n	80a3d66 <gmtime_r+0x102>
 80a3d64:	2201      	movs	r2, #1
 80a3d66:	333b      	adds	r3, #59	; 0x3b
 80a3d68:	441a      	add	r2, r3
 80a3d6a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a3d6e:	2300      	movs	r3, #0
 80a3d70:	61ca      	str	r2, [r1, #28]
 80a3d72:	614d      	str	r5, [r1, #20]
 80a3d74:	610e      	str	r6, [r1, #16]
 80a3d76:	60cf      	str	r7, [r1, #12]
 80a3d78:	620b      	str	r3, [r1, #32]
 80a3d7a:	4608      	mov	r0, r1
 80a3d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3d7e:	bf00      	nop
 80a3d80:	00015180 	.word	0x00015180
 80a3d84:	00023ab1 	.word	0x00023ab1
 80a3d88:	fffdc54f 	.word	0xfffdc54f
 80a3d8c:	00023ab0 	.word	0x00023ab0

080a3d90 <__env_lock>:
 80a3d90:	4770      	bx	lr

080a3d92 <__env_unlock>:
 80a3d92:	4770      	bx	lr

080a3d94 <dynalib_user>:
 80a3d94:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3da4:	0000 0000 7552 6e6e 6e69 2067 6553 7574     ....Running Setu
 80a3db4:	2070 6f66 2072 6f6c 706f 7b00 0020 4222     p for loop.{ ."B
 80a3dc4:	2274 003a 202c 2200 7042 3a22 2200 6842     t":., ."Bp":."Bh
 80a3dd4:	3a22 2200 7259 3a22 2200 6f4d 3a22 2200     ":."Yr":."Mo":."
 80a3de4:	6144 3a22 2200 7248 3a22 2200 694d 3a22     Da":."Hr":."Mi":
 80a3df4:	2200 6353 3a22 2200 6f5a 3a22 2200 7644     ."Sc":."Zo":."Dv
 80a3e04:	3a22 2220 6f50 6577 3172 2022 007d 7542     ": "Power1" }.Bu
 80a3e14:	6e72 656c 0079 6553 746e 7420 206f 6874     rnley.Sent to th
 80a3e24:	2065 6c63 756f 2e64 2e2e 0020 6e55 6e6b     e cloud... .Unkn
 80a3e34:	776f 206e 5353 4449 203a 4300 6e6f 656e     own SSID: .Conne
 80a3e44:	7463 6e69 2067 6957 6946 2e2e 002e 6f43     cting WiFi....Co
 80a3e54:	6e6e 6365 6974 676e 7420 206f 6c43 756f     nnecting to Clou
 80a3e64:	2e64 2e2e 5700 6669 2069 7369 7220 6165     d....Wifi is rea
 80a3e74:	7964 002e 6957 6966 6920 2073 6f63 6e6e     dy..Wifi is conn
 80a3e84:	6365 6974 676e 002e 6957 6966 6920 2073     ecting..Wifi is 
 80a3e94:	6572 6461 2e79 6e20 776f 7420 206f 6f63     ready. now to co
 80a3ea4:	6e6e 6365 2074 6f74 7420 6568 6320 6f6c     nnect to the clo
 80a3eb4:	6475 202e 4300 6e6f 656e 7463 6465 7420     ud. .Connected t
 80a3ec4:	206f 6874 2065 6c63 756f 2e64 2e2e 0020     o the cloud... .
 80a3ed4:	6c41 206c 6573 7574 2c70 6320 6e6f 656e     All setup, conne
 80a3ee4:	7463 6465 6120 646e 7220 6165 7964 7420     cted and ready t
 80a3ef4:	206f 6164 636e 2e65 4820 7a61 7261 7300     o dance. Hazar.s
 80a3f04:	6f68 6c75 2064 6562 6320 6e6f 656e 7463     hould be connect
 80a3f14:	6465 7420 206f 6c63 756f 2e64 2e2e 0020     ed to cloud... .
 80a3f24:	6957 6946 6320 6e6f 656e 7463 6f69 206e     WiFi connection 
 80a3f34:	6974 656d 2064 756f 2c74 7720 6c69 206c     timed out, will 
 80a3f44:	7274 2079 6e61 2064 6f63 6e6e 6365 2e74     try and connect.
 80a3f54:	2e2e 5700 2065 7261 2065 7473 6c69 206c     ...We are still 
 80a3f64:	6f63 6e6e 6365 6974 676e 7420 206f 6874     connecting to th
 80a3f74:	2065 6c63 756f 2e64 5720 6c69 206c 7274     e cloud. Will tr
 80a3f84:	2079 6f63 6e6e 6365 2074 6761 6961 2e6e     y connect again.
 80a3f94:	4e00 746f 6320 6e6f 656e 7463 6465 7420     .Not connected t
 80a3fa4:	206f 6874 2065 6c63 756f 2e64 7720 6c69     o the cloud. wil
 80a3fb4:	206c 7274 2079 6761 6961 2e6e 2e2e 4300     l try again....C
 80a3fc4:	6e6f 656e 7463 6e69 2067 6f74 7420 6568     onnecting to the
 80a3fd4:	6320 6f6c 6475 2e2e 202e 4900 2073 2061      cloud... .Is a 
 80a3fe4:	6c63 756f 2064 6f6c 706f 6220 7475 5720     cloud loop but W
 80a3ff4:	6669 2069 7369 6e20 746f 6520 616e 6c62     ifi is not enabl
 80a4004:	6465 202c 6977 6c6c 6e20 776f 6320 6e6f     ed, will now con
 80a4014:	656e 7463 002e 6e4f 6f00 6666 5400 746f     nect..On.off.Tot
 80a4024:	6c61 7020 776f 7265 6920 2073 0009 0943     al power is ..C.
 80a4034:	6d00 6841 5000 776f 7265 6f20 2066 6564     .mAh.Power of de
 80a4044:	6976 6563 7320 6977 6374 6568 2e64 5000     vice switched..P
 80a4054:	776f 7265 6920 2073 5700 6568 206e 6f70     ower is .When po
 80a4064:	6577 2072 7369 6f20 206e 0009 6857 6e65     wer is on ..When
 80a4074:	7020 776f 7265 6920 2073 666f 0966 3400      power is off..4
 80a4084:	6951 6475 3932 642d 0061 4733 7520 6946     Qiud29-da.3G uFi
 80a4094:	395f 3045 3300 2047 4675 5f69 3136 0042     _9E0.3G uFi_61B.
 80a40a4:	4733 7520 6946 435f 3338 3300 2047 4675     3G uFi_C83.3G uF
 80a40b4:	5f69 4539 0033 4733 7520 6946 435f 4236     i_9E3.3G uFi_C6B
 80a40c4:	0000 0000                                   ....

080a40c8 <_ZTV8SPIClass>:
	...
 80a40d0:	0f65 080a 0f67 080a 6162 6475 5300 7265     e...g...baud.Ser
 80a40e0:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a40f0:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a4100:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a4110:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a4120:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a4130:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a4140:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a4150:	0070 3025 3031 2075 5d00 0020 6425 2800     p.%010u .] .%d.(
 80a4160:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a4170:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a4180:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
 80a4190:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80a41a0:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80a41b0:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
 80a41c0:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
 80a41d0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a41e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a41e8:	1745 080a 174b 080a 178f 080a 1759 080a     E...K.......Y...
 80a41f8:	1747 080a                                   G...

080a41fc <_ZTV9IPAddress>:
	...
 80a4204:	1cdd 080a 1ccd 080a 1ccf 080a               ............

080a4210 <_ZTV9USBSerial>:
	...
 80a4218:	1d99 080a 1de9 080a 1df7 080a 130d 080a     ................
 80a4228:	1dd5 080a 1d9b 080a 1db1 080a 1de3 080a     ................
 80a4238:	1dc7 080a 1d95 080a                         ........

080a4240 <_ZTV11USARTSerial>:
	...
 80a4248:	1f51 080a 1fa1 080a 1faf 080a 130d 080a     Q...............
 80a4258:	1f65 080a 1f87 080a 1f73 080a 1f9b 080a     e.......s.......
 80a4268:	1f53 080a 1f57 080a                         S...W...

080a4270 <_ZTV7TwoWire>:
	...
 80a4278:	20b1 080a 20fb 080a 20d3 080a 20b3 080a     . ... ... ... ..
 80a4288:	20db 080a 20e3 080a 20eb 080a 20f3 080a     . ... ... ... ..

080a4298 <_ZTVN5spark9WiFiClassE>:
	...
 80a42a0:	21e5 080a 21db 080a 01b5 080a 01bf 080a     .!...!..........
 80a42b0:	13eb 080a 21cf 080a 21c3 080a 21bb 080a     .....!...!...!..
 80a42c0:	21b1 080a 21a7 080a 2163 080a               .!...!..c!..

080a42cc <_ZTVN5spark12NetworkClassE>:
	...
 80a42d4:	224d 080a 2257 080a 2261 080a 226b 080a     M"..W"..a"..k"..
 80a42e4:	2275 080a 2281 080a 228d 080a 2299 080a     u"..."..."..."..
 80a42f4:	22a1 080a 22ab 080a 22b5 080a               ."..."..."..

080a4300 <_ctype_>:
 80a4300:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a4310:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a4320:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a4330:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a4340:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a4350:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a4360:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a4370:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a4380:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a4404 <__sf_fake_stdin>:
	...

080a4424 <__sf_fake_stdout>:
	...

080a4444 <__sf_fake_stderr>:
	...
 80a4464:	0043 0000                                   C...

080a4468 <__month_lengths>:
 80a4468:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a4478:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a4488:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a4498:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a44a8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a44b8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a44c8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a44d8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a44e8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a44f8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a4504 <link_const_variable_data_end>:
 80a4504:	080a0a99 	.word	0x080a0a99
 80a4508:	080a0fa5 	.word	0x080a0fa5
 80a450c:	080a1431 	.word	0x080a1431
 80a4510:	080a1599 	.word	0x080a1599
 80a4514:	080a15f1 	.word	0x080a15f1
 80a4518:	080a2239 	.word	0x080a2239
 80a451c:	080a2305 	.word	0x080a2305
 80a4520:	080a23a9 	.word	0x080a23a9
 80a4524:	080a23ed 	.word	0x080a23ed
 80a4528:	080a2471 	.word	0x080a2471
 80a452c:	080a24f5 	.word	0x080a24f5
 80a4530:	080a25b9 	.word	0x080a25b9
 80a4534:	080a267d 	.word	0x080a267d

080a4538 <link_constructors_end>:
	...
