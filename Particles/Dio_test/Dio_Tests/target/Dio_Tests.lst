
c:/Users/julia/Documents/Particle/projects/Dio_test/Dio_Tests/target/Dio_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000069f0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a6a10  080a6a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000008  40024000  080a6a18  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c8  20000000  080a6a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000240  200000c8  200000c8  000400c8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a6ae8  080a6ae8  00036ae8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a6b10  080a6b10  00036b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000c84c6  00000000  00000000  00036b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00011bac  00000000  00000000  000fefda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001607f  00000000  00000000  00110b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000023b8  00000000  00000000  00126c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000038c8  00000000  00000000  00128fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000297a3  00000000  00000000  0012c885  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000284fd  00000000  00000000  00156028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000aa076  00000000  00000000  0017e525  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c96c  00000000  00000000  0022859c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fca3 	bl	80a597c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fca8 	bl	80a5992 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6a20 	.word	0x080a6a20
 80a0050:	200000c8 	.word	0x200000c8
 80a0054:	200000c8 	.word	0x200000c8
 80a0058:	20000308 	.word	0x20000308
 80a005c:	20000308 	.word	0x20000308

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f96b 	bl	80a233c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a69d0 	.word	0x080a69d0
 80a0088:	080a6a0c 	.word	0x080a6a0c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b838 	b.w	80a0100 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 faf3 	bl	80a067c <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b911 	b.w	80a22c0 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bb4d 	b.w	80a173c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bb53 	b.w	80a174c <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a00b6:	2200      	movs	r2, #0
 80a00b8:	4611      	mov	r1, r2
 80a00ba:	6840      	ldr	r0, [r0, #4]
 80a00bc:	f001 bac6 	b.w	80a164c <network_connecting>

080a00c0 <_ZN5spark9WiFiClass5readyEv>:
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a00c0:	2200      	movs	r2, #0
 80a00c2:	4611      	mov	r1, r2
 80a00c4:	6840      	ldr	r0, [r0, #4]
 80a00c6:	f001 bad1 	b.w	80a166c <network_ready>

080a00ca <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a00ca:	b40e      	push	{r1, r2, r3}
 80a00cc:	b500      	push	{lr}
 80a00ce:	b08c      	sub	sp, #48	; 0x30
 80a00d0:	aa0d      	add	r2, sp, #52	; 0x34
 80a00d2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a00d6:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a00d8:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a00dc:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a00de:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a00e0:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a00e2:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a00e4:	aa04      	add	r2, sp, #16
 80a00e6:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a00e8:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a00ea:	f001 fa49 	bl	80a1580 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 80a00ee:	b00c      	add	sp, #48	; 0x30
 80a00f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80a00f4:	b003      	add	sp, #12
 80a00f6:	4770      	bx	lr

080a00f8 <_Z13setup_Optionsv>:
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a00f8:	2101      	movs	r1, #1
 80a00fa:	4608      	mov	r0, r1
 80a00fc:	f001 b946 	b.w	80a138c <HAL_Feature_Set>

080a0100 <setup>:
/*DO NOT CHANGE*/ const char *PASS = "4Qiud29-da";



void setup() 
{ 
 80a0100:	b510      	push	{r4, lr}
  pinMode(wifi_Power, OUTPUT);  
 80a0102:	4b18      	ldr	r3, [pc, #96]	; (80a0164 <setup+0x64>)
 80a0104:	2101      	movs	r1, #1
 80a0106:	8818      	ldrh	r0, [r3, #0]
 80a0108:	f002 ff0c 	bl	80a2f24 <pinMode>
  pinMode(SensorPower, OUTPUT);
 80a010c:	4b16      	ldr	r3, [pc, #88]	; (80a0168 <setup+0x68>)
  pinMode(SignalPower, OUTPUT);
 80a010e:	4c17      	ldr	r4, [pc, #92]	; (80a016c <setup+0x6c>)


void setup() 
{ 
  pinMode(wifi_Power, OUTPUT);  
  pinMode(SensorPower, OUTPUT);
 80a0110:	8818      	ldrh	r0, [r3, #0]
 80a0112:	2101      	movs	r1, #1
 80a0114:	f002 ff06 	bl	80a2f24 <pinMode>
  pinMode(SignalPower, OUTPUT);
 80a0118:	2101      	movs	r1, #1
 80a011a:	8820      	ldrh	r0, [r4, #0]
 80a011c:	f002 ff02 	bl	80a2f24 <pinMode>
  delay(10);
 80a0120:	200a      	movs	r0, #10
 80a0122:	f002 f86b 	bl	80a21fc <delay>
  
  digitalWrite(SignalPower, HIGH);
 80a0126:	2101      	movs	r1, #1
 80a0128:	8820      	ldrh	r0, [r4, #0]
 80a012a:	f002 ff0c 	bl	80a2f46 <digitalWrite>
  Serial.begin(9600);
 80a012e:	f002 fcbb 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0132:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0136:	f002 fcab 	bl	80a2a90 <_ZN9USBSerial5beginEl>

 // while (!Serial.isConnected())
 //     Particle.process();
  //delay(1000); 
  Log.info("Running Setup for loop");
 80a013a:	490d      	ldr	r1, [pc, #52]	; (80a0170 <setup+0x70>)
 80a013c:	480d      	ldr	r0, [pc, #52]	; (80a0174 <setup+0x74>)
 80a013e:	f7ff ffc4 	bl	80a00ca <_ZNK5spark6Logger4infoEPKcz>
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

   status = bme.begin();
 80a0142:	480d      	ldr	r0, [pc, #52]	; (80a0178 <setup+0x78>)
 80a0144:	f000 fe36 	bl	80a0db4 <_ZN15Adafruit_BME2805beginEv>
 80a0148:	4b0c      	ldr	r3, [pc, #48]	; (80a017c <setup+0x7c>)

   if (! sgp.begin()){
 80a014a:	2100      	movs	r1, #0
 //     Particle.process();
  //delay(1000); 
  Log.info("Running Setup for loop");
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

   status = bme.begin();
 80a014c:	6018      	str	r0, [r3, #0]

   if (! sgp.begin()){
 80a014e:	480c      	ldr	r0, [pc, #48]	; (80a0180 <setup+0x80>)
 80a0150:	f001 f84c 	bl	80a11ec <_ZN14Adafruit_SGP305beginEP7TwoWire>
 80a0154:	b928      	cbnz	r0, 80a0162 <setup+0x62>
     Serial.println("Sensor not found :(");
 80a0156:	f002 fca7 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a015a:	490a      	ldr	r1, [pc, #40]	; (80a0184 <setup+0x84>)
 80a015c:	f001 fe26 	bl	80a1dac <_ZN5Print7printlnEPKc>
 80a0160:	e7fe      	b.n	80a0160 <setup+0x60>
 80a0162:	bd10      	pop	{r4, pc}
 80a0164:	20000004 	.word	0x20000004
 80a0168:	20000000 	.word	0x20000000
 80a016c:	20000008 	.word	0x20000008
 80a0170:	080a61cc 	.word	0x080a61cc
 80a0174:	2000013c 	.word	0x2000013c
 80a0178:	200000f0 	.word	0x200000f0
 80a017c:	200000d4 	.word	0x200000d4
 80a0180:	200000d8 	.word	0x200000d8
 80a0184:	080a61e3 	.word	0x080a61e3

080a0188 <_Z13publishValuesv>:
  
  
  delay(1000);

}
void publishValues(){
 80a0188:	b510      	push	{r4, lr}
 80a018a:	b08e      	sub	sp, #56	; 0x38

    String message = "";
 80a018c:	49b9      	ldr	r1, [pc, #740]	; (80a0474 <_Z13publishValuesv+0x2ec>)
 80a018e:	a802      	add	r0, sp, #8
 80a0190:	f001 fd23 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
    message.concat(String("{ "));
 80a0194:	49b8      	ldr	r1, [pc, #736]	; (80a0478 <_Z13publishValuesv+0x2f0>)
 80a0196:	a80a      	add	r0, sp, #40	; 0x28
 80a0198:	f001 fd1f 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
 80a019c:	a90a      	add	r1, sp, #40	; 0x28
 80a019e:	a802      	add	r0, sp, #8
 80a01a0:	f001 fd9a 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a01a4:	a80a      	add	r0, sp, #40	; 0x28
 80a01a6:	f001 fcd1 	bl	80a1b4c <_ZN6StringD1Ev>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01aa:	49b4      	ldr	r1, [pc, #720]	; (80a047c <_Z13publishValuesv+0x2f4>)
 80a01ac:	a80a      	add	r0, sp, #40	; 0x28
 80a01ae:	f001 fd14 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>

      message.concat("\"Bt\":" + String(bme.readTemperature(), 3) + ", ");      
 80a01b2:	48b3      	ldr	r0, [pc, #716]	; (80a0480 <_Z13publishValuesv+0x2f8>)
 80a01b4:	f000 fe12 	bl	80a0ddc <_ZN15Adafruit_BME28015readTemperatureEv>
 80a01b8:	2203      	movs	r2, #3
 80a01ba:	4601      	mov	r1, r0
 80a01bc:	a806      	add	r0, sp, #24
 80a01be:	f001 fd5d 	bl	80a1c7c <_ZN6StringC1Efi>
 80a01c2:	a906      	add	r1, sp, #24
 80a01c4:	a80a      	add	r0, sp, #40	; 0x28
 80a01c6:	f001 fd9a 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a01ca:	49ae      	ldr	r1, [pc, #696]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a01cc:	f001 fda3 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a01d0:	4601      	mov	r1, r0
 80a01d2:	a802      	add	r0, sp, #8
 80a01d4:	f001 fd80 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a01d8:	a806      	add	r0, sp, #24
 80a01da:	f001 fcb7 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01de:	a80a      	add	r0, sp, #40	; 0x28
 80a01e0:	f001 fcb4 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01e4:	49a8      	ldr	r1, [pc, #672]	; (80a0488 <_Z13publishValuesv+0x300>)
 80a01e6:	a80a      	add	r0, sp, #40	; 0x28
 80a01e8:	f001 fcf7 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Bp\":" + String(bme.readPressure() / 100.0F, 3) + ", ");      
 80a01ec:	48a4      	ldr	r0, [pc, #656]	; (80a0480 <_Z13publishValuesv+0x2f8>)
 80a01ee:	f000 fe1f 	bl	80a0e30 <_ZN15Adafruit_BME28012readPressureEv>
 80a01f2:	49a6      	ldr	r1, [pc, #664]	; (80a048c <_Z13publishValuesv+0x304>)
 80a01f4:	f005 f81c 	bl	80a5230 <__aeabi_fdiv>
 80a01f8:	2203      	movs	r2, #3
 80a01fa:	4601      	mov	r1, r0
 80a01fc:	a806      	add	r0, sp, #24
 80a01fe:	f001 fd3d 	bl	80a1c7c <_ZN6StringC1Efi>
 80a0202:	a906      	add	r1, sp, #24
 80a0204:	a80a      	add	r0, sp, #40	; 0x28
 80a0206:	f001 fd7a 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a020a:	499e      	ldr	r1, [pc, #632]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a020c:	f001 fd83 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0210:	4601      	mov	r1, r0
 80a0212:	a802      	add	r0, sp, #8
 80a0214:	f001 fd60 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a0218:	a806      	add	r0, sp, #24
 80a021a:	f001 fc97 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a021e:	a80a      	add	r0, sp, #40	; 0x28
 80a0220:	f001 fc94 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0224:	499a      	ldr	r1, [pc, #616]	; (80a0490 <_Z13publishValuesv+0x308>)
 80a0226:	a80a      	add	r0, sp, #40	; 0x28
 80a0228:	f001 fcd7 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Bh\":" + String(bme.readHumidity(), 3) + ", ");      
 80a022c:	4894      	ldr	r0, [pc, #592]	; (80a0480 <_Z13publishValuesv+0x2f8>)
 80a022e:	f000 fed5 	bl	80a0fdc <_ZN15Adafruit_BME28012readHumidityEv>
 80a0232:	2203      	movs	r2, #3
 80a0234:	4601      	mov	r1, r0
 80a0236:	a806      	add	r0, sp, #24
 80a0238:	f001 fd20 	bl	80a1c7c <_ZN6StringC1Efi>
 80a023c:	a906      	add	r1, sp, #24
 80a023e:	a80a      	add	r0, sp, #40	; 0x28
 80a0240:	f001 fd5d 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a0244:	498f      	ldr	r1, [pc, #572]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0246:	f001 fd66 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a024a:	4601      	mov	r1, r0
 80a024c:	a802      	add	r0, sp, #8
 80a024e:	f001 fd43 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a0252:	a806      	add	r0, sp, #24
 80a0254:	f001 fc7a 	bl	80a1b4c <_ZN6StringD1Ev>
      message.concat("\"Sv\":" + String(sgp.TVOC) + ", ");      
 80a0258:	4c8e      	ldr	r4, [pc, #568]	; (80a0494 <_Z13publishValuesv+0x30c>)

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a025a:	a80a      	add	r0, sp, #40	; 0x28
 80a025c:	f001 fc76 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0260:	498d      	ldr	r1, [pc, #564]	; (80a0498 <_Z13publishValuesv+0x310>)
 80a0262:	a80a      	add	r0, sp, #40	; 0x28
 80a0264:	f001 fcb9 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
 80a0268:	220a      	movs	r2, #10
 80a026a:	8821      	ldrh	r1, [r4, #0]
 80a026c:	a806      	add	r0, sp, #24
 80a026e:	f001 fcf2 	bl	80a1c56 <_ZN6StringC1Eih>
 80a0272:	a906      	add	r1, sp, #24
 80a0274:	a80a      	add	r0, sp, #40	; 0x28
 80a0276:	f001 fd42 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a027a:	4982      	ldr	r1, [pc, #520]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a027c:	f001 fd4b 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0280:	4601      	mov	r1, r0
 80a0282:	a802      	add	r0, sp, #8
 80a0284:	f001 fd28 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a0288:	a806      	add	r0, sp, #24
 80a028a:	f001 fc5f 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a028e:	a80a      	add	r0, sp, #40	; 0x28
 80a0290:	f001 fc5c 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0294:	4981      	ldr	r1, [pc, #516]	; (80a049c <_Z13publishValuesv+0x314>)
 80a0296:	a80a      	add	r0, sp, #40	; 0x28
 80a0298:	f001 fc9f 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Ss\":" + String(sgp.eCO2) + ", ");    
 80a029c:	220a      	movs	r2, #10
 80a029e:	8861      	ldrh	r1, [r4, #2]
 80a02a0:	a806      	add	r0, sp, #24
 80a02a2:	f001 fcd8 	bl	80a1c56 <_ZN6StringC1Eih>
 80a02a6:	a906      	add	r1, sp, #24
 80a02a8:	a80a      	add	r0, sp, #40	; 0x28
 80a02aa:	f001 fd28 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a02ae:	4975      	ldr	r1, [pc, #468]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a02b0:	f001 fd31 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a02b4:	4601      	mov	r1, r0
 80a02b6:	a802      	add	r0, sp, #8
 80a02b8:	f001 fd0e 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a02bc:	a806      	add	r0, sp, #24
 80a02be:	f001 fc45 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02c2:	a80a      	add	r0, sp, #40	; 0x28
 80a02c4:	f001 fc42 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a02c8:	4975      	ldr	r1, [pc, #468]	; (80a04a0 <_Z13publishValuesv+0x318>)
 80a02ca:	a80a      	add	r0, sp, #40	; 0x28
 80a02cc:	f001 fc85 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Yr\":" + String(Time.year()) + ", ");
 80a02d0:	f001 ff80 	bl	80a21d4 <_ZN9TimeClass4yearEv>
 80a02d4:	220a      	movs	r2, #10
 80a02d6:	4601      	mov	r1, r0
 80a02d8:	a806      	add	r0, sp, #24
 80a02da:	f001 fcbc 	bl	80a1c56 <_ZN6StringC1Eih>
 80a02de:	a906      	add	r1, sp, #24
 80a02e0:	a80a      	add	r0, sp, #40	; 0x28
 80a02e2:	f001 fd0c 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a02e6:	4967      	ldr	r1, [pc, #412]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a02e8:	f001 fd15 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a02ec:	4601      	mov	r1, r0
 80a02ee:	a802      	add	r0, sp, #8
 80a02f0:	f001 fcf2 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a02f4:	a806      	add	r0, sp, #24
 80a02f6:	f001 fc29 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02fa:	a80a      	add	r0, sp, #40	; 0x28
 80a02fc:	f001 fc26 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0300:	4968      	ldr	r1, [pc, #416]	; (80a04a4 <_Z13publishValuesv+0x31c>)
 80a0302:	a80a      	add	r0, sp, #40	; 0x28
 80a0304:	f001 fc69 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Mo\":" + String(Time.month()) + ", ");
 80a0308:	f001 ff5c 	bl	80a21c4 <_ZN9TimeClass5monthEv>
 80a030c:	220a      	movs	r2, #10
 80a030e:	4601      	mov	r1, r0
 80a0310:	a806      	add	r0, sp, #24
 80a0312:	f001 fca0 	bl	80a1c56 <_ZN6StringC1Eih>
 80a0316:	a906      	add	r1, sp, #24
 80a0318:	a80a      	add	r0, sp, #40	; 0x28
 80a031a:	f001 fcf0 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a031e:	4959      	ldr	r1, [pc, #356]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0320:	f001 fcf9 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0324:	4601      	mov	r1, r0
 80a0326:	a802      	add	r0, sp, #8
 80a0328:	f001 fcd6 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a032c:	a806      	add	r0, sp, #24
 80a032e:	f001 fc0d 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0332:	a80a      	add	r0, sp, #40	; 0x28
 80a0334:	f001 fc0a 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0338:	495b      	ldr	r1, [pc, #364]	; (80a04a8 <_Z13publishValuesv+0x320>)
 80a033a:	a80a      	add	r0, sp, #40	; 0x28
 80a033c:	f001 fc4d 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Da\":" + String(Time.day()) + ", ");
 80a0340:	f001 ff36 	bl	80a21b0 <_ZN9TimeClass3dayEv>
 80a0344:	220a      	movs	r2, #10
 80a0346:	4601      	mov	r1, r0
 80a0348:	a806      	add	r0, sp, #24
 80a034a:	f001 fc84 	bl	80a1c56 <_ZN6StringC1Eih>
 80a034e:	a906      	add	r1, sp, #24
 80a0350:	a80a      	add	r0, sp, #40	; 0x28
 80a0352:	f001 fcd4 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a0356:	494b      	ldr	r1, [pc, #300]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0358:	f001 fcdd 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a035c:	4601      	mov	r1, r0
 80a035e:	a802      	add	r0, sp, #8
 80a0360:	f001 fcba 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a0364:	a806      	add	r0, sp, #24
 80a0366:	f001 fbf1 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a036a:	a80a      	add	r0, sp, #40	; 0x28
 80a036c:	f001 fbee 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0370:	494e      	ldr	r1, [pc, #312]	; (80a04ac <_Z13publishValuesv+0x324>)
 80a0372:	a80a      	add	r0, sp, #40	; 0x28
 80a0374:	f001 fc31 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Hr\":" + String(Time.hour()) + ", ");
 80a0378:	f001 fefc 	bl	80a2174 <_ZN9TimeClass4hourEv>
 80a037c:	220a      	movs	r2, #10
 80a037e:	4601      	mov	r1, r0
 80a0380:	a806      	add	r0, sp, #24
 80a0382:	f001 fc68 	bl	80a1c56 <_ZN6StringC1Eih>
 80a0386:	a906      	add	r1, sp, #24
 80a0388:	a80a      	add	r0, sp, #40	; 0x28
 80a038a:	f001 fcb8 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a038e:	493d      	ldr	r1, [pc, #244]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0390:	f001 fcc1 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0394:	4601      	mov	r1, r0
 80a0396:	a802      	add	r0, sp, #8
 80a0398:	f001 fc9e 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a039c:	a806      	add	r0, sp, #24
 80a039e:	f001 fbd5 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03a2:	a80a      	add	r0, sp, #40	; 0x28
 80a03a4:	f001 fbd2 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03a8:	4941      	ldr	r1, [pc, #260]	; (80a04b0 <_Z13publishValuesv+0x328>)
 80a03aa:	a80a      	add	r0, sp, #40	; 0x28
 80a03ac:	f001 fc15 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Mi\":" + String(Time.minute()) + ", ");
 80a03b0:	f001 feea 	bl	80a2188 <_ZN9TimeClass6minuteEv>
 80a03b4:	220a      	movs	r2, #10
 80a03b6:	4601      	mov	r1, r0
 80a03b8:	a806      	add	r0, sp, #24
 80a03ba:	f001 fc4c 	bl	80a1c56 <_ZN6StringC1Eih>
 80a03be:	a906      	add	r1, sp, #24
 80a03c0:	a80a      	add	r0, sp, #40	; 0x28
 80a03c2:	f001 fc9c 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a03c6:	492f      	ldr	r1, [pc, #188]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a03c8:	f001 fca5 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a03cc:	4601      	mov	r1, r0
 80a03ce:	a802      	add	r0, sp, #8
 80a03d0:	f001 fc82 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a03d4:	a806      	add	r0, sp, #24
 80a03d6:	f001 fbb9 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03da:	a80a      	add	r0, sp, #40	; 0x28
 80a03dc:	f001 fbb6 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a03e0:	4934      	ldr	r1, [pc, #208]	; (80a04b4 <_Z13publishValuesv+0x32c>)
 80a03e2:	a80a      	add	r0, sp, #40	; 0x28
 80a03e4:	f001 fbf9 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Sc\":" + String(Time.second()) + ", ");
 80a03e8:	f001 fed8 	bl	80a219c <_ZN9TimeClass6secondEv>
 80a03ec:	220a      	movs	r2, #10
 80a03ee:	4601      	mov	r1, r0
 80a03f0:	a806      	add	r0, sp, #24
 80a03f2:	f001 fc30 	bl	80a1c56 <_ZN6StringC1Eih>
 80a03f6:	a906      	add	r1, sp, #24
 80a03f8:	a80a      	add	r0, sp, #40	; 0x28
 80a03fa:	f001 fc80 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a03fe:	4921      	ldr	r1, [pc, #132]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0400:	f001 fc89 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0404:	4601      	mov	r1, r0
 80a0406:	a802      	add	r0, sp, #8
 80a0408:	f001 fc66 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a040c:	a806      	add	r0, sp, #24
 80a040e:	f001 fb9d 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0412:	a80a      	add	r0, sp, #40	; 0x28
 80a0414:	f001 fb9a 	bl	80a1b4c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0418:	4927      	ldr	r1, [pc, #156]	; (80a04b8 <_Z13publishValuesv+0x330>)
 80a041a:	a80a      	add	r0, sp, #40	; 0x28
 80a041c:	f001 fbdd 	bl	80a1bda <_ZN6StringC1EPK19__FlashStringHelper>
      message.concat("\"Zo\":" + String(10) + ", ");
 80a0420:	220a      	movs	r2, #10
 80a0422:	4611      	mov	r1, r2
 80a0424:	a806      	add	r0, sp, #24
 80a0426:	f001 fc16 	bl	80a1c56 <_ZN6StringC1Eih>
 80a042a:	a906      	add	r1, sp, #24
 80a042c:	a80a      	add	r0, sp, #40	; 0x28
 80a042e:	f001 fc66 	bl	80a1cfe <_ZplRK15StringSumHelperRK6String>
 80a0432:	4914      	ldr	r1, [pc, #80]	; (80a0484 <_Z13publishValuesv+0x2fc>)
 80a0434:	f001 fc6f 	bl	80a1d16 <_ZplRK15StringSumHelperPKc>
 80a0438:	4601      	mov	r1, r0
 80a043a:	a802      	add	r0, sp, #8
 80a043c:	f001 fc4c 	bl	80a1cd8 <_ZN6String6concatERKS_>
 80a0440:	a806      	add	r0, sp, #24
 80a0442:	f001 fb83 	bl	80a1b4c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0446:	a80a      	add	r0, sp, #40	; 0x28
 80a0448:	f001 fb80 	bl	80a1b4c <_ZN6StringD1Ev>

    message.concat("\"Dv\": \"LoRa01\" }");
 80a044c:	491b      	ldr	r1, [pc, #108]	; (80a04bc <_Z13publishValuesv+0x334>)
 80a044e:	a802      	add	r0, sp, #8
 80a0450:	f001 fc46 	bl	80a1ce0 <_ZN6String6concatEPKc>

    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
 80a0454:	a902      	add	r1, sp, #8
 80a0456:	a80a      	add	r0, sp, #40	; 0x28
 80a0458:	f001 fbe1 	bl	80a1c1e <_ZN6StringC1ERKS_>
 80a045c:	4b18      	ldr	r3, [pc, #96]	; (80a04c0 <_Z13publishValuesv+0x338>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a045e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0460:	781b      	ldrb	r3, [r3, #0]
 80a0462:	4918      	ldr	r1, [pc, #96]	; (80a04c4 <_Z13publishValuesv+0x33c>)
 80a0464:	f88d 3000 	strb.w	r3, [sp]
 80a0468:	a806      	add	r0, sp, #24
 80a046a:	233c      	movs	r3, #60	; 0x3c
 80a046c:	f002 f8d4 	bl	80a2618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0470:	9c07      	ldr	r4, [sp, #28]
 80a0472:	e029      	b.n	80a04c8 <_Z13publishValuesv+0x340>
 80a0474:	080a62c9 	.word	0x080a62c9
 80a0478:	080a61f7 	.word	0x080a61f7
 80a047c:	080a61fa 	.word	0x080a61fa
 80a0480:	200000f0 	.word	0x200000f0
 80a0484:	080a6200 	.word	0x080a6200
 80a0488:	080a6203 	.word	0x080a6203
 80a048c:	42c80000 	.word	0x42c80000
 80a0490:	080a6209 	.word	0x080a6209
 80a0494:	200000d8 	.word	0x200000d8
 80a0498:	080a620f 	.word	0x080a620f
 80a049c:	080a6215 	.word	0x080a6215
 80a04a0:	080a621b 	.word	0x080a621b
 80a04a4:	080a6221 	.word	0x080a6221
 80a04a8:	080a6227 	.word	0x080a6227
 80a04ac:	080a622d 	.word	0x080a622d
 80a04b0:	080a6233 	.word	0x080a6233
 80a04b4:	080a6239 	.word	0x080a6239
 80a04b8:	080a623f 	.word	0x080a623f
 80a04bc:	080a6245 	.word	0x080a6245
 80a04c0:	20000134 	.word	0x20000134
 80a04c4:	080a6256 	.word	0x080a6256
 80a04c8:	b17c      	cbz	r4, 80a04ea <_Z13publishValuesv+0x362>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a04ca:	6863      	ldr	r3, [r4, #4]
 80a04cc:	3b01      	subs	r3, #1
 80a04ce:	6063      	str	r3, [r4, #4]
 80a04d0:	b95b      	cbnz	r3, 80a04ea <_Z13publishValuesv+0x362>
        {
          _M_dispose();
 80a04d2:	6823      	ldr	r3, [r4, #0]
 80a04d4:	4620      	mov	r0, r4
 80a04d6:	689b      	ldr	r3, [r3, #8]
 80a04d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a04da:	68a3      	ldr	r3, [r4, #8]
 80a04dc:	3b01      	subs	r3, #1
 80a04de:	60a3      	str	r3, [r4, #8]
 80a04e0:	b91b      	cbnz	r3, 80a04ea <_Z13publishValuesv+0x362>
            _M_destroy();
 80a04e2:	6823      	ldr	r3, [r4, #0]
 80a04e4:	4620      	mov	r0, r4
 80a04e6:	68db      	ldr	r3, [r3, #12]
 80a04e8:	4798      	blx	r3
 80a04ea:	a80a      	add	r0, sp, #40	; 0x28
 80a04ec:	f001 fb2e 	bl	80a1b4c <_ZN6StringD1Ev>
    delay(1000);
 80a04f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a04f4:	f001 fe82 	bl	80a21fc <delay>
    Serial.println("Sent to the cloud... ");
 80a04f8:	f002 fad6 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a04fc:	4906      	ldr	r1, [pc, #24]	; (80a0518 <_Z13publishValuesv+0x390>)
 80a04fe:	f001 fc55 	bl	80a1dac <_ZN5Print7printlnEPKc>
    Serial.println(message);
 80a0502:	f002 fad1 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0506:	9902      	ldr	r1, [sp, #8]
 80a0508:	f001 fc50 	bl	80a1dac <_ZN5Print7printlnEPKc>
  delay(1000);

}
void publishValues(){

    String message = "";
 80a050c:	a802      	add	r0, sp, #8
 80a050e:	f001 fb1d 	bl	80a1b4c <_ZN6StringD1Ev>
    Particle.publish("Burnley", String(message), 60, PUBLIC); // WebHook to Google Sheets
    delay(1000);
    Serial.println("Sent to the cloud... ");
    Serial.println(message);

}
 80a0512:	b00e      	add	sp, #56	; 0x38
 80a0514:	bd10      	pop	{r4, pc}
 80a0516:	bf00      	nop
 80a0518:	080a625e 	.word	0x080a625e

080a051c <_Z11printValuesv>:
void printValues()
{
 80a051c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    Serial.print("Temperature = ");
 80a051e:	f002 fac3 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0522:	4946      	ldr	r1, [pc, #280]	; (80a063c <_Z11printValuesv+0x120>)
 80a0524:	f001 fc2f 	bl	80a1d86 <_ZN5Print5printEPKc>
    Serial.print(bme.readTemperature());
 80a0528:	f002 fabe 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a052c:	4d44      	ldr	r5, [pc, #272]	; (80a0640 <_Z11printValuesv+0x124>)
 80a052e:	4606      	mov	r6, r0
 80a0530:	4628      	mov	r0, r5
 80a0532:	f000 fc53 	bl	80a0ddc <_ZN15Adafruit_BME28015readTemperatureEv>
 80a0536:	f004 f91d 	bl	80a4774 <__aeabi_f2d>
 80a053a:	2402      	movs	r4, #2
 80a053c:	4602      	mov	r2, r0
 80a053e:	460b      	mov	r3, r1
 80a0540:	9400      	str	r4, [sp, #0]
 80a0542:	4630      	mov	r0, r6
 80a0544:	f001 fd3a 	bl	80a1fbc <_ZN5Print5printEdi>
    Serial.println(" *C");
 80a0548:	f002 faae 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a054c:	493d      	ldr	r1, [pc, #244]	; (80a0644 <_Z11printValuesv+0x128>)
 80a054e:	f001 fc2d 	bl	80a1dac <_ZN5Print7printlnEPKc>

    Serial.print("Pressure = ");
 80a0552:	f002 faa9 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0556:	493c      	ldr	r1, [pc, #240]	; (80a0648 <_Z11printValuesv+0x12c>)
 80a0558:	f001 fc15 	bl	80a1d86 <_ZN5Print5printEPKc>

    Serial.print(bme.readPressure() / 100.0F);
 80a055c:	f002 faa4 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0560:	4606      	mov	r6, r0
 80a0562:	4628      	mov	r0, r5
 80a0564:	f000 fc64 	bl	80a0e30 <_ZN15Adafruit_BME28012readPressureEv>
 80a0568:	4938      	ldr	r1, [pc, #224]	; (80a064c <_Z11printValuesv+0x130>)
 80a056a:	f004 fe61 	bl	80a5230 <__aeabi_fdiv>
 80a056e:	f004 f901 	bl	80a4774 <__aeabi_f2d>
 80a0572:	9400      	str	r4, [sp, #0]
 80a0574:	4602      	mov	r2, r0
 80a0576:	460b      	mov	r3, r1
 80a0578:	4630      	mov	r0, r6
 80a057a:	f001 fd1f 	bl	80a1fbc <_ZN5Print5printEdi>
    Serial.println(" hPa");
 80a057e:	f002 fa93 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0582:	4933      	ldr	r1, [pc, #204]	; (80a0650 <_Z11printValuesv+0x134>)
 80a0584:	f001 fc12 	bl	80a1dac <_ZN5Print7printlnEPKc>

    Serial.print("Approx. Altitude = ");
 80a0588:	f002 fa8e 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a058c:	4931      	ldr	r1, [pc, #196]	; (80a0654 <_Z11printValuesv+0x138>)
 80a058e:	f001 fbfa 	bl	80a1d86 <_ZN5Print5printEPKc>
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
 80a0592:	f002 fa89 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0596:	4930      	ldr	r1, [pc, #192]	; (80a0658 <_Z11printValuesv+0x13c>)
 80a0598:	4606      	mov	r6, r0
 80a059a:	4628      	mov	r0, r5
 80a059c:	f000 fd68 	bl	80a1070 <_ZN15Adafruit_BME28012readAltitudeEf>
 80a05a0:	f004 f8e8 	bl	80a4774 <__aeabi_f2d>
 80a05a4:	9400      	str	r4, [sp, #0]
 80a05a6:	4602      	mov	r2, r0
 80a05a8:	460b      	mov	r3, r1
 80a05aa:	4630      	mov	r0, r6
 80a05ac:	f001 fd06 	bl	80a1fbc <_ZN5Print5printEdi>
    Serial.println(" m");
 80a05b0:	f002 fa7a 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05b4:	4929      	ldr	r1, [pc, #164]	; (80a065c <_Z11printValuesv+0x140>)
 80a05b6:	f001 fbf9 	bl	80a1dac <_ZN5Print7printlnEPKc>

    Serial.print("Humidity = ");
 80a05ba:	f002 fa75 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05be:	4928      	ldr	r1, [pc, #160]	; (80a0660 <_Z11printValuesv+0x144>)
 80a05c0:	f001 fbe1 	bl	80a1d86 <_ZN5Print5printEPKc>
    Serial.print(bme.readHumidity());
 80a05c4:	f002 fa70 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05c8:	4606      	mov	r6, r0
 80a05ca:	4628      	mov	r0, r5
 80a05cc:	f000 fd06 	bl	80a0fdc <_ZN15Adafruit_BME28012readHumidityEv>
 80a05d0:	f004 f8d0 	bl	80a4774 <__aeabi_f2d>
 80a05d4:	9400      	str	r4, [sp, #0]
 80a05d6:	460b      	mov	r3, r1
 80a05d8:	4602      	mov	r2, r0
 80a05da:	4630      	mov	r0, r6
 80a05dc:	f001 fcee 	bl	80a1fbc <_ZN5Print5printEdi>
    Serial.println(" %");

    Serial.print("TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");
 80a05e0:	4c20      	ldr	r4, [pc, #128]	; (80a0664 <_Z11printValuesv+0x148>)
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
    Serial.println(" m");

    Serial.print("Humidity = ");
    Serial.print(bme.readHumidity());
    Serial.println(" %");
 80a05e2:	f002 fa61 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05e6:	4920      	ldr	r1, [pc, #128]	; (80a0668 <_Z11printValuesv+0x14c>)
 80a05e8:	f001 fbe0 	bl	80a1dac <_ZN5Print7printlnEPKc>

    Serial.print("TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");
 80a05ec:	f002 fa5c 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05f0:	491e      	ldr	r1, [pc, #120]	; (80a066c <_Z11printValuesv+0x150>)
 80a05f2:	f001 fbc8 	bl	80a1d86 <_ZN5Print5printEPKc>
 80a05f6:	f002 fa57 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a05fa:	220a      	movs	r2, #10
 80a05fc:	8821      	ldrh	r1, [r4, #0]
 80a05fe:	f001 fc2d 	bl	80a1e5c <_ZN5Print5printEii>
 80a0602:	f002 fa51 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0606:	491a      	ldr	r1, [pc, #104]	; (80a0670 <_Z11printValuesv+0x154>)
 80a0608:	f001 fbbd 	bl	80a1d86 <_ZN5Print5printEPKc>
    Serial.print("eCO2 "); Serial.print(sgp.eCO2); Serial.println(" ppm");
 80a060c:	f002 fa4c 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0610:	4918      	ldr	r1, [pc, #96]	; (80a0674 <_Z11printValuesv+0x158>)
 80a0612:	f001 fbb8 	bl	80a1d86 <_ZN5Print5printEPKc>
 80a0616:	f002 fa47 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a061a:	220a      	movs	r2, #10
 80a061c:	8861      	ldrh	r1, [r4, #2]
 80a061e:	f001 fc1d 	bl	80a1e5c <_ZN5Print5printEii>
 80a0622:	f002 fa41 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a0626:	4914      	ldr	r1, [pc, #80]	; (80a0678 <_Z11printValuesv+0x15c>)
 80a0628:	f001 fbc0 	bl	80a1dac <_ZN5Print7printlnEPKc>
    Serial.println();
 80a062c:	f002 fa3c 	bl	80a2aa8 <_Z16_fetch_usbserialv>
}
 80a0630:	b002      	add	sp, #8
 80a0632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.print(bme.readHumidity());
    Serial.println(" %");

    Serial.print("TVOC "); Serial.print(sgp.TVOC); Serial.print(" ppb\t");
    Serial.print("eCO2 "); Serial.print(sgp.eCO2); Serial.println(" ppm");
    Serial.println();
 80a0636:	f001 bbad 	b.w	80a1d94 <_ZN5Print7printlnEv>
 80a063a:	bf00      	nop
 80a063c:	080a6274 	.word	0x080a6274
 80a0640:	200000f0 	.word	0x200000f0
 80a0644:	080a6283 	.word	0x080a6283
 80a0648:	080a6287 	.word	0x080a6287
 80a064c:	42c80000 	.word	0x42c80000
 80a0650:	080a6293 	.word	0x080a6293
 80a0654:	080a6298 	.word	0x080a6298
 80a0658:	447d5000 	.word	0x447d5000
 80a065c:	080a62ac 	.word	0x080a62ac
 80a0660:	080a62af 	.word	0x080a62af
 80a0664:	200000d8 	.word	0x200000d8
 80a0668:	080a62bb 	.word	0x080a62bb
 80a066c:	080a62be 	.word	0x080a62be
 80a0670:	080a62c4 	.word	0x080a62c4
 80a0674:	080a62ca 	.word	0x080a62ca
 80a0678:	080a62d0 	.word	0x080a62d0

080a067c <loop>:
     while (1);
   }
}

void loop()
{
 80a067c:	b530      	push	{r4, r5, lr}
  if (wifiOn)
 80a067e:	4c2c      	ldr	r4, [pc, #176]	; (80a0730 <loop+0xb4>)
     while (1);
   }
}

void loop()
{
 80a0680:	b089      	sub	sp, #36	; 0x24
  if (wifiOn)
 80a0682:	7825      	ldrb	r5, [r4, #0]
 80a0684:	2d00      	cmp	r5, #0
 80a0686:	d034      	beq.n	80a06f2 <loop+0x76>
  {
    digitalWrite(SensorPower, HIGH);
 80a0688:	4d2a      	ldr	r5, [pc, #168]	; (80a0734 <loop+0xb8>)
 80a068a:	2101      	movs	r1, #1
 80a068c:	8828      	ldrh	r0, [r5, #0]
 80a068e:	f002 fc5a 	bl	80a2f46 <digitalWrite>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a0692:	f001 f82b 	bl	80a16ec <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0696:	f001 f831 	bl	80a16fc <spark_cloud_flag_connected>
    
    Particle.connect();
    if (Particle.connected())
 80a069a:	2800      	cmp	r0, #0
 80a069c:	d042      	beq.n	80a0724 <loop+0xa8>
    {
      
   if (! sgp.IAQmeasure()) {
 80a069e:	4826      	ldr	r0, [pc, #152]	; (80a0738 <loop+0xbc>)
 80a06a0:	f000 fde0 	bl	80a1264 <_ZN14Adafruit_SGP3010IAQmeasureEv>
 80a06a4:	b928      	cbnz	r0, 80a06b2 <loop+0x36>
     Serial.println("Measurement failed");
 80a06a6:	f002 f9ff 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a06aa:	4924      	ldr	r1, [pc, #144]	; (80a073c <loop+0xc0>)
 80a06ac:	f001 fb7e 	bl	80a1dac <_ZN5Print7printlnEPKc>
     return;
 80a06b0:	e03c      	b.n	80a072c <loop+0xb0>
   }
   printValues();
 80a06b2:	f7ff ff33 	bl	80a051c <_Z11printValuesv>
   publishValues();
 80a06b6:	f7ff fd67 	bl	80a0188 <_Z13publishValuesv>
      delay(5000);
 80a06ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80a06be:	f001 fd9d 	bl	80a21fc <delay>

      digitalWrite(wifi_Power, LOW);
 80a06c2:	4b1f      	ldr	r3, [pc, #124]	; (80a0740 <loop+0xc4>)
 80a06c4:	2100      	movs	r1, #0
 80a06c6:	8818      	ldrh	r0, [r3, #0]
 80a06c8:	f002 fc3d 	bl	80a2f46 <digitalWrite>
      digitalWrite(SensorPower, LOW);
 80a06cc:	8828      	ldrh	r0, [r5, #0]
 80a06ce:	2100      	movs	r1, #0
 80a06d0:	f002 fc39 	bl	80a2f46 <digitalWrite>
      digitalWrite(SignalPower, LOW);
 80a06d4:	4b1b      	ldr	r3, [pc, #108]	; (80a0744 <loop+0xc8>)
 80a06d6:	2100      	movs	r1, #0
 80a06d8:	8818      	ldrh	r0, [r3, #0]
 80a06da:	f002 fc34 	bl	80a2f46 <digitalWrite>
      wifiOn = false;
 80a06de:	2300      	movs	r3, #0
 80a06e0:	7023      	strb	r3, [r4, #0]
      System.sleep(SLEEP_MODE_DEEP,  60*3600);
 80a06e2:	4b19      	ldr	r3, [pc, #100]	; (80a0748 <loop+0xcc>)
 80a06e4:	4a19      	ldr	r2, [pc, #100]	; (80a074c <loop+0xd0>)
 80a06e6:	681b      	ldr	r3, [r3, #0]
 80a06e8:	2101      	movs	r1, #1
 80a06ea:	a806      	add	r0, sp, #24
 80a06ec:	f001 f91a 	bl	80a1924 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 80a06f0:	e018      	b.n	80a0724 <loop+0xa8>
    }
    
  }else
  {
    digitalWrite(wifi_Power, HIGH);
 80a06f2:	4b13      	ldr	r3, [pc, #76]	; (80a0740 <loop+0xc4>)
 80a06f4:	2101      	movs	r1, #1
 80a06f6:	8818      	ldrh	r0, [r3, #0]
 80a06f8:	f002 fc25 	bl	80a2f46 <digitalWrite>
 80a06fc:	4b12      	ldr	r3, [pc, #72]	; (80a0748 <loop+0xcc>)
    wifiOn = true;
 80a06fe:	2201      	movs	r2, #1
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	2102      	movs	r1, #2
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 80a0704:	9302      	str	r3, [sp, #8]
 80a0706:	231e      	movs	r3, #30
 80a0708:	f8ad 1016 	strh.w	r1, [sp, #22]
 80a070c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0710:	f10d 0116 	add.w	r1, sp, #22
 80a0714:	f10d 0315 	add.w	r3, sp, #21
 80a0718:	a806      	add	r0, sp, #24
 80a071a:	7022      	strb	r2, [r4, #0]
 80a071c:	f88d 5015 	strb.w	r5, [sp, #21]
 80a0720:	f001 f930 	bl	80a1984 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(D2,CHANGE,30);
  }
  
  
  delay(1000);
 80a0724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0728:	f001 fd68 	bl	80a21fc <delay>

}
 80a072c:	b009      	add	sp, #36	; 0x24
 80a072e:	bd30      	pop	{r4, r5, pc}
 80a0730:	40024000 	.word	0x40024000
 80a0734:	20000000 	.word	0x20000000
 80a0738:	200000d8 	.word	0x200000d8
 80a073c:	080a62d5 	.word	0x080a62d5
 80a0740:	20000004 	.word	0x20000004
 80a0744:	20000008 	.word	0x20000008
 80a0748:	200000ec 	.word	0x200000ec
 80a074c:	00034bc0 	.word	0x00034bc0

080a0750 <_GLOBAL__sub_I_bme>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0750:	4b0d      	ldr	r3, [pc, #52]	; (80a0788 <_GLOBAL__sub_I_bme+0x38>)

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a0752:	b510      	push	{r4, lr}
 80a0754:	2400      	movs	r4, #0
 80a0756:	601c      	str	r4, [r3, #0]
 80a0758:	4b0c      	ldr	r3, [pc, #48]	; (80a078c <_GLOBAL__sub_I_bme+0x3c>)
 80a075a:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a075c:	f000 fd9e 	bl	80a129c <HAL_Pin_Map>
#include "Adafruit_SGP30.h"


#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme;
 80a0760:	480b      	ldr	r0, [pc, #44]	; (80a0790 <_GLOBAL__sub_I_bme+0x40>)
 80a0762:	f000 f847 	bl	80a07f4 <_ZN15Adafruit_BME280C1Ev>
Adafruit_SGP30 sgp;
 80a0766:	480b      	ldr	r0, [pc, #44]	; (80a0794 <_GLOBAL__sub_I_bme+0x44>)
 80a0768:	f000 fcb0 	bl	80a10cc <_ZN14Adafruit_SGP30C1Ev>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a076c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0770:	4b09      	ldr	r3, [pc, #36]	; (80a0798 <_GLOBAL__sub_I_bme+0x48>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0772:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0774:	701c      	strb	r4, [r3, #0]
 80a0776:	805c      	strh	r4, [r3, #2]
 80a0778:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a077a:	f000 ff11 	bl	80a15a0 <set_system_mode>

      Serial.print("Unknown SSID: ");
      Serial.println(ap.ssid);
    }
  }
}
 80a077e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

retained bool wifiOn = false;

SYSTEM_MODE(SEMI_AUTOMATIC);

STARTUP(setup_Options());
 80a0782:	f7ff bcb9 	b.w	80a00f8 <_Z13setup_Optionsv>
 80a0786:	bf00      	nop
 80a0788:	200000ec 	.word	0x200000ec
 80a078c:	20000134 	.word	0x20000134
 80a0790:	200000f0 	.word	0x200000f0
 80a0794:	200000d8 	.word	0x200000d8
 80a0798:	200000cc 	.word	0x200000cc

080a079c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a079c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a079e:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a07a0:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a07a2:	4608      	mov	r0, r1
 80a07a4:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a07a6:	b133      	cbz	r3, 80a07b6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a07a8:	b93d      	cbnz	r5, 80a07ba <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a07aa:	490c      	ldr	r1, [pc, #48]	; (80a07dc <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a07ac:	b004      	add	sp, #16
 80a07ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a07b2:	f001 bae8 	b.w	80a1d86 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a07b6:	4b0a      	ldr	r3, [pc, #40]	; (80a07e0 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a07b8:	e000      	b.n	80a07bc <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a07ba:	4b0a      	ldr	r3, [pc, #40]	; (80a07e4 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a07bc:	7b16      	ldrb	r6, [r2, #12]
 80a07be:	4c0a      	ldr	r4, [pc, #40]	; (80a07e8 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a07c0:	490a      	ldr	r1, [pc, #40]	; (80a07ec <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a07c2:	7b52      	ldrb	r2, [r2, #13]
 80a07c4:	2e01      	cmp	r6, #1
 80a07c6:	bf08      	it	eq
 80a07c8:	4621      	moveq	r1, r4
 80a07ca:	9202      	str	r2, [sp, #8]
 80a07cc:	9101      	str	r1, [sp, #4]
 80a07ce:	9500      	str	r5, [sp, #0]
 80a07d0:	4a07      	ldr	r2, [pc, #28]	; (80a07f0 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a07d2:	2100      	movs	r1, #0
 80a07d4:	f001 fbf7 	bl	80a1fc6 <_ZN5Print11printf_implEbPKcz>
  }
 80a07d8:	b004      	add	sp, #16
 80a07da:	bd70      	pop	{r4, r5, r6, pc}
 80a07dc:	080a6531 	.word	0x080a6531
 80a07e0:	080a62c9 	.word	0x080a62c9
 80a07e4:	080a6520 	.word	0x080a6520
 80a07e8:	080a6529 	.word	0x080a6529
 80a07ec:	080a652d 	.word	0x080a652d
 80a07f0:	080a6547 	.word	0x080a6547

080a07f4 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a07f4:	22ff      	movs	r2, #255	; 0xff
 80a07f6:	7402      	strb	r2, [r0, #16]
 80a07f8:	7442      	strb	r2, [r0, #17]
 80a07fa:	7482      	strb	r2, [r0, #18]
 80a07fc:	74c2      	strb	r2, [r0, #19]
{ }
 80a07fe:	4770      	bx	lr

080a0800 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
 80a0804:	f990 3013 	ldrsb.w	r3, [r0, #19]
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0808:	4605      	mov	r5, r0
    // hardware SPI
    if (_sck == -1)
 80a080a:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a080c:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
 80a080e:	d104      	bne.n	80a081a <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
 80a0810:	4816      	ldr	r0, [pc, #88]	; (80a086c <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a0812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
 80a0816:	f001 b87b 	b.w	80a1910 <_ZN8SPIClass8transferEh>
 80a081a:	2607      	movs	r6, #7
 80a081c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
 80a081e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
 80a0822:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0826:	2100      	movs	r1, #0
 80a0828:	b280      	uxth	r0, r0
 80a082a:	f002 fb8c 	bl	80a2f46 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a082e:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a0832:	fa08 f106 	lsl.w	r1, r8, r6
 80a0836:	4039      	ands	r1, r7
 80a0838:	b280      	uxth	r0, r0
 80a083a:	f002 fb84 	bl	80a2f46 <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a083e:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0842:	2101      	movs	r1, #1
 80a0844:	b280      	uxth	r0, r0
 80a0846:	f002 fb7e 	bl	80a2f46 <digitalWrite>
        if (digitalRead(_miso))
 80a084a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a084e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a0850:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a0852:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a0854:	f002 fb90 	bl	80a2f78 <digitalRead>
 80a0858:	b108      	cbz	r0, 80a085e <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
 80a085a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
 80a085e:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a0862:	d2de      	bcs.n	80a0822 <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a0864:	4620      	mov	r0, r4
 80a0866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a086a:	bf00      	nop
 80a086c:	200001ec 	.word	0x200001ec

080a0870 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a0870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a0872:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a0876:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a0878:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a087a:	460e      	mov	r6, r1
 80a087c:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a087e:	d111      	bne.n	80a08a4 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0880:	7901      	ldrb	r1, [r0, #4]
 80a0882:	6800      	ldr	r0, [r0, #0]
 80a0884:	f002 fa64 	bl	80a2d50 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0888:	6820      	ldr	r0, [r4, #0]
 80a088a:	4631      	mov	r1, r6
 80a088c:	6803      	ldr	r3, [r0, #0]
 80a088e:	689b      	ldr	r3, [r3, #8]
 80a0890:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a0892:	6820      	ldr	r0, [r4, #0]
 80a0894:	4629      	mov	r1, r5
 80a0896:	6803      	ldr	r3, [r0, #0]
 80a0898:	689b      	ldr	r3, [r3, #8]
 80a089a:	4798      	blx	r3
        _wire -> endTransmission();
 80a089c:	6820      	ldr	r0, [r4, #0]
 80a089e:	f002 fa5f 	bl	80a2d60 <_ZN7TwoWire15endTransmissionEv>
 80a08a2:	e02f      	b.n	80a0904 <_ZN15Adafruit_BME2806write8Ehh+0x94>
    } else {
        if (_sck == -1)
 80a08a4:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a08a8:	3301      	adds	r3, #1
 80a08aa:	d10f      	bne.n	80a08cc <_ZN15Adafruit_BME2806write8Ehh+0x5c>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a08ac:	4b16      	ldr	r3, [pc, #88]	; (80a0908 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
 80a08ae:	4a17      	ldr	r2, [pc, #92]	; (80a090c <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
 80a08b0:	9300      	str	r3, [sp, #0]
 80a08b2:	9202      	str	r2, [sp, #8]
 80a08b4:	2300      	movs	r3, #0
 80a08b6:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a08b8:	4669      	mov	r1, sp
 80a08ba:	4815      	ldr	r0, [pc, #84]	; (80a0910 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a08bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80a08c0:	f88d 200c 	strb.w	r2, [sp, #12]
 80a08c4:	f88d 300d 	strb.w	r3, [sp, #13]
 80a08c8:	f000 ffb2 	bl	80a1830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a08cc:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a08d0:	2100      	movs	r1, #0
 80a08d2:	b280      	uxth	r0, r0
 80a08d4:	f002 fb37 	bl	80a2f46 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a08d8:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a08dc:	4620      	mov	r0, r4
 80a08de:	f7ff ff8f 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a08e2:	4629      	mov	r1, r5
 80a08e4:	4620      	mov	r0, r4
 80a08e6:	f7ff ff8b 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a08ea:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a08ee:	2101      	movs	r1, #1
 80a08f0:	b280      	uxth	r0, r0
 80a08f2:	f002 fb28 	bl	80a2f46 <digitalWrite>
    if (_sck == -1)
 80a08f6:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a08fa:	3301      	adds	r3, #1
 80a08fc:	d102      	bne.n	80a0904 <_ZN15Adafruit_BME2806write8Ehh+0x94>
        SPI.endTransaction(); // release the SPI bus
 80a08fe:	4804      	ldr	r0, [pc, #16]	; (80a0910 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a0900:	f000 ff7d 	bl	80a17fe <_ZN8SPIClass14endTransactionEv>
    }
}
 80a0904:	b004      	add	sp, #16
 80a0906:	bd70      	pop	{r4, r5, r6, pc}
 80a0908:	080a651c 	.word	0x080a651c
 80a090c:	0007a120 	.word	0x0007a120
 80a0910:	200001ec 	.word	0x200001ec

080a0914 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0916:	4604      	mov	r4, r0
    _measReg.mode     = mode;
 80a0918:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a091c:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.mode     = mode;
 80a0920:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
 80a0924:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
 80a0928:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
 80a092c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0930:	f89d e01c 	ldrb.w	lr, [sp, #28]
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
 80a0934:	f366 1347 	bfi	r3, r6, #5, #3
 80a0938:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
 80a093c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0940:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
 80a0944:	f36e 03c5 	bfi	r3, lr, #3, #3
    _configReg.t_sb   = duration;
 80a0948:	f367 0302 	bfi	r3, r7, #0, #3
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
 80a094c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
 80a0950:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a0954:	f006 0207 	and.w	r2, r6, #7
 80a0958:	21f2      	movs	r1, #242	; 0xf2
 80a095a:	f7ff ff89 	bl	80a0870 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a095e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a0962:	4620      	mov	r0, r4
 80a0964:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a0968:	f002 0107 	and.w	r1, r2, #7
 80a096c:	009b      	lsls	r3, r3, #2
 80a096e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a0972:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a0976:	21f5      	movs	r1, #245	; 0xf5
 80a0978:	f7ff ff7a 	bl	80a0870 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a097c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a0980:	4620      	mov	r0, r4
 80a0982:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a0986:	f002 0107 	and.w	r1, r2, #7
 80a098a:	009b      	lsls	r3, r3, #2
 80a098c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a0990:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a0994:	21f4      	movs	r1, #244	; 0xf4
}
 80a0996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a099a:	f7ff bf69 	b.w	80a0870 <_ZN15Adafruit_BME2806write8Ehh>
	...

080a09a0 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a09a0:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
 80a09a2:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a09a6:	b085      	sub	sp, #20
    uint8_t value;
    
    if (_cs == -1) {
 80a09a8:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a09aa:	4604      	mov	r4, r0
 80a09ac:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
 80a09ae:	d116      	bne.n	80a09de <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a09b0:	7901      	ldrb	r1, [r0, #4]
 80a09b2:	6800      	ldr	r0, [r0, #0]
 80a09b4:	f002 f9cc 	bl	80a2d50 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a09b8:	6820      	ldr	r0, [r4, #0]
 80a09ba:	4629      	mov	r1, r5
 80a09bc:	6803      	ldr	r3, [r0, #0]
 80a09be:	689b      	ldr	r3, [r3, #8]
 80a09c0:	4798      	blx	r3
        _wire -> endTransmission();
 80a09c2:	6820      	ldr	r0, [r4, #0]
 80a09c4:	f002 f9cc 	bl	80a2d60 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a09c8:	2201      	movs	r2, #1
 80a09ca:	7921      	ldrb	r1, [r4, #4]
 80a09cc:	6820      	ldr	r0, [r4, #0]
 80a09ce:	f002 f9bc 	bl	80a2d4a <_ZN7TwoWire11requestFromEhh>
        value = _wire -> read();
 80a09d2:	6820      	ldr	r0, [r4, #0]
 80a09d4:	6803      	ldr	r3, [r0, #0]
 80a09d6:	695b      	ldr	r3, [r3, #20]
 80a09d8:	4798      	blx	r3
 80a09da:	b2c5      	uxtb	r5, r0
 80a09dc:	e030      	b.n	80a0a40 <_ZN15Adafruit_BME2805read8Eh+0xa0>
    } else {
        if (_sck == -1)
 80a09de:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a09e2:	3301      	adds	r3, #1
 80a09e4:	d10f      	bne.n	80a0a06 <_ZN15Adafruit_BME2805read8Eh+0x66>
 80a09e6:	4b18      	ldr	r3, [pc, #96]	; (80a0a48 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 80a09e8:	4a18      	ldr	r2, [pc, #96]	; (80a0a4c <_ZN15Adafruit_BME2805read8Eh+0xac>)
 80a09ea:	9300      	str	r3, [sp, #0]
 80a09ec:	9202      	str	r2, [sp, #8]
 80a09ee:	2300      	movs	r3, #0
 80a09f0:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a09f2:	4669      	mov	r1, sp
 80a09f4:	4816      	ldr	r0, [pc, #88]	; (80a0a50 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a09f6:	f88d 3004 	strb.w	r3, [sp, #4]
 80a09fa:	f88d 200c 	strb.w	r2, [sp, #12]
 80a09fe:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0a02:	f000 ff15 	bl	80a1830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a0a06:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0a0a:	2100      	movs	r1, #0
 80a0a0c:	b280      	uxth	r0, r0
 80a0a0e:	f002 fa9a 	bl	80a2f46 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0a12:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	f7ff fef2 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a0a1c:	2100      	movs	r1, #0
 80a0a1e:	4620      	mov	r0, r4
 80a0a20:	f7ff feee 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
 80a0a24:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a0a26:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0a2a:	2101      	movs	r1, #1
 80a0a2c:	b280      	uxth	r0, r0
 80a0a2e:	f002 fa8a 	bl	80a2f46 <digitalWrite>
        if (_sck == -1)
 80a0a32:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0a36:	3301      	adds	r3, #1
 80a0a38:	d102      	bne.n	80a0a40 <_ZN15Adafruit_BME2805read8Eh+0xa0>
            SPI.endTransaction(); // release the SPI bus
 80a0a3a:	4805      	ldr	r0, [pc, #20]	; (80a0a50 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a0a3c:	f000 fedf 	bl	80a17fe <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
 80a0a40:	4628      	mov	r0, r5
 80a0a42:	b005      	add	sp, #20
 80a0a44:	bd30      	pop	{r4, r5, pc}
 80a0a46:	bf00      	nop
 80a0a48:	080a651c 	.word	0x080a651c
 80a0a4c:	0007a120 	.word	0x0007a120
 80a0a50:	200001ec 	.word	0x200001ec

080a0a54 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0a54:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
 80a0a56:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0a5a:	b085      	sub	sp, #20
    uint16_t value;

    if (_cs == -1) {
 80a0a5c:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0a5e:	4604      	mov	r4, r0
 80a0a60:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
 80a0a62:	d11d      	bne.n	80a0aa0 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0a64:	7901      	ldrb	r1, [r0, #4]
 80a0a66:	6800      	ldr	r0, [r0, #0]
 80a0a68:	f002 f972 	bl	80a2d50 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0a6c:	6820      	ldr	r0, [r4, #0]
 80a0a6e:	4629      	mov	r1, r5
 80a0a70:	6803      	ldr	r3, [r0, #0]
 80a0a72:	689b      	ldr	r3, [r3, #8]
 80a0a74:	4798      	blx	r3
        _wire -> endTransmission();
 80a0a76:	6820      	ldr	r0, [r4, #0]
 80a0a78:	f002 f972 	bl	80a2d60 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a0a7c:	2202      	movs	r2, #2
 80a0a7e:	7921      	ldrb	r1, [r4, #4]
 80a0a80:	6820      	ldr	r0, [r4, #0]
 80a0a82:	f002 f962 	bl	80a2d4a <_ZN7TwoWire11requestFromEhh>
        value = (_wire -> read() << 8) | _wire -> read();
 80a0a86:	6820      	ldr	r0, [r4, #0]
 80a0a88:	6803      	ldr	r3, [r0, #0]
 80a0a8a:	695b      	ldr	r3, [r3, #20]
 80a0a8c:	4798      	blx	r3
 80a0a8e:	4605      	mov	r5, r0
 80a0a90:	6820      	ldr	r0, [r4, #0]
 80a0a92:	6803      	ldr	r3, [r0, #0]
 80a0a94:	695b      	ldr	r3, [r3, #20]
 80a0a96:	4798      	blx	r3
 80a0a98:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0a9c:	b285      	uxth	r5, r0
 80a0a9e:	e037      	b.n	80a0b10 <_ZN15Adafruit_BME2806read16Eh+0xbc>
    } else {
        if (_sck == -1)
 80a0aa0:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0aa4:	3301      	adds	r3, #1
 80a0aa6:	d10f      	bne.n	80a0ac8 <_ZN15Adafruit_BME2806read16Eh+0x74>
 80a0aa8:	4b1b      	ldr	r3, [pc, #108]	; (80a0b18 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 80a0aaa:	4a1c      	ldr	r2, [pc, #112]	; (80a0b1c <_ZN15Adafruit_BME2806read16Eh+0xc8>)
 80a0aac:	9300      	str	r3, [sp, #0]
 80a0aae:	9202      	str	r2, [sp, #8]
 80a0ab0:	2300      	movs	r3, #0
 80a0ab2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0ab4:	4669      	mov	r1, sp
 80a0ab6:	481a      	ldr	r0, [pc, #104]	; (80a0b20 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a0ab8:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0abc:	f88d 200c 	strb.w	r2, [sp, #12]
 80a0ac0:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0ac4:	f000 feb4 	bl	80a1830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a0ac8:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0acc:	2100      	movs	r1, #0
 80a0ace:	b280      	uxth	r0, r0
 80a0ad0:	f002 fa39 	bl	80a2f46 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0ad4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	f7ff fe91 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a0ade:	2100      	movs	r1, #0
 80a0ae0:	4620      	mov	r0, r4
 80a0ae2:	f7ff fe8d 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
 80a0ae6:	2100      	movs	r1, #0
 80a0ae8:	4605      	mov	r5, r0
 80a0aea:	4620      	mov	r0, r4
 80a0aec:	f7ff fe88 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
 80a0af0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0af4:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 80a0af6:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0afa:	2101      	movs	r1, #1
 80a0afc:	b280      	uxth	r0, r0
 80a0afe:	f002 fa22 	bl	80a2f46 <digitalWrite>
        if (_sck == -1)
 80a0b02:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0b06:	3301      	adds	r3, #1
 80a0b08:	d102      	bne.n	80a0b10 <_ZN15Adafruit_BME2806read16Eh+0xbc>
            SPI.endTransaction(); // release the SPI bus
 80a0b0a:	4805      	ldr	r0, [pc, #20]	; (80a0b20 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a0b0c:	f000 fe77 	bl	80a17fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a0b10:	4628      	mov	r0, r5
 80a0b12:	b005      	add	sp, #20
 80a0b14:	bd30      	pop	{r4, r5, pc}
 80a0b16:	bf00      	nop
 80a0b18:	080a651c 	.word	0x080a651c
 80a0b1c:	0007a120 	.word	0x0007a120
 80a0b20:	200001ec 	.word	0x200001ec

080a0b24 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a0b24:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a0b26:	f7ff ff95 	bl	80a0a54 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a0b2a:	ba40      	rev16	r0, r0
}
 80a0b2c:	b280      	uxth	r0, r0
 80a0b2e:	bd08      	pop	{r3, pc}

080a0b30 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a0b30:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
 80a0b32:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a0b36:	b085      	sub	sp, #20
    uint32_t value;

    if (_cs == -1) {
 80a0b38:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a0b3a:	4604      	mov	r4, r0
 80a0b3c:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
 80a0b3e:	d121      	bne.n	80a0b84 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0b40:	7901      	ldrb	r1, [r0, #4]
 80a0b42:	6800      	ldr	r0, [r0, #0]
 80a0b44:	f002 f904 	bl	80a2d50 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0b48:	6820      	ldr	r0, [r4, #0]
 80a0b4a:	4629      	mov	r1, r5
 80a0b4c:	6803      	ldr	r3, [r0, #0]
 80a0b4e:	689b      	ldr	r3, [r3, #8]
 80a0b50:	4798      	blx	r3
        _wire -> endTransmission();
 80a0b52:	6820      	ldr	r0, [r4, #0]
 80a0b54:	f002 f904 	bl	80a2d60 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a0b58:	2203      	movs	r2, #3
 80a0b5a:	7921      	ldrb	r1, [r4, #4]
 80a0b5c:	6820      	ldr	r0, [r4, #0]
 80a0b5e:	f002 f8f4 	bl	80a2d4a <_ZN7TwoWire11requestFromEhh>

        value = _wire -> read();
 80a0b62:	6820      	ldr	r0, [r4, #0]
 80a0b64:	6803      	ldr	r3, [r0, #0]
 80a0b66:	695b      	ldr	r3, [r3, #20]
 80a0b68:	4798      	blx	r3
        value <<= 8;
 80a0b6a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a0b6c:	6820      	ldr	r0, [r4, #0]
 80a0b6e:	6803      	ldr	r3, [r0, #0]
 80a0b70:	695b      	ldr	r3, [r3, #20]
 80a0b72:	4798      	blx	r3
 80a0b74:	4328      	orrs	r0, r5
        value <<= 8;
 80a0b76:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a0b78:	6820      	ldr	r0, [r4, #0]
 80a0b7a:	6803      	ldr	r3, [r0, #0]
 80a0b7c:	695b      	ldr	r3, [r3, #20]
 80a0b7e:	4798      	blx	r3
 80a0b80:	4305      	orrs	r5, r0
 80a0b82:	e03b      	b.n	80a0bfc <_ZN15Adafruit_BME2806read24Eh+0xcc>
    } else {
        if (_sck == -1)
 80a0b84:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0b88:	3301      	adds	r3, #1
 80a0b8a:	d10f      	bne.n	80a0bac <_ZN15Adafruit_BME2806read24Eh+0x7c>
 80a0b8c:	4b1d      	ldr	r3, [pc, #116]	; (80a0c04 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 80a0b8e:	4a1e      	ldr	r2, [pc, #120]	; (80a0c08 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
 80a0b90:	9300      	str	r3, [sp, #0]
 80a0b92:	9202      	str	r2, [sp, #8]
 80a0b94:	2300      	movs	r3, #0
 80a0b96:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0b98:	4669      	mov	r1, sp
 80a0b9a:	481c      	ldr	r0, [pc, #112]	; (80a0c0c <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a0b9c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0ba0:	f88d 200c 	strb.w	r2, [sp, #12]
 80a0ba4:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0ba8:	f000 fe42 	bl	80a1830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a0bac:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0bb0:	2100      	movs	r1, #0
 80a0bb2:	b280      	uxth	r0, r0
 80a0bb4:	f002 f9c7 	bl	80a2f46 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0bb8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0bbc:	4620      	mov	r0, r4
 80a0bbe:	f7ff fe1f 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
 80a0bc2:	2100      	movs	r1, #0
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f7ff fe1b 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
 80a0bca:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
 80a0bcc:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	f7ff fe16 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
 80a0bd4:	4328      	orrs	r0, r5
        value <<= 8;
 80a0bd6:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a0bd8:	2100      	movs	r1, #0
 80a0bda:	4620      	mov	r0, r4
 80a0bdc:	f7ff fe10 	bl	80a0800 <_ZN15Adafruit_BME2807spixferEh>
 80a0be0:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
 80a0be2:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0be6:	2101      	movs	r1, #1
 80a0be8:	b280      	uxth	r0, r0
 80a0bea:	f002 f9ac 	bl	80a2f46 <digitalWrite>
        if (_sck == -1)
 80a0bee:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0bf2:	3301      	adds	r3, #1
 80a0bf4:	d102      	bne.n	80a0bfc <_ZN15Adafruit_BME2806read24Eh+0xcc>
            SPI.endTransaction(); // release the SPI bus
 80a0bf6:	4805      	ldr	r0, [pc, #20]	; (80a0c0c <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a0bf8:	f000 fe01 	bl	80a17fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a0bfc:	4628      	mov	r0, r5
 80a0bfe:	b005      	add	sp, #20
 80a0c00:	bd30      	pop	{r4, r5, pc}
 80a0c02:	bf00      	nop
 80a0c04:	080a651c 	.word	0x080a651c
 80a0c08:	0007a120 	.word	0x0007a120
 80a0c0c:	200001ec 	.word	0x200001ec

080a0c10 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a0c10:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0c12:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a0c14:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0c16:	f7ff ff85 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c1a:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0c1c:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	f7ff ff80 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c24:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a0c26:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c28:	4620      	mov	r0, r4
 80a0c2a:	f7ff ff7b 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0c2e:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a0c30:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	f7ff ff76 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c38:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0c3a:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	f7ff ff71 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c42:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a0c44:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c46:	4620      	mov	r0, r4
 80a0c48:	f7ff ff6c 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c4c:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a0c4e:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	f7ff ff67 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c56:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a0c58:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	f7ff ff62 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c60:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a0c62:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c64:	4620      	mov	r0, r4
 80a0c66:	f7ff ff5d 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c6a:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a0c6c:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c6e:	4620      	mov	r0, r4
 80a0c70:	f7ff ff58 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c74:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a0c76:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	f7ff ff53 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
 80a0c7e:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a0c80:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c82:	4620      	mov	r0, r4
 80a0c84:	f7ff ff4e 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0c88:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a0c8a:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	f7ff fe87 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c92:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0c94:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0c98:	4620      	mov	r0, r4
 80a0c9a:	f7ff ff43 	bl	80a0b24 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0c9e:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a0ca0:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0ca2:	4620      	mov	r0, r4
 80a0ca4:	f7ff fe7c 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a0ca8:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0caa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	f7ff fe76 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
 80a0cb4:	21e5      	movs	r1, #229	; 0xe5
 80a0cb6:	4605      	mov	r5, r0
 80a0cb8:	4620      	mov	r0, r4
 80a0cba:	f7ff fe71 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
 80a0cbe:	f000 000f 	and.w	r0, r0, #15
 80a0cc2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a0cc6:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a0cc8:	21e6      	movs	r1, #230	; 0xe6
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	f7ff fe68 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
 80a0cd0:	21e5      	movs	r1, #229	; 0xe5
 80a0cd2:	4605      	mov	r5, r0
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	f7ff fe63 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
 80a0cda:	1100      	asrs	r0, r0, #4
 80a0cdc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a0ce0:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a0ce2:	21e7      	movs	r1, #231	; 0xe7
 80a0ce4:	4620      	mov	r0, r4
 80a0ce6:	f7ff fe5b 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
 80a0cea:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 80a0cee:	bd38      	pop	{r3, r4, r5, pc}

080a0cf0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
 80a0cf0:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a0cf2:	21f3      	movs	r1, #243	; 0xf3
 80a0cf4:	f7ff fe54 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 80a0cf8:	f000 0001 	and.w	r0, r0, #1
 80a0cfc:	bd08      	pop	{r3, pc}
	...

080a0d00 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a0d00:	b530      	push	{r4, r5, lr}
 80a0d02:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a0d04:	f990 0010 	ldrsb.w	r0, [r0, #16]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a0d08:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a0d0a:	1c42      	adds	r2, r0, #1
 80a0d0c:	d103      	bne.n	80a0d16 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
 80a0d0e:	6820      	ldr	r0, [r4, #0]
 80a0d10:	f002 f80c 	bl	80a2d2c <_ZN7TwoWire5beginEv>
 80a0d14:	e021      	b.n	80a0d5a <_ZN15Adafruit_BME2804initEv+0x5a>
    } else {
        digitalWrite(_cs, HIGH);
 80a0d16:	2101      	movs	r1, #1
 80a0d18:	b280      	uxth	r0, r0
 80a0d1a:	f002 f914 	bl	80a2f46 <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a0d1e:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0d22:	2101      	movs	r1, #1
 80a0d24:	b280      	uxth	r0, r0
 80a0d26:	f002 f8fd 	bl	80a2f24 <pinMode>
        if (_sck == -1) {
 80a0d2a:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a0d2e:	1c43      	adds	r3, r0, #1
 80a0d30:	d103      	bne.n	80a0d3a <_ZN15Adafruit_BME2804initEv+0x3a>
            // hardware SPI
            SPI.begin();
 80a0d32:	481f      	ldr	r0, [pc, #124]	; (80a0db0 <_ZN15Adafruit_BME2804initEv+0xb0>)
 80a0d34:	f000 fd5e 	bl	80a17f4 <_ZN8SPIClass5beginEv>
 80a0d38:	e00f      	b.n	80a0d5a <_ZN15Adafruit_BME2804initEv+0x5a>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
 80a0d3a:	2101      	movs	r1, #1
 80a0d3c:	b280      	uxth	r0, r0
 80a0d3e:	f002 f8f1 	bl	80a2f24 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a0d42:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a0d46:	2101      	movs	r1, #1
 80a0d48:	b280      	uxth	r0, r0
 80a0d4a:	f002 f8eb 	bl	80a2f24 <pinMode>
            pinMode(_miso, INPUT);
 80a0d4e:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a0d52:	2100      	movs	r1, #0
 80a0d54:	b280      	uxth	r0, r0
 80a0d56:	f002 f8e5 	bl	80a2f24 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a0d5a:	21d0      	movs	r1, #208	; 0xd0
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	f7ff fe1f 	bl	80a09a0 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a0d62:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a0d64:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a0d66:	d120      	bne.n	80a0daa <_ZN15Adafruit_BME2804initEv+0xaa>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a0d68:	4620      	mov	r0, r4
 80a0d6a:	22b6      	movs	r2, #182	; 0xb6
 80a0d6c:	21e0      	movs	r1, #224	; 0xe0
 80a0d6e:	f7ff fd7f 	bl	80a0870 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
 80a0d72:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0d76:	f001 fa41 	bl	80a21fc <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	f7ff ffb8 	bl	80a0cf0 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a0d80:	4605      	mov	r5, r0
 80a0d82:	b108      	cbz	r0, 80a0d88 <_ZN15Adafruit_BME2804initEv+0x88>
          delay(100);
 80a0d84:	2064      	movs	r0, #100	; 0x64
 80a0d86:	e7f6      	b.n	80a0d76 <_ZN15Adafruit_BME2804initEv+0x76>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a0d88:	4620      	mov	r0, r4
 80a0d8a:	f7ff ff41 	bl	80a0c10 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
 80a0d8e:	2305      	movs	r3, #5
 80a0d90:	9300      	str	r3, [sp, #0]
 80a0d92:	461a      	mov	r2, r3
 80a0d94:	2103      	movs	r1, #3
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	9502      	str	r5, [sp, #8]
 80a0d9a:	9501      	str	r5, [sp, #4]
 80a0d9c:	f7ff fdba 	bl	80a0914 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
 80a0da0:	2064      	movs	r0, #100	; 0x64
 80a0da2:	f001 fa2b 	bl	80a21fc <delay>

    return true;
 80a0da6:	2001      	movs	r0, #1
 80a0da8:	e000      	b.n	80a0dac <_ZN15Adafruit_BME2804initEv+0xac>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
 80a0daa:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
 80a0dac:	b005      	add	sp, #20
 80a0dae:	bd30      	pop	{r4, r5, pc}
 80a0db0:	200001ec 	.word	0x200001ec

080a0db4 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a0db4:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a0db6:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a0db8:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a0dba:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
 80a0dbc:	f002 f92a 	bl	80a3014 <_Z19__fetch_global_Wirev>
 80a0dc0:	6020      	str	r0, [r4, #0]
	status = init();
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	f7ff ff9c 	bl	80a0d00 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a0dc8:	b930      	cbnz	r0, 80a0dd8 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a0dca:	2376      	movs	r3, #118	; 0x76
 80a0dcc:	7123      	strb	r3, [r4, #4]
 		status = init();
 80a0dce:	4620      	mov	r0, r4
 		}
	return status;
}
 80a0dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
 80a0dd4:	f7ff bf94 	b.w	80a0d00 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
 80a0dd8:	bd10      	pop	{r4, pc}
	...

080a0ddc <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a0ddc:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a0dde:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a0de0:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a0de2:	f7ff fea5 	bl	80a0b30 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a0de6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a0dea:	d01b      	beq.n	80a0e24 <_ZN15Adafruit_BME28015readTemperatureEv+0x48>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a0dec:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a0dee:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
 80a0df2:	435b      	muls	r3, r3
 80a0df4:	0052      	lsls	r2, r2, #1
 80a0df6:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 80a0dfa:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80a0dfe:	131b      	asrs	r3, r3, #12
 80a0e00:	4350      	muls	r0, r2
 80a0e02:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80a0e06:	4353      	muls	r3, r2
 80a0e08:	139b      	asrs	r3, r3, #14
 80a0e0a:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 80a0e0e:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
 80a0e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a0e14:	3080      	adds	r0, #128	; 0x80
 80a0e16:	1200      	asrs	r0, r0, #8
 80a0e18:	f004 f902 	bl	80a5020 <__aeabi_i2f>
 80a0e1c:	4902      	ldr	r1, [pc, #8]	; (80a0e28 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>)
 80a0e1e:	f004 fa07 	bl	80a5230 <__aeabi_fdiv>
 80a0e22:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
 80a0e24:	4801      	ldr	r0, [pc, #4]	; (80a0e2c <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
 80a0e26:	bd10      	pop	{r4, pc}
 80a0e28:	42c80000 	.word	0x42c80000
 80a0e2c:	7fc00000 	.word	0x7fc00000

080a0e30 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
 80a0e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e34:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
 80a0e36:	f7ff ffd1 	bl	80a0ddc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a0e3a:	21f7      	movs	r1, #247	; 0xf7
 80a0e3c:	4630      	mov	r0, r6
 80a0e3e:	f7ff fe77 	bl	80a0b30 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a0e42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a0e46:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a0e48:	f000 80bf 	beq.w	80a0fca <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a0e4c:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0e4e:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a0e52:	17e5      	asrs	r5, r4, #31
 80a0e54:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 80a0e58:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0e5c:	fba4 8904 	umull	r8, r9, r4, r4
 80a0e60:	fb04 f305 	mul.w	r3, r4, r5
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0e64:	fb02 f105 	mul.w	r1, r2, r5
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0e68:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0e6c:	17d3      	asrs	r3, r2, #31
 80a0e6e:	fb04 1103 	mla	r1, r4, r3, r1
 80a0e72:	fba2 2304 	umull	r2, r3, r2, r4
 80a0e76:	440b      	add	r3, r1
 80a0e78:	0319      	lsls	r1, r3, #12
 80a0e7a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80a0e7e:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a0e80:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
 80a0e84:	fb02 fe09 	mul.w	lr, r2, r9
 80a0e88:	17d3      	asrs	r3, r2, #31
 80a0e8a:	fb08 ee03 	mla	lr, r8, r3, lr
 80a0e8e:	fba2 2308 	umull	r2, r3, r2, r8
 80a0e92:	4473      	add	r3, lr
 80a0e94:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80a0e98:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80a0e9c:	eb1a 0a00 	adds.w	sl, sl, r0
 80a0ea0:	8b72      	ldrh	r2, [r6, #26]
 80a0ea2:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80a0ea6:	eb4b 0b01 	adc.w	fp, fp, r1
 80a0eaa:	f11a 0000 	adds.w	r0, sl, #0
 80a0eae:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80a0eb2:	fba0 ab02 	umull	sl, fp, r0, r2
 80a0eb6:	fb02 bb01 	mla	fp, r2, r1, fp
 80a0eba:	ea4f 026b 	mov.w	r2, fp, asr #1
 80a0ebe:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
 80a0ec2:	ea52 0103 	orrs.w	r1, r2, r3
 80a0ec6:	f000 8083 	beq.w	80a0fd0 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0eca:	1138      	asrs	r0, r7, #4
 80a0ecc:	f640 4735 	movw	r7, #3125	; 0xc35
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0ed0:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0ed4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0ed8:	fb0a f109 	mul.w	r1, sl, r9
 80a0edc:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a0ee0:	fb08 110b 	mla	r1, r8, fp, r1
 80a0ee4:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0ee8:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0eec:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0eee:	fb0a f105 	mul.w	r1, sl, r5
 80a0ef2:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a0ef6:	fb04 110b 	mla	r1, r4, fp, r1
 80a0efa:	fbaa 4504 	umull	r4, r5, sl, r4
 80a0efe:	440d      	add	r5, r1
 80a0f00:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 80a0f04:	ea4f 4a44 	mov.w	sl, r4, lsl #17
 80a0f08:	eb1a 0a08 	adds.w	sl, sl, r8
 80a0f0c:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 80a0f10:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0f14:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80a0f18:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 80a0f1c:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
 80a0f20:	07c4      	lsls	r4, r0, #31
 80a0f22:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
 80a0f26:	f04f 0800 	mov.w	r8, #0
 80a0f2a:	eb18 080a 	adds.w	r8, r8, sl
 80a0f2e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 80a0f32:	eb49 090b 	adc.w	r9, r9, fp
 80a0f36:	ebb4 0408 	subs.w	r4, r4, r8
 80a0f3a:	fba4 0107 	umull	r0, r1, r4, r7
 80a0f3e:	eb65 0509 	sbc.w	r5, r5, r9
 80a0f42:	fb07 1105 	mla	r1, r7, r5, r1
 80a0f46:	f004 fa0f 	bl	80a5368 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0f4a:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0f4e:	134c      	asrs	r4, r1, #13
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0f50:	fb02 f704 	mul.w	r7, r2, r4
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0f54:	0b45      	lsrs	r5, r0, #13
 80a0f56:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0f5a:	17d3      	asrs	r3, r2, #31
 80a0f5c:	fb05 7703 	mla	r7, r5, r3, r7
 80a0f60:	fba2 2305 	umull	r2, r3, r2, r5
 80a0f64:	4354      	muls	r4, r2
 80a0f66:	443b      	add	r3, r7
 80a0f68:	fb05 4403 	mla	r4, r5, r3, r4
 80a0f6c:	fba2 2305 	umull	r2, r3, r2, r5
 80a0f70:	4423      	add	r3, r4
 80a0f72:	0e54      	lsrs	r4, r2, #25
 80a0f74:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 80a0f78:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 80a0f7c:	1824      	adds	r4, r4, r0
 80a0f7e:	ea4f 6563 	mov.w	r5, r3, asr #25
 80a0f82:	414d      	adcs	r5, r1
 80a0f84:	4351      	muls	r1, r2
 80a0f86:	17d3      	asrs	r3, r2, #31
 80a0f88:	fb00 1303 	mla	r3, r0, r3, r1
 80a0f8c:	fba2 0100 	umull	r0, r1, r2, r0
 80a0f90:	4419      	add	r1, r3
 80a0f92:	0cc2      	lsrs	r2, r0, #19
 80a0f94:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80a0f98:	1912      	adds	r2, r2, r4
    return (float)p/256;
 80a0f9a:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0f9e:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80a0fa2:	416b      	adcs	r3, r5
 80a0fa4:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
 80a0fa6:	17e5      	asrs	r5, r4, #31
 80a0fa8:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0faa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a0fae:	1219      	asrs	r1, r3, #8
    return (float)p/256;
 80a0fb0:	012b      	lsls	r3, r5, #4
 80a0fb2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80a0fb6:	1880      	adds	r0, r0, r2
 80a0fb8:	4159      	adcs	r1, r3
 80a0fba:	f004 f847 	bl	80a504c <__aeabi_l2f>
 80a0fbe:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a0fc2:	f004 f881 	bl	80a50c8 <__aeabi_fmul>
 80a0fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
 80a0fca:	4803      	ldr	r0, [pc, #12]	; (80a0fd8 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>)
 80a0fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
 80a0fd0:	2000      	movs	r0, #0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
 80a0fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0fd6:	bf00      	nop
 80a0fd8:	7fc00000 	.word	0x7fc00000

080a0fdc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
 80a0fdc:	b510      	push	{r4, lr}
 80a0fde:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a0fe0:	f7ff fefc 	bl	80a0ddc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a0fe4:	21fd      	movs	r1, #253	; 0xfd
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	f7ff fd34 	bl	80a0a54 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a0fec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a0ff0:	d03a      	beq.n	80a1068 <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0ff2:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0ff6:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0ff8:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80a0ffc:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0ffe:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1002:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80a1006:	fb02 3311 	mls	r3, r2, r1, r3
 80a100a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a100e:	13d8      	asrs	r0, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a1010:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a1014:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
 80a1018:	4353      	muls	r3, r2
 80a101a:	434a      	muls	r2, r1
 80a101c:	12db      	asrs	r3, r3, #11
 80a101e:	1292      	asrs	r2, r2, #10
 80a1020:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a1024:	4353      	muls	r3, r2
 80a1026:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80a102a:	129b      	asrs	r3, r3, #10
 80a102c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a1030:	4353      	muls	r3, r2
 80a1032:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a1036:	139b      	asrs	r3, r3, #14
 80a1038:	4343      	muls	r3, r0

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a103a:	13d8      	asrs	r0, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a103c:	4340      	muls	r0, r0
 80a103e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a1042:	11c0      	asrs	r0, r0, #7
 80a1044:	4350      	muls	r0, r2
 80a1046:	eba3 1020 	sub.w	r0, r3, r0, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a104a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
 80a104e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a1052:	bfa8      	it	ge
 80a1054:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 80a1058:	1300      	asrs	r0, r0, #12
 80a105a:	f003 ffe1 	bl	80a5020 <__aeabi_i2f>
 80a105e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a1062:	f004 f831 	bl	80a50c8 <__aeabi_fmul>
 80a1066:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
 80a1068:	4800      	ldr	r0, [pc, #0]	; (80a106c <_ZN15Adafruit_BME28012readHumidityEv+0x90>)

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
 80a106a:	bd10      	pop	{r4, pc}
 80a106c:	7fc00000 	.word	0x7fc00000

080a1070 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
 80a1070:	b510      	push	{r4, lr}
 80a1072:	460c      	mov	r4, r1

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
 80a1074:	f7ff fedc 	bl	80a0e30 <_ZN15Adafruit_BME28012readPressureEv>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
 80a1078:	4911      	ldr	r1, [pc, #68]	; (80a10c0 <_ZN15Adafruit_BME28012readAltitudeEf+0x50>)
 80a107a:	f004 f8d9 	bl	80a5230 <__aeabi_fdiv>
 80a107e:	4621      	mov	r1, r4
 80a1080:	f004 f8d6 	bl	80a5230 <__aeabi_fdiv>
 80a1084:	f003 fb76 	bl	80a4774 <__aeabi_f2d>
 80a1088:	a309      	add	r3, pc, #36	; (adr r3, 80a10b0 <_ZN15Adafruit_BME28012readAltitudeEf+0x40>)
 80a108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a108e:	f002 f933 	bl	80a32f8 <pow>
 80a1092:	4602      	mov	r2, r0
 80a1094:	460b      	mov	r3, r1
 80a1096:	2000      	movs	r0, #0
 80a1098:	490a      	ldr	r1, [pc, #40]	; (80a10c4 <_ZN15Adafruit_BME28012readAltitudeEf+0x54>)
 80a109a:	f003 fa0b 	bl	80a44b4 <__aeabi_dsub>
 80a109e:	a306      	add	r3, pc, #24	; (adr r3, 80a10b8 <_ZN15Adafruit_BME28012readAltitudeEf+0x48>)
 80a10a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a10a4:	f003 fbba 	bl	80a481c <__aeabi_dmul>
 80a10a8:	f003 feb0 	bl	80a4e0c <__aeabi_d2f>
}
 80a10ac:	bd10      	pop	{r4, pc}
 80a10ae:	bf00      	nop
 80a10b0:	1a36e2eb 	.word	0x1a36e2eb
 80a10b4:	3fc85bc0 	.word	0x3fc85bc0
 80a10b8:	00000000 	.word	0x00000000
 80a10bc:	40e5a540 	.word	0x40e5a540
 80a10c0:	42c80000 	.word	0x42c80000
 80a10c4:	3ff00000 	.word	0x3ff00000

080a10c8 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
 80a10c8:	f000 b8e8 	b.w	80a129c <HAL_Pin_Map>

080a10cc <_ZN14Adafruit_SGP30C1Ev>:
/*!
    @brief  Instantiates a new SGP30 class
*/
/**************************************************************************/
Adafruit_SGP30::Adafruit_SGP30() {
}
 80a10cc:	4770      	bx	lr

080a10ce <_ZN14Adafruit_SGP3011generateCRCEPhh>:
#endif
  }
  return true;
}

uint8_t Adafruit_SGP30::generateCRC(uint8_t *data, uint8_t datalen) {
 80a10ce:	b510      	push	{r4, lr}
 80a10d0:	460c      	mov	r4, r1
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;
 80a10d2:	20ff      	movs	r0, #255	; 0xff

  for (uint8_t i=0; i<datalen; i++) {
 80a10d4:	1a63      	subs	r3, r4, r1
 80a10d6:	b2db      	uxtb	r3, r3
 80a10d8:	429a      	cmp	r2, r3
 80a10da:	d911      	bls.n	80a1100 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x32>
    crc ^= data[i];
 80a10dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a10e0:	4058      	eors	r0, r3
 80a10e2:	2308      	movs	r3, #8
    for (uint8_t b=0; b<8; b++) {
      if (crc & 0x80)
 80a10e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a10e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80a10ec:	ea4f 0040 	mov.w	r0, r0, lsl #1
	crc = (crc << 1) ^ SGP30_CRC8_POLYNOMIAL;
 80a10f0:	bf18      	it	ne
 80a10f2:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;

  for (uint8_t i=0; i<datalen; i++) {
    crc ^= data[i];
    for (uint8_t b=0; b<8; b++) {
 80a10f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      if (crc & 0x80)
	crc = (crc << 1) ^ SGP30_CRC8_POLYNOMIAL;
      else
	crc <<= 1;
 80a10fa:	b2c0      	uxtb	r0, r0
  // calculates 8-Bit checksum with given polynomial
  uint8_t crc = SGP30_CRC8_INIT;

  for (uint8_t i=0; i<datalen; i++) {
    crc ^= data[i];
    for (uint8_t b=0; b<8; b++) {
 80a10fc:	d1f2      	bne.n	80a10e4 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x16>
 80a10fe:	e7e9      	b.n	80a10d4 <_ZN14Adafruit_SGP3011generateCRCEPhh+0x6>
      else
	crc <<= 1;
    }
  }
  return crc;
}
 80a1100:	bd10      	pop	{r4, pc}

080a1102 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>:
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a1102:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1106:	4616      	mov	r6, r2
 80a1108:	468a      	mov	sl, r1
 80a110a:	af00      	add	r7, sp, #0
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a110c:	7c01      	ldrb	r1, [r0, #16]
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a110e:	4605      	mov	r5, r0
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a1110:	68c0      	ldr	r0, [r0, #12]
*/
/**************************************************************************/


boolean Adafruit_SGP30::readWordFromCommand(uint8_t command[], uint8_t commandLength, uint16_t delayms, uint16_t *readdata, uint8_t readlen)
{
 80a1112:	4699      	mov	r9, r3
 80a1114:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
  uint8_t data;

  _i2c->beginTransmission(_i2caddr);
 80a1118:	f001 fe1a 	bl	80a2d50 <_ZN7TwoWire17beginTransmissionEh>
 80a111c:	3e01      	subs	r6, #1
 80a111e:	f10a 38ff 	add.w	r8, sl, #4294967295
 80a1122:	4456      	add	r6, sl

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a1124:	45b0      	cmp	r8, r6
#endif
  }
#ifdef I2C_DEBUG
  Serial.println();
#endif
  _i2c->endTransmission();
 80a1126:	68e8      	ldr	r0, [r5, #12]

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a1128:	d005      	beq.n	80a1136 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x34>
    _i2c->write(command[i]);
 80a112a:	6803      	ldr	r3, [r0, #0]
 80a112c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80a1130:	689b      	ldr	r3, [r3, #8]
 80a1132:	4798      	blx	r3

#ifdef I2C_DEBUG
  Serial.print("\t\t-> ");
#endif

  for (uint8_t i=0; i<commandLength; i++) {
 80a1134:	e7f6      	b.n	80a1124 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x22>
#endif
  }
#ifdef I2C_DEBUG
  Serial.println();
#endif
  _i2c->endTransmission();
 80a1136:	f001 fe13 	bl	80a2d60 <_ZN7TwoWire15endTransmissionEv>

  delay(delayms);
 80a113a:	4648      	mov	r0, r9
 80a113c:	f001 f85e 	bl	80a21fc <delay>

  if (readlen == 0)
 80a1140:	2c00      	cmp	r4, #0
 80a1142:	d03d      	beq.n	80a11c0 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xbe>
    return true;

  uint8_t replylen = readlen * (SGP30_WORD_LEN +1);
 80a1144:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80a1148:	eb04 080a 	add.w	r8, r4, sl
 80a114c:	fa5f f888 	uxtb.w	r8, r8
  if (_i2c->requestFrom(_i2caddr, replylen) != replylen)
 80a1150:	4642      	mov	r2, r8
 80a1152:	7c29      	ldrb	r1, [r5, #16]
 80a1154:	68e8      	ldr	r0, [r5, #12]
 80a1156:	f001 fdf8 	bl	80a2d4a <_ZN7TwoWire11requestFromEhh>
 80a115a:	4580      	cmp	r8, r0
 80a115c:	d001      	beq.n	80a1162 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x60>
    return false;
 80a115e:	2000      	movs	r0, #0
 80a1160:	e02f      	b.n	80a11c2 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xc0>
  uint8_t replybuffer[replylen];
 80a1162:	f108 0307 	add.w	r3, r8, #7
 80a1166:	f023 0307 	bic.w	r3, r3, #7
 80a116a:	ebad 0d03 	sub.w	sp, sp, r3
 80a116e:	46eb      	mov	fp, sp
 80a1170:	466e      	mov	r6, sp
 80a1172:	46e9      	mov	r9, sp
#ifdef I2C_DEBUG
  Serial.print("\t\t<- ");
#endif
  for (uint8_t i=0; i<replylen; i++) {
 80a1174:	ebcb 0309 	rsb	r3, fp, r9
 80a1178:	b2db      	uxtb	r3, r3
 80a117a:	4598      	cmp	r8, r3
 80a117c:	d906      	bls.n	80a118c <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x8a>
    replybuffer[i] = _i2c->read();
 80a117e:	68e8      	ldr	r0, [r5, #12]
 80a1180:	6803      	ldr	r3, [r0, #0]
 80a1182:	695b      	ldr	r3, [r3, #20]
 80a1184:	4798      	blx	r3
 80a1186:	f809 0b01 	strb.w	r0, [r9], #1
    return false;
  uint8_t replybuffer[replylen];
#ifdef I2C_DEBUG
  Serial.print("\t\t<- ");
#endif
  for (uint8_t i=0; i<replylen; i++) {
 80a118a:	e7f3      	b.n	80a1174 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x72>
 80a118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a118e:	4454      	add	r4, sl
 80a1190:	f1a3 0802 	sub.w	r8, r3, #2
 80a1194:	445c      	add	r4, fp

#ifdef I2C_DEBUG
  Serial.println();
#endif

  for (uint8_t i=0; i<readlen; i++) {
 80a1196:	42a6      	cmp	r6, r4
 80a1198:	d012      	beq.n	80a11c0 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0xbe>
    uint8_t crc = generateCRC(replybuffer+i*3, 2);
 80a119a:	4631      	mov	r1, r6
 80a119c:	2202      	movs	r2, #2
 80a119e:	4628      	mov	r0, r5
 80a11a0:	f7ff ff95 	bl	80a10ce <_ZN14Adafruit_SGP3011generateCRCEPhh>
 80a11a4:	3603      	adds	r6, #3
#ifdef I2C_DEBUG
    Serial.print("\t\tCRC calced: 0x"); Serial.print(crc, HEX);
    Serial.print(" vs. 0x"); Serial.println(replybuffer[i * 3 + 2], HEX);
#endif
    if (crc != replybuffer[i * 3 + 2])
 80a11a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a11aa:	4283      	cmp	r3, r0
 80a11ac:	d1d7      	bne.n	80a115e <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x5c>
      return false;
    // success! store it
    readdata[i] = replybuffer[i*3];
    readdata[i] <<= 8;
    readdata[i] |= replybuffer[i*3 + 1];
 80a11ae:	f816 2c03 	ldrb.w	r2, [r6, #-3]
 80a11b2:	f816 3c02 	ldrb.w	r3, [r6, #-2]
 80a11b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a11ba:	f828 3f02 	strh.w	r3, [r8, #2]!

#ifdef I2C_DEBUG
  Serial.println();
#endif

  for (uint8_t i=0; i<readlen; i++) {
 80a11be:	e7ea      	b.n	80a1196 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth+0x94>
  _i2c->endTransmission();

  delay(delayms);

  if (readlen == 0)
    return true;
 80a11c0:	2001      	movs	r0, #1
#ifdef I2C_DEBUG
    Serial.print("\t\tRead: 0x"); Serial.println(readdata[i], HEX);
#endif
  }
  return true;
}
 80a11c2:	46bd      	mov	sp, r7
 80a11c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a11c8 <_ZN14Adafruit_SGP307IAQinitEv>:
/*!
    @brief  Commands the sensor to begin the IAQ algorithm. Must be called after startup.
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQinit(void) {
 80a11c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t command[2];
  command[0] = 0x20;
 80a11ca:	2320      	movs	r3, #32
 80a11cc:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x03;
 80a11d0:	2303      	movs	r3, #3
 80a11d2:	f88d 300d 	strb.w	r3, [sp, #13]
  return readWordFromCommand(command, 2, 10);
 80a11d6:	2300      	movs	r3, #0
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	9300      	str	r3, [sp, #0]
 80a11dc:	2202      	movs	r2, #2
 80a11de:	230a      	movs	r3, #10
 80a11e0:	a903      	add	r1, sp, #12
 80a11e2:	f7ff ff8e 	bl	80a1102 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
}
 80a11e6:	b005      	add	sp, #20
 80a11e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a11ec <_ZN14Adafruit_SGP305beginEP7TwoWire>:
    then reads the serialnumber and checks that we are talking to an SGP30
    @param  theWire Optional pointer to I2C interface, otherwise use Wire
    @returns True if SGP30 found on I2C, False if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::begin(TwoWire *theWire) {
 80a11ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  _i2caddr = SGP30_I2CADDR_DEFAULT;
 80a11ee:	2358      	movs	r3, #88	; 0x58
    then reads the serialnumber and checks that we are talking to an SGP30
    @param  theWire Optional pointer to I2C interface, otherwise use Wire
    @returns True if SGP30 found on I2C, False if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::begin(TwoWire *theWire) {
 80a11f0:	4604      	mov	r4, r0
  _i2caddr = SGP30_I2CADDR_DEFAULT;
 80a11f2:	7403      	strb	r3, [r0, #16]
  if (theWire == NULL) {
 80a11f4:	b919      	cbnz	r1, 80a11fe <_ZN14Adafruit_SGP305beginEP7TwoWire+0x12>
    _i2c = &Wire;
 80a11f6:	f001 ff0d 	bl	80a3014 <_Z19__fetch_global_Wirev>
 80a11fa:	60e0      	str	r0, [r4, #12]
 80a11fc:	e000      	b.n	80a1200 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x14>
  } else {
    _i2c = theWire;
 80a11fe:	60c1      	str	r1, [r0, #12]
  }

  _i2c->begin();
 80a1200:	68e0      	ldr	r0, [r4, #12]
 80a1202:	f001 fd93 	bl	80a2d2c <_ZN7TwoWire5beginEv>


  uint8_t command[2];
  command[0] = 0x36;
 80a1206:	2336      	movs	r3, #54	; 0x36
 80a1208:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x82;
 80a120c:	2382      	movs	r3, #130	; 0x82
 80a120e:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! readWordFromCommand(command, 2, 10, serialnumber, 3))
 80a1212:	2303      	movs	r3, #3
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	1d23      	adds	r3, r4, #4
 80a1218:	9300      	str	r3, [sp, #0]
 80a121a:	2202      	movs	r2, #2
 80a121c:	230a      	movs	r3, #10
 80a121e:	a903      	add	r1, sp, #12
 80a1220:	4620      	mov	r0, r4
 80a1222:	f7ff ff6e 	bl	80a1102 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a1226:	b908      	cbnz	r0, 80a122c <_ZN14Adafruit_SGP305beginEP7TwoWire+0x40>
    return false;
 80a1228:	2000      	movs	r0, #0
 80a122a:	e019      	b.n	80a1260 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x74>

  uint16_t featureset;
  command[0] = 0x20;
 80a122c:	2320      	movs	r3, #32
 80a122e:	f88d 300c 	strb.w	r3, [sp, #12]
  command[1] = 0x2F;
 80a1232:	232f      	movs	r3, #47	; 0x2f
 80a1234:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! readWordFromCommand(command, 2, 10, &featureset, 1))
 80a1238:	2301      	movs	r3, #1
 80a123a:	9301      	str	r3, [sp, #4]
 80a123c:	f10d 030e 	add.w	r3, sp, #14
 80a1240:	9300      	str	r3, [sp, #0]
 80a1242:	2202      	movs	r2, #2
 80a1244:	230a      	movs	r3, #10
 80a1246:	a903      	add	r1, sp, #12
 80a1248:	4620      	mov	r0, r4
 80a124a:	f7ff ff5a 	bl	80a1102 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a124e:	2800      	cmp	r0, #0
 80a1250:	d0ea      	beq.n	80a1228 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x3c>
    return false;
  //Serial.print("Featureset 0x"); Serial.println(featureset, HEX);
  if (featureset != SGP30_FEATURESET)
 80a1252:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a1256:	2b20      	cmp	r3, #32
 80a1258:	d1e6      	bne.n	80a1228 <_ZN14Adafruit_SGP305beginEP7TwoWire+0x3c>
    return false;
  if (! IAQinit())
 80a125a:	4620      	mov	r0, r4
 80a125c:	f7ff ffb4 	bl	80a11c8 <_ZN14Adafruit_SGP307IAQinitEv>
    return false;

  return true;
}
 80a1260:	b004      	add	sp, #16
 80a1262:	bd10      	pop	{r4, pc}

080a1264 <_ZN14Adafruit_SGP3010IAQmeasureEv>:
/*!
    @brief  Commands the sensor to take a single eCO2/VOC measurement. Places results in {@link TVOC} and {@link eCO2}
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQmeasure(void) {
 80a1264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t command[2];
  command[0] = 0x20;
 80a1266:	2320      	movs	r3, #32
 80a1268:	f88d 3008 	strb.w	r3, [sp, #8]
  command[1] = 0x08;
 80a126c:	2308      	movs	r3, #8
 80a126e:	f88d 3009 	strb.w	r3, [sp, #9]
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 12, reply, 2))
 80a1272:	2202      	movs	r2, #2
 80a1274:	ab03      	add	r3, sp, #12
 80a1276:	9300      	str	r3, [sp, #0]
 80a1278:	9201      	str	r2, [sp, #4]
 80a127a:	230c      	movs	r3, #12
 80a127c:	a902      	add	r1, sp, #8
/*!
    @brief  Commands the sensor to take a single eCO2/VOC measurement. Places results in {@link TVOC} and {@link eCO2}
    @returns True if command completed successfully, false if something went wrong!
*/
/**************************************************************************/
boolean Adafruit_SGP30::IAQmeasure(void) {
 80a127e:	4604      	mov	r4, r0
  uint8_t command[2];
  command[0] = 0x20;
  command[1] = 0x08;
  uint16_t reply[2];
  if (! readWordFromCommand(command, 2, 12, reply, 2))
 80a1280:	f7ff ff3f 	bl	80a1102 <_ZN14Adafruit_SGP3019readWordFromCommandEPhhtPth>
 80a1284:	b128      	cbz	r0, 80a1292 <_ZN14Adafruit_SGP3010IAQmeasureEv+0x2e>
    return false;
  TVOC = reply[1];
 80a1286:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80a128a:	8023      	strh	r3, [r4, #0]
  eCO2 = reply[0];
 80a128c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80a1290:	8063      	strh	r3, [r4, #2]
  return true;
}
 80a1292:	b004      	add	sp, #16
 80a1294:	bd10      	pop	{r4, pc}

080a1296 <_GLOBAL__sub_I__ZN14Adafruit_SGP30C2Ev>:
 80a1296:	f000 b801 	b.w	80a129c <HAL_Pin_Map>
	...

080a129c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a129c:	b508      	push	{r3, lr}
 80a129e:	4b02      	ldr	r3, [pc, #8]	; (80a12a8 <HAL_Pin_Map+0xc>)
 80a12a0:	681b      	ldr	r3, [r3, #0]
 80a12a2:	681b      	ldr	r3, [r3, #0]
 80a12a4:	9301      	str	r3, [sp, #4]
 80a12a6:	bd08      	pop	{r3, pc}
 80a12a8:	080601b0 	.word	0x080601b0

080a12ac <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a12ac:	b508      	push	{r3, lr}
 80a12ae:	4b02      	ldr	r3, [pc, #8]	; (80a12b8 <HAL_Pin_Mode+0xc>)
 80a12b0:	681b      	ldr	r3, [r3, #0]
 80a12b2:	689b      	ldr	r3, [r3, #8]
 80a12b4:	9301      	str	r3, [sp, #4]
 80a12b6:	bd08      	pop	{r3, pc}
 80a12b8:	080601b0 	.word	0x080601b0

080a12bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a12bc:	b508      	push	{r3, lr}
 80a12be:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <HAL_Get_Pin_Mode+0xc>)
 80a12c0:	681b      	ldr	r3, [r3, #0]
 80a12c2:	68db      	ldr	r3, [r3, #12]
 80a12c4:	9301      	str	r3, [sp, #4]
 80a12c6:	bd08      	pop	{r3, pc}
 80a12c8:	080601b0 	.word	0x080601b0

080a12cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a12cc:	b508      	push	{r3, lr}
 80a12ce:	4b02      	ldr	r3, [pc, #8]	; (80a12d8 <HAL_GPIO_Write+0xc>)
 80a12d0:	681b      	ldr	r3, [r3, #0]
 80a12d2:	691b      	ldr	r3, [r3, #16]
 80a12d4:	9301      	str	r3, [sp, #4]
 80a12d6:	bd08      	pop	{r3, pc}
 80a12d8:	080601b0 	.word	0x080601b0

080a12dc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	4b02      	ldr	r3, [pc, #8]	; (80a12e8 <HAL_GPIO_Read+0xc>)
 80a12e0:	681b      	ldr	r3, [r3, #0]
 80a12e2:	695b      	ldr	r3, [r3, #20]
 80a12e4:	9301      	str	r3, [sp, #4]
 80a12e6:	bd08      	pop	{r3, pc}
 80a12e8:	080601b0 	.word	0x080601b0

080a12ec <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a12ec:	b508      	push	{r3, lr}
 80a12ee:	4b02      	ldr	r3, [pc, #8]	; (80a12f8 <HAL_SPI_Begin+0xc>)
 80a12f0:	681b      	ldr	r3, [r3, #0]
 80a12f2:	681b      	ldr	r3, [r3, #0]
 80a12f4:	9301      	str	r3, [sp, #4]
 80a12f6:	bd08      	pop	{r3, pc}
 80a12f8:	080601b4 	.word	0x080601b4

080a12fc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a12fc:	b508      	push	{r3, lr}
 80a12fe:	4b02      	ldr	r3, [pc, #8]	; (80a1308 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1300:	681b      	ldr	r3, [r3, #0]
 80a1302:	695b      	ldr	r3, [r3, #20]
 80a1304:	9301      	str	r3, [sp, #4]
 80a1306:	bd08      	pop	{r3, pc}
 80a1308:	080601b4 	.word	0x080601b4

080a130c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a130c:	b508      	push	{r3, lr}
 80a130e:	4b02      	ldr	r3, [pc, #8]	; (80a1318 <HAL_SPI_Init+0xc>)
 80a1310:	681b      	ldr	r3, [r3, #0]
 80a1312:	69db      	ldr	r3, [r3, #28]
 80a1314:	9301      	str	r3, [sp, #4]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	080601b4 	.word	0x080601b4

080a131c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a131c:	b508      	push	{r3, lr}
 80a131e:	4b02      	ldr	r3, [pc, #8]	; (80a1328 <HAL_SPI_Is_Enabled+0xc>)
 80a1320:	681b      	ldr	r3, [r3, #0]
 80a1322:	6a1b      	ldr	r3, [r3, #32]
 80a1324:	9301      	str	r3, [sp, #4]
 80a1326:	bd08      	pop	{r3, pc}
 80a1328:	080601b4 	.word	0x080601b4

080a132c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <HAL_SPI_Info+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601b4 	.word	0x080601b4

080a133c <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <HAL_SPI_Set_Settings+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601b4 	.word	0x080601b4

080a134c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <HAL_RNG_GetRandomNumber+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	685b      	ldr	r3, [r3, #4]
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	0806019c 	.word	0x0806019c

080a135c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	695b      	ldr	r3, [r3, #20]
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	bd08      	pop	{r3, pc}
 80a1368:	0806019c 	.word	0x0806019c

080a136c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a136c:	b508      	push	{r3, lr}
 80a136e:	4b02      	ldr	r3, [pc, #8]	; (80a1378 <HAL_RTC_Get_UnixTime+0xc>)
 80a1370:	681b      	ldr	r3, [r3, #0]
 80a1372:	69db      	ldr	r3, [r3, #28]
 80a1374:	9301      	str	r3, [sp, #4]
 80a1376:	bd08      	pop	{r3, pc}
 80a1378:	0806019c 	.word	0x0806019c

080a137c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1384:	9301      	str	r3, [sp, #4]
 80a1386:	bd08      	pop	{r3, pc}
 80a1388:	0806019c 	.word	0x0806019c

080a138c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a138c:	b508      	push	{r3, lr}
 80a138e:	4b02      	ldr	r3, [pc, #8]	; (80a1398 <HAL_Feature_Set+0xc>)
 80a1390:	681b      	ldr	r3, [r3, #0]
 80a1392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1394:	9301      	str	r3, [sp, #4]
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	080601b8 	.word	0x080601b8

080a139c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a139c:	b508      	push	{r3, lr}
 80a139e:	4b02      	ldr	r3, [pc, #8]	; (80a13a8 <os_mutex_create+0xc>)
 80a13a0:	681b      	ldr	r3, [r3, #0]
 80a13a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13a4:	9301      	str	r3, [sp, #4]
 80a13a6:	bd08      	pop	{r3, pc}
 80a13a8:	080601d0 	.word	0x080601d0

080a13ac <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a13ac:	b508      	push	{r3, lr}
 80a13ae:	4b02      	ldr	r3, [pc, #8]	; (80a13b8 <os_mutex_lock+0xc>)
 80a13b0:	681b      	ldr	r3, [r3, #0]
 80a13b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a13b4:	9301      	str	r3, [sp, #4]
 80a13b6:	bd08      	pop	{r3, pc}
 80a13b8:	080601d0 	.word	0x080601d0

080a13bc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a13bc:	b508      	push	{r3, lr}
 80a13be:	4b02      	ldr	r3, [pc, #8]	; (80a13c8 <os_mutex_unlock+0xc>)
 80a13c0:	681b      	ldr	r3, [r3, #0]
 80a13c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a13c4:	9301      	str	r3, [sp, #4]
 80a13c6:	bd08      	pop	{r3, pc}
 80a13c8:	080601d0 	.word	0x080601d0

080a13cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b02      	ldr	r3, [pc, #8]	; (80a13d8 <HAL_USART_Init+0xc>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	699b      	ldr	r3, [r3, #24]
 80a13d4:	9301      	str	r3, [sp, #4]
 80a13d6:	bd08      	pop	{r3, pc}
 80a13d8:	080601c4 	.word	0x080601c4

080a13dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a13dc:	b508      	push	{r3, lr}
 80a13de:	4b02      	ldr	r3, [pc, #8]	; (80a13e8 <HAL_USART_Write_Data+0xc>)
 80a13e0:	681b      	ldr	r3, [r3, #0]
 80a13e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a13e4:	9301      	str	r3, [sp, #4]
 80a13e6:	bd08      	pop	{r3, pc}
 80a13e8:	080601c4 	.word	0x080601c4

080a13ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a13ec:	b508      	push	{r3, lr}
 80a13ee:	4b02      	ldr	r3, [pc, #8]	; (80a13f8 <HAL_USART_Available_Data+0xc>)
 80a13f0:	681b      	ldr	r3, [r3, #0]
 80a13f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a13f4:	9301      	str	r3, [sp, #4]
 80a13f6:	bd08      	pop	{r3, pc}
 80a13f8:	080601c4 	.word	0x080601c4

080a13fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a13fc:	b508      	push	{r3, lr}
 80a13fe:	4b02      	ldr	r3, [pc, #8]	; (80a1408 <HAL_USART_Read_Data+0xc>)
 80a1400:	681b      	ldr	r3, [r3, #0]
 80a1402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1404:	9301      	str	r3, [sp, #4]
 80a1406:	bd08      	pop	{r3, pc}
 80a1408:	080601c4 	.word	0x080601c4

080a140c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a140c:	b508      	push	{r3, lr}
 80a140e:	4b02      	ldr	r3, [pc, #8]	; (80a1418 <HAL_USART_Peek_Data+0xc>)
 80a1410:	681b      	ldr	r3, [r3, #0]
 80a1412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1414:	9301      	str	r3, [sp, #4]
 80a1416:	bd08      	pop	{r3, pc}
 80a1418:	080601c4 	.word	0x080601c4

080a141c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a141c:	b508      	push	{r3, lr}
 80a141e:	4b02      	ldr	r3, [pc, #8]	; (80a1428 <HAL_USART_Flush_Data+0xc>)
 80a1420:	681b      	ldr	r3, [r3, #0]
 80a1422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1424:	9301      	str	r3, [sp, #4]
 80a1426:	bd08      	pop	{r3, pc}
 80a1428:	080601c4 	.word	0x080601c4

080a142c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a142c:	b508      	push	{r3, lr}
 80a142e:	4b02      	ldr	r3, [pc, #8]	; (80a1438 <HAL_USART_Is_Enabled+0xc>)
 80a1430:	681b      	ldr	r3, [r3, #0]
 80a1432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1434:	9301      	str	r3, [sp, #4]
 80a1436:	bd08      	pop	{r3, pc}
 80a1438:	080601c4 	.word	0x080601c4

080a143c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a143c:	b508      	push	{r3, lr}
 80a143e:	4b02      	ldr	r3, [pc, #8]	; (80a1448 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1440:	681b      	ldr	r3, [r3, #0]
 80a1442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1444:	9301      	str	r3, [sp, #4]
 80a1446:	bd08      	pop	{r3, pc}
 80a1448:	080601c4 	.word	0x080601c4

080a144c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a144c:	b508      	push	{r3, lr}
 80a144e:	4b02      	ldr	r3, [pc, #8]	; (80a1458 <HAL_I2C_Begin+0xc>)
 80a1450:	681b      	ldr	r3, [r3, #0]
 80a1452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1454:	9301      	str	r3, [sp, #4]
 80a1456:	bd08      	pop	{r3, pc}
 80a1458:	080601ac 	.word	0x080601ac

080a145c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a145c:	b508      	push	{r3, lr}
 80a145e:	4b02      	ldr	r3, [pc, #8]	; (80a1468 <HAL_I2C_Request_Data+0xc>)
 80a1460:	681b      	ldr	r3, [r3, #0]
 80a1462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1464:	9301      	str	r3, [sp, #4]
 80a1466:	bd08      	pop	{r3, pc}
 80a1468:	080601ac 	.word	0x080601ac

080a146c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a146c:	b508      	push	{r3, lr}
 80a146e:	4b02      	ldr	r3, [pc, #8]	; (80a1478 <HAL_I2C_Begin_Transmission+0xc>)
 80a1470:	681b      	ldr	r3, [r3, #0]
 80a1472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1474:	9301      	str	r3, [sp, #4]
 80a1476:	bd08      	pop	{r3, pc}
 80a1478:	080601ac 	.word	0x080601ac

080a147c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a147c:	b508      	push	{r3, lr}
 80a147e:	4b02      	ldr	r3, [pc, #8]	; (80a1488 <HAL_I2C_End_Transmission+0xc>)
 80a1480:	681b      	ldr	r3, [r3, #0]
 80a1482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1484:	9301      	str	r3, [sp, #4]
 80a1486:	bd08      	pop	{r3, pc}
 80a1488:	080601ac 	.word	0x080601ac

080a148c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a148c:	b508      	push	{r3, lr}
 80a148e:	4b02      	ldr	r3, [pc, #8]	; (80a1498 <HAL_I2C_Write_Data+0xc>)
 80a1490:	681b      	ldr	r3, [r3, #0]
 80a1492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1494:	9301      	str	r3, [sp, #4]
 80a1496:	bd08      	pop	{r3, pc}
 80a1498:	080601ac 	.word	0x080601ac

080a149c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a149c:	b508      	push	{r3, lr}
 80a149e:	4b02      	ldr	r3, [pc, #8]	; (80a14a8 <HAL_I2C_Available_Data+0xc>)
 80a14a0:	681b      	ldr	r3, [r3, #0]
 80a14a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a14a4:	9301      	str	r3, [sp, #4]
 80a14a6:	bd08      	pop	{r3, pc}
 80a14a8:	080601ac 	.word	0x080601ac

080a14ac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a14ac:	b508      	push	{r3, lr}
 80a14ae:	4b02      	ldr	r3, [pc, #8]	; (80a14b8 <HAL_I2C_Read_Data+0xc>)
 80a14b0:	681b      	ldr	r3, [r3, #0]
 80a14b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a14b4:	9301      	str	r3, [sp, #4]
 80a14b6:	bd08      	pop	{r3, pc}
 80a14b8:	080601ac 	.word	0x080601ac

080a14bc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a14bc:	b508      	push	{r3, lr}
 80a14be:	4b02      	ldr	r3, [pc, #8]	; (80a14c8 <HAL_I2C_Peek_Data+0xc>)
 80a14c0:	681b      	ldr	r3, [r3, #0]
 80a14c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a14c4:	9301      	str	r3, [sp, #4]
 80a14c6:	bd08      	pop	{r3, pc}
 80a14c8:	080601ac 	.word	0x080601ac

080a14cc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a14cc:	b508      	push	{r3, lr}
 80a14ce:	4b02      	ldr	r3, [pc, #8]	; (80a14d8 <HAL_I2C_Flush_Data+0xc>)
 80a14d0:	681b      	ldr	r3, [r3, #0]
 80a14d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a14d4:	9301      	str	r3, [sp, #4]
 80a14d6:	bd08      	pop	{r3, pc}
 80a14d8:	080601ac 	.word	0x080601ac

080a14dc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a14dc:	b508      	push	{r3, lr}
 80a14de:	4b02      	ldr	r3, [pc, #8]	; (80a14e8 <HAL_I2C_Is_Enabled+0xc>)
 80a14e0:	681b      	ldr	r3, [r3, #0]
 80a14e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a14e4:	9301      	str	r3, [sp, #4]
 80a14e6:	bd08      	pop	{r3, pc}
 80a14e8:	080601ac 	.word	0x080601ac

080a14ec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a14ec:	b508      	push	{r3, lr}
 80a14ee:	4b03      	ldr	r3, [pc, #12]	; (80a14fc <HAL_I2C_Init+0x10>)
 80a14f0:	681b      	ldr	r3, [r3, #0]
 80a14f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a14f6:	9301      	str	r3, [sp, #4]
 80a14f8:	bd08      	pop	{r3, pc}
 80a14fa:	0000      	.short	0x0000
 80a14fc:	080601ac 	.word	0x080601ac

080a1500 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <HAL_USB_USART_Init+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	681b      	ldr	r3, [r3, #0]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	080601d8 	.word	0x080601d8

080a1510 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <HAL_USB_USART_Begin+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	685b      	ldr	r3, [r3, #4]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	080601d8 	.word	0x080601d8

080a1520 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <HAL_USB_USART_Available_Data+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	691b      	ldr	r3, [r3, #16]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	080601d8 	.word	0x080601d8

080a1530 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	695b      	ldr	r3, [r3, #20]
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	080601d8 	.word	0x080601d8

080a1540 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <HAL_USB_USART_Receive_Data+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	699b      	ldr	r3, [r3, #24]
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	080601d8 	.word	0x080601d8

080a1550 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <HAL_USB_USART_Send_Data+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	69db      	ldr	r3, [r3, #28]
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	080601d8 	.word	0x080601d8

080a1560 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <HAL_USB_USART_Flush_Data+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	6a1b      	ldr	r3, [r3, #32]
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	080601d8 	.word	0x080601d8

080a1570 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <inet_gethostbyname+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	080601c0 	.word	0x080601c0

080a1580 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <log_message_v+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	080201a8 	.word	0x080201a8

080a1590 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <system_mode+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	681b      	ldr	r3, [r3, #0]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601a4 	.word	0x080601a4

080a15a0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <set_system_mode+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	685b      	ldr	r3, [r3, #4]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601a4 	.word	0x080601a4

080a15b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <system_delay_ms+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	695b      	ldr	r3, [r3, #20]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601a4 	.word	0x080601a4

080a15c0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <system_sleep+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	699b      	ldr	r3, [r3, #24]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601a4 	.word	0x080601a4

080a15d0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <application_thread_current+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601a4 	.word	0x080601a4

080a15e0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <application_thread_invoke+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601a4 	.word	0x080601a4

080a15f0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <system_thread_get_state+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601a4 	.word	0x080601a4

080a1600 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b03      	ldr	r3, [pc, #12]	; (80a1610 <system_ctrl_set_app_request_handler+0x10>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a160a:	9301      	str	r3, [sp, #4]
 80a160c:	bd08      	pop	{r3, pc}
 80a160e:	0000      	.short	0x0000
 80a1610:	080601a4 	.word	0x080601a4

080a1614 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b03      	ldr	r3, [pc, #12]	; (80a1624 <system_ctrl_set_result+0x10>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a161e:	9301      	str	r3, [sp, #4]
 80a1620:	bd08      	pop	{r3, pc}
 80a1622:	0000      	.short	0x0000
 80a1624:	080601a4 	.word	0x080601a4

080a1628 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b03      	ldr	r3, [pc, #12]	; (80a1638 <system_sleep_pins+0x10>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80a1632:	9301      	str	r3, [sp, #4]
 80a1634:	bd08      	pop	{r3, pc}
 80a1636:	0000      	.short	0x0000
 80a1638:	080601a4 	.word	0x080601a4

080a163c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <network_connect+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	685b      	ldr	r3, [r3, #4]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601c8 	.word	0x080601c8

080a164c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <network_connecting+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	689b      	ldr	r3, [r3, #8]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601c8 	.word	0x080601c8

080a165c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <network_disconnect+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	68db      	ldr	r3, [r3, #12]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601c8 	.word	0x080601c8

080a166c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <network_ready+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	691b      	ldr	r3, [r3, #16]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601c8 	.word	0x080601c8

080a167c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <network_on+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	695b      	ldr	r3, [r3, #20]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601c8 	.word	0x080601c8

080a168c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <network_off+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	699b      	ldr	r3, [r3, #24]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601c8 	.word	0x080601c8

080a169c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <network_listen+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	69db      	ldr	r3, [r3, #28]
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601c8 	.word	0x080601c8

080a16ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <network_listening+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6a1b      	ldr	r3, [r3, #32]
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601c8 	.word	0x080601c8

080a16bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <network_set_listen_timeout+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601c8 	.word	0x080601c8

080a16cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <network_get_listen_timeout+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601c8 	.word	0x080601c8

080a16dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <spark_process+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	689b      	ldr	r3, [r3, #8]
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601cc 	.word	0x080601cc

080a16ec <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <spark_cloud_flag_connect+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	68db      	ldr	r3, [r3, #12]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601cc 	.word	0x080601cc

080a16fc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <spark_cloud_flag_connected+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	695b      	ldr	r3, [r3, #20]
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601cc 	.word	0x080601cc

080a170c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <spark_send_event+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6a1b      	ldr	r3, [r3, #32]
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601cc 	.word	0x080601cc

080a171c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <spark_sync_time_pending+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601cc 	.word	0x080601cc

080a172c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601cc 	.word	0x080601cc

080a173c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <malloc+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	681b      	ldr	r3, [r3, #0]
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601a0 	.word	0x080601a0

080a174c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <free+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	685b      	ldr	r3, [r3, #4]
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601a0 	.word	0x080601a0

080a175c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <realloc+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	689b      	ldr	r3, [r3, #8]
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601a0 	.word	0x080601a0

080a176c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <siscanf+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	699b      	ldr	r3, [r3, #24]
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601a0 	.word	0x080601a0

080a177c <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <vsnprintf+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601a0 	.word	0x080601a0

080a178c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <abort+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601a0 	.word	0x080601a0

080a179c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <_malloc_r+0xc>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17a4:	9301      	str	r3, [sp, #4]
 80a17a6:	bd08      	pop	{r3, pc}
 80a17a8:	080601a0 	.word	0x080601a0

080a17ac <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <__errno+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601a0 	.word	0x080601a0

080a17bc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a17bc:	4770      	bx	lr

080a17be <_ZN8SPIClassD0Ev>:
 80a17be:	b510      	push	{r4, lr}
 80a17c0:	4604      	mov	r4, r0
 80a17c2:	2110      	movs	r1, #16
 80a17c4:	f001 fc4b 	bl	80a305e <_ZdlPvj>
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	bd10      	pop	{r4, pc}

080a17cc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a17cc:	b570      	push	{r4, r5, r6, lr}
 80a17ce:	4604      	mov	r4, r0
 80a17d0:	460e      	mov	r6, r1
 80a17d2:	4b07      	ldr	r3, [pc, #28]	; (80a17f0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a17d4:	2500      	movs	r5, #0
 80a17d6:	6003      	str	r3, [r0, #0]
 80a17d8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a17dc:	f7ff fdde 	bl	80a139c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a17e0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a17e2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a17e4:	f7ff fd92 	bl	80a130c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a17e8:	60a5      	str	r5, [r4, #8]
}
 80a17ea:	4620      	mov	r0, r4
 80a17ec:	bd70      	pop	{r4, r5, r6, pc}
 80a17ee:	bf00      	nop
 80a17f0:	080a6570 	.word	0x080a6570

080a17f4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a17f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a17f8:	7900      	ldrb	r0, [r0, #4]
 80a17fa:	f7ff bd77 	b.w	80a12ec <HAL_SPI_Begin>

080a17fe <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a17fe:	68c0      	ldr	r0, [r0, #12]
 80a1800:	f7ff bddc 	b.w	80a13bc <os_mutex_unlock>

080a1804 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1804:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1806:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1808:	6018      	str	r0, [r3, #0]
 80a180a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a180c:	6818      	ldr	r0, [r3, #0]
 80a180e:	b2e5      	uxtb	r5, r4
 80a1810:	4288      	cmp	r0, r1
 80a1812:	d906      	bls.n	80a1822 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1814:	3401      	adds	r4, #1
 80a1816:	2c08      	cmp	r4, #8
 80a1818:	d002      	beq.n	80a1820 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a181a:	0840      	lsrs	r0, r0, #1
 80a181c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a181e:	e7f5      	b.n	80a180c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1820:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1824:	5d5b      	ldrb	r3, [r3, r5]
 80a1826:	7013      	strb	r3, [r2, #0]
 80a1828:	bd30      	pop	{r4, r5, pc}
 80a182a:	bf00      	nop
 80a182c:	080a6578 	.word	0x080a6578

080a1830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a1830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1834:	4680      	mov	r8, r0
 80a1836:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a1838:	68c0      	ldr	r0, [r0, #12]
 80a183a:	460f      	mov	r7, r1
 80a183c:	f7ff fdb6 	bl	80a13ac <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a1840:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1844:	2214      	movs	r2, #20
 80a1846:	2100      	movs	r1, #0
 80a1848:	a809      	add	r0, sp, #36	; 0x24
 80a184a:	f004 f8a2 	bl	80a5992 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a184e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1850:	4620      	mov	r0, r4
 80a1852:	2200      	movs	r2, #0
 80a1854:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1856:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a185a:	f7ff fd67 	bl	80a132c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a185e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a1862:	b14c      	cbz	r4, 80a1878 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a1864:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a1868:	b92d      	cbnz	r5, 80a1876 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a186a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a186c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a1870:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a1874:	e003      	b.n	80a187e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a1876:	2400      	movs	r4, #0
 80a1878:	46a1      	mov	r9, r4
 80a187a:	4626      	mov	r6, r4
 80a187c:	2501      	movs	r5, #1
 80a187e:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1880:	b10d      	cbz	r5, 80a1886 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a1882:	2b00      	cmp	r3, #0
 80a1884:	d140      	bne.n	80a1908 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a1886:	429d      	cmp	r5, r3
 80a1888:	d10b      	bne.n	80a18a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a188a:	68ba      	ldr	r2, [r7, #8]
 80a188c:	42b2      	cmp	r2, r6
 80a188e:	d108      	bne.n	80a18a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1890:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1894:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a1898:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a189c:	89ba      	ldrh	r2, [r7, #12]
 80a189e:	4291      	cmp	r1, r2
 80a18a0:	d032      	beq.n	80a1908 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a18a2:	bb23      	cbnz	r3, 80a18ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a18a4:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a18a8:	f10d 020f 	add.w	r2, sp, #15
 80a18ac:	ab04      	add	r3, sp, #16
 80a18ae:	68b9      	ldr	r1, [r7, #8]
 80a18b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a18b2:	f7ff ffa7 	bl	80a1804 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a18b6:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a18b8:	b105      	cbz	r5, 80a18bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a18ba:	bb13      	cbnz	r3, 80a1902 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a18bc:	42ab      	cmp	r3, r5
 80a18be:	d009      	beq.n	80a18d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a18c0:	2100      	movs	r1, #0
 80a18c2:	7b3b      	ldrb	r3, [r7, #12]
 80a18c4:	9101      	str	r1, [sp, #4]
 80a18c6:	7b7c      	ldrb	r4, [r7, #13]
 80a18c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a18cc:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a18d0:	9400      	str	r4, [sp, #0]
 80a18d2:	e013      	b.n	80a18fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a18d4:	68bb      	ldr	r3, [r7, #8]
 80a18d6:	42b3      	cmp	r3, r6
 80a18d8:	d3f2      	bcc.n	80a18c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a18da:	f88d 9020 	strb.w	r9, [sp, #32]
 80a18de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a18e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a18e6:	89bb      	ldrh	r3, [r7, #12]
 80a18e8:	429a      	cmp	r2, r3
 80a18ea:	d1e9      	bne.n	80a18c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a18ec:	e009      	b.n	80a1902 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a18ee:	2300      	movs	r3, #0
 80a18f0:	461a      	mov	r2, r3
 80a18f2:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a18f6:	9301      	str	r3, [sp, #4]
 80a18f8:	9300      	str	r3, [sp, #0]
 80a18fa:	2101      	movs	r1, #1
 80a18fc:	f7ff fd1e 	bl	80a133c <HAL_SPI_Set_Settings>
 80a1900:	e002      	b.n	80a1908 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a1902:	9b04      	ldr	r3, [sp, #16]
 80a1904:	42b3      	cmp	r3, r6
 80a1906:	d1db      	bne.n	80a18c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a1908:	2000      	movs	r0, #0
 80a190a:	b00f      	add	sp, #60	; 0x3c
 80a190c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a1910 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1910:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1912:	7900      	ldrb	r0, [r0, #4]
 80a1914:	f7ff fcf2 	bl	80a12fc <HAL_SPI_Send_Receive_Data>
}
 80a1918:	b2c0      	uxtb	r0, r0
 80a191a:	bd08      	pop	{r3, pc}

080a191c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a191c:	7900      	ldrb	r0, [r0, #4]
 80a191e:	f7ff bcfd 	b.w	80a131c <HAL_SPI_Is_Enabled>
	...

080a1924 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80a1924:	b510      	push	{r4, lr}
 80a1926:	4604      	mov	r4, r0
 80a1928:	4608      	mov	r0, r1
 80a192a:	4611      	mov	r1, r2
 80a192c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80a192e:	2300      	movs	r3, #0
 80a1930:	f7ff fe46 	bl	80a15c0 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80a1934:	4b06      	ldr	r3, [pc, #24]	; (80a1950 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80a1936:	2200      	movs	r2, #0
 80a1938:	701a      	strb	r2, [r3, #0]
 80a193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a193e:	8058      	strh	r0, [r3, #2]
 80a1940:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	889b      	ldrh	r3, [r3, #4]
 80a1946:	6022      	str	r2, [r4, #0]
 80a1948:	80a3      	strh	r3, [r4, #4]
}
 80a194a:	4620      	mov	r0, r4
 80a194c:	bd10      	pop	{r4, pc}
 80a194e:	bf00      	nop
 80a1950:	20000136 	.word	0x20000136

080a1954 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a1954:	b510      	push	{r4, lr}
 80a1956:	2400      	movs	r4, #0
 80a1958:	7004      	strb	r4, [r0, #0]
 80a195a:	8044      	strh	r4, [r0, #2]
 80a195c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 80a1960:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 80a1962:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 80a1964:	dd07      	ble.n	80a1976 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 80a1966:	3901      	subs	r1, #1
 80a1968:	4299      	cmp	r1, r3
 80a196a:	d209      	bcs.n	80a1980 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 80a196c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80a1970:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 80a1972:	2301      	movs	r3, #1
 80a1974:	e001      	b.n	80a197a <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 80a1976:	d102      	bne.n	80a197e <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 80a1978:	2302      	movs	r3, #2
 80a197a:	7003      	strb	r3, [r0, #0]
 80a197c:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 80a197e:	8041      	strh	r1, [r0, #2]
    }
}
 80a1980:	bd10      	pop	{r4, pc}
	...

080a1984 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a1984:	b570      	push	{r4, r5, r6, lr}
 80a1986:	460d      	mov	r5, r1
 80a1988:	4616      	mov	r6, r2
 80a198a:	b086      	sub	sp, #24
 80a198c:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a198e:	2300      	movs	r3, #0
 80a1990:	9302      	str	r3, [sp, #8]
 80a1992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 80a1994:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 80a1996:	9301      	str	r3, [sp, #4]
 80a1998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a199a:	4631      	mov	r1, r6
 80a199c:	9300      	str	r3, [sp, #0]
 80a199e:	4628      	mov	r0, r5
 80a19a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a19a2:	f7ff fe41 	bl	80a1628 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 80a19a6:	4633      	mov	r3, r6
 80a19a8:	462a      	mov	r2, r5
 80a19aa:	4601      	mov	r1, r0
 80a19ac:	a804      	add	r0, sp, #16
 80a19ae:	f7ff ffd1 	bl	80a1954 <_ZN11SleepResultC1EiPKtj>
 80a19b2:	4b06      	ldr	r3, [pc, #24]	; (80a19cc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 80a19b4:	9804      	ldr	r0, [sp, #16]
 80a19b6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80a19ba:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 80a19bc:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 80a19be:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a19c0:	681a      	ldr	r2, [r3, #0]
 80a19c2:	889b      	ldrh	r3, [r3, #4]
 80a19c4:	6022      	str	r2, [r4, #0]
 80a19c6:	80a3      	strh	r3, [r4, #4]
}
 80a19c8:	b006      	add	sp, #24
 80a19ca:	bd70      	pop	{r4, r5, r6, pc}
 80a19cc:	20000136 	.word	0x20000136

080a19d0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a19d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a19d4:	4b03      	ldr	r3, [pc, #12]	; (80a19e4 <_GLOBAL__sub_I_System+0x14>)
 80a19d6:	2000      	movs	r0, #0
 80a19d8:	7018      	strb	r0, [r3, #0]
 80a19da:	8058      	strh	r0, [r3, #2]
 80a19dc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19de:	f7ff bddf 	b.w	80a15a0 <set_system_mode>
 80a19e2:	bf00      	nop
 80a19e4:	20000136 	.word	0x20000136

080a19e8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a19e8:	b510      	push	{r4, lr}
 80a19ea:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a19ec:	f004 f82f 	bl	80a5a4e <strlen>
 80a19f0:	3801      	subs	r0, #1
 80a19f2:	1823      	adds	r3, r4, r0
 80a19f4:	4620      	mov	r0, r4
	while(i<j){
 80a19f6:	4298      	cmp	r0, r3
 80a19f8:	d206      	bcs.n	80a1a08 <_Z11str_reversePc+0x20>
		c = *i;
 80a19fa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a19fc:	7819      	ldrb	r1, [r3, #0]
 80a19fe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1a02:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a1a06:	e7f6      	b.n	80a19f6 <_Z11str_reversePc+0xe>
 80a1a08:	bd10      	pop	{r4, pc}

080a1a0a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1a0a:	b570      	push	{r4, r5, r6, lr}
 80a1a0c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1a0e:	1e91      	subs	r1, r2, #2
 80a1a10:	2922      	cmp	r1, #34	; 0x22
 80a1a12:	d820      	bhi.n	80a1a56 <ultoa+0x4c>
 80a1a14:	4625      	mov	r5, r4
 80a1a16:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1a18:	b910      	cbnz	r0, 80a1a20 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a1a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1a1c:	2230      	movs	r2, #48	; 0x30
 80a1a1e:	e00e      	b.n	80a1a3e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1a20:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1a24:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1a28:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1a2a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1a2c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1a30:	bf94      	ite	ls
 80a1a32:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1a34:	3157      	addhi	r1, #87	; 0x57
 80a1a36:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a1a3a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1a3c:	e7eb      	b.n	80a1a16 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a3e:	4299      	cmp	r1, r3
 80a1a40:	d202      	bcs.n	80a1a48 <ultoa+0x3e>
            *ptr++ = '0';
 80a1a42:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a46:	e7fa      	b.n	80a1a3e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1a48:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1a4a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a1a4c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a1a4e:	f7ff ffcb 	bl	80a19e8 <_Z11str_reversePc>
	return buffer;
 80a1a52:	4620      	mov	r0, r4
 80a1a54:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1a56:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1a58:	bd70      	pop	{r4, r5, r6, pc}

080a1a5a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1a5a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1a5c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1a5e:	460c      	mov	r4, r1
 80a1a60:	4615      	mov	r5, r2
	if(a<0){
 80a1a62:	da0b      	bge.n	80a1a7c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1a68:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1a6c:	bf14      	ite	ne
 80a1a6e:	4258      	negne	r0, r3
 80a1a70:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1a72:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1a74:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a1a76:	462a      	mov	r2, r5
 80a1a78:	4419      	add	r1, r3
 80a1a7a:	e000      	b.n	80a1a7e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a1a7c:	2301      	movs	r3, #1
 80a1a7e:	f7ff ffc4 	bl	80a1a0a <ultoa>
	}
	return buffer;
}
 80a1a82:	4620      	mov	r0, r4
 80a1a84:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1a88 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a1a88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1a8c:	4680      	mov	r8, r0
 80a1a8e:	460d      	mov	r5, r1
 80a1a90:	4617      	mov	r7, r2
 80a1a92:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a1a94:	2200      	movs	r2, #0
 80a1a96:	2300      	movs	r3, #0
 80a1a98:	4640      	mov	r0, r8
 80a1a9a:	4629      	mov	r1, r5
 80a1a9c:	f003 f930 	bl	80a4d00 <__aeabi_dcmplt>
 80a1aa0:	b120      	cbz	r0, 80a1aac <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1aa2:	232d      	movs	r3, #45	; 0x2d
 80a1aa4:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a1aa6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a1aaa:	3601      	adds	r6, #1
 80a1aac:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1aae:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1ab0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1ab2:	b2d9      	uxtb	r1, r3
 80a1ab4:	428f      	cmp	r7, r1
 80a1ab6:	d902      	bls.n	80a1abe <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a1ab8:	4354      	muls	r4, r2
 80a1aba:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1abc:	e7f9      	b.n	80a1ab2 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a1abe:	4620      	mov	r0, r4
 80a1ac0:	f002 fe46 	bl	80a4750 <__aeabi_i2d>
 80a1ac4:	4642      	mov	r2, r8
 80a1ac6:	462b      	mov	r3, r5
 80a1ac8:	f002 fea8 	bl	80a481c <__aeabi_dmul>
 80a1acc:	4682      	mov	sl, r0
 80a1ace:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a1ad0:	f003 fcb2 	bl	80a5438 <__aeabi_d2ulz>
 80a1ad4:	4680      	mov	r8, r0
 80a1ad6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1ad8:	f002 fe6a 	bl	80a47b0 <__aeabi_ul2d>
 80a1adc:	4602      	mov	r2, r0
 80a1ade:	460b      	mov	r3, r1
 80a1ae0:	4650      	mov	r0, sl
 80a1ae2:	4659      	mov	r1, fp
 80a1ae4:	f002 fce6 	bl	80a44b4 <__aeabi_dsub>
 80a1ae8:	2200      	movs	r2, #0
 80a1aea:	4b17      	ldr	r3, [pc, #92]	; (80a1b48 <_Z4dtoadhPc+0xc0>)
 80a1aec:	f003 f91c 	bl	80a4d28 <__aeabi_dcmpge>
 80a1af0:	b118      	cbz	r0, 80a1afa <_Z4dtoadhPc+0x72>
        fixed++;
 80a1af2:	f118 0801 	adds.w	r8, r8, #1
 80a1af6:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1afa:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1afc:	4622      	mov	r2, r4
 80a1afe:	462b      	mov	r3, r5
 80a1b00:	4640      	mov	r0, r8
 80a1b02:	4649      	mov	r1, r9
 80a1b04:	f003 fc80 	bl	80a5408 <__aeabi_uldivmod>
 80a1b08:	2301      	movs	r3, #1
 80a1b0a:	220a      	movs	r2, #10
 80a1b0c:	4631      	mov	r1, r6
 80a1b0e:	f7ff ff7c 	bl	80a1a0a <ultoa>
    if (prec) {
 80a1b12:	b1af      	cbz	r7, 80a1b40 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a1b14:	4630      	mov	r0, r6
 80a1b16:	f003 ff9a 	bl	80a5a4e <strlen>
        *sout++ = '.';
 80a1b1a:	232e      	movs	r3, #46	; 0x2e
 80a1b1c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a1b1e:	3001      	adds	r0, #1
 80a1b20:	4406      	add	r6, r0
 80a1b22:	4622      	mov	r2, r4
 80a1b24:	462b      	mov	r3, r5
 80a1b26:	4640      	mov	r0, r8
 80a1b28:	4649      	mov	r1, r9
 80a1b2a:	f003 fc6d 	bl	80a5408 <__aeabi_uldivmod>
 80a1b2e:	463b      	mov	r3, r7
 80a1b30:	4610      	mov	r0, r2
 80a1b32:	4631      	mov	r1, r6
 80a1b34:	220a      	movs	r2, #10
    }
}
 80a1b36:	b001      	add	sp, #4
 80a1b38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a1b3c:	f7ff bf65 	b.w	80a1a0a <ultoa>
    }
}
 80a1b40:	b001      	add	sp, #4
 80a1b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1b46:	bf00      	nop
 80a1b48:	3fe00000 	.word	0x3fe00000

080a1b4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b4c:	b510      	push	{r4, lr}
 80a1b4e:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b50:	6800      	ldr	r0, [r0, #0]
 80a1b52:	f7ff fdfb 	bl	80a174c <free>
}
 80a1b56:	4620      	mov	r0, r4
 80a1b58:	bd10      	pop	{r4, pc}

080a1b5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b5a:	b510      	push	{r4, lr}
 80a1b5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b5e:	6800      	ldr	r0, [r0, #0]
 80a1b60:	b108      	cbz	r0, 80a1b66 <_ZN6String10invalidateEv+0xc>
 80a1b62:	f7ff fdf3 	bl	80a174c <free>
	buffer = NULL;
 80a1b66:	2300      	movs	r3, #0
 80a1b68:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1b6a:	60a3      	str	r3, [r4, #8]
 80a1b6c:	6063      	str	r3, [r4, #4]
 80a1b6e:	bd10      	pop	{r4, pc}

080a1b70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b70:	b538      	push	{r3, r4, r5, lr}
 80a1b72:	4604      	mov	r4, r0
 80a1b74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b76:	6800      	ldr	r0, [r0, #0]
 80a1b78:	3101      	adds	r1, #1
 80a1b7a:	f7ff fdef 	bl	80a175c <realloc>
	if (newbuffer) {
 80a1b7e:	b110      	cbz	r0, 80a1b86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1b80:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1b84:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1b86:	bd38      	pop	{r3, r4, r5, pc}

080a1b88 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1b88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1b8a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1b8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1b8e:	b113      	cbz	r3, 80a1b96 <_ZN6String7reserveEj+0xe>
 80a1b90:	6843      	ldr	r3, [r0, #4]
 80a1b92:	428b      	cmp	r3, r1
 80a1b94:	d207      	bcs.n	80a1ba6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1b96:	4620      	mov	r0, r4
 80a1b98:	f7ff ffea 	bl	80a1b70 <_ZN6String12changeBufferEj>
 80a1b9c:	b120      	cbz	r0, 80a1ba8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1b9e:	68a3      	ldr	r3, [r4, #8]
 80a1ba0:	b90b      	cbnz	r3, 80a1ba6 <_ZN6String7reserveEj+0x1e>
 80a1ba2:	6822      	ldr	r2, [r4, #0]
 80a1ba4:	7013      	strb	r3, [r2, #0]
 80a1ba6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1ba8:	bd10      	pop	{r4, pc}

080a1baa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1baa:	b570      	push	{r4, r5, r6, lr}
 80a1bac:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1bae:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1bb0:	4604      	mov	r4, r0
 80a1bb2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1bb4:	f7ff ffe8 	bl	80a1b88 <_ZN6String7reserveEj>
 80a1bb8:	b918      	cbnz	r0, 80a1bc2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1bba:	4620      	mov	r0, r4
 80a1bbc:	f7ff ffcd 	bl	80a1b5a <_ZN6String10invalidateEv>
		return *this;
 80a1bc0:	e009      	b.n	80a1bd6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1bc2:	462a      	mov	r2, r5
 80a1bc4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1bc6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1bc8:	6820      	ldr	r0, [r4, #0]
 80a1bca:	f003 fed7 	bl	80a597c <memcpy>
	buffer[len] = 0;
 80a1bce:	6822      	ldr	r2, [r4, #0]
 80a1bd0:	68a3      	ldr	r3, [r4, #8]
 80a1bd2:	2100      	movs	r1, #0
 80a1bd4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1bd6:	4620      	mov	r0, r4
 80a1bd8:	bd70      	pop	{r4, r5, r6, pc}

080a1bda <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1bda:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1bdc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1bde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1be0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1be2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1be4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1be6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1be8:	460d      	mov	r5, r1
 80a1bea:	b139      	cbz	r1, 80a1bfc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1bec:	4608      	mov	r0, r1
 80a1bee:	f003 ff2e 	bl	80a5a4e <strlen>
 80a1bf2:	4629      	mov	r1, r5
 80a1bf4:	4602      	mov	r2, r0
 80a1bf6:	4620      	mov	r0, r4
 80a1bf8:	f7ff ffd7 	bl	80a1baa <_ZN6String4copyEPKcj>
}
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	bd38      	pop	{r3, r4, r5, pc}

080a1c00 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1c00:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1c02:	b510      	push	{r4, lr}
 80a1c04:	460b      	mov	r3, r1
 80a1c06:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1c08:	d007      	beq.n	80a1c1a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1c0a:	6809      	ldr	r1, [r1, #0]
 80a1c0c:	b119      	cbz	r1, 80a1c16 <_ZN6StringaSERKS_+0x16>
 80a1c0e:	689a      	ldr	r2, [r3, #8]
 80a1c10:	f7ff ffcb 	bl	80a1baa <_ZN6String4copyEPKcj>
 80a1c14:	e001      	b.n	80a1c1a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1c16:	f7ff ffa0 	bl	80a1b5a <_ZN6String10invalidateEv>

	return *this;
}
 80a1c1a:	4620      	mov	r0, r4
 80a1c1c:	bd10      	pop	{r4, pc}

080a1c1e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1c1e:	b510      	push	{r4, lr}
 80a1c20:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c22:	2300      	movs	r3, #0
 80a1c24:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1c26:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1c28:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c2a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1c2c:	f7ff ffe8 	bl	80a1c00 <_ZN6StringaSERKS_>
}
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	bd10      	pop	{r4, pc}

080a1c34 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1c34:	b538      	push	{r3, r4, r5, lr}
 80a1c36:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1c38:	460c      	mov	r4, r1
 80a1c3a:	b141      	cbz	r1, 80a1c4e <_ZN6StringaSEPKc+0x1a>
 80a1c3c:	4608      	mov	r0, r1
 80a1c3e:	f003 ff06 	bl	80a5a4e <strlen>
 80a1c42:	4621      	mov	r1, r4
 80a1c44:	4602      	mov	r2, r0
 80a1c46:	4628      	mov	r0, r5
 80a1c48:	f7ff ffaf 	bl	80a1baa <_ZN6String4copyEPKcj>
 80a1c4c:	e001      	b.n	80a1c52 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1c4e:	f7ff ff84 	bl	80a1b5a <_ZN6String10invalidateEv>

	return *this;
}
 80a1c52:	4628      	mov	r0, r5
 80a1c54:	bd38      	pop	{r3, r4, r5, pc}

080a1c56 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1c56:	b510      	push	{r4, lr}
 80a1c58:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c5a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1c5c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c5e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1c60:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1c62:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1c64:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1c66:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a1c68:	a901      	add	r1, sp, #4
 80a1c6a:	f7ff fef6 	bl	80a1a5a <itoa>
	*this = buf;
 80a1c6e:	a901      	add	r1, sp, #4
 80a1c70:	4620      	mov	r0, r4
 80a1c72:	f7ff ffdf 	bl	80a1c34 <_ZN6StringaSEPKc>
}
 80a1c76:	4620      	mov	r0, r4
 80a1c78:	b00a      	add	sp, #40	; 0x28
 80a1c7a:	bd10      	pop	{r4, pc}

080a1c7c <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1c7c:	b530      	push	{r4, r5, lr}
 80a1c7e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c80:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1c82:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1c84:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1c86:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1c88:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1c8a:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a1c8c:	b2d5      	uxtb	r5, r2
 80a1c8e:	4608      	mov	r0, r1
 80a1c90:	f002 fd70 	bl	80a4774 <__aeabi_f2d>
 80a1c94:	ab01      	add	r3, sp, #4
 80a1c96:	462a      	mov	r2, r5
 80a1c98:	f7ff fef6 	bl	80a1a88 <_Z4dtoadhPc>
        *this = buf;
 80a1c9c:	a901      	add	r1, sp, #4
 80a1c9e:	4620      	mov	r0, r4
 80a1ca0:	f7ff ffc8 	bl	80a1c34 <_ZN6StringaSEPKc>
}
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	b00b      	add	sp, #44	; 0x2c
 80a1ca8:	bd30      	pop	{r4, r5, pc}

080a1caa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1caa:	b570      	push	{r4, r5, r6, lr}
 80a1cac:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1cae:	460e      	mov	r6, r1
 80a1cb0:	b909      	cbnz	r1, 80a1cb6 <_ZN6String6concatEPKcj+0xc>
 80a1cb2:	2000      	movs	r0, #0
 80a1cb4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1cb6:	b16a      	cbz	r2, 80a1cd4 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1cb8:	6883      	ldr	r3, [r0, #8]
 80a1cba:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a1cbc:	4629      	mov	r1, r5
 80a1cbe:	f7ff ff63 	bl	80a1b88 <_ZN6String7reserveEj>
 80a1cc2:	2800      	cmp	r0, #0
 80a1cc4:	d0f5      	beq.n	80a1cb2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1cc6:	6820      	ldr	r0, [r4, #0]
 80a1cc8:	68a3      	ldr	r3, [r4, #8]
 80a1cca:	4631      	mov	r1, r6
 80a1ccc:	4418      	add	r0, r3
 80a1cce:	f003 fe9b 	bl	80a5a08 <strcpy>
	len = newlen;
 80a1cd2:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1cd4:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1cd6:	bd70      	pop	{r4, r5, r6, pc}

080a1cd8 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a1cd8:	688a      	ldr	r2, [r1, #8]
 80a1cda:	6809      	ldr	r1, [r1, #0]
 80a1cdc:	f7ff bfe5 	b.w	80a1caa <_ZN6String6concatEPKcj>

080a1ce0 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a1ce0:	b538      	push	{r3, r4, r5, lr}
 80a1ce2:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a1ce4:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a1ce6:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a1ce8:	b141      	cbz	r1, 80a1cfc <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a1cea:	f003 feb0 	bl	80a5a4e <strlen>
 80a1cee:	4621      	mov	r1, r4
 80a1cf0:	4602      	mov	r2, r0
 80a1cf2:	4628      	mov	r0, r5
}
 80a1cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a1cf8:	f7ff bfd7 	b.w	80a1caa <_ZN6String6concatEPKcj>
}
 80a1cfc:	bd38      	pop	{r3, r4, r5, pc}

080a1cfe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1cfe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1d00:	688a      	ldr	r2, [r1, #8]
 80a1d02:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1d04:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1d06:	f7ff ffd0 	bl	80a1caa <_ZN6String6concatEPKcj>
 80a1d0a:	b910      	cbnz	r0, 80a1d12 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	f7ff ff24 	bl	80a1b5a <_ZN6String10invalidateEv>
	return a;
}
 80a1d12:	4620      	mov	r0, r4
 80a1d14:	bd10      	pop	{r4, pc}

080a1d16 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1d16:	b538      	push	{r3, r4, r5, lr}
 80a1d18:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1d1a:	460d      	mov	r5, r1
 80a1d1c:	b141      	cbz	r1, 80a1d30 <_ZplRK15StringSumHelperPKc+0x1a>
 80a1d1e:	4608      	mov	r0, r1
 80a1d20:	f003 fe95 	bl	80a5a4e <strlen>
 80a1d24:	4629      	mov	r1, r5
 80a1d26:	4602      	mov	r2, r0
 80a1d28:	4620      	mov	r0, r4
 80a1d2a:	f7ff ffbe 	bl	80a1caa <_ZN6String6concatEPKcj>
 80a1d2e:	b910      	cbnz	r0, 80a1d36 <_ZplRK15StringSumHelperPKc+0x20>
 80a1d30:	4620      	mov	r0, r4
 80a1d32:	f7ff ff12 	bl	80a1b5a <_ZN6String10invalidateEv>
	return a;
}
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	bd38      	pop	{r3, r4, r5, pc}

080a1d3a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d3c:	4606      	mov	r6, r0
 80a1d3e:	460d      	mov	r5, r1
 80a1d40:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1d42:	2400      	movs	r4, #0
  while (size--) {
 80a1d44:	42bd      	cmp	r5, r7
 80a1d46:	d00c      	beq.n	80a1d62 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1d48:	6833      	ldr	r3, [r6, #0]
 80a1d4a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1d4e:	689b      	ldr	r3, [r3, #8]
 80a1d50:	4630      	mov	r0, r6
 80a1d52:	4798      	blx	r3
     if (chunk>=0)
 80a1d54:	2800      	cmp	r0, #0
 80a1d56:	db01      	blt.n	80a1d5c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1d58:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1d5a:	e7f3      	b.n	80a1d44 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1d5c:	2c00      	cmp	r4, #0
 80a1d5e:	bf08      	it	eq
 80a1d60:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1d62:	4620      	mov	r0, r4
 80a1d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d66 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1d66:	b570      	push	{r4, r5, r6, lr}
 80a1d68:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1d6a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1d6c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1d6e:	b149      	cbz	r1, 80a1d84 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1d70:	f003 fe6d 	bl	80a5a4e <strlen>
 80a1d74:	682b      	ldr	r3, [r5, #0]
 80a1d76:	4602      	mov	r2, r0
 80a1d78:	4621      	mov	r1, r4
 80a1d7a:	4628      	mov	r0, r5
    }
 80a1d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1d80:	68db      	ldr	r3, [r3, #12]
 80a1d82:	4718      	bx	r3
    }
 80a1d84:	bd70      	pop	{r4, r5, r6, pc}

080a1d86 <_ZN5Print5printEPKc>:
 80a1d86:	b508      	push	{r3, lr}
 80a1d88:	f7ff ffed 	bl	80a1d66 <_ZN5Print5writeEPKc>
 80a1d8c:	bd08      	pop	{r3, pc}

080a1d8e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1d8e:	6803      	ldr	r3, [r0, #0]
 80a1d90:	689b      	ldr	r3, [r3, #8]
 80a1d92:	4718      	bx	r3

080a1d94 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1d94:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1d96:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1d98:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1d9a:	f7ff fff8 	bl	80a1d8e <_ZN5Print5printEc>
  n += print('\n');
 80a1d9e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1da0:	4604      	mov	r4, r0
  n += print('\n');
 80a1da2:	4628      	mov	r0, r5
 80a1da4:	f7ff fff3 	bl	80a1d8e <_ZN5Print5printEc>
  return n;
}
 80a1da8:	4420      	add	r0, r4
 80a1daa:	bd38      	pop	{r3, r4, r5, pc}

080a1dac <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1dac:	b538      	push	{r3, r4, r5, lr}
 80a1dae:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1db0:	f7ff ffd9 	bl	80a1d66 <_ZN5Print5writeEPKc>
 80a1db4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1db6:	4628      	mov	r0, r5
 80a1db8:	f7ff ffec 	bl	80a1d94 <_ZN5Print7printlnEv>
  return n;
}
 80a1dbc:	4420      	add	r0, r4
 80a1dbe:	bd38      	pop	{r3, r4, r5, pc}

080a1dc0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1dc0:	2a01      	cmp	r2, #1
 80a1dc2:	bf98      	it	ls
 80a1dc4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1dc6:	b530      	push	{r4, r5, lr}
 80a1dc8:	460b      	mov	r3, r1
 80a1dca:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1dcc:	2100      	movs	r1, #0
 80a1dce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1dd2:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1dd6:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1dda:	fb05 3312 	mls	r3, r5, r2, r3
 80a1dde:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1de0:	2b09      	cmp	r3, #9
 80a1de2:	bf94      	ite	ls
 80a1de4:	3330      	addls	r3, #48	; 0x30
 80a1de6:	3337      	addhi	r3, #55	; 0x37
 80a1de8:	b2db      	uxtb	r3, r3
 80a1dea:	4621      	mov	r1, r4
 80a1dec:	f804 3901 	strb.w	r3, [r4], #-1
 80a1df0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1df2:	2d00      	cmp	r5, #0
 80a1df4:	d1ef      	bne.n	80a1dd6 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1df6:	f7ff ffb6 	bl	80a1d66 <_ZN5Print5writeEPKc>
}
 80a1dfa:	b00b      	add	sp, #44	; 0x2c
 80a1dfc:	bd30      	pop	{r4, r5, pc}

080a1dfe <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1dfe:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1e00:	b922      	cbnz	r2, 80a1e0c <_ZN5Print5printEmi+0xe>
 80a1e02:	6803      	ldr	r3, [r0, #0]
 80a1e04:	b2c9      	uxtb	r1, r1
 80a1e06:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1e08:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1e0a:	4718      	bx	r3
  else return printNumber(n, base);
 80a1e0c:	b2d2      	uxtb	r2, r2
}
 80a1e0e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1e10:	f7ff bfd6 	b.w	80a1dc0 <_ZN5Print11printNumberEmh>

080a1e14 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1e14:	f7ff bff3 	b.w	80a1dfe <_ZN5Print5printEmi>

080a1e18 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e1c:	4607      	mov	r7, r0
 80a1e1e:	460e      	mov	r6, r1
  if (base == 0) {
 80a1e20:	4615      	mov	r5, r2
 80a1e22:	b92a      	cbnz	r2, 80a1e30 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1e28:	6803      	ldr	r3, [r0, #0]
 80a1e2a:	b2c9      	uxtb	r1, r1
 80a1e2c:	689b      	ldr	r3, [r3, #8]
 80a1e2e:	4718      	bx	r3
  } else if (base == 10) {
 80a1e30:	2a0a      	cmp	r2, #10
 80a1e32:	d102      	bne.n	80a1e3a <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1e34:	2900      	cmp	r1, #0
 80a1e36:	da01      	bge.n	80a1e3c <_ZN5Print5printEli+0x24>
 80a1e38:	e004      	b.n	80a1e44 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1e3a:	b2d2      	uxtb	r2, r2
  }
}
 80a1e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1e40:	f7ff bfbe 	b.w	80a1dc0 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1e44:	212d      	movs	r1, #45	; 0x2d
 80a1e46:	f7ff ffa2 	bl	80a1d8e <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1e4a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1e4c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1e4e:	4271      	negs	r1, r6
 80a1e50:	4638      	mov	r0, r7
 80a1e52:	f7ff ffb5 	bl	80a1dc0 <_ZN5Print11printNumberEmh>
 80a1e56:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1e5c <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1e5c:	f7ff bfdc 	b.w	80a1e18 <_ZN5Print5printEli>

080a1e60 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e64:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e66:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e68:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e6a:	4617      	mov	r7, r2
 80a1e6c:	461e      	mov	r6, r3
 80a1e6e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e72:	f002 ff6d 	bl	80a4d50 <__aeabi_dcmpun>
 80a1e76:	b108      	cbz	r0, 80a1e7c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e78:	4947      	ldr	r1, [pc, #284]	; (80a1f98 <_ZN5Print10printFloatEdh+0x138>)
 80a1e7a:	e012      	b.n	80a1ea2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1e7c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1e80:	f04f 32ff 	mov.w	r2, #4294967295
 80a1e84:	4b45      	ldr	r3, [pc, #276]	; (80a1f9c <_ZN5Print10printFloatEdh+0x13c>)
 80a1e86:	4638      	mov	r0, r7
 80a1e88:	4621      	mov	r1, r4
 80a1e8a:	f002 ff61 	bl	80a4d50 <__aeabi_dcmpun>
 80a1e8e:	b968      	cbnz	r0, 80a1eac <_ZN5Print10printFloatEdh+0x4c>
 80a1e90:	f04f 32ff 	mov.w	r2, #4294967295
 80a1e94:	4b41      	ldr	r3, [pc, #260]	; (80a1f9c <_ZN5Print10printFloatEdh+0x13c>)
 80a1e96:	4638      	mov	r0, r7
 80a1e98:	4621      	mov	r1, r4
 80a1e9a:	f002 ff3b 	bl	80a4d14 <__aeabi_dcmple>
 80a1e9e:	b928      	cbnz	r0, 80a1eac <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ea0:	493f      	ldr	r1, [pc, #252]	; (80a1fa0 <_ZN5Print10printFloatEdh+0x140>)
 80a1ea2:	4640      	mov	r0, r8
 80a1ea4:	f7ff ff5f 	bl	80a1d66 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1eac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1eb0:	4b3c      	ldr	r3, [pc, #240]	; (80a1fa4 <_ZN5Print10printFloatEdh+0x144>)
 80a1eb2:	4638      	mov	r0, r7
 80a1eb4:	4631      	mov	r1, r6
 80a1eb6:	f002 ff41 	bl	80a4d3c <__aeabi_dcmpgt>
 80a1eba:	b108      	cbz	r0, 80a1ec0 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ebc:	493a      	ldr	r1, [pc, #232]	; (80a1fa8 <_ZN5Print10printFloatEdh+0x148>)
 80a1ebe:	e7f0      	b.n	80a1ea2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1ec0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1ec4:	4b39      	ldr	r3, [pc, #228]	; (80a1fac <_ZN5Print10printFloatEdh+0x14c>)
 80a1ec6:	4638      	mov	r0, r7
 80a1ec8:	4631      	mov	r1, r6
 80a1eca:	f002 ff19 	bl	80a4d00 <__aeabi_dcmplt>
 80a1ece:	2800      	cmp	r0, #0
 80a1ed0:	d1f4      	bne.n	80a1ebc <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1ed2:	2200      	movs	r2, #0
 80a1ed4:	2300      	movs	r3, #0
 80a1ed6:	4638      	mov	r0, r7
 80a1ed8:	4631      	mov	r1, r6
 80a1eda:	f002 ff11 	bl	80a4d00 <__aeabi_dcmplt>
 80a1ede:	b138      	cbz	r0, 80a1ef0 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1ee0:	212d      	movs	r1, #45	; 0x2d
 80a1ee2:	4640      	mov	r0, r8
 80a1ee4:	f7ff ff53 	bl	80a1d8e <_ZN5Print5printEc>
     number = -number;
 80a1ee8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1eec:	4604      	mov	r4, r0
 80a1eee:	e000      	b.n	80a1ef2 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1ef0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1ef2:	492f      	ldr	r1, [pc, #188]	; (80a1fb0 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1ef4:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1ef8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1efa:	fa5f f389 	uxtb.w	r3, r9
 80a1efe:	429d      	cmp	r5, r3
 80a1f00:	d906      	bls.n	80a1f10 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1f02:	2200      	movs	r2, #0
 80a1f04:	4b2b      	ldr	r3, [pc, #172]	; (80a1fb4 <_ZN5Print10printFloatEdh+0x154>)
 80a1f06:	f002 fdb3 	bl	80a4a70 <__aeabi_ddiv>
 80a1f0a:	f109 0901 	add.w	r9, r9, #1
 80a1f0e:	e7f4      	b.n	80a1efa <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1f10:	463a      	mov	r2, r7
 80a1f12:	4633      	mov	r3, r6
 80a1f14:	f002 fad0 	bl	80a44b8 <__adddf3>
 80a1f18:	460f      	mov	r7, r1
 80a1f1a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1f1c:	f002 ff56 	bl	80a4dcc <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f20:	220a      	movs	r2, #10
 80a1f22:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1f24:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f26:	4640      	mov	r0, r8
 80a1f28:	f7ff ff4a 	bl	80a1dc0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1f2c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1f2e:	b37d      	cbz	r5, 80a1f90 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1f30:	4648      	mov	r0, r9
 80a1f32:	f002 fbfd 	bl	80a4730 <__aeabi_ui2d>
 80a1f36:	4602      	mov	r2, r0
 80a1f38:	460b      	mov	r3, r1
 80a1f3a:	4630      	mov	r0, r6
 80a1f3c:	4639      	mov	r1, r7
 80a1f3e:	f002 fab9 	bl	80a44b4 <__aeabi_dsub>
 80a1f42:	4606      	mov	r6, r0
 80a1f44:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f46:	4640      	mov	r0, r8
 80a1f48:	491b      	ldr	r1, [pc, #108]	; (80a1fb8 <_ZN5Print10printFloatEdh+0x158>)
 80a1f4a:	f7ff ff0c 	bl	80a1d66 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1f4e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1f50:	4b18      	ldr	r3, [pc, #96]	; (80a1fb4 <_ZN5Print10printFloatEdh+0x154>)
 80a1f52:	2200      	movs	r2, #0
 80a1f54:	4630      	mov	r0, r6
 80a1f56:	4639      	mov	r1, r7
 80a1f58:	f002 fc60 	bl	80a481c <__aeabi_dmul>
 80a1f5c:	460f      	mov	r7, r1
 80a1f5e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1f60:	f002 ff0c 	bl	80a4d7c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1f64:	220a      	movs	r2, #10
 80a1f66:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1f68:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1f6a:	4640      	mov	r0, r8
 80a1f6c:	f7ff ff54 	bl	80a1e18 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1f70:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1f72:	4648      	mov	r0, r9
 80a1f74:	f002 fbec 	bl	80a4750 <__aeabi_i2d>
 80a1f78:	4602      	mov	r2, r0
 80a1f7a:	460b      	mov	r3, r1
 80a1f7c:	4630      	mov	r0, r6
 80a1f7e:	4639      	mov	r1, r7
 80a1f80:	f002 fa98 	bl	80a44b4 <__aeabi_dsub>
 80a1f84:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1f86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1f8a:	4606      	mov	r6, r0
 80a1f8c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1f8e:	d1df      	bne.n	80a1f50 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1f90:	4620      	mov	r0, r4
 80a1f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1f96:	bf00      	nop
 80a1f98:	080a6580 	.word	0x080a6580
 80a1f9c:	7fefffff 	.word	0x7fefffff
 80a1fa0:	080a6588 	.word	0x080a6588
 80a1fa4:	41efffff 	.word	0x41efffff
 80a1fa8:	080a6584 	.word	0x080a6584
 80a1fac:	c1efffff 	.word	0xc1efffff
 80a1fb0:	3fe00000 	.word	0x3fe00000
 80a1fb4:	40240000 	.word	0x40240000
 80a1fb8:	080a631f 	.word	0x080a631f

080a1fbc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1fbc:	f89d 1000 	ldrb.w	r1, [sp]
 80a1fc0:	9100      	str	r1, [sp, #0]
 80a1fc2:	f7ff bf4d 	b.w	80a1e60 <_ZN5Print10printFloatEdh>

080a1fc6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1fc6:	b40c      	push	{r2, r3}
 80a1fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1fcc:	b087      	sub	sp, #28
 80a1fce:	af00      	add	r7, sp, #0
 80a1fd0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1fd4:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1fd8:	4605      	mov	r5, r0
 80a1fda:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1fdc:	4623      	mov	r3, r4
 80a1fde:	464a      	mov	r2, r9
 80a1fe0:	2114      	movs	r1, #20
 80a1fe2:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1fe4:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1fe6:	f7ff fbc9 	bl	80a177c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1fea:	2813      	cmp	r0, #19
 80a1fec:	d805      	bhi.n	80a1ffa <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1fee:	1d39      	adds	r1, r7, #4
 80a1ff0:	4628      	mov	r0, r5
 80a1ff2:	f7ff feb8 	bl	80a1d66 <_ZN5Print5writeEPKc>
 80a1ff6:	4604      	mov	r4, r0
 80a1ff8:	e013      	b.n	80a2022 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1ffa:	f100 0308 	add.w	r3, r0, #8
 80a1ffe:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2002:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2004:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2008:	1c41      	adds	r1, r0, #1
 80a200a:	4623      	mov	r3, r4
 80a200c:	464a      	mov	r2, r9
 80a200e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a2010:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2012:	f7ff fbb3 	bl	80a177c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2016:	4669      	mov	r1, sp
 80a2018:	4628      	mov	r0, r5
 80a201a:	f7ff fea4 	bl	80a1d66 <_ZN5Print5writeEPKc>
 80a201e:	4604      	mov	r4, r0
 80a2020:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2022:	b11e      	cbz	r6, 80a202c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2024:	4628      	mov	r0, r5
 80a2026:	f7ff feb5 	bl	80a1d94 <_ZN5Print7printlnEv>
 80a202a:	4404      	add	r4, r0
    return n;
}
 80a202c:	4620      	mov	r0, r4
 80a202e:	371c      	adds	r7, #28
 80a2030:	46bd      	mov	sp, r7
 80a2032:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2036:	b002      	add	sp, #8
 80a2038:	4770      	bx	lr

080a203a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a203a:	2300      	movs	r3, #0
 80a203c:	461a      	mov	r2, r3
 80a203e:	4619      	mov	r1, r3
 80a2040:	6840      	ldr	r0, [r0, #4]
 80a2042:	f7ff bb1b 	b.w	80a167c <network_on>

080a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2046:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a2048:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a204a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a204c:	b17c      	cbz	r4, 80a206e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a204e:	6863      	ldr	r3, [r4, #4]
 80a2050:	3b01      	subs	r3, #1
 80a2052:	6063      	str	r3, [r4, #4]
 80a2054:	b95b      	cbnz	r3, 80a206e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a2056:	6823      	ldr	r3, [r4, #0]
 80a2058:	4620      	mov	r0, r4
 80a205a:	689b      	ldr	r3, [r3, #8]
 80a205c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a205e:	68a3      	ldr	r3, [r4, #8]
 80a2060:	3b01      	subs	r3, #1
 80a2062:	60a3      	str	r3, [r4, #8]
 80a2064:	b91b      	cbnz	r3, 80a206e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a2066:	6823      	ldr	r3, [r4, #0]
 80a2068:	4620      	mov	r0, r4
 80a206a:	68db      	ldr	r3, [r3, #12]
 80a206c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a206e:	4628      	mov	r0, r5
 80a2070:	bd38      	pop	{r3, r4, r5, pc}

080a2072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2072:	680b      	ldr	r3, [r1, #0]
 80a2074:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2076:	b113      	cbz	r3, 80a207e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2078:	685a      	ldr	r2, [r3, #4]
 80a207a:	3201      	adds	r2, #1
 80a207c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a207e:	4770      	bx	lr

080a2080 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2080:	4a01      	ldr	r2, [pc, #4]	; (80a2088 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2082:	4b02      	ldr	r3, [pc, #8]	; (80a208c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2084:	601a      	str	r2, [r3, #0]
 80a2086:	4770      	bx	lr
 80a2088:	080a6602 	.word	0x080a6602
 80a208c:	2000013c 	.word	0x2000013c

080a2090 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2090:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2092:	4b14      	ldr	r3, [pc, #80]	; (80a20e4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2094:	4f14      	ldr	r7, [pc, #80]	; (80a20e8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2096:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a2098:	4b14      	ldr	r3, [pc, #80]	; (80a20ec <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a209a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a209c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a209e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a20a0:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a20a2:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a20a4:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a20a6:	d01b      	beq.n	80a20e0 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a20a8:	a80a      	add	r0, sp, #40	; 0x28
 80a20aa:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a20ae:	f003 fb6d 	bl	80a578c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a20b2:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a20b4:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a20b6:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a20b8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a20bc:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a20be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a20c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a20c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a20c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a20c6:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a20ca:	4c09      	ldr	r4, [pc, #36]	; (80a20f0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a20cc:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a20d0:	ad01      	add	r5, sp, #4
 80a20d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a20d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a20d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a20d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a20da:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a20dc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a20e0:	b00b      	add	sp, #44	; 0x2c
 80a20e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a20e4:	20000170 	.word	0x20000170
 80a20e8:	2000016c 	.word	0x2000016c
 80a20ec:	20000168 	.word	0x20000168
 80a20f0:	20000140 	.word	0x20000140

080a20f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a20f4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a20f6:	2000      	movs	r0, #0
 80a20f8:	f7ff fb10 	bl	80a171c <spark_sync_time_pending>
 80a20fc:	b128      	cbz	r0, 80a210a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a20fe:	f7ff fafd 	bl	80a16fc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2102:	f080 0001 	eor.w	r0, r0, #1
 80a2106:	b2c0      	uxtb	r0, r0
 80a2108:	bd08      	pop	{r3, pc}
 80a210a:	2001      	movs	r0, #1
    }
 80a210c:	bd08      	pop	{r3, pc}
	...

080a2110 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2110:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2112:	f7ff ffbd 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a2116:	4b02      	ldr	r3, [pc, #8]	; (80a2120 <_ZN9TimeClass5monthEl+0x10>)
 80a2118:	6918      	ldr	r0, [r3, #16]
}
 80a211a:	3001      	adds	r0, #1
 80a211c:	bd08      	pop	{r3, pc}
 80a211e:	bf00      	nop
 80a2120:	20000140 	.word	0x20000140

080a2124 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2124:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2126:	2000      	movs	r0, #0
 80a2128:	f7ff f928 	bl	80a137c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a212c:	4604      	mov	r4, r0
 80a212e:	b968      	cbnz	r0, 80a214c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2130:	f7ff fa2e 	bl	80a1590 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2134:	2801      	cmp	r0, #1
 80a2136:	d10b      	bne.n	80a2150 <_ZN9TimeClass7isValidEv+0x2c>
 80a2138:	4620      	mov	r0, r4
 80a213a:	f7ff fa59 	bl	80a15f0 <system_thread_get_state>
 80a213e:	b938      	cbnz	r0, 80a2150 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2140:	f7ff ffd8 	bl	80a20f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2144:	b930      	cbnz	r0, 80a2154 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2146:	f7ff fac9 	bl	80a16dc <spark_process>
 80a214a:	e7f9      	b.n	80a2140 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a214c:	2001      	movs	r0, #1
 80a214e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2150:	2000      	movs	r0, #0
 80a2152:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2154:	f7ff ffce 	bl	80a20f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2158:	2000      	movs	r0, #0
 80a215a:	f7ff f90f 	bl	80a137c <HAL_RTC_Time_Is_Valid>
 80a215e:	3000      	adds	r0, #0
 80a2160:	bf18      	it	ne
 80a2162:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2164:	bd10      	pop	{r4, pc}

080a2166 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2166:	b508      	push	{r3, lr}
    (void)isValid();
 80a2168:	f7ff ffdc 	bl	80a2124 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a216c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2170:	f7ff b8fc 	b.w	80a136c <HAL_RTC_Get_UnixTime>

080a2174 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a2174:	b508      	push	{r3, lr}
	return hour(now());
 80a2176:	f7ff fff6 	bl	80a2166 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a217a:	f7ff ff89 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a217e:	4b01      	ldr	r3, [pc, #4]	; (80a2184 <_ZN9TimeClass4hourEv+0x10>)
 80a2180:	6898      	ldr	r0, [r3, #8]
 80a2182:	bd08      	pop	{r3, pc}
 80a2184:	20000140 	.word	0x20000140

080a2188 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a2188:	b508      	push	{r3, lr}
	return minute(now());
 80a218a:	f7ff ffec 	bl	80a2166 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a218e:	f7ff ff7f 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a2192:	4b01      	ldr	r3, [pc, #4]	; (80a2198 <_ZN9TimeClass6minuteEv+0x10>)
 80a2194:	6858      	ldr	r0, [r3, #4]
 80a2196:	bd08      	pop	{r3, pc}
 80a2198:	20000140 	.word	0x20000140

080a219c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a219c:	b508      	push	{r3, lr}
	return second(now());
 80a219e:	f7ff ffe2 	bl	80a2166 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a21a2:	f7ff ff75 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a21a6:	4b01      	ldr	r3, [pc, #4]	; (80a21ac <_ZN9TimeClass6secondEv+0x10>)
 80a21a8:	6818      	ldr	r0, [r3, #0]
 80a21aa:	bd08      	pop	{r3, pc}
 80a21ac:	20000140 	.word	0x20000140

080a21b0 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a21b0:	b508      	push	{r3, lr}
	return day(now());
 80a21b2:	f7ff ffd8 	bl	80a2166 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a21b6:	f7ff ff6b 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a21ba:	4b01      	ldr	r3, [pc, #4]	; (80a21c0 <_ZN9TimeClass3dayEv+0x10>)
 80a21bc:	68d8      	ldr	r0, [r3, #12]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	20000140 	.word	0x20000140

080a21c4 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a21c4:	b508      	push	{r3, lr}
	return month(now());
 80a21c6:	f7ff ffce 	bl	80a2166 <_ZN9TimeClass3nowEv>
}
 80a21ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a21ce:	f7ff bf9f 	b.w	80a2110 <_ZN9TimeClass5monthEl>
	...

080a21d4 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80a21d4:	b508      	push	{r3, lr}
	return year(now());
 80a21d6:	f7ff ffc6 	bl	80a2166 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a21da:	f7ff ff59 	bl	80a2090 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80a21de:	4b01      	ldr	r3, [pc, #4]	; (80a21e4 <_ZN9TimeClass4yearEv+0x10>)
 80a21e0:	6958      	ldr	r0, [r3, #20]
 80a21e2:	bd08      	pop	{r3, pc}
 80a21e4:	20000140 	.word	0x20000140

080a21e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a21e8:	4b02      	ldr	r3, [pc, #8]	; (80a21f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a21ea:	681a      	ldr	r2, [r3, #0]
 80a21ec:	4b02      	ldr	r3, [pc, #8]	; (80a21f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a21ee:	601a      	str	r2, [r3, #0]
 80a21f0:	4770      	bx	lr
 80a21f2:	bf00      	nop
 80a21f4:	2000000c 	.word	0x2000000c
 80a21f8:	20000164 	.word	0x20000164

080a21fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a21fc:	2100      	movs	r1, #0
 80a21fe:	f7ff b9d7 	b.w	80a15b0 <system_delay_ms>

080a2202 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2202:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2204:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2206:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2208:	b113      	cbz	r3, 80a2210 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a220a:	2203      	movs	r2, #3
 80a220c:	4601      	mov	r1, r0
 80a220e:	4798      	blx	r3
    }
 80a2210:	4620      	mov	r0, r4
 80a2212:	bd10      	pop	{r4, pc}

080a2214 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2214:	b510      	push	{r4, lr}
 80a2216:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2218:	f7ff fff3 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
 80a221c:	4620      	mov	r0, r4
 80a221e:	bd10      	pop	{r4, pc}

080a2220 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a2220:	b513      	push	{r0, r1, r4, lr}
 80a2222:	460b      	mov	r3, r1
 80a2224:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2226:	c803      	ldmia	r0, {r0, r1}
 80a2228:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a222c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2230:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2234:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a2238:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a223c:	b002      	add	sp, #8
 80a223e:	bd10      	pop	{r4, pc}

080a2240 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2240:	4803      	ldr	r0, [pc, #12]	; (80a2250 <_GLOBAL__sub_I_RGB+0x10>)
 80a2242:	2300      	movs	r3, #0
 80a2244:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2246:	4a03      	ldr	r2, [pc, #12]	; (80a2254 <_GLOBAL__sub_I_RGB+0x14>)
 80a2248:	4903      	ldr	r1, [pc, #12]	; (80a2258 <_GLOBAL__sub_I_RGB+0x18>)
 80a224a:	f000 bf03 	b.w	80a3054 <__aeabi_atexit>
 80a224e:	bf00      	nop
 80a2250:	20000174 	.word	0x20000174
 80a2254:	200000c8 	.word	0x200000c8
 80a2258:	080a2215 	.word	0x080a2215

080a225c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a225c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a225e:	4b14      	ldr	r3, [pc, #80]	; (80a22b0 <serialEventRun+0x54>)
 80a2260:	b133      	cbz	r3, 80a2270 <serialEventRun+0x14>
 80a2262:	f000 fc21 	bl	80a2aa8 <_Z16_fetch_usbserialv>
 80a2266:	6803      	ldr	r3, [r0, #0]
 80a2268:	691b      	ldr	r3, [r3, #16]
 80a226a:	4798      	blx	r3
 80a226c:	2800      	cmp	r0, #0
 80a226e:	dc16      	bgt.n	80a229e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2270:	4b10      	ldr	r3, [pc, #64]	; (80a22b4 <serialEventRun+0x58>)
 80a2272:	b133      	cbz	r3, 80a2282 <serialEventRun+0x26>
 80a2274:	f000 fcc8 	bl	80a2c08 <_Z22__fetch_global_Serial1v>
 80a2278:	6803      	ldr	r3, [r0, #0]
 80a227a:	691b      	ldr	r3, [r3, #16]
 80a227c:	4798      	blx	r3
 80a227e:	2800      	cmp	r0, #0
 80a2280:	dc10      	bgt.n	80a22a4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2282:	4b0d      	ldr	r3, [pc, #52]	; (80a22b8 <serialEventRun+0x5c>)
 80a2284:	b10b      	cbz	r3, 80a228a <serialEventRun+0x2e>
 80a2286:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a228a:	4b0c      	ldr	r3, [pc, #48]	; (80a22bc <serialEventRun+0x60>)
 80a228c:	b17b      	cbz	r3, 80a22ae <serialEventRun+0x52>
 80a228e:	f000 fc39 	bl	80a2b04 <_Z17_fetch_usbserial1v>
 80a2292:	6803      	ldr	r3, [r0, #0]
 80a2294:	691b      	ldr	r3, [r3, #16]
 80a2296:	4798      	blx	r3
 80a2298:	2800      	cmp	r0, #0
 80a229a:	dc06      	bgt.n	80a22aa <serialEventRun+0x4e>
 80a229c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a229e:	f3af 8000 	nop.w
 80a22a2:	e7e5      	b.n	80a2270 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22a4:	f3af 8000 	nop.w
 80a22a8:	e7eb      	b.n	80a2282 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22aa:	f3af 8000 	nop.w
 80a22ae:	bd08      	pop	{r3, pc}
	...

080a22c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22c0:	b508      	push	{r3, lr}
	serialEventRun();
 80a22c2:	f7ff ffcb 	bl	80a225c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22c6:	f7ff f849 	bl	80a135c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22ca:	4b01      	ldr	r3, [pc, #4]	; (80a22d0 <_post_loop+0x10>)
 80a22cc:	6018      	str	r0, [r3, #0]
 80a22ce:	bd08      	pop	{r3, pc}
 80a22d0:	2000020c 	.word	0x2000020c

080a22d4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22d4:	4802      	ldr	r0, [pc, #8]	; (80a22e0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a22d6:	4a03      	ldr	r2, [pc, #12]	; (80a22e4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a22d8:	4903      	ldr	r1, [pc, #12]	; (80a22e8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a22da:	1a12      	subs	r2, r2, r0
 80a22dc:	f003 bb4e 	b.w	80a597c <memcpy>
 80a22e0:	40024000 	.word	0x40024000
 80a22e4:	40024008 	.word	0x40024008
 80a22e8:	080a6a18 	.word	0x080a6a18

080a22ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a22ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22ee:	2300      	movs	r3, #0
 80a22f0:	9300      	str	r3, [sp, #0]
 80a22f2:	461a      	mov	r2, r3
 80a22f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a22f8:	f7ff f98c 	bl	80a1614 <system_ctrl_set_result>
}
 80a22fc:	b003      	add	sp, #12
 80a22fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2304 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2304:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2306:	8843      	ldrh	r3, [r0, #2]
 80a2308:	2b0a      	cmp	r3, #10
 80a230a:	d008      	beq.n	80a231e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a230c:	2b50      	cmp	r3, #80	; 0x50
 80a230e:	d109      	bne.n	80a2324 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2310:	4b09      	ldr	r3, [pc, #36]	; (80a2338 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2312:	681b      	ldr	r3, [r3, #0]
 80a2314:	b13b      	cbz	r3, 80a2326 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2316:	b003      	add	sp, #12
 80a2318:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a231c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a231e:	f7ff ffe5 	bl	80a22ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2322:	e006      	b.n	80a2332 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2324:	2300      	movs	r3, #0
 80a2326:	9300      	str	r3, [sp, #0]
 80a2328:	461a      	mov	r2, r3
 80a232a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a232e:	f7ff f971 	bl	80a1614 <system_ctrl_set_result>
        break;
    }
}
 80a2332:	b003      	add	sp, #12
 80a2334:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2338:	20000184 	.word	0x20000184

080a233c <module_user_init_hook>:

void module_user_init_hook()
{
 80a233c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a233e:	4c10      	ldr	r4, [pc, #64]	; (80a2380 <module_user_init_hook+0x44>)
 80a2340:	4d10      	ldr	r5, [pc, #64]	; (80a2384 <module_user_init_hook+0x48>)
 80a2342:	6823      	ldr	r3, [r4, #0]
 80a2344:	42ab      	cmp	r3, r5
 80a2346:	4b10      	ldr	r3, [pc, #64]	; (80a2388 <module_user_init_hook+0x4c>)
 80a2348:	bf0c      	ite	eq
 80a234a:	2201      	moveq	r2, #1
 80a234c:	2200      	movne	r2, #0
 80a234e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2350:	d002      	beq.n	80a2358 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2352:	f7ff ffbf 	bl	80a22d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2356:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2358:	f7fe fff8 	bl	80a134c <HAL_RNG_GetRandomNumber>
 80a235c:	4604      	mov	r4, r0
    srand(seed);
 80a235e:	f003 fb21 	bl	80a59a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2362:	4b0a      	ldr	r3, [pc, #40]	; (80a238c <module_user_init_hook+0x50>)
 80a2364:	b113      	cbz	r3, 80a236c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2366:	4620      	mov	r0, r4
 80a2368:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a236c:	2100      	movs	r1, #0
 80a236e:	4807      	ldr	r0, [pc, #28]	; (80a238c <module_user_init_hook+0x50>)
 80a2370:	f7ff f9dc 	bl	80a172c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2378:	2100      	movs	r1, #0
 80a237a:	4805      	ldr	r0, [pc, #20]	; (80a2390 <module_user_init_hook+0x54>)
 80a237c:	f7ff b940 	b.w	80a1600 <system_ctrl_set_app_request_handler>
 80a2380:	40024004 	.word	0x40024004
 80a2384:	9a271c1e 	.word	0x9a271c1e
 80a2388:	20000188 	.word	0x20000188
 80a238c:	00000000 	.word	0x00000000
 80a2390:	080a2305 	.word	0x080a2305

080a2394 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2394:	4770      	bx	lr

080a2396 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2396:	2000      	movs	r0, #0
 80a2398:	4770      	bx	lr

080a239a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a239a:	b510      	push	{r4, lr}
 80a239c:	4604      	mov	r4, r0
 80a239e:	2110      	movs	r1, #16
 80a23a0:	f000 fe5d 	bl	80a305e <_ZdlPvj>
 80a23a4:	4620      	mov	r0, r4
 80a23a6:	bd10      	pop	{r4, pc}

080a23a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a23a8:	b508      	push	{r3, lr}
      { delete this; }
 80a23aa:	b108      	cbz	r0, 80a23b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a23ac:	f7ff fff5 	bl	80a239a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a23b0:	bd08      	pop	{r3, pc}

080a23b2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a23b2:	2200      	movs	r2, #0
 80a23b4:	6002      	str	r2, [r0, #0]
 80a23b6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a23ba:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a23bc:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a23be:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a23c2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a23c4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a23c6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a23c8:	680c      	ldr	r4, [r1, #0]
 80a23ca:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a23cc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a23ce:	bd10      	pop	{r4, pc}

080a23d0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a23d0:	b510      	push	{r4, lr}
 80a23d2:	4604      	mov	r4, r0
    free((void*)msg_);
 80a23d4:	6800      	ldr	r0, [r0, #0]
 80a23d6:	f7ff f9b9 	bl	80a174c <free>
}
 80a23da:	4620      	mov	r0, r4
 80a23dc:	bd10      	pop	{r4, pc}

080a23de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a23de:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a23e0:	68c4      	ldr	r4, [r0, #12]
 80a23e2:	b1f4      	cbz	r4, 80a2422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a23e4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a23e6:	2b02      	cmp	r3, #2
 80a23e8:	d103      	bne.n	80a23f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a23ea:	f104 000c 	add.w	r0, r4, #12
 80a23ee:	f7ff ffef 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a23f2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a23f4:	b135      	cbz	r5, 80a2404 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a23f6:	4628      	mov	r0, r5
 80a23f8:	f7ff ff03 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
 80a23fc:	2110      	movs	r1, #16
 80a23fe:	4628      	mov	r0, r5
 80a2400:	f000 fe2d 	bl	80a305e <_ZdlPvj>
 80a2404:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2406:	b135      	cbz	r5, 80a2416 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2408:	4628      	mov	r0, r5
 80a240a:	f7ff fefa 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
 80a240e:	2110      	movs	r1, #16
 80a2410:	4628      	mov	r0, r5
 80a2412:	f000 fe24 	bl	80a305e <_ZdlPvj>
 80a2416:	4620      	mov	r0, r4
 80a2418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a241c:	2114      	movs	r1, #20
 80a241e:	f000 be1e 	b.w	80a305e <_ZdlPvj>
 80a2422:	bd38      	pop	{r3, r4, r5, pc}

080a2424 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2424:	b513      	push	{r0, r1, r4, lr}
 80a2426:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2428:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a242c:	2300      	movs	r3, #0
 80a242e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2430:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2432:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2434:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2436:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2438:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a243a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a243c:	f7ff fe03 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2440:	4620      	mov	r0, r4
 80a2442:	b002      	add	sp, #8
 80a2444:	bd10      	pop	{r4, pc}

080a2446 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2448:	460c      	mov	r4, r1
 80a244a:	4606      	mov	r6, r0
 80a244c:	460f      	mov	r7, r1
 80a244e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2452:	ad02      	add	r5, sp, #8
 80a2454:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2458:	4621      	mov	r1, r4
 80a245a:	a801      	add	r0, sp, #4
 80a245c:	f7ff fe09 	bl	80a2072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2460:	4629      	mov	r1, r5
 80a2462:	4630      	mov	r0, r6
 80a2464:	f7ff ffde 	bl	80a2424 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2468:	a801      	add	r0, sp, #4
 80a246a:	f7ff fdec 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a246e:	4620      	mov	r0, r4
 80a2470:	f7ff fde9 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2474:	4638      	mov	r0, r7
 80a2476:	2108      	movs	r1, #8
 80a2478:	f000 fdf1 	bl	80a305e <_ZdlPvj>
        return p;
    }
 80a247c:	4630      	mov	r0, r6
 80a247e:	b003      	add	sp, #12
 80a2480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2484:	b538      	push	{r3, r4, r5, lr}
 80a2486:	2300      	movs	r3, #0
 80a2488:	4604      	mov	r4, r0
 80a248a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a248c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a248e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2490:	f7fd fe05 	bl	80a009e <_Znwj>
 80a2494:	b128      	cbz	r0, 80a24a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2496:	2301      	movs	r3, #1
 80a2498:	6043      	str	r3, [r0, #4]
 80a249a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a249c:	4b02      	ldr	r3, [pc, #8]	; (80a24a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a249e:	60c5      	str	r5, [r0, #12]
 80a24a0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a24a2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a24a4:	4620      	mov	r0, r4
 80a24a6:	bd38      	pop	{r3, r4, r5, pc}
 80a24a8:	080a669c 	.word	0x080a669c

080a24ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a24ac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a24ae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a24b0:	b90a      	cbnz	r2, 80a24b6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a24b2:	f000 fdd6 	bl	80a3062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a24b6:	68c3      	ldr	r3, [r0, #12]
    }
 80a24b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a24bc:	4718      	bx	r3

080a24be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a24be:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a24c0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a24c2:	f100 0110 	add.w	r1, r0, #16
 80a24c6:	f7ff fff1 	bl	80a24ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a24ca:	bd08      	pop	{r3, pc}

080a24cc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a24cc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a24ce:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a24d0:	b90a      	cbnz	r2, 80a24d6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a24d2:	f000 fdc6 	bl	80a3062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a24d6:	68c3      	ldr	r3, [r0, #12]
    }
 80a24d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a24dc:	4718      	bx	r3

080a24de <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a24de:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a24e0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a24e2:	f100 0110 	add.w	r1, r0, #16
 80a24e6:	f7ff fff1 	bl	80a24cc <_ZNKSt8functionIFvRKbEEclES1_>
 80a24ea:	bd08      	pop	{r3, pc}

080a24ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a24ec:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a24ee:	2300      	movs	r3, #0
 80a24f0:	6083      	str	r3, [r0, #8]
 80a24f2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a24f4:	4604      	mov	r4, r0
 80a24f6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a24f8:	b12b      	cbz	r3, 80a2506 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a24fa:	2202      	movs	r2, #2
 80a24fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a24fe:	68eb      	ldr	r3, [r5, #12]
 80a2500:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2502:	68ab      	ldr	r3, [r5, #8]
 80a2504:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2506:	4620      	mov	r0, r4
 80a2508:	bd38      	pop	{r3, r4, r5, pc}
	...

080a250c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a250e:	b089      	sub	sp, #36	; 0x24
 80a2510:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2512:	4668      	mov	r0, sp
 80a2514:	f7ff ff4d 	bl	80a23b2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2518:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a251c:	2300      	movs	r3, #0
 80a251e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2522:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2526:	2b00      	cmp	r3, #0
 80a2528:	d103      	bne.n	80a2532 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a252a:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a252e:	2900      	cmp	r1, #0
 80a2530:	d1f7      	bne.n	80a2522 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2532:	d002      	beq.n	80a253a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2534:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2538:	e063      	b.n	80a2602 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a253a:	f114 050c 	adds.w	r5, r4, #12
 80a253e:	d003      	beq.n	80a2548 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2540:	4669      	mov	r1, sp
 80a2542:	4628      	mov	r0, r5
 80a2544:	f7ff ff35 	bl	80a23b2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2548:	f3bf 8f5f 	dmb	sy
 80a254c:	2301      	movs	r3, #1
 80a254e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2550:	f3bf 8f5f 	dmb	sy
 80a2554:	f104 0308 	add.w	r3, r4, #8
 80a2558:	2000      	movs	r0, #0
 80a255a:	e853 6f00 	ldrex	r6, [r3]
 80a255e:	e843 0200 	strex	r2, r0, [r3]
 80a2562:	2a00      	cmp	r2, #0
 80a2564:	d1f9      	bne.n	80a255a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2566:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a256a:	2e00      	cmp	r6, #0
 80a256c:	d049      	beq.n	80a2602 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a256e:	f7ff f82f 	bl	80a15d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2572:	b120      	cbz	r0, 80a257e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2574:	4629      	mov	r1, r5
 80a2576:	4630      	mov	r0, r6
 80a2578:	f7ff ff98 	bl	80a24ac <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a257c:	e03a      	b.n	80a25f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a257e:	4631      	mov	r1, r6
 80a2580:	a802      	add	r0, sp, #8
 80a2582:	f7ff ffb3 	bl	80a24ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2586:	68e0      	ldr	r0, [r4, #12]
 80a2588:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a258c:	b108      	cbz	r0, 80a2592 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a258e:	f003 fa43 	bl	80a5a18 <strdup>
 80a2592:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2594:	2010      	movs	r0, #16
 80a2596:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a259a:	f7fd fd80 	bl	80a009e <_Znwj>
 80a259e:	4605      	mov	r5, r0
 80a25a0:	b1e8      	cbz	r0, 80a25de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a25a2:	2700      	movs	r7, #0
 80a25a4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a25a6:	2018      	movs	r0, #24
 80a25a8:	f7fd fd79 	bl	80a009e <_Znwj>
 80a25ac:	4604      	mov	r4, r0
 80a25ae:	b188      	cbz	r0, 80a25d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a25b0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a25b2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a25b4:	a802      	add	r0, sp, #8
 80a25b6:	f7ff fe33 	bl	80a2220 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a25ba:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a25bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a25be:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a25c0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a25c2:	9204      	str	r2, [sp, #16]
 80a25c4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a25c6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a25c8:	60e3      	str	r3, [r4, #12]
 80a25ca:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a25ce:	9205      	str	r2, [sp, #20]
 80a25d0:	f7ff feef 	bl	80a23b2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a25d4:	4b0d      	ldr	r3, [pc, #52]	; (80a260c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a25d6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a25d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a25da:	4b0d      	ldr	r3, [pc, #52]	; (80a2610 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a25dc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a25de:	a806      	add	r0, sp, #24
 80a25e0:	f7ff fef6 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a25e4:	a802      	add	r0, sp, #8
 80a25e6:	f7ff fe0c 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a25ea:	2200      	movs	r2, #0
 80a25ec:	4629      	mov	r1, r5
 80a25ee:	4809      	ldr	r0, [pc, #36]	; (80a2614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a25f0:	f7fe fff6 	bl	80a15e0 <application_thread_invoke>
 80a25f4:	4630      	mov	r0, r6
 80a25f6:	f7ff fe04 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a25fa:	2110      	movs	r1, #16
 80a25fc:	4630      	mov	r0, r6
 80a25fe:	f000 fd2e 	bl	80a305e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2602:	4668      	mov	r0, sp
 80a2604:	f7ff fee4 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
    }
 80a2608:	b009      	add	sp, #36	; 0x24
 80a260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a260c:	080a24bf 	.word	0x080a24bf
 80a2610:	080a2735 	.word	0x080a2735
 80a2614:	080a2c89 	.word	0x080a2c89

080a2618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a261c:	b08b      	sub	sp, #44	; 0x2c
 80a261e:	4606      	mov	r6, r0
 80a2620:	460f      	mov	r7, r1
 80a2622:	4690      	mov	r8, r2
 80a2624:	4699      	mov	r9, r3
 80a2626:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a262a:	f7ff f867 	bl	80a16fc <spark_cloud_flag_connected>
 80a262e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a2630:	4683      	mov	fp, r0
 80a2632:	bb30      	cbnz	r0, 80a2682 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2634:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2638:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a263a:	a905      	add	r1, sp, #20
 80a263c:	4628      	mov	r0, r5
 80a263e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2642:	f7ff feb6 	bl	80a23b2 <_ZN8particle5ErrorC1EOS0_>
 80a2646:	2014      	movs	r0, #20
 80a2648:	f7fd fd29 	bl	80a009e <_Znwj>
 80a264c:	4604      	mov	r4, r0
 80a264e:	b158      	cbz	r0, 80a2668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2650:	2302      	movs	r3, #2
 80a2652:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2654:	2301      	movs	r3, #1
 80a2656:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2658:	f8c0 b004 	str.w	fp, [r0, #4]
 80a265c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2660:	4629      	mov	r1, r5
 80a2662:	300c      	adds	r0, #12
 80a2664:	f7ff fea5 	bl	80a23b2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2668:	4630      	mov	r0, r6
 80a266a:	4621      	mov	r1, r4
 80a266c:	f840 4b04 	str.w	r4, [r0], #4
 80a2670:	f7ff ff08 	bl	80a2484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2674:	4628      	mov	r0, r5
 80a2676:	f7ff feab 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a267a:	a805      	add	r0, sp, #20
 80a267c:	f7ff fea8 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
 80a2680:	e052      	b.n	80a2728 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2682:	2400      	movs	r4, #0
 80a2684:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2686:	2014      	movs	r0, #20
 80a2688:	606c      	str	r4, [r5, #4]
 80a268a:	60ac      	str	r4, [r5, #8]
 80a268c:	9307      	str	r3, [sp, #28]
 80a268e:	f7fd fd06 	bl	80a009e <_Znwj>
 80a2692:	4601      	mov	r1, r0
 80a2694:	b118      	cbz	r0, 80a269e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2696:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2698:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a269a:	6044      	str	r4, [r0, #4]
 80a269c:	6084      	str	r4, [r0, #8]
 80a269e:	a804      	add	r0, sp, #16
 80a26a0:	9103      	str	r1, [sp, #12]
 80a26a2:	f7ff feef 	bl	80a2484 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a26a6:	4b22      	ldr	r3, [pc, #136]	; (80a2730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a26a8:	2008      	movs	r0, #8
 80a26aa:	9308      	str	r3, [sp, #32]
 80a26ac:	f7fd fcf7 	bl	80a009e <_Znwj>
 80a26b0:	4604      	mov	r4, r0
 80a26b2:	b128      	cbz	r0, 80a26c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a26b4:	9b03      	ldr	r3, [sp, #12]
 80a26b6:	a904      	add	r1, sp, #16
 80a26b8:	f840 3b04 	str.w	r3, [r0], #4
 80a26bc:	f7ff fcd9 	bl	80a2072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a26c0:	9500      	str	r5, [sp, #0]
 80a26c2:	fa5f f38a 	uxtb.w	r3, sl
 80a26c6:	464a      	mov	r2, r9
 80a26c8:	4641      	mov	r1, r8
 80a26ca:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a26cc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a26ce:	f7ff f81d 	bl	80a170c <spark_send_event>
 80a26d2:	b920      	cbnz	r0, 80a26de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a26d4:	9b03      	ldr	r3, [sp, #12]
 80a26d6:	785b      	ldrb	r3, [r3, #1]
 80a26d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a26dc:	b183      	cbz	r3, 80a2700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a26de:	9b03      	ldr	r3, [sp, #12]
 80a26e0:	a904      	add	r1, sp, #16
 80a26e2:	a806      	add	r0, sp, #24
 80a26e4:	9305      	str	r3, [sp, #20]
 80a26e6:	f7ff fcc4 	bl	80a2072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a26ea:	a905      	add	r1, sp, #20
 80a26ec:	4630      	mov	r0, r6
 80a26ee:	f7ff fe99 	bl	80a2424 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a26f2:	a806      	add	r0, sp, #24
 80a26f4:	f7ff fca7 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a26f8:	a804      	add	r0, sp, #16
 80a26fa:	f7ff fca4 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a26fe:	e013      	b.n	80a2728 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2700:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2704:	a905      	add	r1, sp, #20
 80a2706:	a803      	add	r0, sp, #12
 80a2708:	9205      	str	r2, [sp, #20]
 80a270a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a270e:	f7ff fefd 	bl	80a250c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2712:	a805      	add	r0, sp, #20
 80a2714:	f7ff fe5c 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2718:	a805      	add	r0, sp, #20
 80a271a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a271c:	f7ff fe93 	bl	80a2446 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2720:	a806      	add	r0, sp, #24
 80a2722:	f7ff fc90 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2726:	e7da      	b.n	80a26de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a2728:	4630      	mov	r0, r6
 80a272a:	b00b      	add	sp, #44	; 0x2c
 80a272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2730:	080a28a5 	.word	0x080a28a5

080a2734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2734:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2738:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a273a:	d006      	beq.n	80a274a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a273c:	2a03      	cmp	r2, #3
 80a273e:	d017      	beq.n	80a2770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2740:	2a01      	cmp	r2, #1
 80a2742:	d122      	bne.n	80a278a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2744:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2746:	6003      	str	r3, [r0, #0]
	      break;
 80a2748:	e01f      	b.n	80a278a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a274a:	2018      	movs	r0, #24
 80a274c:	680e      	ldr	r6, [r1, #0]
 80a274e:	f7fd fca6 	bl	80a009e <_Znwj>
 80a2752:	4605      	mov	r5, r0
 80a2754:	b150      	cbz	r0, 80a276c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2756:	4631      	mov	r1, r6
 80a2758:	f7ff fec8 	bl	80a24ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a275c:	6930      	ldr	r0, [r6, #16]
 80a275e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2762:	b108      	cbz	r0, 80a2768 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2764:	f003 f958 	bl	80a5a18 <strdup>
 80a2768:	6128      	str	r0, [r5, #16]
 80a276a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a276c:	6025      	str	r5, [r4, #0]
 80a276e:	e00c      	b.n	80a278a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2770:	6804      	ldr	r4, [r0, #0]
 80a2772:	b154      	cbz	r4, 80a278a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2774:	f104 0010 	add.w	r0, r4, #16
 80a2778:	f7ff fe2a 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a277c:	4620      	mov	r0, r4
 80a277e:	f7ff fd40 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2782:	2118      	movs	r1, #24
 80a2784:	4620      	mov	r0, r4
 80a2786:	f000 fc6a 	bl	80a305e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a278a:	2000      	movs	r0, #0
 80a278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a278e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a278e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2790:	2300      	movs	r3, #0
 80a2792:	6083      	str	r3, [r0, #8]
 80a2794:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2796:	4604      	mov	r4, r0
 80a2798:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a279a:	b12b      	cbz	r3, 80a27a8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a279c:	2202      	movs	r2, #2
 80a279e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a27a0:	68eb      	ldr	r3, [r5, #12]
 80a27a2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a27a4:	68ab      	ldr	r3, [r5, #8]
 80a27a6:	60a3      	str	r3, [r4, #8]
	}
    }
 80a27a8:	4620      	mov	r0, r4
 80a27aa:	bd38      	pop	{r3, r4, r5, pc}

080a27ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a27ac:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a27ae:	b570      	push	{r4, r5, r6, lr}
 80a27b0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a27b2:	d006      	beq.n	80a27c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a27b4:	2a03      	cmp	r2, #3
 80a27b6:	d011      	beq.n	80a27dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a27b8:	2a01      	cmp	r2, #1
 80a27ba:	d118      	bne.n	80a27ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a27bc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a27be:	6003      	str	r3, [r0, #0]
	      break;
 80a27c0:	e015      	b.n	80a27ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a27c2:	2014      	movs	r0, #20
 80a27c4:	680e      	ldr	r6, [r1, #0]
 80a27c6:	f7fd fc6a 	bl	80a009e <_Znwj>
 80a27ca:	4605      	mov	r5, r0
 80a27cc:	b120      	cbz	r0, 80a27d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a27ce:	4631      	mov	r1, r6
 80a27d0:	f7ff ffdd 	bl	80a278e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a27d4:	7c33      	ldrb	r3, [r6, #16]
 80a27d6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a27d8:	6025      	str	r5, [r4, #0]
 80a27da:	e008      	b.n	80a27ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a27dc:	6804      	ldr	r4, [r0, #0]
 80a27de:	b134      	cbz	r4, 80a27ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a27e0:	4620      	mov	r0, r4
 80a27e2:	f7ff fd0e 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a27e6:	2114      	movs	r1, #20
 80a27e8:	4620      	mov	r0, r4
 80a27ea:	f000 fc38 	bl	80a305e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a27ee:	2000      	movs	r0, #0
 80a27f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a27f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a27f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27f6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a27f8:	f3bf 8f5f 	dmb	sy
 80a27fc:	b087      	sub	sp, #28
 80a27fe:	2300      	movs	r3, #0
 80a2800:	e850 6f00 	ldrex	r6, [r0]
 80a2804:	e840 3200 	strex	r2, r3, [r0]
 80a2808:	2a00      	cmp	r2, #0
 80a280a:	d1f9      	bne.n	80a2800 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a280c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2810:	2e00      	cmp	r6, #0
 80a2812:	d03f      	beq.n	80a2894 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2814:	4618      	mov	r0, r3
 80a2816:	f7fe fedb 	bl	80a15d0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a281a:	4607      	mov	r7, r0
 80a281c:	b120      	cbz	r0, 80a2828 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a281e:	4621      	mov	r1, r4
 80a2820:	4630      	mov	r0, r6
 80a2822:	f7ff fe53 	bl	80a24cc <_ZNKSt8functionIFvRKbEEclES1_>
 80a2826:	e02e      	b.n	80a2886 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2828:	4631      	mov	r1, r6
 80a282a:	a801      	add	r0, sp, #4
 80a282c:	f7ff ffaf 	bl	80a278e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2830:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2832:	2010      	movs	r0, #16
 80a2834:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2838:	f7fd fc31 	bl	80a009e <_Znwj>
 80a283c:	4605      	mov	r5, r0
 80a283e:	b1d0      	cbz	r0, 80a2876 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2840:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2842:	2014      	movs	r0, #20
 80a2844:	f7fd fc2b 	bl	80a009e <_Znwj>
 80a2848:	4604      	mov	r4, r0
 80a284a:	b178      	cbz	r0, 80a286c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a284c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a284e:	4601      	mov	r1, r0
 80a2850:	a801      	add	r0, sp, #4
 80a2852:	f7ff fce5 	bl	80a2220 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2856:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2858:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a285a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a285c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a285e:	9203      	str	r2, [sp, #12]
 80a2860:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2862:	60e3      	str	r3, [r4, #12]
 80a2864:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2868:	9204      	str	r2, [sp, #16]
 80a286a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a286c:	4b0a      	ldr	r3, [pc, #40]	; (80a2898 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a286e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2870:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2872:	4b0a      	ldr	r3, [pc, #40]	; (80a289c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2874:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2876:	a801      	add	r0, sp, #4
 80a2878:	f7ff fcc3 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a287c:	2200      	movs	r2, #0
 80a287e:	4629      	mov	r1, r5
 80a2880:	4807      	ldr	r0, [pc, #28]	; (80a28a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2882:	f7fe fead 	bl	80a15e0 <application_thread_invoke>
 80a2886:	4630      	mov	r0, r6
 80a2888:	f7ff fcbb 	bl	80a2202 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a288c:	2110      	movs	r1, #16
 80a288e:	4630      	mov	r0, r6
 80a2890:	f000 fbe5 	bl	80a305e <_ZdlPvj>
        }
    }
 80a2894:	b007      	add	sp, #28
 80a2896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2898:	080a24df 	.word	0x080a24df
 80a289c:	080a27ad 	.word	0x080a27ad
 80a28a0:	080a2c89 	.word	0x080a2c89

080a28a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a28a4:	b530      	push	{r4, r5, lr}
 80a28a6:	4604      	mov	r4, r0
 80a28a8:	b085      	sub	sp, #20
 80a28aa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a28ac:	4668      	mov	r0, sp
 80a28ae:	4611      	mov	r1, r2
 80a28b0:	f7ff fdc9 	bl	80a2446 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a28b4:	b17c      	cbz	r4, 80a28d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a28b6:	b224      	sxth	r4, r4
 80a28b8:	4628      	mov	r0, r5
 80a28ba:	b10d      	cbz	r5, 80a28c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a28bc:	f003 f8ac 	bl	80a5a18 <strdup>
 80a28c0:	9002      	str	r0, [sp, #8]
 80a28c2:	a902      	add	r1, sp, #8
 80a28c4:	4668      	mov	r0, sp
 80a28c6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a28ca:	f7ff fe1f 	bl	80a250c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a28ce:	a802      	add	r0, sp, #8
 80a28d0:	f7ff fd7e 	bl	80a23d0 <_ZN8particle5ErrorD1Ev>
 80a28d4:	e01d      	b.n	80a2912 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a28d6:	f04f 0201 	mov.w	r2, #1
 80a28da:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a28dc:	f88d 4008 	strb.w	r4, [sp, #8]
 80a28e0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a28e4:	42a3      	cmp	r3, r4
 80a28e6:	d103      	bne.n	80a28f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a28e8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a28ec:	2900      	cmp	r1, #0
 80a28ee:	d1f7      	bne.n	80a28e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a28f0:	d002      	beq.n	80a28f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a28f2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a28f6:	e00c      	b.n	80a2912 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a28f8:	f110 010c 	adds.w	r1, r0, #12
 80a28fc:	f04f 0301 	mov.w	r3, #1
 80a2900:	bf18      	it	ne
 80a2902:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2904:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2908:	3004      	adds	r0, #4
 80a290a:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a290e:	f7ff ff71 	bl	80a27f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2912:	a801      	add	r0, sp, #4
 80a2914:	f7ff fb97 	bl	80a2046 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2918:	b005      	add	sp, #20
 80a291a:	bd30      	pop	{r4, r5, pc}

080a291c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a291c:	4770      	bx	lr

080a291e <_ZN9IPAddressD0Ev>:
 80a291e:	b510      	push	{r4, lr}
 80a2920:	4604      	mov	r4, r0
 80a2922:	2118      	movs	r1, #24
 80a2924:	f000 fb9b 	bl	80a305e <_ZdlPvj>
 80a2928:	4620      	mov	r0, r4
 80a292a:	bd10      	pop	{r4, pc}

080a292c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a292e:	460f      	mov	r7, r1
 80a2930:	f100 0608 	add.w	r6, r0, #8
 80a2934:	1d05      	adds	r5, r0, #4
 80a2936:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2938:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a293c:	220a      	movs	r2, #10
 80a293e:	4638      	mov	r0, r7
 80a2940:	f7ff fa68 	bl	80a1e14 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2944:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2946:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2948:	d007      	beq.n	80a295a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a294a:	2c00      	cmp	r4, #0
 80a294c:	d0f4      	beq.n	80a2938 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a294e:	212e      	movs	r1, #46	; 0x2e
 80a2950:	4638      	mov	r0, r7
 80a2952:	f7ff fa1c 	bl	80a1d8e <_ZN5Print5printEc>
 80a2956:	4404      	add	r4, r0
 80a2958:	e7ee      	b.n	80a2938 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a295a:	4620      	mov	r0, r4
 80a295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2960 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2960:	b510      	push	{r4, lr}
 80a2962:	4604      	mov	r4, r0
 80a2964:	4b04      	ldr	r3, [pc, #16]	; (80a2978 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2966:	2211      	movs	r2, #17
 80a2968:	f840 3b04 	str.w	r3, [r0], #4
 80a296c:	2100      	movs	r1, #0
 80a296e:	f003 f810 	bl	80a5992 <memset>
{
    clear();
}
 80a2972:	4620      	mov	r0, r4
 80a2974:	bd10      	pop	{r4, pc}
 80a2976:	bf00      	nop
 80a2978:	080a66b8 	.word	0x080a66b8

080a297c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a297c:	4603      	mov	r3, r0
 80a297e:	4a07      	ldr	r2, [pc, #28]	; (80a299c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2980:	b510      	push	{r4, lr}
 80a2982:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2986:	f101 0210 	add.w	r2, r1, #16
 80a298a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a298e:	4291      	cmp	r1, r2
 80a2990:	f843 4b04 	str.w	r4, [r3], #4
 80a2994:	d1f9      	bne.n	80a298a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2996:	780a      	ldrb	r2, [r1, #0]
 80a2998:	701a      	strb	r2, [r3, #0]
}
 80a299a:	bd10      	pop	{r4, pc}
 80a299c:	080a66b8 	.word	0x080a66b8

080a29a0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29a0:	4a02      	ldr	r2, [pc, #8]	; (80a29ac <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a29a2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29a4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a29a6:	2204      	movs	r2, #4
 80a29a8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a29aa:	4770      	bx	lr
 80a29ac:	080a66b8 	.word	0x080a66b8

080a29b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a29b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a29b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a29b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a29ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a29be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a29c2:	2304      	movs	r3, #4
 80a29c4:	6041      	str	r1, [r0, #4]
 80a29c6:	7503      	strb	r3, [r0, #20]
 80a29c8:	bd10      	pop	{r4, pc}
	...

080a29cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a29cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a29ce:	4d04      	ldr	r5, [pc, #16]	; (80a29e0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a29d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a29d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a29d6:	9500      	str	r5, [sp, #0]
 80a29d8:	f7ff ffea 	bl	80a29b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a29dc:	b003      	add	sp, #12
 80a29de:	bd30      	pop	{r4, r5, pc}
 80a29e0:	080a66b8 	.word	0x080a66b8

080a29e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a29e4:	7441      	strb	r1, [r0, #17]
 80a29e6:	4770      	bx	lr

080a29e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a29e8:	4770      	bx	lr

080a29ea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a29ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a29ec:	2100      	movs	r1, #0
 80a29ee:	7c00      	ldrb	r0, [r0, #16]
 80a29f0:	f7fe fda6 	bl	80a1540 <HAL_USB_USART_Receive_Data>
}
 80a29f4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a29f8:	bf28      	it	cs
 80a29fa:	f04f 30ff 	movcs.w	r0, #4294967295
 80a29fe:	bd08      	pop	{r3, pc}

080a2a00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2a00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2a02:	2101      	movs	r1, #1
 80a2a04:	7c00      	ldrb	r0, [r0, #16]
 80a2a06:	f7fe fd9b 	bl	80a1540 <HAL_USB_USART_Receive_Data>
}
 80a2a0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2a0e:	bf28      	it	cs
 80a2a10:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2a14:	bd08      	pop	{r3, pc}

080a2a16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2a16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2a18:	7c00      	ldrb	r0, [r0, #16]
 80a2a1a:	f7fe fd89 	bl	80a1530 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2a1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a22:	bd08      	pop	{r3, pc}

080a2a24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2a24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2a26:	7c00      	ldrb	r0, [r0, #16]
 80a2a28:	f7fe fd7a 	bl	80a1520 <HAL_USB_USART_Available_Data>
}
 80a2a2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a30:	bd08      	pop	{r3, pc}

080a2a32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2a32:	7c00      	ldrb	r0, [r0, #16]
 80a2a34:	f7fe bd94 	b.w	80a1560 <HAL_USB_USART_Flush_Data>

080a2a38 <_ZN9USBSerialD0Ev>:
 80a2a38:	b510      	push	{r4, lr}
 80a2a3a:	4604      	mov	r4, r0
 80a2a3c:	2114      	movs	r1, #20
 80a2a3e:	f000 fb0e 	bl	80a305e <_ZdlPvj>
 80a2a42:	4620      	mov	r0, r4
 80a2a44:	bd10      	pop	{r4, pc}

080a2a46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a46:	b538      	push	{r3, r4, r5, lr}
 80a2a48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a4e:	f7fe fd6f 	bl	80a1530 <HAL_USB_USART_Available_Data_For_Write>
 80a2a52:	2800      	cmp	r0, #0
 80a2a54:	dc01      	bgt.n	80a2a5a <_ZN9USBSerial5writeEh+0x14>
 80a2a56:	7c60      	ldrb	r0, [r4, #17]
 80a2a58:	b128      	cbz	r0, 80a2a66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2a5a:	4629      	mov	r1, r5
 80a2a5c:	7c20      	ldrb	r0, [r4, #16]
 80a2a5e:	f7fe fd77 	bl	80a1550 <HAL_USB_USART_Send_Data>
 80a2a62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2a66:	bd38      	pop	{r3, r4, r5, pc}

080a2a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2a68:	b510      	push	{r4, lr}
 80a2a6a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2a6c:	2300      	movs	r3, #0
 80a2a6e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2a74:	60a3      	str	r3, [r4, #8]
 80a2a76:	4b05      	ldr	r3, [pc, #20]	; (80a2a8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2a78:	4608      	mov	r0, r1
 80a2a7a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2a7c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2a7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2a80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2a82:	4611      	mov	r1, r2
 80a2a84:	f7fe fd3c 	bl	80a1500 <HAL_USB_USART_Init>
}
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	bd10      	pop	{r4, pc}
 80a2a8c:	080a66cc 	.word	0x080a66cc

080a2a90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2a90:	2200      	movs	r2, #0
 80a2a92:	7c00      	ldrb	r0, [r0, #16]
 80a2a94:	f7fe bd3c 	b.w	80a1510 <HAL_USB_USART_Begin>

080a2a98 <_Z19acquireSerialBufferv>:
 80a2a98:	b510      	push	{r4, lr}
 80a2a9a:	4604      	mov	r4, r0
 80a2a9c:	2214      	movs	r2, #20
 80a2a9e:	2100      	movs	r1, #0
 80a2aa0:	f002 ff77 	bl	80a5992 <memset>
 80a2aa4:	4620      	mov	r0, r4
 80a2aa6:	bd10      	pop	{r4, pc}

080a2aa8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2aa8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2aaa:	4d0e      	ldr	r5, [pc, #56]	; (80a2ae4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2aac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2aae:	a801      	add	r0, sp, #4
 80a2ab0:	f7ff fff2 	bl	80a2a98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2ab4:	6829      	ldr	r1, [r5, #0]
 80a2ab6:	f011 0401 	ands.w	r4, r1, #1
 80a2aba:	d110      	bne.n	80a2ade <_Z16_fetch_usbserialv+0x36>
 80a2abc:	4628      	mov	r0, r5
 80a2abe:	f7fd faf2 	bl	80a00a6 <__cxa_guard_acquire>
 80a2ac2:	b160      	cbz	r0, 80a2ade <_Z16_fetch_usbserialv+0x36>
 80a2ac4:	aa01      	add	r2, sp, #4
 80a2ac6:	4621      	mov	r1, r4
 80a2ac8:	4807      	ldr	r0, [pc, #28]	; (80a2ae8 <_Z16_fetch_usbserialv+0x40>)
 80a2aca:	f7ff ffcd 	bl	80a2a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ace:	4628      	mov	r0, r5
 80a2ad0:	f7fd faee 	bl	80a00b0 <__cxa_guard_release>
 80a2ad4:	4a05      	ldr	r2, [pc, #20]	; (80a2aec <_Z16_fetch_usbserialv+0x44>)
 80a2ad6:	4906      	ldr	r1, [pc, #24]	; (80a2af0 <_Z16_fetch_usbserialv+0x48>)
 80a2ad8:	4803      	ldr	r0, [pc, #12]	; (80a2ae8 <_Z16_fetch_usbserialv+0x40>)
 80a2ada:	f000 fabb 	bl	80a3054 <__aeabi_atexit>
	return _usbserial;
}
 80a2ade:	4802      	ldr	r0, [pc, #8]	; (80a2ae8 <_Z16_fetch_usbserialv+0x40>)
 80a2ae0:	b007      	add	sp, #28
 80a2ae2:	bd30      	pop	{r4, r5, pc}
 80a2ae4:	2000018c 	.word	0x2000018c
 80a2ae8:	20000194 	.word	0x20000194
 80a2aec:	200000c8 	.word	0x200000c8
 80a2af0:	080a29e9 	.word	0x080a29e9

080a2af4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2af4:	b510      	push	{r4, lr}
 80a2af6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2af8:	2214      	movs	r2, #20
 80a2afa:	2100      	movs	r1, #0
 80a2afc:	f002 ff49 	bl	80a5992 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2b00:	4620      	mov	r0, r4
 80a2b02:	bd10      	pop	{r4, pc}

080a2b04 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2b04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b06:	4c0e      	ldr	r4, [pc, #56]	; (80a2b40 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2b08:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2b0a:	a801      	add	r0, sp, #4
 80a2b0c:	f7ff fff2 	bl	80a2af4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b10:	6823      	ldr	r3, [r4, #0]
 80a2b12:	07db      	lsls	r3, r3, #31
 80a2b14:	d410      	bmi.n	80a2b38 <_Z17_fetch_usbserial1v+0x34>
 80a2b16:	4620      	mov	r0, r4
 80a2b18:	f7fd fac5 	bl	80a00a6 <__cxa_guard_acquire>
 80a2b1c:	b160      	cbz	r0, 80a2b38 <_Z17_fetch_usbserial1v+0x34>
 80a2b1e:	aa01      	add	r2, sp, #4
 80a2b20:	2101      	movs	r1, #1
 80a2b22:	4808      	ldr	r0, [pc, #32]	; (80a2b44 <_Z17_fetch_usbserial1v+0x40>)
 80a2b24:	f7ff ffa0 	bl	80a2a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b28:	4620      	mov	r0, r4
 80a2b2a:	f7fd fac1 	bl	80a00b0 <__cxa_guard_release>
 80a2b2e:	4a06      	ldr	r2, [pc, #24]	; (80a2b48 <_Z17_fetch_usbserial1v+0x44>)
 80a2b30:	4906      	ldr	r1, [pc, #24]	; (80a2b4c <_Z17_fetch_usbserial1v+0x48>)
 80a2b32:	4804      	ldr	r0, [pc, #16]	; (80a2b44 <_Z17_fetch_usbserial1v+0x40>)
 80a2b34:	f000 fa8e 	bl	80a3054 <__aeabi_atexit>
  return _usbserial1;
}
 80a2b38:	4802      	ldr	r0, [pc, #8]	; (80a2b44 <_Z17_fetch_usbserial1v+0x40>)
 80a2b3a:	b006      	add	sp, #24
 80a2b3c:	bd10      	pop	{r4, pc}
 80a2b3e:	bf00      	nop
 80a2b40:	20000190 	.word	0x20000190
 80a2b44:	200001a8 	.word	0x200001a8
 80a2b48:	200000c8 	.word	0x200000c8
 80a2b4c:	080a29e9 	.word	0x080a29e9

080a2b50 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2b50:	4770      	bx	lr

080a2b52 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2b52:	7441      	strb	r1, [r0, #17]
 80a2b54:	4770      	bx	lr

080a2b56 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2b56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2b58:	7c00      	ldrb	r0, [r0, #16]
 80a2b5a:	f7fe fc6f 	bl	80a143c <HAL_USART_Available_Data_For_Write>
}
 80a2b5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b62:	bd08      	pop	{r3, pc}

080a2b64 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2b64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2b66:	7c00      	ldrb	r0, [r0, #16]
 80a2b68:	f7fe fc40 	bl	80a13ec <HAL_USART_Available_Data>
}
 80a2b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2b70:	bd08      	pop	{r3, pc}

080a2b72 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2b72:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2b74:	7c00      	ldrb	r0, [r0, #16]
 80a2b76:	f7fe fc49 	bl	80a140c <HAL_USART_Peek_Data>
}
 80a2b7a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b7e:	bf28      	it	cs
 80a2b80:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2b84:	bd08      	pop	{r3, pc}

080a2b86 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2b86:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2b88:	7c00      	ldrb	r0, [r0, #16]
 80a2b8a:	f7fe fc37 	bl	80a13fc <HAL_USART_Read_Data>
}
 80a2b8e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2b92:	bf28      	it	cs
 80a2b94:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2b98:	bd08      	pop	{r3, pc}

080a2b9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2b9a:	7c00      	ldrb	r0, [r0, #16]
 80a2b9c:	f7fe bc3e 	b.w	80a141c <HAL_USART_Flush_Data>

080a2ba0 <_ZN11USARTSerialD0Ev>:
 80a2ba0:	b510      	push	{r4, lr}
 80a2ba2:	4604      	mov	r4, r0
 80a2ba4:	2114      	movs	r1, #20
 80a2ba6:	f000 fa5a 	bl	80a305e <_ZdlPvj>
 80a2baa:	4620      	mov	r0, r4
 80a2bac:	bd10      	pop	{r4, pc}

080a2bae <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2bae:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2bb0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2bb2:	4604      	mov	r4, r0
 80a2bb4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2bb6:	b925      	cbnz	r5, 80a2bc2 <_ZN11USARTSerial5writeEh+0x14>
 80a2bb8:	7c00      	ldrb	r0, [r0, #16]
 80a2bba:	f7fe fc3f 	bl	80a143c <HAL_USART_Available_Data_For_Write>
 80a2bbe:	2800      	cmp	r0, #0
 80a2bc0:	dd05      	ble.n	80a2bce <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2bc2:	4631      	mov	r1, r6
 80a2bc4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2bc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2bca:	f7fe bc07 	b.w	80a13dc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2bce:	4628      	mov	r0, r5
 80a2bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2bd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2bd4:	b510      	push	{r4, lr}
 80a2bd6:	4604      	mov	r4, r0
 80a2bd8:	4608      	mov	r0, r1
 80a2bda:	4611      	mov	r1, r2
 80a2bdc:	2200      	movs	r2, #0
 80a2bde:	6062      	str	r2, [r4, #4]
 80a2be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2be4:	60a2      	str	r2, [r4, #8]
 80a2be6:	4a05      	ldr	r2, [pc, #20]	; (80a2bfc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2be8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2bea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2bec:	2201      	movs	r2, #1
 80a2bee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2bf0:	461a      	mov	r2, r3
 80a2bf2:	f7fe fbeb 	bl	80a13cc <HAL_USART_Init>
}
 80a2bf6:	4620      	mov	r0, r4
 80a2bf8:	bd10      	pop	{r4, pc}
 80a2bfa:	bf00      	nop
 80a2bfc:	080a66fc 	.word	0x080a66fc

080a2c00 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2c00:	7c00      	ldrb	r0, [r0, #16]
 80a2c02:	f7fe bc13 	b.w	80a142c <HAL_USART_Is_Enabled>
	...

080a2c08 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2c0a:	4c19      	ldr	r4, [pc, #100]	; (80a2c70 <_Z22__fetch_global_Serial1v+0x68>)
 80a2c0c:	6825      	ldr	r5, [r4, #0]
 80a2c0e:	b94d      	cbnz	r5, 80a2c24 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a2c10:	2084      	movs	r0, #132	; 0x84
 80a2c12:	f7fd fa44 	bl	80a009e <_Znwj>
 80a2c16:	4606      	mov	r6, r0
 80a2c18:	b118      	cbz	r0, 80a2c22 <_Z22__fetch_global_Serial1v+0x1a>
 80a2c1a:	2284      	movs	r2, #132	; 0x84
 80a2c1c:	4629      	mov	r1, r5
 80a2c1e:	f002 feb8 	bl	80a5992 <memset>
 80a2c22:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2c24:	4d13      	ldr	r5, [pc, #76]	; (80a2c74 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2c26:	682e      	ldr	r6, [r5, #0]
 80a2c28:	b94e      	cbnz	r6, 80a2c3e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2c2a:	2084      	movs	r0, #132	; 0x84
 80a2c2c:	f7fd fa37 	bl	80a009e <_Znwj>
 80a2c30:	4607      	mov	r7, r0
 80a2c32:	b118      	cbz	r0, 80a2c3c <_Z22__fetch_global_Serial1v+0x34>
 80a2c34:	2284      	movs	r2, #132	; 0x84
 80a2c36:	4631      	mov	r1, r6
 80a2c38:	f002 feab 	bl	80a5992 <memset>
 80a2c3c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2c3e:	4f0e      	ldr	r7, [pc, #56]	; (80a2c78 <_Z22__fetch_global_Serial1v+0x70>)
 80a2c40:	6839      	ldr	r1, [r7, #0]
 80a2c42:	f011 0601 	ands.w	r6, r1, #1
 80a2c46:	d111      	bne.n	80a2c6c <_Z22__fetch_global_Serial1v+0x64>
 80a2c48:	4638      	mov	r0, r7
 80a2c4a:	f7fd fa2c 	bl	80a00a6 <__cxa_guard_acquire>
 80a2c4e:	b168      	cbz	r0, 80a2c6c <_Z22__fetch_global_Serial1v+0x64>
 80a2c50:	6822      	ldr	r2, [r4, #0]
 80a2c52:	4631      	mov	r1, r6
 80a2c54:	682b      	ldr	r3, [r5, #0]
 80a2c56:	4809      	ldr	r0, [pc, #36]	; (80a2c7c <_Z22__fetch_global_Serial1v+0x74>)
 80a2c58:	f7ff ffbc 	bl	80a2bd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2c5c:	4638      	mov	r0, r7
 80a2c5e:	f7fd fa27 	bl	80a00b0 <__cxa_guard_release>
 80a2c62:	4a07      	ldr	r2, [pc, #28]	; (80a2c80 <_Z22__fetch_global_Serial1v+0x78>)
 80a2c64:	4907      	ldr	r1, [pc, #28]	; (80a2c84 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2c66:	4805      	ldr	r0, [pc, #20]	; (80a2c7c <_Z22__fetch_global_Serial1v+0x74>)
 80a2c68:	f000 f9f4 	bl	80a3054 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2c6c:	4803      	ldr	r0, [pc, #12]	; (80a2c7c <_Z22__fetch_global_Serial1v+0x74>)
 80a2c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2c70:	200001d8 	.word	0x200001d8
 80a2c74:	200001d0 	.word	0x200001d0
 80a2c78:	200001d4 	.word	0x200001d4
 80a2c7c:	200001bc 	.word	0x200001bc
 80a2c80:	200000c8 	.word	0x200000c8
 80a2c84:	080a2b51 	.word	0x080a2b51

080a2c88 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2c88:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2c8a:	6883      	ldr	r3, [r0, #8]
 80a2c8c:	4604      	mov	r4, r0
 80a2c8e:	b90b      	cbnz	r3, 80a2c94 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2c90:	f000 f9e7 	bl	80a3062 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2c94:	68c3      	ldr	r3, [r0, #12]
 80a2c96:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2c98:	68a3      	ldr	r3, [r4, #8]
 80a2c9a:	b11b      	cbz	r3, 80a2ca4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2c9c:	2203      	movs	r2, #3
 80a2c9e:	4621      	mov	r1, r4
 80a2ca0:	4620      	mov	r0, r4
 80a2ca2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2ca4:	4620      	mov	r0, r4
}
 80a2ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2caa:	2110      	movs	r1, #16
 80a2cac:	f000 b9d7 	b.w	80a305e <_ZdlPvj>

080a2cb0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2cb0:	4770      	bx	lr

080a2cb2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2cb4:	4606      	mov	r6, r0
 80a2cb6:	4615      	mov	r5, r2
 80a2cb8:	460c      	mov	r4, r1
 80a2cba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2cbc:	42bc      	cmp	r4, r7
 80a2cbe:	d006      	beq.n	80a2cce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2cc0:	6833      	ldr	r3, [r6, #0]
 80a2cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2cc6:	689b      	ldr	r3, [r3, #8]
 80a2cc8:	4630      	mov	r0, r6
 80a2cca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2ccc:	e7f6      	b.n	80a2cbc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2cce:	4628      	mov	r0, r5
 80a2cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2cd2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2cd2:	2200      	movs	r2, #0
 80a2cd4:	7c00      	ldrb	r0, [r0, #16]
 80a2cd6:	f7fe bbd9 	b.w	80a148c <HAL_I2C_Write_Data>

080a2cda <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2cda:	2100      	movs	r1, #0
 80a2cdc:	7c00      	ldrb	r0, [r0, #16]
 80a2cde:	f7fe bbdd 	b.w	80a149c <HAL_I2C_Available_Data>

080a2ce2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2ce2:	2100      	movs	r1, #0
 80a2ce4:	7c00      	ldrb	r0, [r0, #16]
 80a2ce6:	f7fe bbe1 	b.w	80a14ac <HAL_I2C_Read_Data>

080a2cea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2cea:	2100      	movs	r1, #0
 80a2cec:	7c00      	ldrb	r0, [r0, #16]
 80a2cee:	f7fe bbe5 	b.w	80a14bc <HAL_I2C_Peek_Data>

080a2cf2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2cf2:	2100      	movs	r1, #0
 80a2cf4:	7c00      	ldrb	r0, [r0, #16]
 80a2cf6:	f7fe bbe9 	b.w	80a14cc <HAL_I2C_Flush_Data>

080a2cfa <_ZN7TwoWireD0Ev>:
 80a2cfa:	b510      	push	{r4, lr}
 80a2cfc:	4604      	mov	r4, r0
 80a2cfe:	2114      	movs	r1, #20
 80a2d00:	f000 f9ad 	bl	80a305e <_ZdlPvj>
 80a2d04:	4620      	mov	r0, r4
 80a2d06:	bd10      	pop	{r4, pc}

080a2d08 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2d08:	b510      	push	{r4, lr}
 80a2d0a:	4604      	mov	r4, r0
 80a2d0c:	4608      	mov	r0, r1
 80a2d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d12:	60a3      	str	r3, [r4, #8]
 80a2d14:	4b04      	ldr	r3, [pc, #16]	; (80a2d28 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2d16:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2d18:	7420      	strb	r0, [r4, #16]
 80a2d1a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2d1c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2d1e:	f7fe fbe5 	bl	80a14ec <HAL_I2C_Init>

}
 80a2d22:	4620      	mov	r0, r4
 80a2d24:	bd10      	pop	{r4, pc}
 80a2d26:	bf00      	nop
 80a2d28:	080a672c 	.word	0x080a672c

080a2d2c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2d2c:	2300      	movs	r3, #0
 80a2d2e:	461a      	mov	r2, r3
 80a2d30:	4619      	mov	r1, r3
 80a2d32:	7c00      	ldrb	r0, [r0, #16]
 80a2d34:	f7fe bb8a 	b.w	80a144c <HAL_I2C_Begin>

080a2d38 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2d38:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2d3a:	2400      	movs	r4, #0
 80a2d3c:	7c00      	ldrb	r0, [r0, #16]
 80a2d3e:	9400      	str	r4, [sp, #0]
 80a2d40:	f7fe fb8c 	bl	80a145c <HAL_I2C_Request_Data>
  return result;
}
 80a2d44:	b2c0      	uxtb	r0, r0
 80a2d46:	b002      	add	sp, #8
 80a2d48:	bd10      	pop	{r4, pc}

080a2d4a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2d4a:	2301      	movs	r3, #1
 80a2d4c:	f7ff bff4 	b.w	80a2d38 <_ZN7TwoWire11requestFromEhhh>

080a2d50 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2d50:	2200      	movs	r2, #0
 80a2d52:	7c00      	ldrb	r0, [r0, #16]
 80a2d54:	f7fe bb8a 	b.w	80a146c <HAL_I2C_Begin_Transmission>

080a2d58 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2d58:	2200      	movs	r2, #0
 80a2d5a:	7c00      	ldrb	r0, [r0, #16]
 80a2d5c:	f7fe bb8e 	b.w	80a147c <HAL_I2C_End_Transmission>

080a2d60 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2d60:	2101      	movs	r1, #1
 80a2d62:	f7ff bff9 	b.w	80a2d58 <_ZN7TwoWire15endTransmissionEh>

080a2d66 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2d66:	2100      	movs	r1, #0
 80a2d68:	7c00      	ldrb	r0, [r0, #16]
 80a2d6a:	f7fe bbb7 	b.w	80a14dc <HAL_I2C_Is_Enabled>

080a2d6e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d70:	4616      	mov	r6, r2
 80a2d72:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2d74:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2d76:	460f      	mov	r7, r1
 80a2d78:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2d7a:	2100      	movs	r1, #0
 80a2d7c:	a803      	add	r0, sp, #12
 80a2d7e:	f002 fe08 	bl	80a5992 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2d82:	4630      	mov	r0, r6
 80a2d84:	f002 fe63 	bl	80a5a4e <strlen>
 80a2d88:	2500      	movs	r5, #0
 80a2d8a:	9500      	str	r5, [sp, #0]
 80a2d8c:	b281      	uxth	r1, r0
 80a2d8e:	687b      	ldr	r3, [r7, #4]
 80a2d90:	aa03      	add	r2, sp, #12
 80a2d92:	4630      	mov	r0, r6
 80a2d94:	f7fe fbec 	bl	80a1570 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2d98:	b120      	cbz	r0, 80a2da4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2d9a:	4629      	mov	r1, r5
 80a2d9c:	4620      	mov	r0, r4
 80a2d9e:	f7ff fdff 	bl	80a29a0 <_ZN9IPAddressC1Em>
 80a2da2:	e003      	b.n	80a2dac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2da4:	a903      	add	r1, sp, #12
 80a2da6:	4620      	mov	r0, r4
 80a2da8:	f7ff fde8 	bl	80a297c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2dac:	4620      	mov	r0, r4
 80a2dae:	b009      	add	sp, #36	; 0x24
 80a2db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2db2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2db2:	2200      	movs	r2, #0
 80a2db4:	4611      	mov	r1, r2
 80a2db6:	6840      	ldr	r0, [r0, #4]
 80a2db8:	f7fe bc78 	b.w	80a16ac <network_listening>

080a2dbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2dbc:	2200      	movs	r2, #0
 80a2dbe:	4611      	mov	r1, r2
 80a2dc0:	6840      	ldr	r0, [r0, #4]
 80a2dc2:	f7fe bc83 	b.w	80a16cc <network_get_listen_timeout>

080a2dc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2dc6:	2200      	movs	r2, #0
 80a2dc8:	6840      	ldr	r0, [r0, #4]
 80a2dca:	f7fe bc77 	b.w	80a16bc <network_set_listen_timeout>

080a2dce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2dce:	2200      	movs	r2, #0
 80a2dd0:	f081 0101 	eor.w	r1, r1, #1
 80a2dd4:	6840      	ldr	r0, [r0, #4]
 80a2dd6:	f7fe bc61 	b.w	80a169c <network_listen>

080a2dda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2dda:	2300      	movs	r3, #0
 80a2ddc:	461a      	mov	r2, r3
 80a2dde:	4619      	mov	r1, r3
 80a2de0:	6840      	ldr	r0, [r0, #4]
 80a2de2:	f7fe bc53 	b.w	80a168c <network_off>

080a2de6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2de6:	2200      	movs	r2, #0
 80a2de8:	2102      	movs	r1, #2
 80a2dea:	6840      	ldr	r0, [r0, #4]
 80a2dec:	f7fe bc36 	b.w	80a165c <network_disconnect>

080a2df0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2df0:	2300      	movs	r3, #0
 80a2df2:	461a      	mov	r2, r3
 80a2df4:	6840      	ldr	r0, [r0, #4]
 80a2df6:	f7fe bc21 	b.w	80a163c <network_connect>
	...

080a2dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2dfc:	4b02      	ldr	r3, [pc, #8]	; (80a2e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2dfe:	2204      	movs	r2, #4
 80a2e00:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2e02:	4a02      	ldr	r2, [pc, #8]	; (80a2e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2e04:	601a      	str	r2, [r3, #0]
 80a2e06:	4770      	bx	lr
 80a2e08:	200001dc 	.word	0x200001dc
 80a2e0c:	080a6754 	.word	0x080a6754

080a2e10 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2e10:	2300      	movs	r3, #0
 80a2e12:	461a      	mov	r2, r3
 80a2e14:	6840      	ldr	r0, [r0, #4]
 80a2e16:	f7fe bc11 	b.w	80a163c <network_connect>

080a2e1a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2e1a:	2200      	movs	r2, #0
 80a2e1c:	2102      	movs	r1, #2
 80a2e1e:	6840      	ldr	r0, [r0, #4]
 80a2e20:	f7fe bc1c 	b.w	80a165c <network_disconnect>

080a2e24 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2e24:	2200      	movs	r2, #0
 80a2e26:	4611      	mov	r1, r2
 80a2e28:	6840      	ldr	r0, [r0, #4]
 80a2e2a:	f7fe bc0f 	b.w	80a164c <network_connecting>

080a2e2e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2e2e:	2200      	movs	r2, #0
 80a2e30:	4611      	mov	r1, r2
 80a2e32:	6840      	ldr	r0, [r0, #4]
 80a2e34:	f7fe bc1a 	b.w	80a166c <network_ready>

080a2e38 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2e38:	2300      	movs	r3, #0
 80a2e3a:	461a      	mov	r2, r3
 80a2e3c:	4619      	mov	r1, r3
 80a2e3e:	6840      	ldr	r0, [r0, #4]
 80a2e40:	f7fe bc1c 	b.w	80a167c <network_on>

080a2e44 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2e44:	2300      	movs	r3, #0
 80a2e46:	461a      	mov	r2, r3
 80a2e48:	4619      	mov	r1, r3
 80a2e4a:	6840      	ldr	r0, [r0, #4]
 80a2e4c:	f7fe bc1e 	b.w	80a168c <network_off>

080a2e50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2e50:	2200      	movs	r2, #0
 80a2e52:	f081 0101 	eor.w	r1, r1, #1
 80a2e56:	6840      	ldr	r0, [r0, #4]
 80a2e58:	f7fe bc20 	b.w	80a169c <network_listen>

080a2e5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2e5c:	2200      	movs	r2, #0
 80a2e5e:	6840      	ldr	r0, [r0, #4]
 80a2e60:	f7fe bc2c 	b.w	80a16bc <network_set_listen_timeout>

080a2e64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2e64:	2200      	movs	r2, #0
 80a2e66:	4611      	mov	r1, r2
 80a2e68:	6840      	ldr	r0, [r0, #4]
 80a2e6a:	f7fe bc2f 	b.w	80a16cc <network_get_listen_timeout>

080a2e6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2e6e:	2200      	movs	r2, #0
 80a2e70:	4611      	mov	r1, r2
 80a2e72:	6840      	ldr	r0, [r0, #4]
 80a2e74:	f7fe bc1a 	b.w	80a16ac <network_listening>

080a2e78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2e78:	b570      	push	{r4, r5, r6, lr}
 80a2e7a:	4616      	mov	r6, r2
 80a2e7c:	b08e      	sub	sp, #56	; 0x38
 80a2e7e:	4604      	mov	r4, r0
    IPAddress addr;
 80a2e80:	a808      	add	r0, sp, #32
 80a2e82:	f7ff fd6d 	bl	80a2960 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2e86:	2211      	movs	r2, #17
 80a2e88:	2100      	movs	r1, #0
 80a2e8a:	a803      	add	r0, sp, #12
 80a2e8c:	f002 fd81 	bl	80a5992 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2e90:	4630      	mov	r0, r6
 80a2e92:	f002 fddc 	bl	80a5a4e <strlen>
 80a2e96:	2500      	movs	r5, #0
 80a2e98:	4b0a      	ldr	r3, [pc, #40]	; (80a2ec4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2e9a:	9500      	str	r5, [sp, #0]
 80a2e9c:	b281      	uxth	r1, r0
 80a2e9e:	685b      	ldr	r3, [r3, #4]
 80a2ea0:	aa03      	add	r2, sp, #12
 80a2ea2:	4630      	mov	r0, r6
 80a2ea4:	f7fe fb64 	bl	80a1570 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2ea8:	b120      	cbz	r0, 80a2eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2eaa:	4629      	mov	r1, r5
 80a2eac:	4620      	mov	r0, r4
 80a2eae:	f7ff fd77 	bl	80a29a0 <_ZN9IPAddressC1Em>
 80a2eb2:	e003      	b.n	80a2ebc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2eb4:	a903      	add	r1, sp, #12
 80a2eb6:	4620      	mov	r0, r4
 80a2eb8:	f7ff fd60 	bl	80a297c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2ebc:	4620      	mov	r0, r4
 80a2ebe:	b00e      	add	sp, #56	; 0x38
 80a2ec0:	bd70      	pop	{r4, r5, r6, pc}
 80a2ec2:	bf00      	nop
 80a2ec4:	200001dc 	.word	0x200001dc

080a2ec8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2ec8:	4b02      	ldr	r3, [pc, #8]	; (80a2ed4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2eca:	4a03      	ldr	r2, [pc, #12]	; (80a2ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2ecc:	601a      	str	r2, [r3, #0]
 80a2ece:	2200      	movs	r2, #0
 80a2ed0:	605a      	str	r2, [r3, #4]
 80a2ed2:	4770      	bx	lr
 80a2ed4:	200001e4 	.word	0x200001e4
 80a2ed8:	080a6788 	.word	0x080a6788

080a2edc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2edc:	b510      	push	{r4, lr}
 80a2ede:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2ee0:	480f      	ldr	r0, [pc, #60]	; (80a2f20 <pinAvailable+0x44>)
 80a2ee2:	f7fe fd1b 	bl	80a191c <_ZN8SPIClass9isEnabledEv>
 80a2ee6:	b128      	cbz	r0, 80a2ef4 <pinAvailable+0x18>
 80a2ee8:	f1a4 030d 	sub.w	r3, r4, #13
 80a2eec:	2b02      	cmp	r3, #2
 80a2eee:	d801      	bhi.n	80a2ef4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2ef0:	2000      	movs	r0, #0
 80a2ef2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2ef4:	f000 f88e 	bl	80a3014 <_Z19__fetch_global_Wirev>
 80a2ef8:	f7ff ff35 	bl	80a2d66 <_ZN7TwoWire9isEnabledEv>
 80a2efc:	b108      	cbz	r0, 80a2f02 <pinAvailable+0x26>
 80a2efe:	2c01      	cmp	r4, #1
 80a2f00:	d9f6      	bls.n	80a2ef0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2f02:	f7ff fe81 	bl	80a2c08 <_Z22__fetch_global_Serial1v>
 80a2f06:	f7ff fe7b 	bl	80a2c00 <_ZN11USARTSerial9isEnabledEv>
 80a2f0a:	b118      	cbz	r0, 80a2f14 <pinAvailable+0x38>
 80a2f0c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2f10:	2b01      	cmp	r3, #1
 80a2f12:	d9ed      	bls.n	80a2ef0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2f14:	2c17      	cmp	r4, #23
 80a2f16:	bf8c      	ite	hi
 80a2f18:	2000      	movhi	r0, #0
 80a2f1a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2f1c:	bd10      	pop	{r4, pc}
 80a2f1e:	bf00      	nop
 80a2f20:	200001ec 	.word	0x200001ec

080a2f24 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f24:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2f26:	b538      	push	{r3, r4, r5, lr}
 80a2f28:	4604      	mov	r4, r0
 80a2f2a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2f2c:	d80a      	bhi.n	80a2f44 <pinMode+0x20>
 80a2f2e:	29ff      	cmp	r1, #255	; 0xff
 80a2f30:	d008      	beq.n	80a2f44 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f32:	f7ff ffd3 	bl	80a2edc <pinAvailable>
 80a2f36:	b128      	cbz	r0, 80a2f44 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2f38:	4629      	mov	r1, r5
 80a2f3a:	4620      	mov	r0, r4
}
 80a2f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2f40:	f7fe b9b4 	b.w	80a12ac <HAL_Pin_Mode>
 80a2f44:	bd38      	pop	{r3, r4, r5, pc}

080a2f46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2f46:	b538      	push	{r3, r4, r5, lr}
 80a2f48:	4604      	mov	r4, r0
 80a2f4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f4c:	f7fe f9b6 	bl	80a12bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2f50:	28ff      	cmp	r0, #255	; 0xff
 80a2f52:	d010      	beq.n	80a2f76 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2f54:	2806      	cmp	r0, #6
 80a2f56:	d804      	bhi.n	80a2f62 <digitalWrite+0x1c>
 80a2f58:	234d      	movs	r3, #77	; 0x4d
 80a2f5a:	fa23 f000 	lsr.w	r0, r3, r0
 80a2f5e:	07c3      	lsls	r3, r0, #31
 80a2f60:	d409      	bmi.n	80a2f76 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f62:	4620      	mov	r0, r4
 80a2f64:	f7ff ffba 	bl	80a2edc <pinAvailable>
 80a2f68:	b128      	cbz	r0, 80a2f76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f6a:	4629      	mov	r1, r5
 80a2f6c:	4620      	mov	r0, r4
}
 80a2f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f72:	f7fe b9ab 	b.w	80a12cc <HAL_GPIO_Write>
 80a2f76:	bd38      	pop	{r3, r4, r5, pc}

080a2f78 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2f78:	b510      	push	{r4, lr}
 80a2f7a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f7c:	f7fe f99e 	bl	80a12bc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2f80:	3804      	subs	r0, #4
 80a2f82:	b2c0      	uxtb	r0, r0
 80a2f84:	2801      	cmp	r0, #1
 80a2f86:	d908      	bls.n	80a2f9a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	f7ff ffa7 	bl	80a2edc <pinAvailable>
 80a2f8e:	b120      	cbz	r0, 80a2f9a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2f90:	4620      	mov	r0, r4
}
 80a2f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2f96:	f7fe b9a1 	b.w	80a12dc <HAL_GPIO_Read>
}
 80a2f9a:	2000      	movs	r0, #0
 80a2f9c:	bd10      	pop	{r4, pc}
	...

080a2fa0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2fa0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2fa2:	4c0c      	ldr	r4, [pc, #48]	; (80a2fd4 <_GLOBAL__sub_I_SPI+0x34>)
 80a2fa4:	4e0c      	ldr	r6, [pc, #48]	; (80a2fd8 <_GLOBAL__sub_I_SPI+0x38>)
 80a2fa6:	4d0d      	ldr	r5, [pc, #52]	; (80a2fdc <_GLOBAL__sub_I_SPI+0x3c>)
 80a2fa8:	2100      	movs	r1, #0
 80a2faa:	4620      	mov	r0, r4
 80a2fac:	f7fe fc0e 	bl	80a17cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2fb0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2fb2:	4c0b      	ldr	r4, [pc, #44]	; (80a2fe0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2fb4:	4632      	mov	r2, r6
 80a2fb6:	4629      	mov	r1, r5
 80a2fb8:	f000 f84c 	bl	80a3054 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2fbc:	2101      	movs	r1, #1
 80a2fbe:	4620      	mov	r0, r4
 80a2fc0:	f7fe fc04 	bl	80a17cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2fc4:	4632      	mov	r2, r6
 80a2fc6:	4629      	mov	r1, r5
 80a2fc8:	4620      	mov	r0, r4
 80a2fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2fce:	f000 b841 	b.w	80a3054 <__aeabi_atexit>
 80a2fd2:	bf00      	nop
 80a2fd4:	200001ec 	.word	0x200001ec
 80a2fd8:	200000c8 	.word	0x200000c8
 80a2fdc:	080a17bd 	.word	0x080a17bd
 80a2fe0:	200001fc 	.word	0x200001fc

080a2fe4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2fe4:	b513      	push	{r0, r1, r4, lr}
 80a2fe6:	4c08      	ldr	r4, [pc, #32]	; (80a3008 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2fe8:	2300      	movs	r3, #0
 80a2fea:	461a      	mov	r2, r3
 80a2fec:	4619      	mov	r1, r3
 80a2fee:	9300      	str	r3, [sp, #0]
 80a2ff0:	4620      	mov	r0, r4
 80a2ff2:	f7ff fceb 	bl	80a29cc <_ZN9IPAddressC1Ehhhh>
 80a2ff6:	4620      	mov	r0, r4
 80a2ff8:	4a04      	ldr	r2, [pc, #16]	; (80a300c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2ffa:	4905      	ldr	r1, [pc, #20]	; (80a3010 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2ffc:	b002      	add	sp, #8
 80a2ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3002:	f000 b827 	b.w	80a3054 <__aeabi_atexit>
 80a3006:	bf00      	nop
 80a3008:	20000210 	.word	0x20000210
 80a300c:	200000c8 	.word	0x200000c8
 80a3010:	080a291d 	.word	0x080a291d

080a3014 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3014:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3016:	4d0b      	ldr	r5, [pc, #44]	; (80a3044 <_Z19__fetch_global_Wirev+0x30>)
 80a3018:	6829      	ldr	r1, [r5, #0]
 80a301a:	f011 0401 	ands.w	r4, r1, #1
 80a301e:	d10f      	bne.n	80a3040 <_Z19__fetch_global_Wirev+0x2c>
 80a3020:	4628      	mov	r0, r5
 80a3022:	f7fd f840 	bl	80a00a6 <__cxa_guard_acquire>
 80a3026:	b158      	cbz	r0, 80a3040 <_Z19__fetch_global_Wirev+0x2c>
 80a3028:	4621      	mov	r1, r4
 80a302a:	4807      	ldr	r0, [pc, #28]	; (80a3048 <_Z19__fetch_global_Wirev+0x34>)
 80a302c:	f7ff fe6c 	bl	80a2d08 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3030:	4628      	mov	r0, r5
 80a3032:	f7fd f83d 	bl	80a00b0 <__cxa_guard_release>
 80a3036:	4a05      	ldr	r2, [pc, #20]	; (80a304c <_Z19__fetch_global_Wirev+0x38>)
 80a3038:	4905      	ldr	r1, [pc, #20]	; (80a3050 <_Z19__fetch_global_Wirev+0x3c>)
 80a303a:	4803      	ldr	r0, [pc, #12]	; (80a3048 <_Z19__fetch_global_Wirev+0x34>)
 80a303c:	f000 f80a 	bl	80a3054 <__aeabi_atexit>
	return wire;
}
 80a3040:	4801      	ldr	r0, [pc, #4]	; (80a3048 <_Z19__fetch_global_Wirev+0x34>)
 80a3042:	bd38      	pop	{r3, r4, r5, pc}
 80a3044:	20000228 	.word	0x20000228
 80a3048:	2000022c 	.word	0x2000022c
 80a304c:	200000c8 	.word	0x200000c8
 80a3050:	080a2cb1 	.word	0x080a2cb1

080a3054 <__aeabi_atexit>:
 80a3054:	460b      	mov	r3, r1
 80a3056:	4601      	mov	r1, r0
 80a3058:	4618      	mov	r0, r3
 80a305a:	f002 bb89 	b.w	80a5770 <__cxa_atexit>

080a305e <_ZdlPvj>:
 80a305e:	f7fd b820 	b.w	80a00a2 <_ZdlPv>

080a3062 <_ZSt25__throw_bad_function_callv>:
 80a3062:	b508      	push	{r3, lr}
 80a3064:	f7fe fb92 	bl	80a178c <abort>

080a3068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3068:	4b18      	ldr	r3, [pc, #96]	; (80a30cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a306a:	681a      	ldr	r2, [r3, #0]
 80a306c:	07d1      	lsls	r1, r2, #31
 80a306e:	bf5c      	itt	pl
 80a3070:	2201      	movpl	r2, #1
 80a3072:	601a      	strpl	r2, [r3, #0]
 80a3074:	4b16      	ldr	r3, [pc, #88]	; (80a30d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3076:	681a      	ldr	r2, [r3, #0]
 80a3078:	07d2      	lsls	r2, r2, #31
 80a307a:	bf5c      	itt	pl
 80a307c:	2201      	movpl	r2, #1
 80a307e:	601a      	strpl	r2, [r3, #0]
 80a3080:	4b14      	ldr	r3, [pc, #80]	; (80a30d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3082:	681a      	ldr	r2, [r3, #0]
 80a3084:	07d0      	lsls	r0, r2, #31
 80a3086:	bf5c      	itt	pl
 80a3088:	2201      	movpl	r2, #1
 80a308a:	601a      	strpl	r2, [r3, #0]
 80a308c:	4b12      	ldr	r3, [pc, #72]	; (80a30d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a308e:	681a      	ldr	r2, [r3, #0]
 80a3090:	07d1      	lsls	r1, r2, #31
 80a3092:	bf5c      	itt	pl
 80a3094:	2201      	movpl	r2, #1
 80a3096:	601a      	strpl	r2, [r3, #0]
 80a3098:	4b10      	ldr	r3, [pc, #64]	; (80a30dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a309a:	681a      	ldr	r2, [r3, #0]
 80a309c:	07d2      	lsls	r2, r2, #31
 80a309e:	bf5c      	itt	pl
 80a30a0:	2201      	movpl	r2, #1
 80a30a2:	601a      	strpl	r2, [r3, #0]
 80a30a4:	4b0e      	ldr	r3, [pc, #56]	; (80a30e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a30a6:	681a      	ldr	r2, [r3, #0]
 80a30a8:	07d0      	lsls	r0, r2, #31
 80a30aa:	bf5c      	itt	pl
 80a30ac:	2201      	movpl	r2, #1
 80a30ae:	601a      	strpl	r2, [r3, #0]
 80a30b0:	4b0c      	ldr	r3, [pc, #48]	; (80a30e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a30b2:	681a      	ldr	r2, [r3, #0]
 80a30b4:	07d1      	lsls	r1, r2, #31
 80a30b6:	bf5c      	itt	pl
 80a30b8:	2201      	movpl	r2, #1
 80a30ba:	601a      	strpl	r2, [r3, #0]
 80a30bc:	4b0a      	ldr	r3, [pc, #40]	; (80a30e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a30be:	681a      	ldr	r2, [r3, #0]
 80a30c0:	07d2      	lsls	r2, r2, #31
 80a30c2:	bf5c      	itt	pl
 80a30c4:	2201      	movpl	r2, #1
 80a30c6:	601a      	strpl	r2, [r3, #0]
 80a30c8:	4770      	bx	lr
 80a30ca:	bf00      	nop
 80a30cc:	2000025c 	.word	0x2000025c
 80a30d0:	20000258 	.word	0x20000258
 80a30d4:	20000254 	.word	0x20000254
 80a30d8:	20000250 	.word	0x20000250
 80a30dc:	2000024c 	.word	0x2000024c
 80a30e0:	20000248 	.word	0x20000248
 80a30e4:	20000244 	.word	0x20000244
 80a30e8:	20000240 	.word	0x20000240

080a30ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a30ec:	4b24      	ldr	r3, [pc, #144]	; (80a3180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a30ee:	681a      	ldr	r2, [r3, #0]
 80a30f0:	07d0      	lsls	r0, r2, #31
 80a30f2:	bf5c      	itt	pl
 80a30f4:	2201      	movpl	r2, #1
 80a30f6:	601a      	strpl	r2, [r3, #0]
 80a30f8:	4b22      	ldr	r3, [pc, #136]	; (80a3184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a30fa:	681a      	ldr	r2, [r3, #0]
 80a30fc:	07d1      	lsls	r1, r2, #31
 80a30fe:	bf5c      	itt	pl
 80a3100:	2201      	movpl	r2, #1
 80a3102:	601a      	strpl	r2, [r3, #0]
 80a3104:	4b20      	ldr	r3, [pc, #128]	; (80a3188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3106:	681a      	ldr	r2, [r3, #0]
 80a3108:	07d2      	lsls	r2, r2, #31
 80a310a:	bf5c      	itt	pl
 80a310c:	2201      	movpl	r2, #1
 80a310e:	601a      	strpl	r2, [r3, #0]
 80a3110:	4b1e      	ldr	r3, [pc, #120]	; (80a318c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3112:	681a      	ldr	r2, [r3, #0]
 80a3114:	07d0      	lsls	r0, r2, #31
 80a3116:	bf5c      	itt	pl
 80a3118:	2201      	movpl	r2, #1
 80a311a:	601a      	strpl	r2, [r3, #0]
 80a311c:	4b1c      	ldr	r3, [pc, #112]	; (80a3190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a311e:	681a      	ldr	r2, [r3, #0]
 80a3120:	07d1      	lsls	r1, r2, #31
 80a3122:	bf5c      	itt	pl
 80a3124:	2201      	movpl	r2, #1
 80a3126:	601a      	strpl	r2, [r3, #0]
 80a3128:	4b1a      	ldr	r3, [pc, #104]	; (80a3194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a312a:	681a      	ldr	r2, [r3, #0]
 80a312c:	07d2      	lsls	r2, r2, #31
 80a312e:	bf5c      	itt	pl
 80a3130:	2201      	movpl	r2, #1
 80a3132:	601a      	strpl	r2, [r3, #0]
 80a3134:	4b18      	ldr	r3, [pc, #96]	; (80a3198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3136:	681a      	ldr	r2, [r3, #0]
 80a3138:	07d0      	lsls	r0, r2, #31
 80a313a:	bf5c      	itt	pl
 80a313c:	2201      	movpl	r2, #1
 80a313e:	601a      	strpl	r2, [r3, #0]
 80a3140:	4b16      	ldr	r3, [pc, #88]	; (80a319c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3142:	681a      	ldr	r2, [r3, #0]
 80a3144:	07d1      	lsls	r1, r2, #31
 80a3146:	bf5c      	itt	pl
 80a3148:	2201      	movpl	r2, #1
 80a314a:	601a      	strpl	r2, [r3, #0]
 80a314c:	4b14      	ldr	r3, [pc, #80]	; (80a31a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a314e:	681a      	ldr	r2, [r3, #0]
 80a3150:	07d2      	lsls	r2, r2, #31
 80a3152:	bf5c      	itt	pl
 80a3154:	2201      	movpl	r2, #1
 80a3156:	601a      	strpl	r2, [r3, #0]
 80a3158:	4b12      	ldr	r3, [pc, #72]	; (80a31a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a315a:	681a      	ldr	r2, [r3, #0]
 80a315c:	07d0      	lsls	r0, r2, #31
 80a315e:	bf5c      	itt	pl
 80a3160:	2201      	movpl	r2, #1
 80a3162:	601a      	strpl	r2, [r3, #0]
 80a3164:	4b10      	ldr	r3, [pc, #64]	; (80a31a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3166:	681a      	ldr	r2, [r3, #0]
 80a3168:	07d1      	lsls	r1, r2, #31
 80a316a:	bf5c      	itt	pl
 80a316c:	2201      	movpl	r2, #1
 80a316e:	601a      	strpl	r2, [r3, #0]
 80a3170:	4b0e      	ldr	r3, [pc, #56]	; (80a31ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3172:	681a      	ldr	r2, [r3, #0]
 80a3174:	07d2      	lsls	r2, r2, #31
 80a3176:	bf5c      	itt	pl
 80a3178:	2201      	movpl	r2, #1
 80a317a:	601a      	strpl	r2, [r3, #0]
 80a317c:	4770      	bx	lr
 80a317e:	bf00      	nop
 80a3180:	2000028c 	.word	0x2000028c
 80a3184:	20000288 	.word	0x20000288
 80a3188:	20000284 	.word	0x20000284
 80a318c:	20000280 	.word	0x20000280
 80a3190:	2000027c 	.word	0x2000027c
 80a3194:	20000278 	.word	0x20000278
 80a3198:	20000274 	.word	0x20000274
 80a319c:	20000270 	.word	0x20000270
 80a31a0:	2000026c 	.word	0x2000026c
 80a31a4:	20000268 	.word	0x20000268
 80a31a8:	20000264 	.word	0x20000264
 80a31ac:	20000260 	.word	0x20000260

080a31b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a31b0:	4b24      	ldr	r3, [pc, #144]	; (80a3244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a31b2:	681a      	ldr	r2, [r3, #0]
 80a31b4:	07d0      	lsls	r0, r2, #31
 80a31b6:	bf5c      	itt	pl
 80a31b8:	2201      	movpl	r2, #1
 80a31ba:	601a      	strpl	r2, [r3, #0]
 80a31bc:	4b22      	ldr	r3, [pc, #136]	; (80a3248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a31be:	681a      	ldr	r2, [r3, #0]
 80a31c0:	07d1      	lsls	r1, r2, #31
 80a31c2:	bf5c      	itt	pl
 80a31c4:	2201      	movpl	r2, #1
 80a31c6:	601a      	strpl	r2, [r3, #0]
 80a31c8:	4b20      	ldr	r3, [pc, #128]	; (80a324c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a31ca:	681a      	ldr	r2, [r3, #0]
 80a31cc:	07d2      	lsls	r2, r2, #31
 80a31ce:	bf5c      	itt	pl
 80a31d0:	2201      	movpl	r2, #1
 80a31d2:	601a      	strpl	r2, [r3, #0]
 80a31d4:	4b1e      	ldr	r3, [pc, #120]	; (80a3250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a31d6:	681a      	ldr	r2, [r3, #0]
 80a31d8:	07d0      	lsls	r0, r2, #31
 80a31da:	bf5c      	itt	pl
 80a31dc:	2201      	movpl	r2, #1
 80a31de:	601a      	strpl	r2, [r3, #0]
 80a31e0:	4b1c      	ldr	r3, [pc, #112]	; (80a3254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a31e2:	681a      	ldr	r2, [r3, #0]
 80a31e4:	07d1      	lsls	r1, r2, #31
 80a31e6:	bf5c      	itt	pl
 80a31e8:	2201      	movpl	r2, #1
 80a31ea:	601a      	strpl	r2, [r3, #0]
 80a31ec:	4b1a      	ldr	r3, [pc, #104]	; (80a3258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a31ee:	681a      	ldr	r2, [r3, #0]
 80a31f0:	07d2      	lsls	r2, r2, #31
 80a31f2:	bf5c      	itt	pl
 80a31f4:	2201      	movpl	r2, #1
 80a31f6:	601a      	strpl	r2, [r3, #0]
 80a31f8:	4b18      	ldr	r3, [pc, #96]	; (80a325c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a31fa:	681a      	ldr	r2, [r3, #0]
 80a31fc:	07d0      	lsls	r0, r2, #31
 80a31fe:	bf5c      	itt	pl
 80a3200:	2201      	movpl	r2, #1
 80a3202:	601a      	strpl	r2, [r3, #0]
 80a3204:	4b16      	ldr	r3, [pc, #88]	; (80a3260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3206:	681a      	ldr	r2, [r3, #0]
 80a3208:	07d1      	lsls	r1, r2, #31
 80a320a:	bf5c      	itt	pl
 80a320c:	2201      	movpl	r2, #1
 80a320e:	601a      	strpl	r2, [r3, #0]
 80a3210:	4b14      	ldr	r3, [pc, #80]	; (80a3264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3212:	681a      	ldr	r2, [r3, #0]
 80a3214:	07d2      	lsls	r2, r2, #31
 80a3216:	bf5c      	itt	pl
 80a3218:	2201      	movpl	r2, #1
 80a321a:	601a      	strpl	r2, [r3, #0]
 80a321c:	4b12      	ldr	r3, [pc, #72]	; (80a3268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a321e:	681a      	ldr	r2, [r3, #0]
 80a3220:	07d0      	lsls	r0, r2, #31
 80a3222:	bf5c      	itt	pl
 80a3224:	2201      	movpl	r2, #1
 80a3226:	601a      	strpl	r2, [r3, #0]
 80a3228:	4b10      	ldr	r3, [pc, #64]	; (80a326c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a322a:	681a      	ldr	r2, [r3, #0]
 80a322c:	07d1      	lsls	r1, r2, #31
 80a322e:	bf5c      	itt	pl
 80a3230:	2201      	movpl	r2, #1
 80a3232:	601a      	strpl	r2, [r3, #0]
 80a3234:	4b0e      	ldr	r3, [pc, #56]	; (80a3270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3236:	681a      	ldr	r2, [r3, #0]
 80a3238:	07d2      	lsls	r2, r2, #31
 80a323a:	bf5c      	itt	pl
 80a323c:	2201      	movpl	r2, #1
 80a323e:	601a      	strpl	r2, [r3, #0]
 80a3240:	4770      	bx	lr
 80a3242:	bf00      	nop
 80a3244:	200002bc 	.word	0x200002bc
 80a3248:	200002b8 	.word	0x200002b8
 80a324c:	200002b4 	.word	0x200002b4
 80a3250:	200002b0 	.word	0x200002b0
 80a3254:	200002ac 	.word	0x200002ac
 80a3258:	200002a8 	.word	0x200002a8
 80a325c:	200002a4 	.word	0x200002a4
 80a3260:	200002a0 	.word	0x200002a0
 80a3264:	2000029c 	.word	0x2000029c
 80a3268:	20000298 	.word	0x20000298
 80a326c:	20000294 	.word	0x20000294
 80a3270:	20000290 	.word	0x20000290

080a3274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3274:	4b18      	ldr	r3, [pc, #96]	; (80a32d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3276:	681a      	ldr	r2, [r3, #0]
 80a3278:	07d1      	lsls	r1, r2, #31
 80a327a:	bf5c      	itt	pl
 80a327c:	2201      	movpl	r2, #1
 80a327e:	601a      	strpl	r2, [r3, #0]
 80a3280:	4b16      	ldr	r3, [pc, #88]	; (80a32dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3282:	681a      	ldr	r2, [r3, #0]
 80a3284:	07d2      	lsls	r2, r2, #31
 80a3286:	bf5c      	itt	pl
 80a3288:	2201      	movpl	r2, #1
 80a328a:	601a      	strpl	r2, [r3, #0]
 80a328c:	4b14      	ldr	r3, [pc, #80]	; (80a32e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a328e:	681a      	ldr	r2, [r3, #0]
 80a3290:	07d0      	lsls	r0, r2, #31
 80a3292:	bf5c      	itt	pl
 80a3294:	2201      	movpl	r2, #1
 80a3296:	601a      	strpl	r2, [r3, #0]
 80a3298:	4b12      	ldr	r3, [pc, #72]	; (80a32e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a329a:	681a      	ldr	r2, [r3, #0]
 80a329c:	07d1      	lsls	r1, r2, #31
 80a329e:	bf5c      	itt	pl
 80a32a0:	2201      	movpl	r2, #1
 80a32a2:	601a      	strpl	r2, [r3, #0]
 80a32a4:	4b10      	ldr	r3, [pc, #64]	; (80a32e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a32a6:	681a      	ldr	r2, [r3, #0]
 80a32a8:	07d2      	lsls	r2, r2, #31
 80a32aa:	bf5c      	itt	pl
 80a32ac:	2201      	movpl	r2, #1
 80a32ae:	601a      	strpl	r2, [r3, #0]
 80a32b0:	4b0e      	ldr	r3, [pc, #56]	; (80a32ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a32b2:	681a      	ldr	r2, [r3, #0]
 80a32b4:	07d0      	lsls	r0, r2, #31
 80a32b6:	bf5c      	itt	pl
 80a32b8:	2201      	movpl	r2, #1
 80a32ba:	601a      	strpl	r2, [r3, #0]
 80a32bc:	4b0c      	ldr	r3, [pc, #48]	; (80a32f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a32be:	681a      	ldr	r2, [r3, #0]
 80a32c0:	07d1      	lsls	r1, r2, #31
 80a32c2:	bf5c      	itt	pl
 80a32c4:	2201      	movpl	r2, #1
 80a32c6:	601a      	strpl	r2, [r3, #0]
 80a32c8:	4b0a      	ldr	r3, [pc, #40]	; (80a32f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a32ca:	681a      	ldr	r2, [r3, #0]
 80a32cc:	07d2      	lsls	r2, r2, #31
 80a32ce:	bf5c      	itt	pl
 80a32d0:	2201      	movpl	r2, #1
 80a32d2:	601a      	strpl	r2, [r3, #0]
 80a32d4:	4770      	bx	lr
 80a32d6:	bf00      	nop
 80a32d8:	200002dc 	.word	0x200002dc
 80a32dc:	200002d8 	.word	0x200002d8
 80a32e0:	200002d4 	.word	0x200002d4
 80a32e4:	200002d0 	.word	0x200002d0
 80a32e8:	200002cc 	.word	0x200002cc
 80a32ec:	200002c8 	.word	0x200002c8
 80a32f0:	200002c4 	.word	0x200002c4
 80a32f4:	200002c0 	.word	0x200002c0

080a32f8 <pow>:
 80a32f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a32fc:	b08d      	sub	sp, #52	; 0x34
 80a32fe:	4606      	mov	r6, r0
 80a3300:	460f      	mov	r7, r1
 80a3302:	4614      	mov	r4, r2
 80a3304:	461d      	mov	r5, r3
 80a3306:	f000 f98f 	bl	80a3628 <__ieee754_pow>
 80a330a:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a361c <pow+0x324>
 80a330e:	e9cd 0100 	strd	r0, r1, [sp]
 80a3312:	f999 8000 	ldrsb.w	r8, [r9]
 80a3316:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a331a:	d046      	beq.n	80a33aa <pow+0xb2>
 80a331c:	4622      	mov	r2, r4
 80a331e:	462b      	mov	r3, r5
 80a3320:	4620      	mov	r0, r4
 80a3322:	4629      	mov	r1, r5
 80a3324:	f001 fd14 	bl	80a4d50 <__aeabi_dcmpun>
 80a3328:	4683      	mov	fp, r0
 80a332a:	2800      	cmp	r0, #0
 80a332c:	d13d      	bne.n	80a33aa <pow+0xb2>
 80a332e:	4632      	mov	r2, r6
 80a3330:	463b      	mov	r3, r7
 80a3332:	4630      	mov	r0, r6
 80a3334:	4639      	mov	r1, r7
 80a3336:	f001 fd0b 	bl	80a4d50 <__aeabi_dcmpun>
 80a333a:	4682      	mov	sl, r0
 80a333c:	2800      	cmp	r0, #0
 80a333e:	d174      	bne.n	80a342a <pow+0x132>
 80a3340:	4630      	mov	r0, r6
 80a3342:	4639      	mov	r1, r7
 80a3344:	2200      	movs	r2, #0
 80a3346:	2300      	movs	r3, #0
 80a3348:	f001 fcd0 	bl	80a4cec <__aeabi_dcmpeq>
 80a334c:	2800      	cmp	r0, #0
 80a334e:	d033      	beq.n	80a33b8 <pow+0xc0>
 80a3350:	2200      	movs	r2, #0
 80a3352:	2300      	movs	r3, #0
 80a3354:	4620      	mov	r0, r4
 80a3356:	4629      	mov	r1, r5
 80a3358:	f001 fcc8 	bl	80a4cec <__aeabi_dcmpeq>
 80a335c:	4683      	mov	fp, r0
 80a335e:	b1b8      	cbz	r0, 80a3390 <pow+0x98>
 80a3360:	4aa9      	ldr	r2, [pc, #676]	; (80a3608 <pow+0x310>)
 80a3362:	2301      	movs	r3, #1
 80a3364:	2000      	movs	r0, #0
 80a3366:	2100      	movs	r1, #0
 80a3368:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a336c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3370:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3374:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3378:	9203      	str	r2, [sp, #12]
 80a337a:	9302      	str	r3, [sp, #8]
 80a337c:	f1b8 0f00 	cmp.w	r8, #0
 80a3380:	d06c      	beq.n	80a345c <pow+0x164>
 80a3382:	4ba2      	ldr	r3, [pc, #648]	; (80a360c <pow+0x314>)
 80a3384:	2200      	movs	r2, #0
 80a3386:	4610      	mov	r0, r2
 80a3388:	4619      	mov	r1, r3
 80a338a:	b00d      	add	sp, #52	; 0x34
 80a338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3390:	4620      	mov	r0, r4
 80a3392:	4629      	mov	r1, r5
 80a3394:	f000 ff72 	bl	80a427c <finite>
 80a3398:	b138      	cbz	r0, 80a33aa <pow+0xb2>
 80a339a:	2200      	movs	r2, #0
 80a339c:	2300      	movs	r3, #0
 80a339e:	4620      	mov	r0, r4
 80a33a0:	4629      	mov	r1, r5
 80a33a2:	f001 fcad 	bl	80a4d00 <__aeabi_dcmplt>
 80a33a6:	2800      	cmp	r0, #0
 80a33a8:	d16a      	bne.n	80a3480 <pow+0x188>
 80a33aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a33ae:	4610      	mov	r0, r2
 80a33b0:	4619      	mov	r1, r3
 80a33b2:	b00d      	add	sp, #52	; 0x34
 80a33b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a33b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a33bc:	f000 ff5e 	bl	80a427c <finite>
 80a33c0:	4680      	mov	r8, r0
 80a33c2:	2800      	cmp	r0, #0
 80a33c4:	d07d      	beq.n	80a34c2 <pow+0x1ca>
 80a33c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a33ca:	f04f 0a00 	mov.w	sl, #0
 80a33ce:	f04f 0b00 	mov.w	fp, #0
 80a33d2:	4652      	mov	r2, sl
 80a33d4:	465b      	mov	r3, fp
 80a33d6:	f001 fc89 	bl	80a4cec <__aeabi_dcmpeq>
 80a33da:	2800      	cmp	r0, #0
 80a33dc:	d0e5      	beq.n	80a33aa <pow+0xb2>
 80a33de:	4630      	mov	r0, r6
 80a33e0:	4639      	mov	r1, r7
 80a33e2:	f000 ff4b 	bl	80a427c <finite>
 80a33e6:	2800      	cmp	r0, #0
 80a33e8:	d0df      	beq.n	80a33aa <pow+0xb2>
 80a33ea:	4620      	mov	r0, r4
 80a33ec:	4629      	mov	r1, r5
 80a33ee:	f000 ff45 	bl	80a427c <finite>
 80a33f2:	2800      	cmp	r0, #0
 80a33f4:	d0d9      	beq.n	80a33aa <pow+0xb2>
 80a33f6:	f999 3000 	ldrsb.w	r3, [r9]
 80a33fa:	4883      	ldr	r0, [pc, #524]	; (80a3608 <pow+0x310>)
 80a33fc:	2104      	movs	r1, #4
 80a33fe:	2200      	movs	r2, #0
 80a3400:	2b02      	cmp	r3, #2
 80a3402:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3406:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a340a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a340e:	9003      	str	r0, [sp, #12]
 80a3410:	9102      	str	r1, [sp, #8]
 80a3412:	920a      	str	r2, [sp, #40]	; 0x28
 80a3414:	d004      	beq.n	80a3420 <pow+0x128>
 80a3416:	a802      	add	r0, sp, #8
 80a3418:	f000 ff36 	bl	80a4288 <matherr>
 80a341c:	2800      	cmp	r0, #0
 80a341e:	d147      	bne.n	80a34b0 <pow+0x1b8>
 80a3420:	f7fe f9c4 	bl	80a17ac <__errno>
 80a3424:	2322      	movs	r3, #34	; 0x22
 80a3426:	6003      	str	r3, [r0, #0]
 80a3428:	e042      	b.n	80a34b0 <pow+0x1b8>
 80a342a:	2200      	movs	r2, #0
 80a342c:	2300      	movs	r3, #0
 80a342e:	4620      	mov	r0, r4
 80a3430:	4629      	mov	r1, r5
 80a3432:	f001 fc5b 	bl	80a4cec <__aeabi_dcmpeq>
 80a3436:	2800      	cmp	r0, #0
 80a3438:	d0b7      	beq.n	80a33aa <pow+0xb2>
 80a343a:	4b74      	ldr	r3, [pc, #464]	; (80a360c <pow+0x314>)
 80a343c:	4872      	ldr	r0, [pc, #456]	; (80a3608 <pow+0x310>)
 80a343e:	2200      	movs	r2, #0
 80a3440:	2101      	movs	r1, #1
 80a3442:	f1b8 0f02 	cmp.w	r8, #2
 80a3446:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a344a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a344e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3452:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3456:	9003      	str	r0, [sp, #12]
 80a3458:	9102      	str	r1, [sp, #8]
 80a345a:	d0a8      	beq.n	80a33ae <pow+0xb6>
 80a345c:	a802      	add	r0, sp, #8
 80a345e:	f000 ff13 	bl	80a4288 <matherr>
 80a3462:	2800      	cmp	r0, #0
 80a3464:	d07e      	beq.n	80a3564 <pow+0x26c>
 80a3466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3468:	b343      	cbz	r3, 80a34bc <pow+0x1c4>
 80a346a:	f7fe f99f 	bl	80a17ac <__errno>
 80a346e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3472:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3474:	6001      	str	r1, [r0, #0]
 80a3476:	4610      	mov	r0, r2
 80a3478:	4619      	mov	r1, r3
 80a347a:	b00d      	add	sp, #52	; 0x34
 80a347c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3480:	4961      	ldr	r1, [pc, #388]	; (80a3608 <pow+0x310>)
 80a3482:	f999 3000 	ldrsb.w	r3, [r9]
 80a3486:	2201      	movs	r2, #1
 80a3488:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a348c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3490:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3494:	9103      	str	r1, [sp, #12]
 80a3496:	9202      	str	r2, [sp, #8]
 80a3498:	2b00      	cmp	r3, #0
 80a349a:	d068      	beq.n	80a356e <pow+0x276>
 80a349c:	495c      	ldr	r1, [pc, #368]	; (80a3610 <pow+0x318>)
 80a349e:	2000      	movs	r0, #0
 80a34a0:	2b02      	cmp	r3, #2
 80a34a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a34a6:	d166      	bne.n	80a3576 <pow+0x27e>
 80a34a8:	f7fe f980 	bl	80a17ac <__errno>
 80a34ac:	2321      	movs	r3, #33	; 0x21
 80a34ae:	6003      	str	r3, [r0, #0]
 80a34b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a34b2:	b11b      	cbz	r3, 80a34bc <pow+0x1c4>
 80a34b4:	f7fe f97a 	bl	80a17ac <__errno>
 80a34b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a34ba:	6003      	str	r3, [r0, #0]
 80a34bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a34c0:	e775      	b.n	80a33ae <pow+0xb6>
 80a34c2:	4630      	mov	r0, r6
 80a34c4:	4639      	mov	r1, r7
 80a34c6:	f000 fed9 	bl	80a427c <finite>
 80a34ca:	2800      	cmp	r0, #0
 80a34cc:	f43f af7b 	beq.w	80a33c6 <pow+0xce>
 80a34d0:	4620      	mov	r0, r4
 80a34d2:	4629      	mov	r1, r5
 80a34d4:	f000 fed2 	bl	80a427c <finite>
 80a34d8:	2800      	cmp	r0, #0
 80a34da:	f43f af74 	beq.w	80a33c6 <pow+0xce>
 80a34de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a34e2:	4610      	mov	r0, r2
 80a34e4:	4619      	mov	r1, r3
 80a34e6:	f001 fc33 	bl	80a4d50 <__aeabi_dcmpun>
 80a34ea:	2800      	cmp	r0, #0
 80a34ec:	d16f      	bne.n	80a35ce <pow+0x2d6>
 80a34ee:	4b46      	ldr	r3, [pc, #280]	; (80a3608 <pow+0x310>)
 80a34f0:	f999 8000 	ldrsb.w	r8, [r9]
 80a34f4:	9303      	str	r3, [sp, #12]
 80a34f6:	2303      	movs	r3, #3
 80a34f8:	900a      	str	r0, [sp, #40]	; 0x28
 80a34fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a34fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3502:	9302      	str	r3, [sp, #8]
 80a3504:	f1b8 0f00 	cmp.w	r8, #0
 80a3508:	d13b      	bne.n	80a3582 <pow+0x28a>
 80a350a:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3620 <pow+0x328>
 80a350e:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a3512:	2200      	movs	r2, #0
 80a3514:	2300      	movs	r3, #0
 80a3516:	4630      	mov	r0, r6
 80a3518:	4639      	mov	r1, r7
 80a351a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a351e:	f001 fbef 	bl	80a4d00 <__aeabi_dcmplt>
 80a3522:	2800      	cmp	r0, #0
 80a3524:	f43f af77 	beq.w	80a3416 <pow+0x11e>
 80a3528:	2200      	movs	r2, #0
 80a352a:	4b3a      	ldr	r3, [pc, #232]	; (80a3614 <pow+0x31c>)
 80a352c:	4620      	mov	r0, r4
 80a352e:	4629      	mov	r1, r5
 80a3530:	f001 f974 	bl	80a481c <__aeabi_dmul>
 80a3534:	4604      	mov	r4, r0
 80a3536:	460d      	mov	r5, r1
 80a3538:	f000 feae 	bl	80a4298 <rint>
 80a353c:	4602      	mov	r2, r0
 80a353e:	460b      	mov	r3, r1
 80a3540:	4620      	mov	r0, r4
 80a3542:	4629      	mov	r1, r5
 80a3544:	f001 fbd2 	bl	80a4cec <__aeabi_dcmpeq>
 80a3548:	2800      	cmp	r0, #0
 80a354a:	d13d      	bne.n	80a35c8 <pow+0x2d0>
 80a354c:	4b32      	ldr	r3, [pc, #200]	; (80a3618 <pow+0x320>)
 80a354e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3552:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3556:	f999 8000 	ldrsb.w	r8, [r9]
 80a355a:	f1b8 0f02 	cmp.w	r8, #2
 80a355e:	f47f af5a 	bne.w	80a3416 <pow+0x11e>
 80a3562:	e75d      	b.n	80a3420 <pow+0x128>
 80a3564:	f7fe f922 	bl	80a17ac <__errno>
 80a3568:	2321      	movs	r3, #33	; 0x21
 80a356a:	6003      	str	r3, [r0, #0]
 80a356c:	e77b      	b.n	80a3466 <pow+0x16e>
 80a356e:	2300      	movs	r3, #0
 80a3570:	2400      	movs	r4, #0
 80a3572:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a3576:	a802      	add	r0, sp, #8
 80a3578:	f000 fe86 	bl	80a4288 <matherr>
 80a357c:	2800      	cmp	r0, #0
 80a357e:	d197      	bne.n	80a34b0 <pow+0x1b8>
 80a3580:	e792      	b.n	80a34a8 <pow+0x1b0>
 80a3582:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a3624 <pow+0x32c>
 80a3586:	f04f 0a00 	mov.w	sl, #0
 80a358a:	2200      	movs	r2, #0
 80a358c:	2300      	movs	r3, #0
 80a358e:	4630      	mov	r0, r6
 80a3590:	4639      	mov	r1, r7
 80a3592:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3596:	f001 fbb3 	bl	80a4d00 <__aeabi_dcmplt>
 80a359a:	2800      	cmp	r0, #0
 80a359c:	d0dd      	beq.n	80a355a <pow+0x262>
 80a359e:	2200      	movs	r2, #0
 80a35a0:	4b1c      	ldr	r3, [pc, #112]	; (80a3614 <pow+0x31c>)
 80a35a2:	4620      	mov	r0, r4
 80a35a4:	4629      	mov	r1, r5
 80a35a6:	f001 f939 	bl	80a481c <__aeabi_dmul>
 80a35aa:	4604      	mov	r4, r0
 80a35ac:	460d      	mov	r5, r1
 80a35ae:	f000 fe73 	bl	80a4298 <rint>
 80a35b2:	4602      	mov	r2, r0
 80a35b4:	460b      	mov	r3, r1
 80a35b6:	4620      	mov	r0, r4
 80a35b8:	4629      	mov	r1, r5
 80a35ba:	f001 fb97 	bl	80a4cec <__aeabi_dcmpeq>
 80a35be:	b918      	cbnz	r0, 80a35c8 <pow+0x2d0>
 80a35c0:	4b13      	ldr	r3, [pc, #76]	; (80a3610 <pow+0x318>)
 80a35c2:	2200      	movs	r2, #0
 80a35c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a35c8:	f999 8000 	ldrsb.w	r8, [r9]
 80a35cc:	e7c5      	b.n	80a355a <pow+0x262>
 80a35ce:	4a0e      	ldr	r2, [pc, #56]	; (80a3608 <pow+0x310>)
 80a35d0:	f999 9000 	ldrsb.w	r9, [r9]
 80a35d4:	2301      	movs	r3, #1
 80a35d6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a35da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a35de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a35e2:	9203      	str	r2, [sp, #12]
 80a35e4:	9302      	str	r3, [sp, #8]
 80a35e6:	f1b9 0f00 	cmp.w	r9, #0
 80a35ea:	d0c0      	beq.n	80a356e <pow+0x276>
 80a35ec:	2200      	movs	r2, #0
 80a35ee:	2300      	movs	r3, #0
 80a35f0:	4610      	mov	r0, r2
 80a35f2:	4619      	mov	r1, r3
 80a35f4:	f001 fa3c 	bl	80a4a70 <__aeabi_ddiv>
 80a35f8:	f1b9 0f02 	cmp.w	r9, #2
 80a35fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3600:	f43f af52 	beq.w	80a34a8 <pow+0x1b0>
 80a3604:	e7b7      	b.n	80a3576 <pow+0x27e>
 80a3606:	bf00      	nop
 80a3608:	080a67b4 	.word	0x080a67b4
 80a360c:	3ff00000 	.word	0x3ff00000
 80a3610:	fff00000 	.word	0xfff00000
 80a3614:	3fe00000 	.word	0x3fe00000
 80a3618:	c7efffff 	.word	0xc7efffff
 80a361c:	20000010 	.word	0x20000010
 80a3620:	47efffff 	.word	0x47efffff
 80a3624:	7ff00000 	.word	0x7ff00000

080a3628 <__ieee754_pow>:
 80a3628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a362c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3630:	ea58 0902 	orrs.w	r9, r8, r2
 80a3634:	b093      	sub	sp, #76	; 0x4c
 80a3636:	d03c      	beq.n	80a36b2 <__ieee754_pow+0x8a>
 80a3638:	4c71      	ldr	r4, [pc, #452]	; (80a3800 <__ieee754_pow+0x1d8>)
 80a363a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a363e:	42a6      	cmp	r6, r4
 80a3640:	4683      	mov	fp, r0
 80a3642:	460d      	mov	r5, r1
 80a3644:	dd0c      	ble.n	80a3660 <__ieee754_pow+0x38>
 80a3646:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a364a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a364e:	ea56 000b 	orrs.w	r0, r6, fp
 80a3652:	d138      	bne.n	80a36c6 <__ieee754_pow+0x9e>
 80a3654:	4683      	mov	fp, r0
 80a3656:	496b      	ldr	r1, [pc, #428]	; (80a3804 <__ieee754_pow+0x1dc>)
 80a3658:	4658      	mov	r0, fp
 80a365a:	b013      	add	sp, #76	; 0x4c
 80a365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3660:	469a      	mov	sl, r3
 80a3662:	4696      	mov	lr, r2
 80a3664:	d02b      	beq.n	80a36be <__ieee754_pow+0x96>
 80a3666:	45a0      	cmp	r8, r4
 80a3668:	dced      	bgt.n	80a3646 <__ieee754_pow+0x1e>
 80a366a:	4c65      	ldr	r4, [pc, #404]	; (80a3800 <__ieee754_pow+0x1d8>)
 80a366c:	45a0      	cmp	r8, r4
 80a366e:	d078      	beq.n	80a3762 <__ieee754_pow+0x13a>
 80a3670:	2d00      	cmp	r5, #0
 80a3672:	460f      	mov	r7, r1
 80a3674:	4681      	mov	r9, r0
 80a3676:	e9cd 2300 	strd	r2, r3, [sp]
 80a367a:	db76      	blt.n	80a376a <__ieee754_pow+0x142>
 80a367c:	2400      	movs	r4, #0
 80a367e:	f1be 0f00 	cmp.w	lr, #0
 80a3682:	d127      	bne.n	80a36d4 <__ieee754_pow+0xac>
 80a3684:	4b5e      	ldr	r3, [pc, #376]	; (80a3800 <__ieee754_pow+0x1d8>)
 80a3686:	4598      	cmp	r8, r3
 80a3688:	f000 808b 	beq.w	80a37a2 <__ieee754_pow+0x17a>
 80a368c:	4b5d      	ldr	r3, [pc, #372]	; (80a3804 <__ieee754_pow+0x1dc>)
 80a368e:	4598      	cmp	r8, r3
 80a3690:	d052      	beq.n	80a3738 <__ieee754_pow+0x110>
 80a3692:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a3696:	f000 83c9 	beq.w	80a3e2c <__ieee754_pow+0x804>
 80a369a:	4b5b      	ldr	r3, [pc, #364]	; (80a3808 <__ieee754_pow+0x1e0>)
 80a369c:	459a      	cmp	sl, r3
 80a369e:	d119      	bne.n	80a36d4 <__ieee754_pow+0xac>
 80a36a0:	2d00      	cmp	r5, #0
 80a36a2:	db17      	blt.n	80a36d4 <__ieee754_pow+0xac>
 80a36a4:	4648      	mov	r0, r9
 80a36a6:	4639      	mov	r1, r7
 80a36a8:	b013      	add	sp, #76	; 0x4c
 80a36aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a36ae:	f000 bd1d 	b.w	80a40ec <__ieee754_sqrt>
 80a36b2:	46cb      	mov	fp, r9
 80a36b4:	4658      	mov	r0, fp
 80a36b6:	4953      	ldr	r1, [pc, #332]	; (80a3804 <__ieee754_pow+0x1dc>)
 80a36b8:	b013      	add	sp, #76	; 0x4c
 80a36ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a36be:	2800      	cmp	r0, #0
 80a36c0:	d1c1      	bne.n	80a3646 <__ieee754_pow+0x1e>
 80a36c2:	45b0      	cmp	r8, r6
 80a36c4:	ddd1      	ble.n	80a366a <__ieee754_pow+0x42>
 80a36c6:	4851      	ldr	r0, [pc, #324]	; (80a380c <__ieee754_pow+0x1e4>)
 80a36c8:	b013      	add	sp, #76	; 0x4c
 80a36ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a36ce:	f000 bddd 	b.w	80a428c <nan>
 80a36d2:	2400      	movs	r4, #0
 80a36d4:	4648      	mov	r0, r9
 80a36d6:	4639      	mov	r1, r7
 80a36d8:	f000 fdcc 	bl	80a4274 <fabs>
 80a36dc:	f1bb 0f00 	cmp.w	fp, #0
 80a36e0:	d01c      	beq.n	80a371c <__ieee754_pow+0xf4>
 80a36e2:	0fed      	lsrs	r5, r5, #31
 80a36e4:	3d01      	subs	r5, #1
 80a36e6:	ea54 0305 	orrs.w	r3, r4, r5
 80a36ea:	d070      	beq.n	80a37ce <__ieee754_pow+0x1a6>
 80a36ec:	4b48      	ldr	r3, [pc, #288]	; (80a3810 <__ieee754_pow+0x1e8>)
 80a36ee:	4598      	cmp	r8, r3
 80a36f0:	f340 8094 	ble.w	80a381c <__ieee754_pow+0x1f4>
 80a36f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a36f8:	4598      	cmp	r8, r3
 80a36fa:	f340 840d 	ble.w	80a3f18 <__ieee754_pow+0x8f0>
 80a36fe:	4b45      	ldr	r3, [pc, #276]	; (80a3814 <__ieee754_pow+0x1ec>)
 80a3700:	429e      	cmp	r6, r3
 80a3702:	dd70      	ble.n	80a37e6 <__ieee754_pow+0x1be>
 80a3704:	f1ba 0f00 	cmp.w	sl, #0
 80a3708:	dd70      	ble.n	80a37ec <__ieee754_pow+0x1c4>
 80a370a:	a33b      	add	r3, pc, #236	; (adr r3, 80a37f8 <__ieee754_pow+0x1d0>)
 80a370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3710:	4610      	mov	r0, r2
 80a3712:	4619      	mov	r1, r3
 80a3714:	f001 f882 	bl	80a481c <__aeabi_dmul>
 80a3718:	4683      	mov	fp, r0
 80a371a:	e79d      	b.n	80a3658 <__ieee754_pow+0x30>
 80a371c:	b126      	cbz	r6, 80a3728 <__ieee754_pow+0x100>
 80a371e:	4b39      	ldr	r3, [pc, #228]	; (80a3804 <__ieee754_pow+0x1dc>)
 80a3720:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a3724:	429a      	cmp	r2, r3
 80a3726:	d1dc      	bne.n	80a36e2 <__ieee754_pow+0xba>
 80a3728:	f1ba 0f00 	cmp.w	sl, #0
 80a372c:	f2c0 83b7 	blt.w	80a3e9e <__ieee754_pow+0x876>
 80a3730:	2d00      	cmp	r5, #0
 80a3732:	db08      	blt.n	80a3746 <__ieee754_pow+0x11e>
 80a3734:	4683      	mov	fp, r0
 80a3736:	e78f      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3738:	f1ba 0f00 	cmp.w	sl, #0
 80a373c:	f2c0 845e 	blt.w	80a3ffc <__ieee754_pow+0x9d4>
 80a3740:	46cb      	mov	fp, r9
 80a3742:	4639      	mov	r1, r7
 80a3744:	e788      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3746:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a374a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a374e:	ea56 0304 	orrs.w	r3, r6, r4
 80a3752:	f000 8483 	beq.w	80a405c <__ieee754_pow+0xa34>
 80a3756:	2c01      	cmp	r4, #1
 80a3758:	d1ec      	bne.n	80a3734 <__ieee754_pow+0x10c>
 80a375a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a375e:	4683      	mov	fp, r0
 80a3760:	e77a      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3762:	f1be 0f00 	cmp.w	lr, #0
 80a3766:	d083      	beq.n	80a3670 <__ieee754_pow+0x48>
 80a3768:	e76d      	b.n	80a3646 <__ieee754_pow+0x1e>
 80a376a:	4b2b      	ldr	r3, [pc, #172]	; (80a3818 <__ieee754_pow+0x1f0>)
 80a376c:	4598      	cmp	r8, r3
 80a376e:	dc2c      	bgt.n	80a37ca <__ieee754_pow+0x1a2>
 80a3770:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a3774:	4598      	cmp	r8, r3
 80a3776:	dd81      	ble.n	80a367c <__ieee754_pow+0x54>
 80a3778:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a377c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3780:	2b14      	cmp	r3, #20
 80a3782:	f340 8453 	ble.w	80a402c <__ieee754_pow+0xa04>
 80a3786:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a378a:	fa2e f203 	lsr.w	r2, lr, r3
 80a378e:	fa02 f303 	lsl.w	r3, r2, r3
 80a3792:	459e      	cmp	lr, r3
 80a3794:	f47f af72 	bne.w	80a367c <__ieee754_pow+0x54>
 80a3798:	f002 0201 	and.w	r2, r2, #1
 80a379c:	f1c2 0402 	rsb	r4, r2, #2
 80a37a0:	e76d      	b.n	80a367e <__ieee754_pow+0x56>
 80a37a2:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a37a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a37aa:	ea53 030b 	orrs.w	r3, r3, fp
 80a37ae:	f000 833a 	beq.w	80a3e26 <__ieee754_pow+0x7fe>
 80a37b2:	4b18      	ldr	r3, [pc, #96]	; (80a3814 <__ieee754_pow+0x1ec>)
 80a37b4:	429e      	cmp	r6, r3
 80a37b6:	f340 8367 	ble.w	80a3e88 <__ieee754_pow+0x860>
 80a37ba:	f1ba 0f00 	cmp.w	sl, #0
 80a37be:	db15      	blt.n	80a37ec <__ieee754_pow+0x1c4>
 80a37c0:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a37c4:	469b      	mov	fp, r3
 80a37c6:	4621      	mov	r1, r4
 80a37c8:	e746      	b.n	80a3658 <__ieee754_pow+0x30>
 80a37ca:	2402      	movs	r4, #2
 80a37cc:	e757      	b.n	80a367e <__ieee754_pow+0x56>
 80a37ce:	464a      	mov	r2, r9
 80a37d0:	4648      	mov	r0, r9
 80a37d2:	463b      	mov	r3, r7
 80a37d4:	4639      	mov	r1, r7
 80a37d6:	f000 fe6d 	bl	80a44b4 <__aeabi_dsub>
 80a37da:	4602      	mov	r2, r0
 80a37dc:	460b      	mov	r3, r1
 80a37de:	f001 f947 	bl	80a4a70 <__aeabi_ddiv>
 80a37e2:	4683      	mov	fp, r0
 80a37e4:	e738      	b.n	80a3658 <__ieee754_pow+0x30>
 80a37e6:	f1ba 0f00 	cmp.w	sl, #0
 80a37ea:	db8e      	blt.n	80a370a <__ieee754_pow+0xe2>
 80a37ec:	f04f 0b00 	mov.w	fp, #0
 80a37f0:	4659      	mov	r1, fp
 80a37f2:	e731      	b.n	80a3658 <__ieee754_pow+0x30>
 80a37f4:	f3af 8000 	nop.w
 80a37f8:	8800759c 	.word	0x8800759c
 80a37fc:	7e37e43c 	.word	0x7e37e43c
 80a3800:	7ff00000 	.word	0x7ff00000
 80a3804:	3ff00000 	.word	0x3ff00000
 80a3808:	3fe00000 	.word	0x3fe00000
 80a380c:	080a67b8 	.word	0x080a67b8
 80a3810:	41e00000 	.word	0x41e00000
 80a3814:	3fefffff 	.word	0x3fefffff
 80a3818:	433fffff 	.word	0x433fffff
 80a381c:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3820:	f04f 0200 	mov.w	r2, #0
 80a3824:	da05      	bge.n	80a3832 <__ieee754_pow+0x20a>
 80a3826:	4bd0      	ldr	r3, [pc, #832]	; (80a3b68 <__ieee754_pow+0x540>)
 80a3828:	f000 fff8 	bl	80a481c <__aeabi_dmul>
 80a382c:	460e      	mov	r6, r1
 80a382e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a3832:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a3b78 <__ieee754_pow+0x550>
 80a3836:	1533      	asrs	r3, r6, #20
 80a3838:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a383c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3840:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a3844:	4576      	cmp	r6, lr
 80a3846:	eb03 0a02 	add.w	sl, r3, r2
 80a384a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a384e:	f340 83c9 	ble.w	80a3fe4 <__ieee754_pow+0x9bc>
 80a3852:	4bc6      	ldr	r3, [pc, #792]	; (80a3b6c <__ieee754_pow+0x544>)
 80a3854:	2200      	movs	r2, #0
 80a3856:	429e      	cmp	r6, r3
 80a3858:	f340 8404 	ble.w	80a4064 <__ieee754_pow+0xa3c>
 80a385c:	2300      	movs	r3, #0
 80a385e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3862:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3866:	4bc2      	ldr	r3, [pc, #776]	; (80a3b70 <__ieee754_pow+0x548>)
 80a3868:	2200      	movs	r2, #0
 80a386a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a386e:	f10a 0a01 	add.w	sl, sl, #1
 80a3872:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a3876:	2600      	movs	r6, #0
 80a3878:	4639      	mov	r1, r7
 80a387a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a387e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3882:	f000 fe17 	bl	80a44b4 <__aeabi_dsub>
 80a3886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a388a:	4680      	mov	r8, r0
 80a388c:	4689      	mov	r9, r1
 80a388e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3892:	f000 fe11 	bl	80a44b8 <__adddf3>
 80a3896:	4602      	mov	r2, r0
 80a3898:	460b      	mov	r3, r1
 80a389a:	2000      	movs	r0, #0
 80a389c:	49b4      	ldr	r1, [pc, #720]	; (80a3b70 <__ieee754_pow+0x548>)
 80a389e:	f001 f8e7 	bl	80a4a70 <__aeabi_ddiv>
 80a38a2:	460a      	mov	r2, r1
 80a38a4:	4601      	mov	r1, r0
 80a38a6:	4613      	mov	r3, r2
 80a38a8:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a38ac:	4602      	mov	r2, r0
 80a38ae:	4649      	mov	r1, r9
 80a38b0:	4640      	mov	r0, r8
 80a38b2:	f000 ffb3 	bl	80a481c <__aeabi_dmul>
 80a38b6:	468c      	mov	ip, r1
 80a38b8:	4683      	mov	fp, r0
 80a38ba:	107b      	asrs	r3, r7, #1
 80a38bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a38c0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a38c4:	1999      	adds	r1, r3, r6
 80a38c6:	2000      	movs	r0, #0
 80a38c8:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a38cc:	4606      	mov	r6, r0
 80a38ce:	460f      	mov	r7, r1
 80a38d0:	f04f 0b00 	mov.w	fp, #0
 80a38d4:	4661      	mov	r1, ip
 80a38d6:	4658      	mov	r0, fp
 80a38d8:	4632      	mov	r2, r6
 80a38da:	463b      	mov	r3, r7
 80a38dc:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a38e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a38e4:	f000 ff9a 	bl	80a481c <__aeabi_dmul>
 80a38e8:	4602      	mov	r2, r0
 80a38ea:	460b      	mov	r3, r1
 80a38ec:	4640      	mov	r0, r8
 80a38ee:	4649      	mov	r1, r9
 80a38f0:	f000 fde0 	bl	80a44b4 <__aeabi_dsub>
 80a38f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a38f8:	4680      	mov	r8, r0
 80a38fa:	4689      	mov	r9, r1
 80a38fc:	4630      	mov	r0, r6
 80a38fe:	4639      	mov	r1, r7
 80a3900:	f000 fdd8 	bl	80a44b4 <__aeabi_dsub>
 80a3904:	4602      	mov	r2, r0
 80a3906:	460b      	mov	r3, r1
 80a3908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a390c:	f000 fdd2 	bl	80a44b4 <__aeabi_dsub>
 80a3910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3914:	f000 ff82 	bl	80a481c <__aeabi_dmul>
 80a3918:	4602      	mov	r2, r0
 80a391a:	460b      	mov	r3, r1
 80a391c:	4640      	mov	r0, r8
 80a391e:	4649      	mov	r1, r9
 80a3920:	f000 fdc8 	bl	80a44b4 <__aeabi_dsub>
 80a3924:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3928:	f000 ff78 	bl	80a481c <__aeabi_dmul>
 80a392c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3930:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3934:	463a      	mov	r2, r7
 80a3936:	4643      	mov	r3, r8
 80a3938:	4638      	mov	r0, r7
 80a393a:	4641      	mov	r1, r8
 80a393c:	f000 ff6e 	bl	80a481c <__aeabi_dmul>
 80a3940:	a377      	add	r3, pc, #476	; (adr r3, 80a3b20 <__ieee754_pow+0x4f8>)
 80a3942:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3946:	4606      	mov	r6, r0
 80a3948:	460f      	mov	r7, r1
 80a394a:	f000 ff67 	bl	80a481c <__aeabi_dmul>
 80a394e:	a376      	add	r3, pc, #472	; (adr r3, 80a3b28 <__ieee754_pow+0x500>)
 80a3950:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3954:	f000 fdb0 	bl	80a44b8 <__adddf3>
 80a3958:	4632      	mov	r2, r6
 80a395a:	463b      	mov	r3, r7
 80a395c:	f000 ff5e 	bl	80a481c <__aeabi_dmul>
 80a3960:	a373      	add	r3, pc, #460	; (adr r3, 80a3b30 <__ieee754_pow+0x508>)
 80a3962:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3966:	f000 fda7 	bl	80a44b8 <__adddf3>
 80a396a:	4632      	mov	r2, r6
 80a396c:	463b      	mov	r3, r7
 80a396e:	f000 ff55 	bl	80a481c <__aeabi_dmul>
 80a3972:	a371      	add	r3, pc, #452	; (adr r3, 80a3b38 <__ieee754_pow+0x510>)
 80a3974:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3978:	f000 fd9e 	bl	80a44b8 <__adddf3>
 80a397c:	4632      	mov	r2, r6
 80a397e:	463b      	mov	r3, r7
 80a3980:	f000 ff4c 	bl	80a481c <__aeabi_dmul>
 80a3984:	a36e      	add	r3, pc, #440	; (adr r3, 80a3b40 <__ieee754_pow+0x518>)
 80a3986:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a398a:	f000 fd95 	bl	80a44b8 <__adddf3>
 80a398e:	4632      	mov	r2, r6
 80a3990:	463b      	mov	r3, r7
 80a3992:	f000 ff43 	bl	80a481c <__aeabi_dmul>
 80a3996:	a36c      	add	r3, pc, #432	; (adr r3, 80a3b48 <__ieee754_pow+0x520>)
 80a3998:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a399c:	f000 fd8c 	bl	80a44b8 <__adddf3>
 80a39a0:	4632      	mov	r2, r6
 80a39a2:	4680      	mov	r8, r0
 80a39a4:	4689      	mov	r9, r1
 80a39a6:	463b      	mov	r3, r7
 80a39a8:	4630      	mov	r0, r6
 80a39aa:	4639      	mov	r1, r7
 80a39ac:	f000 ff36 	bl	80a481c <__aeabi_dmul>
 80a39b0:	4602      	mov	r2, r0
 80a39b2:	460b      	mov	r3, r1
 80a39b4:	4640      	mov	r0, r8
 80a39b6:	4649      	mov	r1, r9
 80a39b8:	f000 ff30 	bl	80a481c <__aeabi_dmul>
 80a39bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a39c0:	4606      	mov	r6, r0
 80a39c2:	460f      	mov	r7, r1
 80a39c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a39c8:	f000 fd76 	bl	80a44b8 <__adddf3>
 80a39cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a39d0:	f000 ff24 	bl	80a481c <__aeabi_dmul>
 80a39d4:	4632      	mov	r2, r6
 80a39d6:	463b      	mov	r3, r7
 80a39d8:	f000 fd6e 	bl	80a44b8 <__adddf3>
 80a39dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a39e0:	4680      	mov	r8, r0
 80a39e2:	4689      	mov	r9, r1
 80a39e4:	4632      	mov	r2, r6
 80a39e6:	463b      	mov	r3, r7
 80a39e8:	4630      	mov	r0, r6
 80a39ea:	4639      	mov	r1, r7
 80a39ec:	f000 ff16 	bl	80a481c <__aeabi_dmul>
 80a39f0:	2200      	movs	r2, #0
 80a39f2:	4b60      	ldr	r3, [pc, #384]	; (80a3b74 <__ieee754_pow+0x54c>)
 80a39f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a39f8:	f000 fd5e 	bl	80a44b8 <__adddf3>
 80a39fc:	4642      	mov	r2, r8
 80a39fe:	464b      	mov	r3, r9
 80a3a00:	f000 fd5a 	bl	80a44b8 <__adddf3>
 80a3a04:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3a08:	460f      	mov	r7, r1
 80a3a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3a0e:	465a      	mov	r2, fp
 80a3a10:	463b      	mov	r3, r7
 80a3a12:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a3a16:	465e      	mov	r6, fp
 80a3a18:	f000 ff00 	bl	80a481c <__aeabi_dmul>
 80a3a1c:	2200      	movs	r2, #0
 80a3a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3a22:	4b54      	ldr	r3, [pc, #336]	; (80a3b74 <__ieee754_pow+0x54c>)
 80a3a24:	4630      	mov	r0, r6
 80a3a26:	4639      	mov	r1, r7
 80a3a28:	f000 fd44 	bl	80a44b4 <__aeabi_dsub>
 80a3a2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3a30:	f000 fd40 	bl	80a44b4 <__aeabi_dsub>
 80a3a34:	4602      	mov	r2, r0
 80a3a36:	460b      	mov	r3, r1
 80a3a38:	4640      	mov	r0, r8
 80a3a3a:	4649      	mov	r1, r9
 80a3a3c:	f000 fd3a 	bl	80a44b4 <__aeabi_dsub>
 80a3a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3a44:	f000 feea 	bl	80a481c <__aeabi_dmul>
 80a3a48:	4632      	mov	r2, r6
 80a3a4a:	4680      	mov	r8, r0
 80a3a4c:	4689      	mov	r9, r1
 80a3a4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3a52:	463b      	mov	r3, r7
 80a3a54:	f000 fee2 	bl	80a481c <__aeabi_dmul>
 80a3a58:	4602      	mov	r2, r0
 80a3a5a:	460b      	mov	r3, r1
 80a3a5c:	4640      	mov	r0, r8
 80a3a5e:	4649      	mov	r1, r9
 80a3a60:	f000 fd2a 	bl	80a44b8 <__adddf3>
 80a3a64:	4680      	mov	r8, r0
 80a3a66:	4689      	mov	r9, r1
 80a3a68:	4602      	mov	r2, r0
 80a3a6a:	460b      	mov	r3, r1
 80a3a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3a70:	f000 fd22 	bl	80a44b8 <__adddf3>
 80a3a74:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a3a78:	a335      	add	r3, pc, #212	; (adr r3, 80a3b50 <__ieee754_pow+0x528>)
 80a3a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a7e:	4658      	mov	r0, fp
 80a3a80:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a3a84:	465e      	mov	r6, fp
 80a3a86:	460f      	mov	r7, r1
 80a3a88:	f000 fec8 	bl	80a481c <__aeabi_dmul>
 80a3a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a3a94:	4630      	mov	r0, r6
 80a3a96:	4639      	mov	r1, r7
 80a3a98:	f000 fd0c 	bl	80a44b4 <__aeabi_dsub>
 80a3a9c:	4602      	mov	r2, r0
 80a3a9e:	460b      	mov	r3, r1
 80a3aa0:	4640      	mov	r0, r8
 80a3aa2:	4649      	mov	r1, r9
 80a3aa4:	f000 fd06 	bl	80a44b4 <__aeabi_dsub>
 80a3aa8:	a32b      	add	r3, pc, #172	; (adr r3, 80a3b58 <__ieee754_pow+0x530>)
 80a3aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3aae:	f000 feb5 	bl	80a481c <__aeabi_dmul>
 80a3ab2:	a32b      	add	r3, pc, #172	; (adr r3, 80a3b60 <__ieee754_pow+0x538>)
 80a3ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ab8:	4680      	mov	r8, r0
 80a3aba:	4689      	mov	r9, r1
 80a3abc:	4630      	mov	r0, r6
 80a3abe:	4639      	mov	r1, r7
 80a3ac0:	f000 feac 	bl	80a481c <__aeabi_dmul>
 80a3ac4:	4602      	mov	r2, r0
 80a3ac6:	460b      	mov	r3, r1
 80a3ac8:	4640      	mov	r0, r8
 80a3aca:	4649      	mov	r1, r9
 80a3acc:	f000 fcf4 	bl	80a44b8 <__adddf3>
 80a3ad0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a3ad4:	f000 fcf0 	bl	80a44b8 <__adddf3>
 80a3ad8:	4680      	mov	r8, r0
 80a3ada:	4650      	mov	r0, sl
 80a3adc:	4689      	mov	r9, r1
 80a3ade:	f000 fe37 	bl	80a4750 <__aeabi_i2d>
 80a3ae2:	4606      	mov	r6, r0
 80a3ae4:	460f      	mov	r7, r1
 80a3ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3aea:	4642      	mov	r2, r8
 80a3aec:	464b      	mov	r3, r9
 80a3aee:	f000 fce3 	bl	80a44b8 <__adddf3>
 80a3af2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3af6:	f000 fcdf 	bl	80a44b8 <__adddf3>
 80a3afa:	4632      	mov	r2, r6
 80a3afc:	463b      	mov	r3, r7
 80a3afe:	f000 fcdb 	bl	80a44b8 <__adddf3>
 80a3b02:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a3b06:	4632      	mov	r2, r6
 80a3b08:	4658      	mov	r0, fp
 80a3b0a:	463b      	mov	r3, r7
 80a3b0c:	46da      	mov	sl, fp
 80a3b0e:	468b      	mov	fp, r1
 80a3b10:	f000 fcd0 	bl	80a44b4 <__aeabi_dsub>
 80a3b14:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3b18:	e030      	b.n	80a3b7c <__ieee754_pow+0x554>
 80a3b1a:	bf00      	nop
 80a3b1c:	f3af 8000 	nop.w
 80a3b20:	4a454eef 	.word	0x4a454eef
 80a3b24:	3fca7e28 	.word	0x3fca7e28
 80a3b28:	93c9db65 	.word	0x93c9db65
 80a3b2c:	3fcd864a 	.word	0x3fcd864a
 80a3b30:	a91d4101 	.word	0xa91d4101
 80a3b34:	3fd17460 	.word	0x3fd17460
 80a3b38:	518f264d 	.word	0x518f264d
 80a3b3c:	3fd55555 	.word	0x3fd55555
 80a3b40:	db6fabff 	.word	0xdb6fabff
 80a3b44:	3fdb6db6 	.word	0x3fdb6db6
 80a3b48:	33333303 	.word	0x33333303
 80a3b4c:	3fe33333 	.word	0x3fe33333
 80a3b50:	e0000000 	.word	0xe0000000
 80a3b54:	3feec709 	.word	0x3feec709
 80a3b58:	dc3a03fd 	.word	0xdc3a03fd
 80a3b5c:	3feec709 	.word	0x3feec709
 80a3b60:	145b01f5 	.word	0x145b01f5
 80a3b64:	be3e2fe0 	.word	0xbe3e2fe0
 80a3b68:	43400000 	.word	0x43400000
 80a3b6c:	000bb679 	.word	0x000bb679
 80a3b70:	3ff00000 	.word	0x3ff00000
 80a3b74:	40080000 	.word	0x40080000
 80a3b78:	0003988e 	.word	0x0003988e
 80a3b7c:	f000 fc9a 	bl	80a44b4 <__aeabi_dsub>
 80a3b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3b84:	f000 fc96 	bl	80a44b4 <__aeabi_dsub>
 80a3b88:	4602      	mov	r2, r0
 80a3b8a:	460b      	mov	r3, r1
 80a3b8c:	4640      	mov	r0, r8
 80a3b8e:	4649      	mov	r1, r9
 80a3b90:	f000 fc90 	bl	80a44b4 <__aeabi_dsub>
 80a3b94:	4680      	mov	r8, r0
 80a3b96:	4689      	mov	r9, r1
 80a3b98:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a3b9c:	3c01      	subs	r4, #1
 80a3b9e:	ea54 0305 	orrs.w	r3, r4, r5
 80a3ba2:	bf14      	ite	ne
 80a3ba4:	4cd6      	ldrne	r4, [pc, #856]	; (80a3f00 <__ieee754_pow+0x8d8>)
 80a3ba6:	4cd7      	ldreq	r4, [pc, #860]	; (80a3f04 <__ieee754_pow+0x8dc>)
 80a3ba8:	2300      	movs	r3, #0
 80a3baa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a3bae:	460b      	mov	r3, r1
 80a3bb0:	4614      	mov	r4, r2
 80a3bb2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a3bb6:	2300      	movs	r3, #0
 80a3bb8:	9302      	str	r3, [sp, #8]
 80a3bba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a3bbe:	4608      	mov	r0, r1
 80a3bc0:	462b      	mov	r3, r5
 80a3bc2:	4611      	mov	r1, r2
 80a3bc4:	4622      	mov	r2, r4
 80a3bc6:	f000 fc75 	bl	80a44b4 <__aeabi_dsub>
 80a3bca:	4652      	mov	r2, sl
 80a3bcc:	465b      	mov	r3, fp
 80a3bce:	f000 fe25 	bl	80a481c <__aeabi_dmul>
 80a3bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3bd6:	4606      	mov	r6, r0
 80a3bd8:	460f      	mov	r7, r1
 80a3bda:	4640      	mov	r0, r8
 80a3bdc:	4649      	mov	r1, r9
 80a3bde:	f000 fe1d 	bl	80a481c <__aeabi_dmul>
 80a3be2:	4602      	mov	r2, r0
 80a3be4:	460b      	mov	r3, r1
 80a3be6:	4630      	mov	r0, r6
 80a3be8:	4639      	mov	r1, r7
 80a3bea:	f000 fc65 	bl	80a44b8 <__adddf3>
 80a3bee:	4606      	mov	r6, r0
 80a3bf0:	460f      	mov	r7, r1
 80a3bf2:	4622      	mov	r2, r4
 80a3bf4:	462b      	mov	r3, r5
 80a3bf6:	4650      	mov	r0, sl
 80a3bf8:	4659      	mov	r1, fp
 80a3bfa:	e9cd 6700 	strd	r6, r7, [sp]
 80a3bfe:	f000 fe0d 	bl	80a481c <__aeabi_dmul>
 80a3c02:	460b      	mov	r3, r1
 80a3c04:	4602      	mov	r2, r0
 80a3c06:	4680      	mov	r8, r0
 80a3c08:	4689      	mov	r9, r1
 80a3c0a:	4630      	mov	r0, r6
 80a3c0c:	4639      	mov	r1, r7
 80a3c0e:	f000 fc53 	bl	80a44b8 <__adddf3>
 80a3c12:	4bbd      	ldr	r3, [pc, #756]	; (80a3f08 <__ieee754_pow+0x8e0>)
 80a3c14:	4606      	mov	r6, r0
 80a3c16:	4299      	cmp	r1, r3
 80a3c18:	460d      	mov	r5, r1
 80a3c1a:	460c      	mov	r4, r1
 80a3c1c:	f340 810e 	ble.w	80a3e3c <__ieee754_pow+0x814>
 80a3c20:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3c24:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3c28:	4303      	orrs	r3, r0
 80a3c2a:	f040 81f0 	bne.w	80a400e <__ieee754_pow+0x9e6>
 80a3c2e:	a3a0      	add	r3, pc, #640	; (adr r3, 80a3eb0 <__ieee754_pow+0x888>)
 80a3c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3c38:	f000 fc3e 	bl	80a44b8 <__adddf3>
 80a3c3c:	4642      	mov	r2, r8
 80a3c3e:	4682      	mov	sl, r0
 80a3c40:	468b      	mov	fp, r1
 80a3c42:	464b      	mov	r3, r9
 80a3c44:	4630      	mov	r0, r6
 80a3c46:	4629      	mov	r1, r5
 80a3c48:	f000 fc34 	bl	80a44b4 <__aeabi_dsub>
 80a3c4c:	4602      	mov	r2, r0
 80a3c4e:	460b      	mov	r3, r1
 80a3c50:	4650      	mov	r0, sl
 80a3c52:	4659      	mov	r1, fp
 80a3c54:	f001 f872 	bl	80a4d3c <__aeabi_dcmpgt>
 80a3c58:	2800      	cmp	r0, #0
 80a3c5a:	f040 81d8 	bne.w	80a400e <__ieee754_pow+0x9e6>
 80a3c5e:	462f      	mov	r7, r5
 80a3c60:	153b      	asrs	r3, r7, #20
 80a3c62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a3c66:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a3c6a:	fa42 f303 	asr.w	r3, r2, r3
 80a3c6e:	4423      	add	r3, r4
 80a3c70:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a3c74:	4ea5      	ldr	r6, [pc, #660]	; (80a3f0c <__ieee754_pow+0x8e4>)
 80a3c76:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a3c7a:	4116      	asrs	r6, r2
 80a3c7c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a3c80:	2000      	movs	r0, #0
 80a3c82:	f1c2 0514 	rsb	r5, r2, #20
 80a3c86:	ea23 0106 	bic.w	r1, r3, r6
 80a3c8a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a3c8e:	4602      	mov	r2, r0
 80a3c90:	460b      	mov	r3, r1
 80a3c92:	2c00      	cmp	r4, #0
 80a3c94:	fa4b fb05 	asr.w	fp, fp, r5
 80a3c98:	4640      	mov	r0, r8
 80a3c9a:	4649      	mov	r1, r9
 80a3c9c:	bfb8      	it	lt
 80a3c9e:	f1cb 0b00 	rsblt	fp, fp, #0
 80a3ca2:	f000 fc07 	bl	80a44b4 <__aeabi_dsub>
 80a3ca6:	4602      	mov	r2, r0
 80a3ca8:	460b      	mov	r3, r1
 80a3caa:	4680      	mov	r8, r0
 80a3cac:	4689      	mov	r9, r1
 80a3cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3cb2:	f000 fc01 	bl	80a44b8 <__adddf3>
 80a3cb6:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3cba:	2400      	movs	r4, #0
 80a3cbc:	a37e      	add	r3, pc, #504	; (adr r3, 80a3eb8 <__ieee754_pow+0x890>)
 80a3cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cc2:	4620      	mov	r0, r4
 80a3cc4:	460d      	mov	r5, r1
 80a3cc6:	f000 fda9 	bl	80a481c <__aeabi_dmul>
 80a3cca:	4642      	mov	r2, r8
 80a3ccc:	4606      	mov	r6, r0
 80a3cce:	460f      	mov	r7, r1
 80a3cd0:	464b      	mov	r3, r9
 80a3cd2:	4620      	mov	r0, r4
 80a3cd4:	4629      	mov	r1, r5
 80a3cd6:	f000 fbed 	bl	80a44b4 <__aeabi_dsub>
 80a3cda:	4602      	mov	r2, r0
 80a3cdc:	460b      	mov	r3, r1
 80a3cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3ce2:	f000 fbe7 	bl	80a44b4 <__aeabi_dsub>
 80a3ce6:	a376      	add	r3, pc, #472	; (adr r3, 80a3ec0 <__ieee754_pow+0x898>)
 80a3ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cec:	f000 fd96 	bl	80a481c <__aeabi_dmul>
 80a3cf0:	a375      	add	r3, pc, #468	; (adr r3, 80a3ec8 <__ieee754_pow+0x8a0>)
 80a3cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cf6:	4680      	mov	r8, r0
 80a3cf8:	4689      	mov	r9, r1
 80a3cfa:	4620      	mov	r0, r4
 80a3cfc:	4629      	mov	r1, r5
 80a3cfe:	f000 fd8d 	bl	80a481c <__aeabi_dmul>
 80a3d02:	4602      	mov	r2, r0
 80a3d04:	460b      	mov	r3, r1
 80a3d06:	4640      	mov	r0, r8
 80a3d08:	4649      	mov	r1, r9
 80a3d0a:	f000 fbd5 	bl	80a44b8 <__adddf3>
 80a3d0e:	4680      	mov	r8, r0
 80a3d10:	4689      	mov	r9, r1
 80a3d12:	4602      	mov	r2, r0
 80a3d14:	460b      	mov	r3, r1
 80a3d16:	4630      	mov	r0, r6
 80a3d18:	4639      	mov	r1, r7
 80a3d1a:	f000 fbcd 	bl	80a44b8 <__adddf3>
 80a3d1e:	4632      	mov	r2, r6
 80a3d20:	463b      	mov	r3, r7
 80a3d22:	4604      	mov	r4, r0
 80a3d24:	460d      	mov	r5, r1
 80a3d26:	f000 fbc5 	bl	80a44b4 <__aeabi_dsub>
 80a3d2a:	4602      	mov	r2, r0
 80a3d2c:	460b      	mov	r3, r1
 80a3d2e:	4640      	mov	r0, r8
 80a3d30:	4649      	mov	r1, r9
 80a3d32:	f000 fbbf 	bl	80a44b4 <__aeabi_dsub>
 80a3d36:	4622      	mov	r2, r4
 80a3d38:	4680      	mov	r8, r0
 80a3d3a:	4689      	mov	r9, r1
 80a3d3c:	462b      	mov	r3, r5
 80a3d3e:	4620      	mov	r0, r4
 80a3d40:	4629      	mov	r1, r5
 80a3d42:	f000 fd6b 	bl	80a481c <__aeabi_dmul>
 80a3d46:	a362      	add	r3, pc, #392	; (adr r3, 80a3ed0 <__ieee754_pow+0x8a8>)
 80a3d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d4c:	4606      	mov	r6, r0
 80a3d4e:	460f      	mov	r7, r1
 80a3d50:	f000 fd64 	bl	80a481c <__aeabi_dmul>
 80a3d54:	a360      	add	r3, pc, #384	; (adr r3, 80a3ed8 <__ieee754_pow+0x8b0>)
 80a3d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d5a:	f000 fbab 	bl	80a44b4 <__aeabi_dsub>
 80a3d5e:	4632      	mov	r2, r6
 80a3d60:	463b      	mov	r3, r7
 80a3d62:	f000 fd5b 	bl	80a481c <__aeabi_dmul>
 80a3d66:	a35e      	add	r3, pc, #376	; (adr r3, 80a3ee0 <__ieee754_pow+0x8b8>)
 80a3d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d6c:	f000 fba4 	bl	80a44b8 <__adddf3>
 80a3d70:	4632      	mov	r2, r6
 80a3d72:	463b      	mov	r3, r7
 80a3d74:	f000 fd52 	bl	80a481c <__aeabi_dmul>
 80a3d78:	a35b      	add	r3, pc, #364	; (adr r3, 80a3ee8 <__ieee754_pow+0x8c0>)
 80a3d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d7e:	f000 fb99 	bl	80a44b4 <__aeabi_dsub>
 80a3d82:	4632      	mov	r2, r6
 80a3d84:	463b      	mov	r3, r7
 80a3d86:	f000 fd49 	bl	80a481c <__aeabi_dmul>
 80a3d8a:	a359      	add	r3, pc, #356	; (adr r3, 80a3ef0 <__ieee754_pow+0x8c8>)
 80a3d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d90:	f000 fb92 	bl	80a44b8 <__adddf3>
 80a3d94:	4632      	mov	r2, r6
 80a3d96:	463b      	mov	r3, r7
 80a3d98:	f000 fd40 	bl	80a481c <__aeabi_dmul>
 80a3d9c:	4602      	mov	r2, r0
 80a3d9e:	460b      	mov	r3, r1
 80a3da0:	4620      	mov	r0, r4
 80a3da2:	4629      	mov	r1, r5
 80a3da4:	f000 fb86 	bl	80a44b4 <__aeabi_dsub>
 80a3da8:	4606      	mov	r6, r0
 80a3daa:	460f      	mov	r7, r1
 80a3dac:	4602      	mov	r2, r0
 80a3dae:	460b      	mov	r3, r1
 80a3db0:	4620      	mov	r0, r4
 80a3db2:	4629      	mov	r1, r5
 80a3db4:	f000 fd32 	bl	80a481c <__aeabi_dmul>
 80a3db8:	2200      	movs	r2, #0
 80a3dba:	e9cd 0100 	strd	r0, r1, [sp]
 80a3dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3dc2:	4630      	mov	r0, r6
 80a3dc4:	4639      	mov	r1, r7
 80a3dc6:	f000 fb75 	bl	80a44b4 <__aeabi_dsub>
 80a3dca:	4602      	mov	r2, r0
 80a3dcc:	460b      	mov	r3, r1
 80a3dce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3dd2:	f000 fe4d 	bl	80a4a70 <__aeabi_ddiv>
 80a3dd6:	4642      	mov	r2, r8
 80a3dd8:	4606      	mov	r6, r0
 80a3dda:	460f      	mov	r7, r1
 80a3ddc:	464b      	mov	r3, r9
 80a3dde:	4620      	mov	r0, r4
 80a3de0:	4629      	mov	r1, r5
 80a3de2:	f000 fd1b 	bl	80a481c <__aeabi_dmul>
 80a3de6:	4642      	mov	r2, r8
 80a3de8:	464b      	mov	r3, r9
 80a3dea:	f000 fb65 	bl	80a44b8 <__adddf3>
 80a3dee:	4602      	mov	r2, r0
 80a3df0:	460b      	mov	r3, r1
 80a3df2:	4630      	mov	r0, r6
 80a3df4:	4639      	mov	r1, r7
 80a3df6:	f000 fb5d 	bl	80a44b4 <__aeabi_dsub>
 80a3dfa:	4622      	mov	r2, r4
 80a3dfc:	462b      	mov	r3, r5
 80a3dfe:	f000 fb59 	bl	80a44b4 <__aeabi_dsub>
 80a3e02:	4602      	mov	r2, r0
 80a3e04:	460b      	mov	r3, r1
 80a3e06:	2000      	movs	r0, #0
 80a3e08:	493d      	ldr	r1, [pc, #244]	; (80a3f00 <__ieee754_pow+0x8d8>)
 80a3e0a:	f000 fb53 	bl	80a44b4 <__aeabi_dsub>
 80a3e0e:	448a      	add	sl, r1
 80a3e10:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a3e14:	f2c0 8137 	blt.w	80a4086 <__ieee754_pow+0xa5e>
 80a3e18:	4651      	mov	r1, sl
 80a3e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3e1e:	f000 fcfd 	bl	80a481c <__aeabi_dmul>
 80a3e22:	4683      	mov	fp, r0
 80a3e24:	e418      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3e26:	46f3      	mov	fp, lr
 80a3e28:	4935      	ldr	r1, [pc, #212]	; (80a3f00 <__ieee754_pow+0x8d8>)
 80a3e2a:	e415      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3e2c:	464a      	mov	r2, r9
 80a3e2e:	4648      	mov	r0, r9
 80a3e30:	463b      	mov	r3, r7
 80a3e32:	4639      	mov	r1, r7
 80a3e34:	f000 fcf2 	bl	80a481c <__aeabi_dmul>
 80a3e38:	4683      	mov	fp, r0
 80a3e3a:	e40d      	b.n	80a3658 <__ieee754_pow+0x30>
 80a3e3c:	4b34      	ldr	r3, [pc, #208]	; (80a3f10 <__ieee754_pow+0x8e8>)
 80a3e3e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a3e42:	429f      	cmp	r7, r3
 80a3e44:	f340 8101 	ble.w	80a404a <__ieee754_pow+0xa22>
 80a3e48:	4b32      	ldr	r3, [pc, #200]	; (80a3f14 <__ieee754_pow+0x8ec>)
 80a3e4a:	440b      	add	r3, r1
 80a3e4c:	4303      	orrs	r3, r0
 80a3e4e:	d10c      	bne.n	80a3e6a <__ieee754_pow+0x842>
 80a3e50:	4642      	mov	r2, r8
 80a3e52:	464b      	mov	r3, r9
 80a3e54:	f000 fb2e 	bl	80a44b4 <__aeabi_dsub>
 80a3e58:	4602      	mov	r2, r0
 80a3e5a:	460b      	mov	r3, r1
 80a3e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3e60:	f000 ff58 	bl	80a4d14 <__aeabi_dcmple>
 80a3e64:	2800      	cmp	r0, #0
 80a3e66:	f43f aefb 	beq.w	80a3c60 <__ieee754_pow+0x638>
 80a3e6a:	a323      	add	r3, pc, #140	; (adr r3, 80a3ef8 <__ieee754_pow+0x8d0>)
 80a3e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3e74:	f000 fcd2 	bl	80a481c <__aeabi_dmul>
 80a3e78:	a31f      	add	r3, pc, #124	; (adr r3, 80a3ef8 <__ieee754_pow+0x8d0>)
 80a3e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e7e:	f000 fccd 	bl	80a481c <__aeabi_dmul>
 80a3e82:	4683      	mov	fp, r0
 80a3e84:	f7ff bbe8 	b.w	80a3658 <__ieee754_pow+0x30>
 80a3e88:	f1ba 0f00 	cmp.w	sl, #0
 80a3e8c:	f6bf acae 	bge.w	80a37ec <__ieee754_pow+0x1c4>
 80a3e90:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3e94:	469b      	mov	fp, r3
 80a3e96:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a3e9a:	f7ff bbdd 	b.w	80a3658 <__ieee754_pow+0x30>
 80a3e9e:	4602      	mov	r2, r0
 80a3ea0:	460b      	mov	r3, r1
 80a3ea2:	2000      	movs	r0, #0
 80a3ea4:	4916      	ldr	r1, [pc, #88]	; (80a3f00 <__ieee754_pow+0x8d8>)
 80a3ea6:	f000 fde3 	bl	80a4a70 <__aeabi_ddiv>
 80a3eaa:	e441      	b.n	80a3730 <__ieee754_pow+0x108>
 80a3eac:	f3af 8000 	nop.w
 80a3eb0:	652b82fe 	.word	0x652b82fe
 80a3eb4:	3c971547 	.word	0x3c971547
 80a3eb8:	00000000 	.word	0x00000000
 80a3ebc:	3fe62e43 	.word	0x3fe62e43
 80a3ec0:	fefa39ef 	.word	0xfefa39ef
 80a3ec4:	3fe62e42 	.word	0x3fe62e42
 80a3ec8:	0ca86c39 	.word	0x0ca86c39
 80a3ecc:	be205c61 	.word	0xbe205c61
 80a3ed0:	72bea4d0 	.word	0x72bea4d0
 80a3ed4:	3e663769 	.word	0x3e663769
 80a3ed8:	c5d26bf1 	.word	0xc5d26bf1
 80a3edc:	3ebbbd41 	.word	0x3ebbbd41
 80a3ee0:	af25de2c 	.word	0xaf25de2c
 80a3ee4:	3f11566a 	.word	0x3f11566a
 80a3ee8:	16bebd93 	.word	0x16bebd93
 80a3eec:	3f66c16c 	.word	0x3f66c16c
 80a3ef0:	5555553e 	.word	0x5555553e
 80a3ef4:	3fc55555 	.word	0x3fc55555
 80a3ef8:	c2f8f359 	.word	0xc2f8f359
 80a3efc:	01a56e1f 	.word	0x01a56e1f
 80a3f00:	3ff00000 	.word	0x3ff00000
 80a3f04:	bff00000 	.word	0xbff00000
 80a3f08:	408fffff 	.word	0x408fffff
 80a3f0c:	000fffff 	.word	0x000fffff
 80a3f10:	4090cbff 	.word	0x4090cbff
 80a3f14:	3f6f3400 	.word	0x3f6f3400
 80a3f18:	4b6f      	ldr	r3, [pc, #444]	; (80a40d8 <__ieee754_pow+0xab0>)
 80a3f1a:	429e      	cmp	r6, r3
 80a3f1c:	f77f ac63 	ble.w	80a37e6 <__ieee754_pow+0x1be>
 80a3f20:	4b6e      	ldr	r3, [pc, #440]	; (80a40dc <__ieee754_pow+0xab4>)
 80a3f22:	429e      	cmp	r6, r3
 80a3f24:	f73f abee 	bgt.w	80a3704 <__ieee754_pow+0xdc>
 80a3f28:	2200      	movs	r2, #0
 80a3f2a:	4b6c      	ldr	r3, [pc, #432]	; (80a40dc <__ieee754_pow+0xab4>)
 80a3f2c:	f000 fac2 	bl	80a44b4 <__aeabi_dsub>
 80a3f30:	a35b      	add	r3, pc, #364	; (adr r3, 80a40a0 <__ieee754_pow+0xa78>)
 80a3f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f36:	4606      	mov	r6, r0
 80a3f38:	460f      	mov	r7, r1
 80a3f3a:	f000 fc6f 	bl	80a481c <__aeabi_dmul>
 80a3f3e:	a35a      	add	r3, pc, #360	; (adr r3, 80a40a8 <__ieee754_pow+0xa80>)
 80a3f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3f44:	4680      	mov	r8, r0
 80a3f46:	4689      	mov	r9, r1
 80a3f48:	4630      	mov	r0, r6
 80a3f4a:	4639      	mov	r1, r7
 80a3f4c:	f000 fc66 	bl	80a481c <__aeabi_dmul>
 80a3f50:	2200      	movs	r2, #0
 80a3f52:	4682      	mov	sl, r0
 80a3f54:	468b      	mov	fp, r1
 80a3f56:	4b62      	ldr	r3, [pc, #392]	; (80a40e0 <__ieee754_pow+0xab8>)
 80a3f58:	4630      	mov	r0, r6
 80a3f5a:	4639      	mov	r1, r7
 80a3f5c:	f000 fc5e 	bl	80a481c <__aeabi_dmul>
 80a3f60:	4602      	mov	r2, r0
 80a3f62:	460b      	mov	r3, r1
 80a3f64:	a152      	add	r1, pc, #328	; (adr r1, 80a40b0 <__ieee754_pow+0xa88>)
 80a3f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3f6a:	f000 faa3 	bl	80a44b4 <__aeabi_dsub>
 80a3f6e:	4632      	mov	r2, r6
 80a3f70:	463b      	mov	r3, r7
 80a3f72:	f000 fc53 	bl	80a481c <__aeabi_dmul>
 80a3f76:	4602      	mov	r2, r0
 80a3f78:	460b      	mov	r3, r1
 80a3f7a:	2000      	movs	r0, #0
 80a3f7c:	4959      	ldr	r1, [pc, #356]	; (80a40e4 <__ieee754_pow+0xabc>)
 80a3f7e:	f000 fa99 	bl	80a44b4 <__aeabi_dsub>
 80a3f82:	4632      	mov	r2, r6
 80a3f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3f88:	463b      	mov	r3, r7
 80a3f8a:	4630      	mov	r0, r6
 80a3f8c:	4639      	mov	r1, r7
 80a3f8e:	f000 fc45 	bl	80a481c <__aeabi_dmul>
 80a3f92:	4602      	mov	r2, r0
 80a3f94:	460b      	mov	r3, r1
 80a3f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3f9a:	f000 fc3f 	bl	80a481c <__aeabi_dmul>
 80a3f9e:	a346      	add	r3, pc, #280	; (adr r3, 80a40b8 <__ieee754_pow+0xa90>)
 80a3fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3fa4:	f000 fc3a 	bl	80a481c <__aeabi_dmul>
 80a3fa8:	4602      	mov	r2, r0
 80a3faa:	460b      	mov	r3, r1
 80a3fac:	4650      	mov	r0, sl
 80a3fae:	4659      	mov	r1, fp
 80a3fb0:	f000 fa80 	bl	80a44b4 <__aeabi_dsub>
 80a3fb4:	4602      	mov	r2, r0
 80a3fb6:	460b      	mov	r3, r1
 80a3fb8:	4606      	mov	r6, r0
 80a3fba:	460f      	mov	r7, r1
 80a3fbc:	4640      	mov	r0, r8
 80a3fbe:	4649      	mov	r1, r9
 80a3fc0:	f000 fa7a 	bl	80a44b8 <__adddf3>
 80a3fc4:	4642      	mov	r2, r8
 80a3fc6:	464b      	mov	r3, r9
 80a3fc8:	2000      	movs	r0, #0
 80a3fca:	4682      	mov	sl, r0
 80a3fcc:	468b      	mov	fp, r1
 80a3fce:	f000 fa71 	bl	80a44b4 <__aeabi_dsub>
 80a3fd2:	4602      	mov	r2, r0
 80a3fd4:	460b      	mov	r3, r1
 80a3fd6:	4630      	mov	r0, r6
 80a3fd8:	4639      	mov	r1, r7
 80a3fda:	f000 fa6b 	bl	80a44b4 <__aeabi_dsub>
 80a3fde:	4680      	mov	r8, r0
 80a3fe0:	4689      	mov	r9, r1
 80a3fe2:	e5d9      	b.n	80a3b98 <__ieee754_pow+0x570>
 80a3fe4:	2200      	movs	r2, #0
 80a3fe6:	2300      	movs	r3, #0
 80a3fe8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3fec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3ff0:	4b3a      	ldr	r3, [pc, #232]	; (80a40dc <__ieee754_pow+0xab4>)
 80a3ff2:	2200      	movs	r2, #0
 80a3ff4:	2600      	movs	r6, #0
 80a3ff6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3ffa:	e43d      	b.n	80a3878 <__ieee754_pow+0x250>
 80a3ffc:	464a      	mov	r2, r9
 80a3ffe:	463b      	mov	r3, r7
 80a4000:	2000      	movs	r0, #0
 80a4002:	4936      	ldr	r1, [pc, #216]	; (80a40dc <__ieee754_pow+0xab4>)
 80a4004:	f000 fd34 	bl	80a4a70 <__aeabi_ddiv>
 80a4008:	4683      	mov	fp, r0
 80a400a:	f7ff bb25 	b.w	80a3658 <__ieee754_pow+0x30>
 80a400e:	a32c      	add	r3, pc, #176	; (adr r3, 80a40c0 <__ieee754_pow+0xa98>)
 80a4010:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4018:	f000 fc00 	bl	80a481c <__aeabi_dmul>
 80a401c:	a328      	add	r3, pc, #160	; (adr r3, 80a40c0 <__ieee754_pow+0xa98>)
 80a401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4022:	f000 fbfb 	bl	80a481c <__aeabi_dmul>
 80a4026:	4683      	mov	fp, r0
 80a4028:	f7ff bb16 	b.w	80a3658 <__ieee754_pow+0x30>
 80a402c:	f1be 0f00 	cmp.w	lr, #0
 80a4030:	f47f ab4f 	bne.w	80a36d2 <__ieee754_pow+0xaa>
 80a4034:	f1c3 0314 	rsb	r3, r3, #20
 80a4038:	fa48 f203 	asr.w	r2, r8, r3
 80a403c:	fa02 f303 	lsl.w	r3, r2, r3
 80a4040:	4598      	cmp	r8, r3
 80a4042:	d024      	beq.n	80a408e <__ieee754_pow+0xa66>
 80a4044:	4674      	mov	r4, lr
 80a4046:	f7ff bb21 	b.w	80a368c <__ieee754_pow+0x64>
 80a404a:	4b26      	ldr	r3, [pc, #152]	; (80a40e4 <__ieee754_pow+0xabc>)
 80a404c:	429f      	cmp	r7, r3
 80a404e:	f73f ae07 	bgt.w	80a3c60 <__ieee754_pow+0x638>
 80a4052:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a4056:	469a      	mov	sl, r3
 80a4058:	469b      	mov	fp, r3
 80a405a:	e62e      	b.n	80a3cba <__ieee754_pow+0x692>
 80a405c:	4602      	mov	r2, r0
 80a405e:	460b      	mov	r3, r1
 80a4060:	f7ff bbb9 	b.w	80a37d6 <__ieee754_pow+0x1ae>
 80a4064:	4b20      	ldr	r3, [pc, #128]	; (80a40e8 <__ieee754_pow+0xac0>)
 80a4066:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a406a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a406e:	a316      	add	r3, pc, #88	; (adr r3, 80a40c8 <__ieee754_pow+0xaa0>)
 80a4070:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4074:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4078:	a315      	add	r3, pc, #84	; (adr r3, 80a40d0 <__ieee754_pow+0xaa8>)
 80a407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a407e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4082:	f7ff bbf9 	b.w	80a3878 <__ieee754_pow+0x250>
 80a4086:	465a      	mov	r2, fp
 80a4088:	f000 f996 	bl	80a43b8 <scalbn>
 80a408c:	e6c5      	b.n	80a3e1a <__ieee754_pow+0x7f2>
 80a408e:	f002 0201 	and.w	r2, r2, #1
 80a4092:	f1c2 0402 	rsb	r4, r2, #2
 80a4096:	f7ff baf9 	b.w	80a368c <__ieee754_pow+0x64>
 80a409a:	bf00      	nop
 80a409c:	f3af 8000 	nop.w
 80a40a0:	60000000 	.word	0x60000000
 80a40a4:	3ff71547 	.word	0x3ff71547
 80a40a8:	f85ddf44 	.word	0xf85ddf44
 80a40ac:	3e54ae0b 	.word	0x3e54ae0b
 80a40b0:	55555555 	.word	0x55555555
 80a40b4:	3fd55555 	.word	0x3fd55555
 80a40b8:	652b82fe 	.word	0x652b82fe
 80a40bc:	3ff71547 	.word	0x3ff71547
 80a40c0:	8800759c 	.word	0x8800759c
 80a40c4:	7e37e43c 	.word	0x7e37e43c
 80a40c8:	40000000 	.word	0x40000000
 80a40cc:	3fe2b803 	.word	0x3fe2b803
 80a40d0:	43cfd006 	.word	0x43cfd006
 80a40d4:	3e4cfdeb 	.word	0x3e4cfdeb
 80a40d8:	3feffffe 	.word	0x3feffffe
 80a40dc:	3ff00000 	.word	0x3ff00000
 80a40e0:	3fd00000 	.word	0x3fd00000
 80a40e4:	3fe00000 	.word	0x3fe00000
 80a40e8:	3ff80000 	.word	0x3ff80000

080a40ec <__ieee754_sqrt>:
 80a40ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a40f0:	4e5f      	ldr	r6, [pc, #380]	; (80a4270 <__ieee754_sqrt+0x184>)
 80a40f2:	460c      	mov	r4, r1
 80a40f4:	46b6      	mov	lr, r6
 80a40f6:	400e      	ands	r6, r1
 80a40f8:	4576      	cmp	r6, lr
 80a40fa:	4605      	mov	r5, r0
 80a40fc:	f000 8098 	beq.w	80a4230 <__ieee754_sqrt+0x144>
 80a4100:	2900      	cmp	r1, #0
 80a4102:	460b      	mov	r3, r1
 80a4104:	4602      	mov	r2, r0
 80a4106:	dd74      	ble.n	80a41f2 <__ieee754_sqrt+0x106>
 80a4108:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a410c:	d07f      	beq.n	80a420e <__ieee754_sqrt+0x122>
 80a410e:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a4112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4116:	f01e 0f01 	tst.w	lr, #1
 80a411a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a411e:	d163      	bne.n	80a41e8 <__ieee754_sqrt+0xfc>
 80a4120:	2700      	movs	r7, #0
 80a4122:	463e      	mov	r6, r7
 80a4124:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a4128:	440b      	add	r3, r1
 80a412a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a412e:	0052      	lsls	r2, r2, #1
 80a4130:	2016      	movs	r0, #22
 80a4132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a4136:	1874      	adds	r4, r6, r1
 80a4138:	429c      	cmp	r4, r3
 80a413a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a413e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a4142:	dc02      	bgt.n	80a414a <__ieee754_sqrt+0x5e>
 80a4144:	1b1b      	subs	r3, r3, r4
 80a4146:	1866      	adds	r6, r4, r1
 80a4148:	440f      	add	r7, r1
 80a414a:	3801      	subs	r0, #1
 80a414c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a4150:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a4154:	d1ef      	bne.n	80a4136 <__ieee754_sqrt+0x4a>
 80a4156:	4684      	mov	ip, r0
 80a4158:	2420      	movs	r4, #32
 80a415a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a415e:	e009      	b.n	80a4174 <__ieee754_sqrt+0x88>
 80a4160:	d020      	beq.n	80a41a4 <__ieee754_sqrt+0xb8>
 80a4162:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a4166:	3c01      	subs	r4, #1
 80a4168:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a416c:	442b      	add	r3, r5
 80a416e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a4172:	d020      	beq.n	80a41b6 <__ieee754_sqrt+0xca>
 80a4174:	429e      	cmp	r6, r3
 80a4176:	eb01 050c 	add.w	r5, r1, ip
 80a417a:	daf1      	bge.n	80a4160 <__ieee754_sqrt+0x74>
 80a417c:	2d00      	cmp	r5, #0
 80a417e:	eb05 0c01 	add.w	ip, r5, r1
 80a4182:	db09      	blt.n	80a4198 <__ieee754_sqrt+0xac>
 80a4184:	46b0      	mov	r8, r6
 80a4186:	4295      	cmp	r5, r2
 80a4188:	eba3 0306 	sub.w	r3, r3, r6
 80a418c:	d900      	bls.n	80a4190 <__ieee754_sqrt+0xa4>
 80a418e:	3b01      	subs	r3, #1
 80a4190:	4646      	mov	r6, r8
 80a4192:	1b52      	subs	r2, r2, r5
 80a4194:	4408      	add	r0, r1
 80a4196:	e7e4      	b.n	80a4162 <__ieee754_sqrt+0x76>
 80a4198:	f1bc 0f00 	cmp.w	ip, #0
 80a419c:	dbf2      	blt.n	80a4184 <__ieee754_sqrt+0x98>
 80a419e:	f106 0801 	add.w	r8, r6, #1
 80a41a2:	e7f0      	b.n	80a4186 <__ieee754_sqrt+0x9a>
 80a41a4:	4295      	cmp	r5, r2
 80a41a6:	d817      	bhi.n	80a41d8 <__ieee754_sqrt+0xec>
 80a41a8:	2d00      	cmp	r5, #0
 80a41aa:	eb05 0c01 	add.w	ip, r5, r1
 80a41ae:	db49      	blt.n	80a4244 <__ieee754_sqrt+0x158>
 80a41b0:	4698      	mov	r8, r3
 80a41b2:	2300      	movs	r3, #0
 80a41b4:	e7ec      	b.n	80a4190 <__ieee754_sqrt+0xa4>
 80a41b6:	4313      	orrs	r3, r2
 80a41b8:	d110      	bne.n	80a41dc <__ieee754_sqrt+0xf0>
 80a41ba:	0840      	lsrs	r0, r0, #1
 80a41bc:	107b      	asrs	r3, r7, #1
 80a41be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a41c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a41c6:	07fa      	lsls	r2, r7, #31
 80a41c8:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a41cc:	4639      	mov	r1, r7
 80a41ce:	bf48      	it	mi
 80a41d0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a41d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a41d8:	4633      	mov	r3, r6
 80a41da:	e7c2      	b.n	80a4162 <__ieee754_sqrt+0x76>
 80a41dc:	1c41      	adds	r1, r0, #1
 80a41de:	d035      	beq.n	80a424c <__ieee754_sqrt+0x160>
 80a41e0:	f000 0301 	and.w	r3, r0, #1
 80a41e4:	4418      	add	r0, r3
 80a41e6:	e7e8      	b.n	80a41ba <__ieee754_sqrt+0xce>
 80a41e8:	005b      	lsls	r3, r3, #1
 80a41ea:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a41ee:	0052      	lsls	r2, r2, #1
 80a41f0:	e796      	b.n	80a4120 <__ieee754_sqrt+0x34>
 80a41f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a41f6:	4306      	orrs	r6, r0
 80a41f8:	d0ec      	beq.n	80a41d4 <__ieee754_sqrt+0xe8>
 80a41fa:	bb79      	cbnz	r1, 80a425c <__ieee754_sqrt+0x170>
 80a41fc:	468e      	mov	lr, r1
 80a41fe:	0ad3      	lsrs	r3, r2, #11
 80a4200:	f1ae 0e15 	sub.w	lr, lr, #21
 80a4204:	0552      	lsls	r2, r2, #21
 80a4206:	2b00      	cmp	r3, #0
 80a4208:	d0f9      	beq.n	80a41fe <__ieee754_sqrt+0x112>
 80a420a:	02dd      	lsls	r5, r3, #11
 80a420c:	d421      	bmi.n	80a4252 <__ieee754_sqrt+0x166>
 80a420e:	2100      	movs	r1, #0
 80a4210:	e000      	b.n	80a4214 <__ieee754_sqrt+0x128>
 80a4212:	4601      	mov	r1, r0
 80a4214:	005b      	lsls	r3, r3, #1
 80a4216:	02dc      	lsls	r4, r3, #11
 80a4218:	f101 0001 	add.w	r0, r1, #1
 80a421c:	d5f9      	bpl.n	80a4212 <__ieee754_sqrt+0x126>
 80a421e:	f1c0 0420 	rsb	r4, r0, #32
 80a4222:	fa22 f404 	lsr.w	r4, r2, r4
 80a4226:	4323      	orrs	r3, r4
 80a4228:	ebc1 0e0e 	rsb	lr, r1, lr
 80a422c:	4082      	lsls	r2, r0
 80a422e:	e76e      	b.n	80a410e <__ieee754_sqrt+0x22>
 80a4230:	4602      	mov	r2, r0
 80a4232:	460b      	mov	r3, r1
 80a4234:	f000 faf2 	bl	80a481c <__aeabi_dmul>
 80a4238:	462a      	mov	r2, r5
 80a423a:	4623      	mov	r3, r4
 80a423c:	f000 f93c 	bl	80a44b8 <__adddf3>
 80a4240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4244:	f1bc 0f00 	cmp.w	ip, #0
 80a4248:	daa9      	bge.n	80a419e <__ieee754_sqrt+0xb2>
 80a424a:	e7b1      	b.n	80a41b0 <__ieee754_sqrt+0xc4>
 80a424c:	3701      	adds	r7, #1
 80a424e:	4620      	mov	r0, r4
 80a4250:	e7b4      	b.n	80a41bc <__ieee754_sqrt+0xd0>
 80a4252:	2420      	movs	r4, #32
 80a4254:	f04f 31ff 	mov.w	r1, #4294967295
 80a4258:	2000      	movs	r0, #0
 80a425a:	e7e2      	b.n	80a4222 <__ieee754_sqrt+0x136>
 80a425c:	4602      	mov	r2, r0
 80a425e:	460b      	mov	r3, r1
 80a4260:	f000 f928 	bl	80a44b4 <__aeabi_dsub>
 80a4264:	4602      	mov	r2, r0
 80a4266:	460b      	mov	r3, r1
 80a4268:	f000 fc02 	bl	80a4a70 <__aeabi_ddiv>
 80a426c:	e7b2      	b.n	80a41d4 <__ieee754_sqrt+0xe8>
 80a426e:	bf00      	nop
 80a4270:	7ff00000 	.word	0x7ff00000

080a4274 <fabs>:
 80a4274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4278:	4770      	bx	lr
 80a427a:	bf00      	nop

080a427c <finite>:
 80a427c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a4280:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a4284:	0fc0      	lsrs	r0, r0, #31
 80a4286:	4770      	bx	lr

080a4288 <matherr>:
 80a4288:	2000      	movs	r0, #0
 80a428a:	4770      	bx	lr

080a428c <nan>:
 80a428c:	2000      	movs	r0, #0
 80a428e:	4901      	ldr	r1, [pc, #4]	; (80a4294 <nan+0x8>)
 80a4290:	4770      	bx	lr
 80a4292:	bf00      	nop
 80a4294:	7ff80000 	.word	0x7ff80000

080a4298 <rint>:
 80a4298:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a429a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a429e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a42a2:	2e13      	cmp	r6, #19
 80a42a4:	b083      	sub	sp, #12
 80a42a6:	4602      	mov	r2, r0
 80a42a8:	460b      	mov	r3, r1
 80a42aa:	460c      	mov	r4, r1
 80a42ac:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a42b0:	4607      	mov	r7, r0
 80a42b2:	dc2e      	bgt.n	80a4312 <rint+0x7a>
 80a42b4:	2e00      	cmp	r6, #0
 80a42b6:	db49      	blt.n	80a434c <rint+0xb4>
 80a42b8:	493d      	ldr	r1, [pc, #244]	; (80a43b0 <rint+0x118>)
 80a42ba:	4131      	asrs	r1, r6
 80a42bc:	ea03 0001 	and.w	r0, r3, r1
 80a42c0:	4310      	orrs	r0, r2
 80a42c2:	d02b      	beq.n	80a431c <rint+0x84>
 80a42c4:	0849      	lsrs	r1, r1, #1
 80a42c6:	400b      	ands	r3, r1
 80a42c8:	ea53 0702 	orrs.w	r7, r3, r2
 80a42cc:	d00c      	beq.n	80a42e8 <rint+0x50>
 80a42ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a42d2:	2e13      	cmp	r6, #19
 80a42d4:	ea24 0101 	bic.w	r1, r4, r1
 80a42d8:	fa43 f406 	asr.w	r4, r3, r6
 80a42dc:	ea44 0401 	orr.w	r4, r4, r1
 80a42e0:	bf0c      	ite	eq
 80a42e2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a42e6:	2700      	movne	r7, #0
 80a42e8:	4b32      	ldr	r3, [pc, #200]	; (80a43b4 <rint+0x11c>)
 80a42ea:	4621      	mov	r1, r4
 80a42ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a42f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a42f4:	4638      	mov	r0, r7
 80a42f6:	4622      	mov	r2, r4
 80a42f8:	462b      	mov	r3, r5
 80a42fa:	f000 f8dd 	bl	80a44b8 <__adddf3>
 80a42fe:	e9cd 0100 	strd	r0, r1, [sp]
 80a4302:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4306:	4622      	mov	r2, r4
 80a4308:	462b      	mov	r3, r5
 80a430a:	f000 f8d3 	bl	80a44b4 <__aeabi_dsub>
 80a430e:	b003      	add	sp, #12
 80a4310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4312:	2e33      	cmp	r6, #51	; 0x33
 80a4314:	dd06      	ble.n	80a4324 <rint+0x8c>
 80a4316:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a431a:	d045      	beq.n	80a43a8 <rint+0x110>
 80a431c:	4610      	mov	r0, r2
 80a431e:	4619      	mov	r1, r3
 80a4320:	b003      	add	sp, #12
 80a4322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4324:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a4328:	f04f 31ff 	mov.w	r1, #4294967295
 80a432c:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4330:	4208      	tst	r0, r1
 80a4332:	d0f3      	beq.n	80a431c <rint+0x84>
 80a4334:	0849      	lsrs	r1, r1, #1
 80a4336:	4208      	tst	r0, r1
 80a4338:	d0d6      	beq.n	80a42e8 <rint+0x50>
 80a433a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a433e:	ea20 0101 	bic.w	r1, r0, r1
 80a4342:	fa43 fe0e 	asr.w	lr, r3, lr
 80a4346:	ea4e 0701 	orr.w	r7, lr, r1
 80a434a:	e7cd      	b.n	80a42e8 <rint+0x50>
 80a434c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4350:	4301      	orrs	r1, r0
 80a4352:	4619      	mov	r1, r3
 80a4354:	d0e4      	beq.n	80a4320 <rint+0x88>
 80a4356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a435a:	ea43 0c00 	orr.w	ip, r3, r0
 80a435e:	f1cc 0300 	rsb	r3, ip, #0
 80a4362:	ea43 0c0c 	orr.w	ip, r3, ip
 80a4366:	4b13      	ldr	r3, [pc, #76]	; (80a43b4 <rint+0x11c>)
 80a4368:	0c64      	lsrs	r4, r4, #17
 80a436a:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a436e:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a4372:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a4376:	0464      	lsls	r4, r4, #17
 80a4378:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a437c:	ea4c 0104 	orr.w	r1, ip, r4
 80a4380:	4632      	mov	r2, r6
 80a4382:	463b      	mov	r3, r7
 80a4384:	f000 f898 	bl	80a44b8 <__adddf3>
 80a4388:	e9cd 0100 	strd	r0, r1, [sp]
 80a438c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4390:	4632      	mov	r2, r6
 80a4392:	463b      	mov	r3, r7
 80a4394:	f000 f88e 	bl	80a44b4 <__aeabi_dsub>
 80a4398:	4602      	mov	r2, r0
 80a439a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a439e:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a43a2:	4610      	mov	r0, r2
 80a43a4:	4619      	mov	r1, r3
 80a43a6:	e7bb      	b.n	80a4320 <rint+0x88>
 80a43a8:	f000 f886 	bl	80a44b8 <__adddf3>
 80a43ac:	e7b8      	b.n	80a4320 <rint+0x88>
 80a43ae:	bf00      	nop
 80a43b0:	000fffff 	.word	0x000fffff
 80a43b4:	080a67c0 	.word	0x080a67c0

080a43b8 <scalbn>:
 80a43b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a43ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a43be:	4604      	mov	r4, r0
 80a43c0:	460d      	mov	r5, r1
 80a43c2:	460b      	mov	r3, r1
 80a43c4:	4617      	mov	r7, r2
 80a43c6:	bb06      	cbnz	r6, 80a440a <scalbn+0x52>
 80a43c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a43cc:	4303      	orrs	r3, r0
 80a43ce:	d025      	beq.n	80a441c <scalbn+0x64>
 80a43d0:	2200      	movs	r2, #0
 80a43d2:	4b2f      	ldr	r3, [pc, #188]	; (80a4490 <scalbn+0xd8>)
 80a43d4:	f000 fa22 	bl	80a481c <__aeabi_dmul>
 80a43d8:	4a2e      	ldr	r2, [pc, #184]	; (80a4494 <scalbn+0xdc>)
 80a43da:	4604      	mov	r4, r0
 80a43dc:	4297      	cmp	r7, r2
 80a43de:	460d      	mov	r5, r1
 80a43e0:	460b      	mov	r3, r1
 80a43e2:	db2a      	blt.n	80a443a <scalbn+0x82>
 80a43e4:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a43e8:	3e36      	subs	r6, #54	; 0x36
 80a43ea:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a43ee:	443e      	add	r6, r7
 80a43f0:	4296      	cmp	r6, r2
 80a43f2:	dc28      	bgt.n	80a4446 <scalbn+0x8e>
 80a43f4:	2e00      	cmp	r6, #0
 80a43f6:	dd12      	ble.n	80a441e <scalbn+0x66>
 80a43f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a43fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4400:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4404:	4620      	mov	r0, r4
 80a4406:	4629      	mov	r1, r5
 80a4408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a440a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a440e:	4296      	cmp	r6, r2
 80a4410:	d1eb      	bne.n	80a43ea <scalbn+0x32>
 80a4412:	4602      	mov	r2, r0
 80a4414:	460b      	mov	r3, r1
 80a4416:	f000 f84f 	bl	80a44b8 <__adddf3>
 80a441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a441e:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a4422:	da1d      	bge.n	80a4460 <scalbn+0xa8>
 80a4424:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4428:	429f      	cmp	r7, r3
 80a442a:	dc0c      	bgt.n	80a4446 <scalbn+0x8e>
 80a442c:	a114      	add	r1, pc, #80	; (adr r1, 80a4480 <scalbn+0xc8>)
 80a442e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4432:	4622      	mov	r2, r4
 80a4434:	462b      	mov	r3, r5
 80a4436:	f000 f831 	bl	80a449c <copysign>
 80a443a:	a311      	add	r3, pc, #68	; (adr r3, 80a4480 <scalbn+0xc8>)
 80a443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4440:	f000 f9ec 	bl	80a481c <__aeabi_dmul>
 80a4444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4446:	4622      	mov	r2, r4
 80a4448:	a10f      	add	r1, pc, #60	; (adr r1, 80a4488 <scalbn+0xd0>)
 80a444a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a444e:	462b      	mov	r3, r5
 80a4450:	f000 f824 	bl	80a449c <copysign>
 80a4454:	a30c      	add	r3, pc, #48	; (adr r3, 80a4488 <scalbn+0xd0>)
 80a4456:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a445a:	f000 f9df 	bl	80a481c <__aeabi_dmul>
 80a445e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4460:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4464:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4468:	3636      	adds	r6, #54	; 0x36
 80a446a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a446e:	4620      	mov	r0, r4
 80a4470:	4629      	mov	r1, r5
 80a4472:	2200      	movs	r2, #0
 80a4474:	4b08      	ldr	r3, [pc, #32]	; (80a4498 <scalbn+0xe0>)
 80a4476:	f000 f9d1 	bl	80a481c <__aeabi_dmul>
 80a447a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a447c:	f3af 8000 	nop.w
 80a4480:	c2f8f359 	.word	0xc2f8f359
 80a4484:	01a56e1f 	.word	0x01a56e1f
 80a4488:	8800759c 	.word	0x8800759c
 80a448c:	7e37e43c 	.word	0x7e37e43c
 80a4490:	43500000 	.word	0x43500000
 80a4494:	ffff3cb0 	.word	0xffff3cb0
 80a4498:	3c900000 	.word	0x3c900000

080a449c <copysign>:
 80a449c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a44a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a44a4:	ea42 0103 	orr.w	r1, r2, r3
 80a44a8:	4770      	bx	lr
 80a44aa:	bf00      	nop

080a44ac <__aeabi_drsub>:
 80a44ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a44b0:	e002      	b.n	80a44b8 <__adddf3>
 80a44b2:	bf00      	nop

080a44b4 <__aeabi_dsub>:
 80a44b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a44b8 <__adddf3>:
 80a44b8:	b530      	push	{r4, r5, lr}
 80a44ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a44be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a44c2:	ea94 0f05 	teq	r4, r5
 80a44c6:	bf08      	it	eq
 80a44c8:	ea90 0f02 	teqeq	r0, r2
 80a44cc:	bf1f      	itttt	ne
 80a44ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a44d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a44d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a44da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a44de:	f000 80e2 	beq.w	80a46a6 <__adddf3+0x1ee>
 80a44e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a44e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a44ea:	bfb8      	it	lt
 80a44ec:	426d      	neglt	r5, r5
 80a44ee:	dd0c      	ble.n	80a450a <__adddf3+0x52>
 80a44f0:	442c      	add	r4, r5
 80a44f2:	ea80 0202 	eor.w	r2, r0, r2
 80a44f6:	ea81 0303 	eor.w	r3, r1, r3
 80a44fa:	ea82 0000 	eor.w	r0, r2, r0
 80a44fe:	ea83 0101 	eor.w	r1, r3, r1
 80a4502:	ea80 0202 	eor.w	r2, r0, r2
 80a4506:	ea81 0303 	eor.w	r3, r1, r3
 80a450a:	2d36      	cmp	r5, #54	; 0x36
 80a450c:	bf88      	it	hi
 80a450e:	bd30      	pophi	{r4, r5, pc}
 80a4510:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4514:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4518:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a451c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4520:	d002      	beq.n	80a4528 <__adddf3+0x70>
 80a4522:	4240      	negs	r0, r0
 80a4524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4528:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a452c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4530:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4534:	d002      	beq.n	80a453c <__adddf3+0x84>
 80a4536:	4252      	negs	r2, r2
 80a4538:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a453c:	ea94 0f05 	teq	r4, r5
 80a4540:	f000 80a7 	beq.w	80a4692 <__adddf3+0x1da>
 80a4544:	f1a4 0401 	sub.w	r4, r4, #1
 80a4548:	f1d5 0e20 	rsbs	lr, r5, #32
 80a454c:	db0d      	blt.n	80a456a <__adddf3+0xb2>
 80a454e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4552:	fa22 f205 	lsr.w	r2, r2, r5
 80a4556:	1880      	adds	r0, r0, r2
 80a4558:	f141 0100 	adc.w	r1, r1, #0
 80a455c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4560:	1880      	adds	r0, r0, r2
 80a4562:	fa43 f305 	asr.w	r3, r3, r5
 80a4566:	4159      	adcs	r1, r3
 80a4568:	e00e      	b.n	80a4588 <__adddf3+0xd0>
 80a456a:	f1a5 0520 	sub.w	r5, r5, #32
 80a456e:	f10e 0e20 	add.w	lr, lr, #32
 80a4572:	2a01      	cmp	r2, #1
 80a4574:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4578:	bf28      	it	cs
 80a457a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a457e:	fa43 f305 	asr.w	r3, r3, r5
 80a4582:	18c0      	adds	r0, r0, r3
 80a4584:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a458c:	d507      	bpl.n	80a459e <__adddf3+0xe6>
 80a458e:	f04f 0e00 	mov.w	lr, #0
 80a4592:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4596:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a459a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a459e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a45a2:	d31b      	bcc.n	80a45dc <__adddf3+0x124>
 80a45a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a45a8:	d30c      	bcc.n	80a45c4 <__adddf3+0x10c>
 80a45aa:	0849      	lsrs	r1, r1, #1
 80a45ac:	ea5f 0030 	movs.w	r0, r0, rrx
 80a45b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a45b4:	f104 0401 	add.w	r4, r4, #1
 80a45b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a45bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a45c0:	f080 809a 	bcs.w	80a46f8 <__adddf3+0x240>
 80a45c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a45c8:	bf08      	it	eq
 80a45ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a45ce:	f150 0000 	adcs.w	r0, r0, #0
 80a45d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a45d6:	ea41 0105 	orr.w	r1, r1, r5
 80a45da:	bd30      	pop	{r4, r5, pc}
 80a45dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a45e0:	4140      	adcs	r0, r0
 80a45e2:	eb41 0101 	adc.w	r1, r1, r1
 80a45e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a45ea:	f1a4 0401 	sub.w	r4, r4, #1
 80a45ee:	d1e9      	bne.n	80a45c4 <__adddf3+0x10c>
 80a45f0:	f091 0f00 	teq	r1, #0
 80a45f4:	bf04      	itt	eq
 80a45f6:	4601      	moveq	r1, r0
 80a45f8:	2000      	moveq	r0, #0
 80a45fa:	fab1 f381 	clz	r3, r1
 80a45fe:	bf08      	it	eq
 80a4600:	3320      	addeq	r3, #32
 80a4602:	f1a3 030b 	sub.w	r3, r3, #11
 80a4606:	f1b3 0220 	subs.w	r2, r3, #32
 80a460a:	da0c      	bge.n	80a4626 <__adddf3+0x16e>
 80a460c:	320c      	adds	r2, #12
 80a460e:	dd08      	ble.n	80a4622 <__adddf3+0x16a>
 80a4610:	f102 0c14 	add.w	ip, r2, #20
 80a4614:	f1c2 020c 	rsb	r2, r2, #12
 80a4618:	fa01 f00c 	lsl.w	r0, r1, ip
 80a461c:	fa21 f102 	lsr.w	r1, r1, r2
 80a4620:	e00c      	b.n	80a463c <__adddf3+0x184>
 80a4622:	f102 0214 	add.w	r2, r2, #20
 80a4626:	bfd8      	it	le
 80a4628:	f1c2 0c20 	rsble	ip, r2, #32
 80a462c:	fa01 f102 	lsl.w	r1, r1, r2
 80a4630:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4634:	bfdc      	itt	le
 80a4636:	ea41 010c 	orrle.w	r1, r1, ip
 80a463a:	4090      	lslle	r0, r2
 80a463c:	1ae4      	subs	r4, r4, r3
 80a463e:	bfa2      	ittt	ge
 80a4640:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4644:	4329      	orrge	r1, r5
 80a4646:	bd30      	popge	{r4, r5, pc}
 80a4648:	ea6f 0404 	mvn.w	r4, r4
 80a464c:	3c1f      	subs	r4, #31
 80a464e:	da1c      	bge.n	80a468a <__adddf3+0x1d2>
 80a4650:	340c      	adds	r4, #12
 80a4652:	dc0e      	bgt.n	80a4672 <__adddf3+0x1ba>
 80a4654:	f104 0414 	add.w	r4, r4, #20
 80a4658:	f1c4 0220 	rsb	r2, r4, #32
 80a465c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4660:	fa01 f302 	lsl.w	r3, r1, r2
 80a4664:	ea40 0003 	orr.w	r0, r0, r3
 80a4668:	fa21 f304 	lsr.w	r3, r1, r4
 80a466c:	ea45 0103 	orr.w	r1, r5, r3
 80a4670:	bd30      	pop	{r4, r5, pc}
 80a4672:	f1c4 040c 	rsb	r4, r4, #12
 80a4676:	f1c4 0220 	rsb	r2, r4, #32
 80a467a:	fa20 f002 	lsr.w	r0, r0, r2
 80a467e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4682:	ea40 0003 	orr.w	r0, r0, r3
 80a4686:	4629      	mov	r1, r5
 80a4688:	bd30      	pop	{r4, r5, pc}
 80a468a:	fa21 f004 	lsr.w	r0, r1, r4
 80a468e:	4629      	mov	r1, r5
 80a4690:	bd30      	pop	{r4, r5, pc}
 80a4692:	f094 0f00 	teq	r4, #0
 80a4696:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a469a:	bf06      	itte	eq
 80a469c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a46a0:	3401      	addeq	r4, #1
 80a46a2:	3d01      	subne	r5, #1
 80a46a4:	e74e      	b.n	80a4544 <__adddf3+0x8c>
 80a46a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a46aa:	bf18      	it	ne
 80a46ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a46b0:	d029      	beq.n	80a4706 <__adddf3+0x24e>
 80a46b2:	ea94 0f05 	teq	r4, r5
 80a46b6:	bf08      	it	eq
 80a46b8:	ea90 0f02 	teqeq	r0, r2
 80a46bc:	d005      	beq.n	80a46ca <__adddf3+0x212>
 80a46be:	ea54 0c00 	orrs.w	ip, r4, r0
 80a46c2:	bf04      	itt	eq
 80a46c4:	4619      	moveq	r1, r3
 80a46c6:	4610      	moveq	r0, r2
 80a46c8:	bd30      	pop	{r4, r5, pc}
 80a46ca:	ea91 0f03 	teq	r1, r3
 80a46ce:	bf1e      	ittt	ne
 80a46d0:	2100      	movne	r1, #0
 80a46d2:	2000      	movne	r0, #0
 80a46d4:	bd30      	popne	{r4, r5, pc}
 80a46d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a46da:	d105      	bne.n	80a46e8 <__adddf3+0x230>
 80a46dc:	0040      	lsls	r0, r0, #1
 80a46de:	4149      	adcs	r1, r1
 80a46e0:	bf28      	it	cs
 80a46e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a46e6:	bd30      	pop	{r4, r5, pc}
 80a46e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a46ec:	bf3c      	itt	cc
 80a46ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a46f2:	bd30      	popcc	{r4, r5, pc}
 80a46f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a46f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a46fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4700:	f04f 0000 	mov.w	r0, #0
 80a4704:	bd30      	pop	{r4, r5, pc}
 80a4706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a470a:	bf1a      	itte	ne
 80a470c:	4619      	movne	r1, r3
 80a470e:	4610      	movne	r0, r2
 80a4710:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4714:	bf1c      	itt	ne
 80a4716:	460b      	movne	r3, r1
 80a4718:	4602      	movne	r2, r0
 80a471a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a471e:	bf06      	itte	eq
 80a4720:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4724:	ea91 0f03 	teqeq	r1, r3
 80a4728:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a472c:	bd30      	pop	{r4, r5, pc}
 80a472e:	bf00      	nop

080a4730 <__aeabi_ui2d>:
 80a4730:	f090 0f00 	teq	r0, #0
 80a4734:	bf04      	itt	eq
 80a4736:	2100      	moveq	r1, #0
 80a4738:	4770      	bxeq	lr
 80a473a:	b530      	push	{r4, r5, lr}
 80a473c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4744:	f04f 0500 	mov.w	r5, #0
 80a4748:	f04f 0100 	mov.w	r1, #0
 80a474c:	e750      	b.n	80a45f0 <__adddf3+0x138>
 80a474e:	bf00      	nop

080a4750 <__aeabi_i2d>:
 80a4750:	f090 0f00 	teq	r0, #0
 80a4754:	bf04      	itt	eq
 80a4756:	2100      	moveq	r1, #0
 80a4758:	4770      	bxeq	lr
 80a475a:	b530      	push	{r4, r5, lr}
 80a475c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4764:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4768:	bf48      	it	mi
 80a476a:	4240      	negmi	r0, r0
 80a476c:	f04f 0100 	mov.w	r1, #0
 80a4770:	e73e      	b.n	80a45f0 <__adddf3+0x138>
 80a4772:	bf00      	nop

080a4774 <__aeabi_f2d>:
 80a4774:	0042      	lsls	r2, r0, #1
 80a4776:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a477a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a477e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4782:	bf1f      	itttt	ne
 80a4784:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4788:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a478c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4790:	4770      	bxne	lr
 80a4792:	f092 0f00 	teq	r2, #0
 80a4796:	bf14      	ite	ne
 80a4798:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a479c:	4770      	bxeq	lr
 80a479e:	b530      	push	{r4, r5, lr}
 80a47a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a47a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a47a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a47ac:	e720      	b.n	80a45f0 <__adddf3+0x138>
 80a47ae:	bf00      	nop

080a47b0 <__aeabi_ul2d>:
 80a47b0:	ea50 0201 	orrs.w	r2, r0, r1
 80a47b4:	bf08      	it	eq
 80a47b6:	4770      	bxeq	lr
 80a47b8:	b530      	push	{r4, r5, lr}
 80a47ba:	f04f 0500 	mov.w	r5, #0
 80a47be:	e00a      	b.n	80a47d6 <__aeabi_l2d+0x16>

080a47c0 <__aeabi_l2d>:
 80a47c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a47c4:	bf08      	it	eq
 80a47c6:	4770      	bxeq	lr
 80a47c8:	b530      	push	{r4, r5, lr}
 80a47ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a47ce:	d502      	bpl.n	80a47d6 <__aeabi_l2d+0x16>
 80a47d0:	4240      	negs	r0, r0
 80a47d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a47d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a47da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a47de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a47e2:	f43f aedc 	beq.w	80a459e <__adddf3+0xe6>
 80a47e6:	f04f 0203 	mov.w	r2, #3
 80a47ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a47ee:	bf18      	it	ne
 80a47f0:	3203      	addne	r2, #3
 80a47f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a47f6:	bf18      	it	ne
 80a47f8:	3203      	addne	r2, #3
 80a47fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a47fe:	f1c2 0320 	rsb	r3, r2, #32
 80a4802:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4806:	fa20 f002 	lsr.w	r0, r0, r2
 80a480a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a480e:	ea40 000e 	orr.w	r0, r0, lr
 80a4812:	fa21 f102 	lsr.w	r1, r1, r2
 80a4816:	4414      	add	r4, r2
 80a4818:	e6c1      	b.n	80a459e <__adddf3+0xe6>
 80a481a:	bf00      	nop

080a481c <__aeabi_dmul>:
 80a481c:	b570      	push	{r4, r5, r6, lr}
 80a481e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a482a:	bf1d      	ittte	ne
 80a482c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4830:	ea94 0f0c 	teqne	r4, ip
 80a4834:	ea95 0f0c 	teqne	r5, ip
 80a4838:	f000 f8de 	bleq	80a49f8 <__aeabi_dmul+0x1dc>
 80a483c:	442c      	add	r4, r5
 80a483e:	ea81 0603 	eor.w	r6, r1, r3
 80a4842:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4846:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a484a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a484e:	bf18      	it	ne
 80a4850:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4854:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a485c:	d038      	beq.n	80a48d0 <__aeabi_dmul+0xb4>
 80a485e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4862:	f04f 0500 	mov.w	r5, #0
 80a4866:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a486a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a486e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4872:	f04f 0600 	mov.w	r6, #0
 80a4876:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a487a:	f09c 0f00 	teq	ip, #0
 80a487e:	bf18      	it	ne
 80a4880:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4884:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4888:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a488c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4890:	d204      	bcs.n	80a489c <__aeabi_dmul+0x80>
 80a4892:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4896:	416d      	adcs	r5, r5
 80a4898:	eb46 0606 	adc.w	r6, r6, r6
 80a489c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a48a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a48a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a48a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a48ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a48b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a48b4:	bf88      	it	hi
 80a48b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a48ba:	d81e      	bhi.n	80a48fa <__aeabi_dmul+0xde>
 80a48bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a48c0:	bf08      	it	eq
 80a48c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a48c6:	f150 0000 	adcs.w	r0, r0, #0
 80a48ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a48ce:	bd70      	pop	{r4, r5, r6, pc}
 80a48d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a48d4:	ea46 0101 	orr.w	r1, r6, r1
 80a48d8:	ea40 0002 	orr.w	r0, r0, r2
 80a48dc:	ea81 0103 	eor.w	r1, r1, r3
 80a48e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a48e4:	bfc2      	ittt	gt
 80a48e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a48ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a48ee:	bd70      	popgt	{r4, r5, r6, pc}
 80a48f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a48f4:	f04f 0e00 	mov.w	lr, #0
 80a48f8:	3c01      	subs	r4, #1
 80a48fa:	f300 80ab 	bgt.w	80a4a54 <__aeabi_dmul+0x238>
 80a48fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4902:	bfde      	ittt	le
 80a4904:	2000      	movle	r0, #0
 80a4906:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a490a:	bd70      	pople	{r4, r5, r6, pc}
 80a490c:	f1c4 0400 	rsb	r4, r4, #0
 80a4910:	3c20      	subs	r4, #32
 80a4912:	da35      	bge.n	80a4980 <__aeabi_dmul+0x164>
 80a4914:	340c      	adds	r4, #12
 80a4916:	dc1b      	bgt.n	80a4950 <__aeabi_dmul+0x134>
 80a4918:	f104 0414 	add.w	r4, r4, #20
 80a491c:	f1c4 0520 	rsb	r5, r4, #32
 80a4920:	fa00 f305 	lsl.w	r3, r0, r5
 80a4924:	fa20 f004 	lsr.w	r0, r0, r4
 80a4928:	fa01 f205 	lsl.w	r2, r1, r5
 80a492c:	ea40 0002 	orr.w	r0, r0, r2
 80a4930:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a493c:	fa21 f604 	lsr.w	r6, r1, r4
 80a4940:	eb42 0106 	adc.w	r1, r2, r6
 80a4944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4948:	bf08      	it	eq
 80a494a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a494e:	bd70      	pop	{r4, r5, r6, pc}
 80a4950:	f1c4 040c 	rsb	r4, r4, #12
 80a4954:	f1c4 0520 	rsb	r5, r4, #32
 80a4958:	fa00 f304 	lsl.w	r3, r0, r4
 80a495c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4960:	fa01 f204 	lsl.w	r2, r1, r4
 80a4964:	ea40 0002 	orr.w	r0, r0, r2
 80a4968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a496c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4970:	f141 0100 	adc.w	r1, r1, #0
 80a4974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4978:	bf08      	it	eq
 80a497a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a497e:	bd70      	pop	{r4, r5, r6, pc}
 80a4980:	f1c4 0520 	rsb	r5, r4, #32
 80a4984:	fa00 f205 	lsl.w	r2, r0, r5
 80a4988:	ea4e 0e02 	orr.w	lr, lr, r2
 80a498c:	fa20 f304 	lsr.w	r3, r0, r4
 80a4990:	fa01 f205 	lsl.w	r2, r1, r5
 80a4994:	ea43 0302 	orr.w	r3, r3, r2
 80a4998:	fa21 f004 	lsr.w	r0, r1, r4
 80a499c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a49a0:	fa21 f204 	lsr.w	r2, r1, r4
 80a49a4:	ea20 0002 	bic.w	r0, r0, r2
 80a49a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a49ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a49b0:	bf08      	it	eq
 80a49b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a49b6:	bd70      	pop	{r4, r5, r6, pc}
 80a49b8:	f094 0f00 	teq	r4, #0
 80a49bc:	d10f      	bne.n	80a49de <__aeabi_dmul+0x1c2>
 80a49be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a49c2:	0040      	lsls	r0, r0, #1
 80a49c4:	eb41 0101 	adc.w	r1, r1, r1
 80a49c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a49cc:	bf08      	it	eq
 80a49ce:	3c01      	subeq	r4, #1
 80a49d0:	d0f7      	beq.n	80a49c2 <__aeabi_dmul+0x1a6>
 80a49d2:	ea41 0106 	orr.w	r1, r1, r6
 80a49d6:	f095 0f00 	teq	r5, #0
 80a49da:	bf18      	it	ne
 80a49dc:	4770      	bxne	lr
 80a49de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a49e2:	0052      	lsls	r2, r2, #1
 80a49e4:	eb43 0303 	adc.w	r3, r3, r3
 80a49e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a49ec:	bf08      	it	eq
 80a49ee:	3d01      	subeq	r5, #1
 80a49f0:	d0f7      	beq.n	80a49e2 <__aeabi_dmul+0x1c6>
 80a49f2:	ea43 0306 	orr.w	r3, r3, r6
 80a49f6:	4770      	bx	lr
 80a49f8:	ea94 0f0c 	teq	r4, ip
 80a49fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4a00:	bf18      	it	ne
 80a4a02:	ea95 0f0c 	teqne	r5, ip
 80a4a06:	d00c      	beq.n	80a4a22 <__aeabi_dmul+0x206>
 80a4a08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4a0c:	bf18      	it	ne
 80a4a0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4a12:	d1d1      	bne.n	80a49b8 <__aeabi_dmul+0x19c>
 80a4a14:	ea81 0103 	eor.w	r1, r1, r3
 80a4a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a1c:	f04f 0000 	mov.w	r0, #0
 80a4a20:	bd70      	pop	{r4, r5, r6, pc}
 80a4a22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4a26:	bf06      	itte	eq
 80a4a28:	4610      	moveq	r0, r2
 80a4a2a:	4619      	moveq	r1, r3
 80a4a2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4a30:	d019      	beq.n	80a4a66 <__aeabi_dmul+0x24a>
 80a4a32:	ea94 0f0c 	teq	r4, ip
 80a4a36:	d102      	bne.n	80a4a3e <__aeabi_dmul+0x222>
 80a4a38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4a3c:	d113      	bne.n	80a4a66 <__aeabi_dmul+0x24a>
 80a4a3e:	ea95 0f0c 	teq	r5, ip
 80a4a42:	d105      	bne.n	80a4a50 <__aeabi_dmul+0x234>
 80a4a44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4a48:	bf1c      	itt	ne
 80a4a4a:	4610      	movne	r0, r2
 80a4a4c:	4619      	movne	r1, r3
 80a4a4e:	d10a      	bne.n	80a4a66 <__aeabi_dmul+0x24a>
 80a4a50:	ea81 0103 	eor.w	r1, r1, r3
 80a4a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4a58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4a5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4a60:	f04f 0000 	mov.w	r0, #0
 80a4a64:	bd70      	pop	{r4, r5, r6, pc}
 80a4a66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4a6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4a6e:	bd70      	pop	{r4, r5, r6, pc}

080a4a70 <__aeabi_ddiv>:
 80a4a70:	b570      	push	{r4, r5, r6, lr}
 80a4a72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4a7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4a7e:	bf1d      	ittte	ne
 80a4a80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4a84:	ea94 0f0c 	teqne	r4, ip
 80a4a88:	ea95 0f0c 	teqne	r5, ip
 80a4a8c:	f000 f8a7 	bleq	80a4bde <__aeabi_ddiv+0x16e>
 80a4a90:	eba4 0405 	sub.w	r4, r4, r5
 80a4a94:	ea81 0e03 	eor.w	lr, r1, r3
 80a4a98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4a9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4aa0:	f000 8088 	beq.w	80a4bb4 <__aeabi_ddiv+0x144>
 80a4aa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4aa8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4aac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4ab0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4ab4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4ab8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4abc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4ac0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4ac4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4ac8:	429d      	cmp	r5, r3
 80a4aca:	bf08      	it	eq
 80a4acc:	4296      	cmpeq	r6, r2
 80a4ace:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4ad2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4ad6:	d202      	bcs.n	80a4ade <__aeabi_ddiv+0x6e>
 80a4ad8:	085b      	lsrs	r3, r3, #1
 80a4ada:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4ade:	1ab6      	subs	r6, r6, r2
 80a4ae0:	eb65 0503 	sbc.w	r5, r5, r3
 80a4ae4:	085b      	lsrs	r3, r3, #1
 80a4ae6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4aea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4aee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4af2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4af6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4afa:	bf22      	ittt	cs
 80a4afc:	1ab6      	subcs	r6, r6, r2
 80a4afe:	4675      	movcs	r5, lr
 80a4b00:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4b04:	085b      	lsrs	r3, r3, #1
 80a4b06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4b0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4b0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4b12:	bf22      	ittt	cs
 80a4b14:	1ab6      	subcs	r6, r6, r2
 80a4b16:	4675      	movcs	r5, lr
 80a4b18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4b1c:	085b      	lsrs	r3, r3, #1
 80a4b1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4b22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4b26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4b2a:	bf22      	ittt	cs
 80a4b2c:	1ab6      	subcs	r6, r6, r2
 80a4b2e:	4675      	movcs	r5, lr
 80a4b30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4b34:	085b      	lsrs	r3, r3, #1
 80a4b36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4b3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4b42:	bf22      	ittt	cs
 80a4b44:	1ab6      	subcs	r6, r6, r2
 80a4b46:	4675      	movcs	r5, lr
 80a4b48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4b4c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4b50:	d018      	beq.n	80a4b84 <__aeabi_ddiv+0x114>
 80a4b52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4b56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4b5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4b5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4b62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4b66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4b6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4b6e:	d1c0      	bne.n	80a4af2 <__aeabi_ddiv+0x82>
 80a4b70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4b74:	d10b      	bne.n	80a4b8e <__aeabi_ddiv+0x11e>
 80a4b76:	ea41 0100 	orr.w	r1, r1, r0
 80a4b7a:	f04f 0000 	mov.w	r0, #0
 80a4b7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4b82:	e7b6      	b.n	80a4af2 <__aeabi_ddiv+0x82>
 80a4b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4b88:	bf04      	itt	eq
 80a4b8a:	4301      	orreq	r1, r0
 80a4b8c:	2000      	moveq	r0, #0
 80a4b8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4b92:	bf88      	it	hi
 80a4b94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4b98:	f63f aeaf 	bhi.w	80a48fa <__aeabi_dmul+0xde>
 80a4b9c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4ba0:	bf04      	itt	eq
 80a4ba2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4ba6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4baa:	f150 0000 	adcs.w	r0, r0, #0
 80a4bae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4bb2:	bd70      	pop	{r4, r5, r6, pc}
 80a4bb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4bb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4bbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4bc0:	bfc2      	ittt	gt
 80a4bc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4bc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4bca:	bd70      	popgt	{r4, r5, r6, pc}
 80a4bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4bd0:	f04f 0e00 	mov.w	lr, #0
 80a4bd4:	3c01      	subs	r4, #1
 80a4bd6:	e690      	b.n	80a48fa <__aeabi_dmul+0xde>
 80a4bd8:	ea45 0e06 	orr.w	lr, r5, r6
 80a4bdc:	e68d      	b.n	80a48fa <__aeabi_dmul+0xde>
 80a4bde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4be2:	ea94 0f0c 	teq	r4, ip
 80a4be6:	bf08      	it	eq
 80a4be8:	ea95 0f0c 	teqeq	r5, ip
 80a4bec:	f43f af3b 	beq.w	80a4a66 <__aeabi_dmul+0x24a>
 80a4bf0:	ea94 0f0c 	teq	r4, ip
 80a4bf4:	d10a      	bne.n	80a4c0c <__aeabi_ddiv+0x19c>
 80a4bf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4bfa:	f47f af34 	bne.w	80a4a66 <__aeabi_dmul+0x24a>
 80a4bfe:	ea95 0f0c 	teq	r5, ip
 80a4c02:	f47f af25 	bne.w	80a4a50 <__aeabi_dmul+0x234>
 80a4c06:	4610      	mov	r0, r2
 80a4c08:	4619      	mov	r1, r3
 80a4c0a:	e72c      	b.n	80a4a66 <__aeabi_dmul+0x24a>
 80a4c0c:	ea95 0f0c 	teq	r5, ip
 80a4c10:	d106      	bne.n	80a4c20 <__aeabi_ddiv+0x1b0>
 80a4c12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4c16:	f43f aefd 	beq.w	80a4a14 <__aeabi_dmul+0x1f8>
 80a4c1a:	4610      	mov	r0, r2
 80a4c1c:	4619      	mov	r1, r3
 80a4c1e:	e722      	b.n	80a4a66 <__aeabi_dmul+0x24a>
 80a4c20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4c24:	bf18      	it	ne
 80a4c26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4c2a:	f47f aec5 	bne.w	80a49b8 <__aeabi_dmul+0x19c>
 80a4c2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4c32:	f47f af0d 	bne.w	80a4a50 <__aeabi_dmul+0x234>
 80a4c36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4c3a:	f47f aeeb 	bne.w	80a4a14 <__aeabi_dmul+0x1f8>
 80a4c3e:	e712      	b.n	80a4a66 <__aeabi_dmul+0x24a>

080a4c40 <__gedf2>:
 80a4c40:	f04f 3cff 	mov.w	ip, #4294967295
 80a4c44:	e006      	b.n	80a4c54 <__cmpdf2+0x4>
 80a4c46:	bf00      	nop

080a4c48 <__ledf2>:
 80a4c48:	f04f 0c01 	mov.w	ip, #1
 80a4c4c:	e002      	b.n	80a4c54 <__cmpdf2+0x4>
 80a4c4e:	bf00      	nop

080a4c50 <__cmpdf2>:
 80a4c50:	f04f 0c01 	mov.w	ip, #1
 80a4c54:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4c58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4c5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4c60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4c64:	bf18      	it	ne
 80a4c66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4c6a:	d01b      	beq.n	80a4ca4 <__cmpdf2+0x54>
 80a4c6c:	b001      	add	sp, #4
 80a4c6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4c72:	bf0c      	ite	eq
 80a4c74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4c78:	ea91 0f03 	teqne	r1, r3
 80a4c7c:	bf02      	ittt	eq
 80a4c7e:	ea90 0f02 	teqeq	r0, r2
 80a4c82:	2000      	moveq	r0, #0
 80a4c84:	4770      	bxeq	lr
 80a4c86:	f110 0f00 	cmn.w	r0, #0
 80a4c8a:	ea91 0f03 	teq	r1, r3
 80a4c8e:	bf58      	it	pl
 80a4c90:	4299      	cmppl	r1, r3
 80a4c92:	bf08      	it	eq
 80a4c94:	4290      	cmpeq	r0, r2
 80a4c96:	bf2c      	ite	cs
 80a4c98:	17d8      	asrcs	r0, r3, #31
 80a4c9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4c9e:	f040 0001 	orr.w	r0, r0, #1
 80a4ca2:	4770      	bx	lr
 80a4ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4cac:	d102      	bne.n	80a4cb4 <__cmpdf2+0x64>
 80a4cae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4cb2:	d107      	bne.n	80a4cc4 <__cmpdf2+0x74>
 80a4cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4cbc:	d1d6      	bne.n	80a4c6c <__cmpdf2+0x1c>
 80a4cbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4cc2:	d0d3      	beq.n	80a4c6c <__cmpdf2+0x1c>
 80a4cc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4cc8:	4770      	bx	lr
 80a4cca:	bf00      	nop

080a4ccc <__aeabi_cdrcmple>:
 80a4ccc:	4684      	mov	ip, r0
 80a4cce:	4610      	mov	r0, r2
 80a4cd0:	4662      	mov	r2, ip
 80a4cd2:	468c      	mov	ip, r1
 80a4cd4:	4619      	mov	r1, r3
 80a4cd6:	4663      	mov	r3, ip
 80a4cd8:	e000      	b.n	80a4cdc <__aeabi_cdcmpeq>
 80a4cda:	bf00      	nop

080a4cdc <__aeabi_cdcmpeq>:
 80a4cdc:	b501      	push	{r0, lr}
 80a4cde:	f7ff ffb7 	bl	80a4c50 <__cmpdf2>
 80a4ce2:	2800      	cmp	r0, #0
 80a4ce4:	bf48      	it	mi
 80a4ce6:	f110 0f00 	cmnmi.w	r0, #0
 80a4cea:	bd01      	pop	{r0, pc}

080a4cec <__aeabi_dcmpeq>:
 80a4cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4cf0:	f7ff fff4 	bl	80a4cdc <__aeabi_cdcmpeq>
 80a4cf4:	bf0c      	ite	eq
 80a4cf6:	2001      	moveq	r0, #1
 80a4cf8:	2000      	movne	r0, #0
 80a4cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cfe:	bf00      	nop

080a4d00 <__aeabi_dcmplt>:
 80a4d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d04:	f7ff ffea 	bl	80a4cdc <__aeabi_cdcmpeq>
 80a4d08:	bf34      	ite	cc
 80a4d0a:	2001      	movcc	r0, #1
 80a4d0c:	2000      	movcs	r0, #0
 80a4d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d12:	bf00      	nop

080a4d14 <__aeabi_dcmple>:
 80a4d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d18:	f7ff ffe0 	bl	80a4cdc <__aeabi_cdcmpeq>
 80a4d1c:	bf94      	ite	ls
 80a4d1e:	2001      	movls	r0, #1
 80a4d20:	2000      	movhi	r0, #0
 80a4d22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d26:	bf00      	nop

080a4d28 <__aeabi_dcmpge>:
 80a4d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d2c:	f7ff ffce 	bl	80a4ccc <__aeabi_cdrcmple>
 80a4d30:	bf94      	ite	ls
 80a4d32:	2001      	movls	r0, #1
 80a4d34:	2000      	movhi	r0, #0
 80a4d36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d3a:	bf00      	nop

080a4d3c <__aeabi_dcmpgt>:
 80a4d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4d40:	f7ff ffc4 	bl	80a4ccc <__aeabi_cdrcmple>
 80a4d44:	bf34      	ite	cc
 80a4d46:	2001      	movcc	r0, #1
 80a4d48:	2000      	movcs	r0, #0
 80a4d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4d4e:	bf00      	nop

080a4d50 <__aeabi_dcmpun>:
 80a4d50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4d54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d58:	d102      	bne.n	80a4d60 <__aeabi_dcmpun+0x10>
 80a4d5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4d5e:	d10a      	bne.n	80a4d76 <__aeabi_dcmpun+0x26>
 80a4d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4d68:	d102      	bne.n	80a4d70 <__aeabi_dcmpun+0x20>
 80a4d6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4d6e:	d102      	bne.n	80a4d76 <__aeabi_dcmpun+0x26>
 80a4d70:	f04f 0000 	mov.w	r0, #0
 80a4d74:	4770      	bx	lr
 80a4d76:	f04f 0001 	mov.w	r0, #1
 80a4d7a:	4770      	bx	lr

080a4d7c <__aeabi_d2iz>:
 80a4d7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4d80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4d84:	d215      	bcs.n	80a4db2 <__aeabi_d2iz+0x36>
 80a4d86:	d511      	bpl.n	80a4dac <__aeabi_d2iz+0x30>
 80a4d88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4d8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4d90:	d912      	bls.n	80a4db8 <__aeabi_d2iz+0x3c>
 80a4d92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4d9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4d9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4da2:	fa23 f002 	lsr.w	r0, r3, r2
 80a4da6:	bf18      	it	ne
 80a4da8:	4240      	negne	r0, r0
 80a4daa:	4770      	bx	lr
 80a4dac:	f04f 0000 	mov.w	r0, #0
 80a4db0:	4770      	bx	lr
 80a4db2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4db6:	d105      	bne.n	80a4dc4 <__aeabi_d2iz+0x48>
 80a4db8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4dbc:	bf08      	it	eq
 80a4dbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4dc2:	4770      	bx	lr
 80a4dc4:	f04f 0000 	mov.w	r0, #0
 80a4dc8:	4770      	bx	lr
 80a4dca:	bf00      	nop

080a4dcc <__aeabi_d2uiz>:
 80a4dcc:	004a      	lsls	r2, r1, #1
 80a4dce:	d211      	bcs.n	80a4df4 <__aeabi_d2uiz+0x28>
 80a4dd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4dd4:	d211      	bcs.n	80a4dfa <__aeabi_d2uiz+0x2e>
 80a4dd6:	d50d      	bpl.n	80a4df4 <__aeabi_d2uiz+0x28>
 80a4dd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4ddc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4de0:	d40e      	bmi.n	80a4e00 <__aeabi_d2uiz+0x34>
 80a4de2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4de6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4dea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4dee:	fa23 f002 	lsr.w	r0, r3, r2
 80a4df2:	4770      	bx	lr
 80a4df4:	f04f 0000 	mov.w	r0, #0
 80a4df8:	4770      	bx	lr
 80a4dfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4dfe:	d102      	bne.n	80a4e06 <__aeabi_d2uiz+0x3a>
 80a4e00:	f04f 30ff 	mov.w	r0, #4294967295
 80a4e04:	4770      	bx	lr
 80a4e06:	f04f 0000 	mov.w	r0, #0
 80a4e0a:	4770      	bx	lr

080a4e0c <__aeabi_d2f>:
 80a4e0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4e10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4e14:	bf24      	itt	cs
 80a4e16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4e1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4e1e:	d90d      	bls.n	80a4e3c <__aeabi_d2f+0x30>
 80a4e20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4e24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4e28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4e2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4e30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4e34:	bf08      	it	eq
 80a4e36:	f020 0001 	biceq.w	r0, r0, #1
 80a4e3a:	4770      	bx	lr
 80a4e3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4e40:	d121      	bne.n	80a4e86 <__aeabi_d2f+0x7a>
 80a4e42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4e46:	bfbc      	itt	lt
 80a4e48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4e4c:	4770      	bxlt	lr
 80a4e4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4e52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4e56:	f1c2 0218 	rsb	r2, r2, #24
 80a4e5a:	f1c2 0c20 	rsb	ip, r2, #32
 80a4e5e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4e62:	fa20 f002 	lsr.w	r0, r0, r2
 80a4e66:	bf18      	it	ne
 80a4e68:	f040 0001 	orrne.w	r0, r0, #1
 80a4e6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4e70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4e74:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4e78:	ea40 000c 	orr.w	r0, r0, ip
 80a4e7c:	fa23 f302 	lsr.w	r3, r3, r2
 80a4e80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4e84:	e7cc      	b.n	80a4e20 <__aeabi_d2f+0x14>
 80a4e86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4e8a:	d107      	bne.n	80a4e9c <__aeabi_d2f+0x90>
 80a4e8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4e90:	bf1e      	ittt	ne
 80a4e92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4e96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4e9a:	4770      	bxne	lr
 80a4e9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4ea0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ea8:	4770      	bx	lr
 80a4eaa:	bf00      	nop

080a4eac <__aeabi_frsub>:
 80a4eac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4eb0:	e002      	b.n	80a4eb8 <__addsf3>
 80a4eb2:	bf00      	nop

080a4eb4 <__aeabi_fsub>:
 80a4eb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4eb8 <__addsf3>:
 80a4eb8:	0042      	lsls	r2, r0, #1
 80a4eba:	bf1f      	itttt	ne
 80a4ebc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4ec0:	ea92 0f03 	teqne	r2, r3
 80a4ec4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4ec8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4ecc:	d06a      	beq.n	80a4fa4 <__addsf3+0xec>
 80a4ece:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4ed2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4ed6:	bfc1      	itttt	gt
 80a4ed8:	18d2      	addgt	r2, r2, r3
 80a4eda:	4041      	eorgt	r1, r0
 80a4edc:	4048      	eorgt	r0, r1
 80a4ede:	4041      	eorgt	r1, r0
 80a4ee0:	bfb8      	it	lt
 80a4ee2:	425b      	neglt	r3, r3
 80a4ee4:	2b19      	cmp	r3, #25
 80a4ee6:	bf88      	it	hi
 80a4ee8:	4770      	bxhi	lr
 80a4eea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ef2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4ef6:	bf18      	it	ne
 80a4ef8:	4240      	negne	r0, r0
 80a4efa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4efe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4f02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4f06:	bf18      	it	ne
 80a4f08:	4249      	negne	r1, r1
 80a4f0a:	ea92 0f03 	teq	r2, r3
 80a4f0e:	d03f      	beq.n	80a4f90 <__addsf3+0xd8>
 80a4f10:	f1a2 0201 	sub.w	r2, r2, #1
 80a4f14:	fa41 fc03 	asr.w	ip, r1, r3
 80a4f18:	eb10 000c 	adds.w	r0, r0, ip
 80a4f1c:	f1c3 0320 	rsb	r3, r3, #32
 80a4f20:	fa01 f103 	lsl.w	r1, r1, r3
 80a4f24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4f28:	d502      	bpl.n	80a4f30 <__addsf3+0x78>
 80a4f2a:	4249      	negs	r1, r1
 80a4f2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4f30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4f34:	d313      	bcc.n	80a4f5e <__addsf3+0xa6>
 80a4f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4f3a:	d306      	bcc.n	80a4f4a <__addsf3+0x92>
 80a4f3c:	0840      	lsrs	r0, r0, #1
 80a4f3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4f42:	f102 0201 	add.w	r2, r2, #1
 80a4f46:	2afe      	cmp	r2, #254	; 0xfe
 80a4f48:	d251      	bcs.n	80a4fee <__addsf3+0x136>
 80a4f4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4f4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4f52:	bf08      	it	eq
 80a4f54:	f020 0001 	biceq.w	r0, r0, #1
 80a4f58:	ea40 0003 	orr.w	r0, r0, r3
 80a4f5c:	4770      	bx	lr
 80a4f5e:	0049      	lsls	r1, r1, #1
 80a4f60:	eb40 0000 	adc.w	r0, r0, r0
 80a4f64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4f68:	f1a2 0201 	sub.w	r2, r2, #1
 80a4f6c:	d1ed      	bne.n	80a4f4a <__addsf3+0x92>
 80a4f6e:	fab0 fc80 	clz	ip, r0
 80a4f72:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4f76:	ebb2 020c 	subs.w	r2, r2, ip
 80a4f7a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4f7e:	bfaa      	itet	ge
 80a4f80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4f84:	4252      	neglt	r2, r2
 80a4f86:	4318      	orrge	r0, r3
 80a4f88:	bfbc      	itt	lt
 80a4f8a:	40d0      	lsrlt	r0, r2
 80a4f8c:	4318      	orrlt	r0, r3
 80a4f8e:	4770      	bx	lr
 80a4f90:	f092 0f00 	teq	r2, #0
 80a4f94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4f98:	bf06      	itte	eq
 80a4f9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4f9e:	3201      	addeq	r2, #1
 80a4fa0:	3b01      	subne	r3, #1
 80a4fa2:	e7b5      	b.n	80a4f10 <__addsf3+0x58>
 80a4fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4fac:	bf18      	it	ne
 80a4fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4fb2:	d021      	beq.n	80a4ff8 <__addsf3+0x140>
 80a4fb4:	ea92 0f03 	teq	r2, r3
 80a4fb8:	d004      	beq.n	80a4fc4 <__addsf3+0x10c>
 80a4fba:	f092 0f00 	teq	r2, #0
 80a4fbe:	bf08      	it	eq
 80a4fc0:	4608      	moveq	r0, r1
 80a4fc2:	4770      	bx	lr
 80a4fc4:	ea90 0f01 	teq	r0, r1
 80a4fc8:	bf1c      	itt	ne
 80a4fca:	2000      	movne	r0, #0
 80a4fcc:	4770      	bxne	lr
 80a4fce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4fd2:	d104      	bne.n	80a4fde <__addsf3+0x126>
 80a4fd4:	0040      	lsls	r0, r0, #1
 80a4fd6:	bf28      	it	cs
 80a4fd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4fdc:	4770      	bx	lr
 80a4fde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4fe2:	bf3c      	itt	cc
 80a4fe4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4fe8:	4770      	bxcc	lr
 80a4fea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4fee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4ff2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4ff6:	4770      	bx	lr
 80a4ff8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4ffc:	bf16      	itet	ne
 80a4ffe:	4608      	movne	r0, r1
 80a5000:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5004:	4601      	movne	r1, r0
 80a5006:	0242      	lsls	r2, r0, #9
 80a5008:	bf06      	itte	eq
 80a500a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a500e:	ea90 0f01 	teqeq	r0, r1
 80a5012:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5016:	4770      	bx	lr

080a5018 <__aeabi_ui2f>:
 80a5018:	f04f 0300 	mov.w	r3, #0
 80a501c:	e004      	b.n	80a5028 <__aeabi_i2f+0x8>
 80a501e:	bf00      	nop

080a5020 <__aeabi_i2f>:
 80a5020:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5024:	bf48      	it	mi
 80a5026:	4240      	negmi	r0, r0
 80a5028:	ea5f 0c00 	movs.w	ip, r0
 80a502c:	bf08      	it	eq
 80a502e:	4770      	bxeq	lr
 80a5030:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5034:	4601      	mov	r1, r0
 80a5036:	f04f 0000 	mov.w	r0, #0
 80a503a:	e01c      	b.n	80a5076 <__aeabi_l2f+0x2a>

080a503c <__aeabi_ul2f>:
 80a503c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5040:	bf08      	it	eq
 80a5042:	4770      	bxeq	lr
 80a5044:	f04f 0300 	mov.w	r3, #0
 80a5048:	e00a      	b.n	80a5060 <__aeabi_l2f+0x14>
 80a504a:	bf00      	nop

080a504c <__aeabi_l2f>:
 80a504c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5050:	bf08      	it	eq
 80a5052:	4770      	bxeq	lr
 80a5054:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5058:	d502      	bpl.n	80a5060 <__aeabi_l2f+0x14>
 80a505a:	4240      	negs	r0, r0
 80a505c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5060:	ea5f 0c01 	movs.w	ip, r1
 80a5064:	bf02      	ittt	eq
 80a5066:	4684      	moveq	ip, r0
 80a5068:	4601      	moveq	r1, r0
 80a506a:	2000      	moveq	r0, #0
 80a506c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5070:	bf08      	it	eq
 80a5072:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5076:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a507a:	fabc f28c 	clz	r2, ip
 80a507e:	3a08      	subs	r2, #8
 80a5080:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5084:	db10      	blt.n	80a50a8 <__aeabi_l2f+0x5c>
 80a5086:	fa01 fc02 	lsl.w	ip, r1, r2
 80a508a:	4463      	add	r3, ip
 80a508c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5090:	f1c2 0220 	rsb	r2, r2, #32
 80a5094:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5098:	fa20 f202 	lsr.w	r2, r0, r2
 80a509c:	eb43 0002 	adc.w	r0, r3, r2
 80a50a0:	bf08      	it	eq
 80a50a2:	f020 0001 	biceq.w	r0, r0, #1
 80a50a6:	4770      	bx	lr
 80a50a8:	f102 0220 	add.w	r2, r2, #32
 80a50ac:	fa01 fc02 	lsl.w	ip, r1, r2
 80a50b0:	f1c2 0220 	rsb	r2, r2, #32
 80a50b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a50b8:	fa21 f202 	lsr.w	r2, r1, r2
 80a50bc:	eb43 0002 	adc.w	r0, r3, r2
 80a50c0:	bf08      	it	eq
 80a50c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a50c6:	4770      	bx	lr

080a50c8 <__aeabi_fmul>:
 80a50c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a50cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a50d0:	bf1e      	ittt	ne
 80a50d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a50d6:	ea92 0f0c 	teqne	r2, ip
 80a50da:	ea93 0f0c 	teqne	r3, ip
 80a50de:	d06f      	beq.n	80a51c0 <__aeabi_fmul+0xf8>
 80a50e0:	441a      	add	r2, r3
 80a50e2:	ea80 0c01 	eor.w	ip, r0, r1
 80a50e6:	0240      	lsls	r0, r0, #9
 80a50e8:	bf18      	it	ne
 80a50ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a50ee:	d01e      	beq.n	80a512e <__aeabi_fmul+0x66>
 80a50f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a50f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a50f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a50fc:	fba0 3101 	umull	r3, r1, r0, r1
 80a5100:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5104:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5108:	bf3e      	ittt	cc
 80a510a:	0049      	lslcc	r1, r1, #1
 80a510c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5110:	005b      	lslcc	r3, r3, #1
 80a5112:	ea40 0001 	orr.w	r0, r0, r1
 80a5116:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a511a:	2afd      	cmp	r2, #253	; 0xfd
 80a511c:	d81d      	bhi.n	80a515a <__aeabi_fmul+0x92>
 80a511e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5122:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5126:	bf08      	it	eq
 80a5128:	f020 0001 	biceq.w	r0, r0, #1
 80a512c:	4770      	bx	lr
 80a512e:	f090 0f00 	teq	r0, #0
 80a5132:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5136:	bf08      	it	eq
 80a5138:	0249      	lsleq	r1, r1, #9
 80a513a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a513e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5142:	3a7f      	subs	r2, #127	; 0x7f
 80a5144:	bfc2      	ittt	gt
 80a5146:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a514a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a514e:	4770      	bxgt	lr
 80a5150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5154:	f04f 0300 	mov.w	r3, #0
 80a5158:	3a01      	subs	r2, #1
 80a515a:	dc5d      	bgt.n	80a5218 <__aeabi_fmul+0x150>
 80a515c:	f112 0f19 	cmn.w	r2, #25
 80a5160:	bfdc      	itt	le
 80a5162:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5166:	4770      	bxle	lr
 80a5168:	f1c2 0200 	rsb	r2, r2, #0
 80a516c:	0041      	lsls	r1, r0, #1
 80a516e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5172:	f1c2 0220 	rsb	r2, r2, #32
 80a5176:	fa00 fc02 	lsl.w	ip, r0, r2
 80a517a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a517e:	f140 0000 	adc.w	r0, r0, #0
 80a5182:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5186:	bf08      	it	eq
 80a5188:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a518c:	4770      	bx	lr
 80a518e:	f092 0f00 	teq	r2, #0
 80a5192:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5196:	bf02      	ittt	eq
 80a5198:	0040      	lsleq	r0, r0, #1
 80a519a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a519e:	3a01      	subeq	r2, #1
 80a51a0:	d0f9      	beq.n	80a5196 <__aeabi_fmul+0xce>
 80a51a2:	ea40 000c 	orr.w	r0, r0, ip
 80a51a6:	f093 0f00 	teq	r3, #0
 80a51aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a51ae:	bf02      	ittt	eq
 80a51b0:	0049      	lsleq	r1, r1, #1
 80a51b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a51b6:	3b01      	subeq	r3, #1
 80a51b8:	d0f9      	beq.n	80a51ae <__aeabi_fmul+0xe6>
 80a51ba:	ea41 010c 	orr.w	r1, r1, ip
 80a51be:	e78f      	b.n	80a50e0 <__aeabi_fmul+0x18>
 80a51c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a51c4:	ea92 0f0c 	teq	r2, ip
 80a51c8:	bf18      	it	ne
 80a51ca:	ea93 0f0c 	teqne	r3, ip
 80a51ce:	d00a      	beq.n	80a51e6 <__aeabi_fmul+0x11e>
 80a51d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a51d4:	bf18      	it	ne
 80a51d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a51da:	d1d8      	bne.n	80a518e <__aeabi_fmul+0xc6>
 80a51dc:	ea80 0001 	eor.w	r0, r0, r1
 80a51e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a51e4:	4770      	bx	lr
 80a51e6:	f090 0f00 	teq	r0, #0
 80a51ea:	bf17      	itett	ne
 80a51ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a51f0:	4608      	moveq	r0, r1
 80a51f2:	f091 0f00 	teqne	r1, #0
 80a51f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a51fa:	d014      	beq.n	80a5226 <__aeabi_fmul+0x15e>
 80a51fc:	ea92 0f0c 	teq	r2, ip
 80a5200:	d101      	bne.n	80a5206 <__aeabi_fmul+0x13e>
 80a5202:	0242      	lsls	r2, r0, #9
 80a5204:	d10f      	bne.n	80a5226 <__aeabi_fmul+0x15e>
 80a5206:	ea93 0f0c 	teq	r3, ip
 80a520a:	d103      	bne.n	80a5214 <__aeabi_fmul+0x14c>
 80a520c:	024b      	lsls	r3, r1, #9
 80a520e:	bf18      	it	ne
 80a5210:	4608      	movne	r0, r1
 80a5212:	d108      	bne.n	80a5226 <__aeabi_fmul+0x15e>
 80a5214:	ea80 0001 	eor.w	r0, r0, r1
 80a5218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a521c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5224:	4770      	bx	lr
 80a5226:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a522a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a522e:	4770      	bx	lr

080a5230 <__aeabi_fdiv>:
 80a5230:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5238:	bf1e      	ittt	ne
 80a523a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a523e:	ea92 0f0c 	teqne	r2, ip
 80a5242:	ea93 0f0c 	teqne	r3, ip
 80a5246:	d069      	beq.n	80a531c <__aeabi_fdiv+0xec>
 80a5248:	eba2 0203 	sub.w	r2, r2, r3
 80a524c:	ea80 0c01 	eor.w	ip, r0, r1
 80a5250:	0249      	lsls	r1, r1, #9
 80a5252:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5256:	d037      	beq.n	80a52c8 <__aeabi_fdiv+0x98>
 80a5258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a525c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5260:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5264:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5268:	428b      	cmp	r3, r1
 80a526a:	bf38      	it	cc
 80a526c:	005b      	lslcc	r3, r3, #1
 80a526e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5272:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5276:	428b      	cmp	r3, r1
 80a5278:	bf24      	itt	cs
 80a527a:	1a5b      	subcs	r3, r3, r1
 80a527c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5280:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5284:	bf24      	itt	cs
 80a5286:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a528a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a528e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5292:	bf24      	itt	cs
 80a5294:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5298:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a529c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a52a0:	bf24      	itt	cs
 80a52a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a52a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a52aa:	011b      	lsls	r3, r3, #4
 80a52ac:	bf18      	it	ne
 80a52ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a52b2:	d1e0      	bne.n	80a5276 <__aeabi_fdiv+0x46>
 80a52b4:	2afd      	cmp	r2, #253	; 0xfd
 80a52b6:	f63f af50 	bhi.w	80a515a <__aeabi_fmul+0x92>
 80a52ba:	428b      	cmp	r3, r1
 80a52bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a52c0:	bf08      	it	eq
 80a52c2:	f020 0001 	biceq.w	r0, r0, #1
 80a52c6:	4770      	bx	lr
 80a52c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a52cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a52d0:	327f      	adds	r2, #127	; 0x7f
 80a52d2:	bfc2      	ittt	gt
 80a52d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a52d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a52dc:	4770      	bxgt	lr
 80a52de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a52e2:	f04f 0300 	mov.w	r3, #0
 80a52e6:	3a01      	subs	r2, #1
 80a52e8:	e737      	b.n	80a515a <__aeabi_fmul+0x92>
 80a52ea:	f092 0f00 	teq	r2, #0
 80a52ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a52f2:	bf02      	ittt	eq
 80a52f4:	0040      	lsleq	r0, r0, #1
 80a52f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a52fa:	3a01      	subeq	r2, #1
 80a52fc:	d0f9      	beq.n	80a52f2 <__aeabi_fdiv+0xc2>
 80a52fe:	ea40 000c 	orr.w	r0, r0, ip
 80a5302:	f093 0f00 	teq	r3, #0
 80a5306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a530a:	bf02      	ittt	eq
 80a530c:	0049      	lsleq	r1, r1, #1
 80a530e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5312:	3b01      	subeq	r3, #1
 80a5314:	d0f9      	beq.n	80a530a <__aeabi_fdiv+0xda>
 80a5316:	ea41 010c 	orr.w	r1, r1, ip
 80a531a:	e795      	b.n	80a5248 <__aeabi_fdiv+0x18>
 80a531c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5320:	ea92 0f0c 	teq	r2, ip
 80a5324:	d108      	bne.n	80a5338 <__aeabi_fdiv+0x108>
 80a5326:	0242      	lsls	r2, r0, #9
 80a5328:	f47f af7d 	bne.w	80a5226 <__aeabi_fmul+0x15e>
 80a532c:	ea93 0f0c 	teq	r3, ip
 80a5330:	f47f af70 	bne.w	80a5214 <__aeabi_fmul+0x14c>
 80a5334:	4608      	mov	r0, r1
 80a5336:	e776      	b.n	80a5226 <__aeabi_fmul+0x15e>
 80a5338:	ea93 0f0c 	teq	r3, ip
 80a533c:	d104      	bne.n	80a5348 <__aeabi_fdiv+0x118>
 80a533e:	024b      	lsls	r3, r1, #9
 80a5340:	f43f af4c 	beq.w	80a51dc <__aeabi_fmul+0x114>
 80a5344:	4608      	mov	r0, r1
 80a5346:	e76e      	b.n	80a5226 <__aeabi_fmul+0x15e>
 80a5348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a534c:	bf18      	it	ne
 80a534e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5352:	d1ca      	bne.n	80a52ea <__aeabi_fdiv+0xba>
 80a5354:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5358:	f47f af5c 	bne.w	80a5214 <__aeabi_fmul+0x14c>
 80a535c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5360:	f47f af3c 	bne.w	80a51dc <__aeabi_fmul+0x114>
 80a5364:	e75f      	b.n	80a5226 <__aeabi_fmul+0x15e>
 80a5366:	bf00      	nop

080a5368 <__aeabi_ldivmod>:
 80a5368:	b97b      	cbnz	r3, 80a538a <__aeabi_ldivmod+0x22>
 80a536a:	b972      	cbnz	r2, 80a538a <__aeabi_ldivmod+0x22>
 80a536c:	2900      	cmp	r1, #0
 80a536e:	bfbe      	ittt	lt
 80a5370:	2000      	movlt	r0, #0
 80a5372:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a5376:	e006      	blt.n	80a5386 <__aeabi_ldivmod+0x1e>
 80a5378:	bf08      	it	eq
 80a537a:	2800      	cmpeq	r0, #0
 80a537c:	bf1c      	itt	ne
 80a537e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a5382:	f04f 30ff 	movne.w	r0, #4294967295
 80a5386:	f000 b9f1 	b.w	80a576c <__aeabi_idiv0>
 80a538a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a538e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a5392:	2900      	cmp	r1, #0
 80a5394:	db09      	blt.n	80a53aa <__aeabi_ldivmod+0x42>
 80a5396:	2b00      	cmp	r3, #0
 80a5398:	db1a      	blt.n	80a53d0 <__aeabi_ldivmod+0x68>
 80a539a:	f000 f871 	bl	80a5480 <__udivmoddi4>
 80a539e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a53a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a53a6:	b004      	add	sp, #16
 80a53a8:	4770      	bx	lr
 80a53aa:	4240      	negs	r0, r0
 80a53ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a53b0:	2b00      	cmp	r3, #0
 80a53b2:	db1b      	blt.n	80a53ec <__aeabi_ldivmod+0x84>
 80a53b4:	f000 f864 	bl	80a5480 <__udivmoddi4>
 80a53b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a53bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a53c0:	b004      	add	sp, #16
 80a53c2:	4240      	negs	r0, r0
 80a53c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a53c8:	4252      	negs	r2, r2
 80a53ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a53ce:	4770      	bx	lr
 80a53d0:	4252      	negs	r2, r2
 80a53d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a53d6:	f000 f853 	bl	80a5480 <__udivmoddi4>
 80a53da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a53de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a53e2:	b004      	add	sp, #16
 80a53e4:	4240      	negs	r0, r0
 80a53e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a53ea:	4770      	bx	lr
 80a53ec:	4252      	negs	r2, r2
 80a53ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a53f2:	f000 f845 	bl	80a5480 <__udivmoddi4>
 80a53f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a53fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a53fe:	b004      	add	sp, #16
 80a5400:	4252      	negs	r2, r2
 80a5402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5406:	4770      	bx	lr

080a5408 <__aeabi_uldivmod>:
 80a5408:	b953      	cbnz	r3, 80a5420 <__aeabi_uldivmod+0x18>
 80a540a:	b94a      	cbnz	r2, 80a5420 <__aeabi_uldivmod+0x18>
 80a540c:	2900      	cmp	r1, #0
 80a540e:	bf08      	it	eq
 80a5410:	2800      	cmpeq	r0, #0
 80a5412:	bf1c      	itt	ne
 80a5414:	f04f 31ff 	movne.w	r1, #4294967295
 80a5418:	f04f 30ff 	movne.w	r0, #4294967295
 80a541c:	f000 b9a6 	b.w	80a576c <__aeabi_idiv0>
 80a5420:	f1ad 0c08 	sub.w	ip, sp, #8
 80a5424:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a5428:	f000 f82a 	bl	80a5480 <__udivmoddi4>
 80a542c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5434:	b004      	add	sp, #16
 80a5436:	4770      	bx	lr

080a5438 <__aeabi_d2ulz>:
 80a5438:	b5d0      	push	{r4, r6, r7, lr}
 80a543a:	2200      	movs	r2, #0
 80a543c:	4b0e      	ldr	r3, [pc, #56]	; (80a5478 <__aeabi_d2ulz+0x40>)
 80a543e:	4606      	mov	r6, r0
 80a5440:	460f      	mov	r7, r1
 80a5442:	f7ff f9eb 	bl	80a481c <__aeabi_dmul>
 80a5446:	f7ff fcc1 	bl	80a4dcc <__aeabi_d2uiz>
 80a544a:	4604      	mov	r4, r0
 80a544c:	f7ff f970 	bl	80a4730 <__aeabi_ui2d>
 80a5450:	2200      	movs	r2, #0
 80a5452:	4b0a      	ldr	r3, [pc, #40]	; (80a547c <__aeabi_d2ulz+0x44>)
 80a5454:	f7ff f9e2 	bl	80a481c <__aeabi_dmul>
 80a5458:	4602      	mov	r2, r0
 80a545a:	460b      	mov	r3, r1
 80a545c:	4630      	mov	r0, r6
 80a545e:	4639      	mov	r1, r7
 80a5460:	f7ff f828 	bl	80a44b4 <__aeabi_dsub>
 80a5464:	f7ff fcb2 	bl	80a4dcc <__aeabi_d2uiz>
 80a5468:	4623      	mov	r3, r4
 80a546a:	2200      	movs	r2, #0
 80a546c:	ea42 0200 	orr.w	r2, r2, r0
 80a5470:	4610      	mov	r0, r2
 80a5472:	4619      	mov	r1, r3
 80a5474:	bdd0      	pop	{r4, r6, r7, pc}
 80a5476:	bf00      	nop
 80a5478:	3df00000 	.word	0x3df00000
 80a547c:	41f00000 	.word	0x41f00000

080a5480 <__udivmoddi4>:
 80a5480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5484:	468c      	mov	ip, r1
 80a5486:	460c      	mov	r4, r1
 80a5488:	4605      	mov	r5, r0
 80a548a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a548c:	2b00      	cmp	r3, #0
 80a548e:	d14f      	bne.n	80a5530 <__udivmoddi4+0xb0>
 80a5490:	428a      	cmp	r2, r1
 80a5492:	4617      	mov	r7, r2
 80a5494:	d96b      	bls.n	80a556e <__udivmoddi4+0xee>
 80a5496:	fab2 fe82 	clz	lr, r2
 80a549a:	f1be 0f00 	cmp.w	lr, #0
 80a549e:	d00b      	beq.n	80a54b8 <__udivmoddi4+0x38>
 80a54a0:	f1ce 0520 	rsb	r5, lr, #32
 80a54a4:	fa20 f505 	lsr.w	r5, r0, r5
 80a54a8:	fa01 f30e 	lsl.w	r3, r1, lr
 80a54ac:	ea45 0c03 	orr.w	ip, r5, r3
 80a54b0:	fa02 f70e 	lsl.w	r7, r2, lr
 80a54b4:	fa00 f50e 	lsl.w	r5, r0, lr
 80a54b8:	0c39      	lsrs	r1, r7, #16
 80a54ba:	fbbc f0f1 	udiv	r0, ip, r1
 80a54be:	b2ba      	uxth	r2, r7
 80a54c0:	fb01 c310 	mls	r3, r1, r0, ip
 80a54c4:	fb00 f802 	mul.w	r8, r0, r2
 80a54c8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a54cc:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a54d0:	45a0      	cmp	r8, r4
 80a54d2:	d909      	bls.n	80a54e8 <__udivmoddi4+0x68>
 80a54d4:	19e4      	adds	r4, r4, r7
 80a54d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80a54da:	f080 8128 	bcs.w	80a572e <__udivmoddi4+0x2ae>
 80a54de:	45a0      	cmp	r8, r4
 80a54e0:	f240 8125 	bls.w	80a572e <__udivmoddi4+0x2ae>
 80a54e4:	3802      	subs	r0, #2
 80a54e6:	443c      	add	r4, r7
 80a54e8:	ebc8 0404 	rsb	r4, r8, r4
 80a54ec:	fbb4 f3f1 	udiv	r3, r4, r1
 80a54f0:	fb01 4c13 	mls	ip, r1, r3, r4
 80a54f4:	fb03 f202 	mul.w	r2, r3, r2
 80a54f8:	b2ac      	uxth	r4, r5
 80a54fa:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a54fe:	428a      	cmp	r2, r1
 80a5500:	d909      	bls.n	80a5516 <__udivmoddi4+0x96>
 80a5502:	19c9      	adds	r1, r1, r7
 80a5504:	f103 34ff 	add.w	r4, r3, #4294967295
 80a5508:	f080 810f 	bcs.w	80a572a <__udivmoddi4+0x2aa>
 80a550c:	428a      	cmp	r2, r1
 80a550e:	f240 810c 	bls.w	80a572a <__udivmoddi4+0x2aa>
 80a5512:	3b02      	subs	r3, #2
 80a5514:	4439      	add	r1, r7
 80a5516:	1a8a      	subs	r2, r1, r2
 80a5518:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a551c:	2100      	movs	r1, #0
 80a551e:	2e00      	cmp	r6, #0
 80a5520:	d063      	beq.n	80a55ea <__udivmoddi4+0x16a>
 80a5522:	fa22 f20e 	lsr.w	r2, r2, lr
 80a5526:	2300      	movs	r3, #0
 80a5528:	e886 000c 	stmia.w	r6, {r2, r3}
 80a552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5530:	428b      	cmp	r3, r1
 80a5532:	d907      	bls.n	80a5544 <__udivmoddi4+0xc4>
 80a5534:	2e00      	cmp	r6, #0
 80a5536:	d056      	beq.n	80a55e6 <__udivmoddi4+0x166>
 80a5538:	2100      	movs	r1, #0
 80a553a:	e886 0011 	stmia.w	r6, {r0, r4}
 80a553e:	4608      	mov	r0, r1
 80a5540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5544:	fab3 f183 	clz	r1, r3
 80a5548:	2900      	cmp	r1, #0
 80a554a:	f040 8093 	bne.w	80a5674 <__udivmoddi4+0x1f4>
 80a554e:	42a3      	cmp	r3, r4
 80a5550:	d302      	bcc.n	80a5558 <__udivmoddi4+0xd8>
 80a5552:	4282      	cmp	r2, r0
 80a5554:	f200 80fe 	bhi.w	80a5754 <__udivmoddi4+0x2d4>
 80a5558:	1a85      	subs	r5, r0, r2
 80a555a:	eb64 0303 	sbc.w	r3, r4, r3
 80a555e:	469c      	mov	ip, r3
 80a5560:	2001      	movs	r0, #1
 80a5562:	2e00      	cmp	r6, #0
 80a5564:	d041      	beq.n	80a55ea <__udivmoddi4+0x16a>
 80a5566:	e886 1020 	stmia.w	r6, {r5, ip}
 80a556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a556e:	b912      	cbnz	r2, 80a5576 <__udivmoddi4+0xf6>
 80a5570:	2701      	movs	r7, #1
 80a5572:	fbb7 f7f2 	udiv	r7, r7, r2
 80a5576:	fab7 fe87 	clz	lr, r7
 80a557a:	f1be 0f00 	cmp.w	lr, #0
 80a557e:	d136      	bne.n	80a55ee <__udivmoddi4+0x16e>
 80a5580:	1be4      	subs	r4, r4, r7
 80a5582:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a5586:	fa1f f987 	uxth.w	r9, r7
 80a558a:	2101      	movs	r1, #1
 80a558c:	fbb4 f3f8 	udiv	r3, r4, r8
 80a5590:	fb08 4413 	mls	r4, r8, r3, r4
 80a5594:	fb09 f203 	mul.w	r2, r9, r3
 80a5598:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a559c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a55a0:	42a2      	cmp	r2, r4
 80a55a2:	d907      	bls.n	80a55b4 <__udivmoddi4+0x134>
 80a55a4:	19e4      	adds	r4, r4, r7
 80a55a6:	f103 30ff 	add.w	r0, r3, #4294967295
 80a55aa:	d202      	bcs.n	80a55b2 <__udivmoddi4+0x132>
 80a55ac:	42a2      	cmp	r2, r4
 80a55ae:	f200 80d3 	bhi.w	80a5758 <__udivmoddi4+0x2d8>
 80a55b2:	4603      	mov	r3, r0
 80a55b4:	1aa4      	subs	r4, r4, r2
 80a55b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80a55ba:	fb08 4810 	mls	r8, r8, r0, r4
 80a55be:	fb09 f900 	mul.w	r9, r9, r0
 80a55c2:	b2ac      	uxth	r4, r5
 80a55c4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a55c8:	4591      	cmp	r9, r2
 80a55ca:	d907      	bls.n	80a55dc <__udivmoddi4+0x15c>
 80a55cc:	19d2      	adds	r2, r2, r7
 80a55ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80a55d2:	d202      	bcs.n	80a55da <__udivmoddi4+0x15a>
 80a55d4:	4591      	cmp	r9, r2
 80a55d6:	f200 80ba 	bhi.w	80a574e <__udivmoddi4+0x2ce>
 80a55da:	4620      	mov	r0, r4
 80a55dc:	ebc9 0202 	rsb	r2, r9, r2
 80a55e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a55e4:	e79b      	b.n	80a551e <__udivmoddi4+0x9e>
 80a55e6:	4631      	mov	r1, r6
 80a55e8:	4630      	mov	r0, r6
 80a55ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a55ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80a55f2:	f1ce 0c20 	rsb	ip, lr, #32
 80a55f6:	fa24 f30c 	lsr.w	r3, r4, ip
 80a55fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a55fe:	fbb3 faf8 	udiv	sl, r3, r8
 80a5602:	fa1f f987 	uxth.w	r9, r7
 80a5606:	fb08 351a 	mls	r5, r8, sl, r3
 80a560a:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a560e:	fa04 f40e 	lsl.w	r4, r4, lr
 80a5612:	fb0a fb09 	mul.w	fp, sl, r9
 80a5616:	ea4c 0c04 	orr.w	ip, ip, r4
 80a561a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a561e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a5622:	459b      	cmp	fp, r3
 80a5624:	fa00 f50e 	lsl.w	r5, r0, lr
 80a5628:	d90a      	bls.n	80a5640 <__udivmoddi4+0x1c0>
 80a562a:	19db      	adds	r3, r3, r7
 80a562c:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a5630:	f080 808b 	bcs.w	80a574a <__udivmoddi4+0x2ca>
 80a5634:	459b      	cmp	fp, r3
 80a5636:	f240 8088 	bls.w	80a574a <__udivmoddi4+0x2ca>
 80a563a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a563e:	443b      	add	r3, r7
 80a5640:	ebcb 0303 	rsb	r3, fp, r3
 80a5644:	fbb3 f0f8 	udiv	r0, r3, r8
 80a5648:	fb08 3310 	mls	r3, r8, r0, r3
 80a564c:	fb00 f409 	mul.w	r4, r0, r9
 80a5650:	fa1f fc8c 	uxth.w	ip, ip
 80a5654:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a5658:	429c      	cmp	r4, r3
 80a565a:	d907      	bls.n	80a566c <__udivmoddi4+0x1ec>
 80a565c:	19db      	adds	r3, r3, r7
 80a565e:	f100 32ff 	add.w	r2, r0, #4294967295
 80a5662:	d26e      	bcs.n	80a5742 <__udivmoddi4+0x2c2>
 80a5664:	429c      	cmp	r4, r3
 80a5666:	d96c      	bls.n	80a5742 <__udivmoddi4+0x2c2>
 80a5668:	3802      	subs	r0, #2
 80a566a:	443b      	add	r3, r7
 80a566c:	1b1c      	subs	r4, r3, r4
 80a566e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a5672:	e78b      	b.n	80a558c <__udivmoddi4+0x10c>
 80a5674:	f1c1 0e20 	rsb	lr, r1, #32
 80a5678:	408b      	lsls	r3, r1
 80a567a:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a567e:	ea4c 0c03 	orr.w	ip, ip, r3
 80a5682:	fa24 f70e 	lsr.w	r7, r4, lr
 80a5686:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a568a:	fbb7 faf9 	udiv	sl, r7, r9
 80a568e:	fa1f f38c 	uxth.w	r3, ip
 80a5692:	fb09 771a 	mls	r7, r9, sl, r7
 80a5696:	fa20 f80e 	lsr.w	r8, r0, lr
 80a569a:	408c      	lsls	r4, r1
 80a569c:	fb0a f503 	mul.w	r5, sl, r3
 80a56a0:	ea48 0404 	orr.w	r4, r8, r4
 80a56a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a56a8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a56ac:	42bd      	cmp	r5, r7
 80a56ae:	fa02 f201 	lsl.w	r2, r2, r1
 80a56b2:	fa00 fb01 	lsl.w	fp, r0, r1
 80a56b6:	d909      	bls.n	80a56cc <__udivmoddi4+0x24c>
 80a56b8:	eb17 070c 	adds.w	r7, r7, ip
 80a56bc:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a56c0:	d241      	bcs.n	80a5746 <__udivmoddi4+0x2c6>
 80a56c2:	42bd      	cmp	r5, r7
 80a56c4:	d93f      	bls.n	80a5746 <__udivmoddi4+0x2c6>
 80a56c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80a56ca:	4467      	add	r7, ip
 80a56cc:	1b7f      	subs	r7, r7, r5
 80a56ce:	fbb7 f5f9 	udiv	r5, r7, r9
 80a56d2:	fb09 7715 	mls	r7, r9, r5, r7
 80a56d6:	fb05 f303 	mul.w	r3, r5, r3
 80a56da:	b2a4      	uxth	r4, r4
 80a56dc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a56e0:	42bb      	cmp	r3, r7
 80a56e2:	d908      	bls.n	80a56f6 <__udivmoddi4+0x276>
 80a56e4:	eb17 070c 	adds.w	r7, r7, ip
 80a56e8:	f105 30ff 	add.w	r0, r5, #4294967295
 80a56ec:	d227      	bcs.n	80a573e <__udivmoddi4+0x2be>
 80a56ee:	42bb      	cmp	r3, r7
 80a56f0:	d925      	bls.n	80a573e <__udivmoddi4+0x2be>
 80a56f2:	3d02      	subs	r5, #2
 80a56f4:	4467      	add	r7, ip
 80a56f6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a56fa:	fba0 8902 	umull	r8, r9, r0, r2
 80a56fe:	1aff      	subs	r7, r7, r3
 80a5700:	454f      	cmp	r7, r9
 80a5702:	4645      	mov	r5, r8
 80a5704:	464c      	mov	r4, r9
 80a5706:	d314      	bcc.n	80a5732 <__udivmoddi4+0x2b2>
 80a5708:	d029      	beq.n	80a575e <__udivmoddi4+0x2de>
 80a570a:	b366      	cbz	r6, 80a5766 <__udivmoddi4+0x2e6>
 80a570c:	ebbb 0305 	subs.w	r3, fp, r5
 80a5710:	eb67 0704 	sbc.w	r7, r7, r4
 80a5714:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a5718:	40cb      	lsrs	r3, r1
 80a571a:	40cf      	lsrs	r7, r1
 80a571c:	ea4e 0303 	orr.w	r3, lr, r3
 80a5720:	e886 0088 	stmia.w	r6, {r3, r7}
 80a5724:	2100      	movs	r1, #0
 80a5726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a572a:	4623      	mov	r3, r4
 80a572c:	e6f3      	b.n	80a5516 <__udivmoddi4+0x96>
 80a572e:	4618      	mov	r0, r3
 80a5730:	e6da      	b.n	80a54e8 <__udivmoddi4+0x68>
 80a5732:	ebb8 0502 	subs.w	r5, r8, r2
 80a5736:	eb69 040c 	sbc.w	r4, r9, ip
 80a573a:	3801      	subs	r0, #1
 80a573c:	e7e5      	b.n	80a570a <__udivmoddi4+0x28a>
 80a573e:	4605      	mov	r5, r0
 80a5740:	e7d9      	b.n	80a56f6 <__udivmoddi4+0x276>
 80a5742:	4610      	mov	r0, r2
 80a5744:	e792      	b.n	80a566c <__udivmoddi4+0x1ec>
 80a5746:	4682      	mov	sl, r0
 80a5748:	e7c0      	b.n	80a56cc <__udivmoddi4+0x24c>
 80a574a:	4692      	mov	sl, r2
 80a574c:	e778      	b.n	80a5640 <__udivmoddi4+0x1c0>
 80a574e:	3802      	subs	r0, #2
 80a5750:	443a      	add	r2, r7
 80a5752:	e743      	b.n	80a55dc <__udivmoddi4+0x15c>
 80a5754:	4608      	mov	r0, r1
 80a5756:	e704      	b.n	80a5562 <__udivmoddi4+0xe2>
 80a5758:	3b02      	subs	r3, #2
 80a575a:	443c      	add	r4, r7
 80a575c:	e72a      	b.n	80a55b4 <__udivmoddi4+0x134>
 80a575e:	45c3      	cmp	fp, r8
 80a5760:	d3e7      	bcc.n	80a5732 <__udivmoddi4+0x2b2>
 80a5762:	463c      	mov	r4, r7
 80a5764:	e7d1      	b.n	80a570a <__udivmoddi4+0x28a>
 80a5766:	4631      	mov	r1, r6
 80a5768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a576c <__aeabi_idiv0>:
 80a576c:	4770      	bx	lr
 80a576e:	bf00      	nop

080a5770 <__cxa_atexit>:
 80a5770:	b510      	push	{r4, lr}
 80a5772:	4c05      	ldr	r4, [pc, #20]	; (80a5788 <__cxa_atexit+0x18>)
 80a5774:	4613      	mov	r3, r2
 80a5776:	b12c      	cbz	r4, 80a5784 <__cxa_atexit+0x14>
 80a5778:	460a      	mov	r2, r1
 80a577a:	4601      	mov	r1, r0
 80a577c:	2002      	movs	r0, #2
 80a577e:	f3af 8000 	nop.w
 80a5782:	bd10      	pop	{r4, pc}
 80a5784:	4620      	mov	r0, r4
 80a5786:	bd10      	pop	{r4, pc}
 80a5788:	00000000 	.word	0x00000000

080a578c <localtime>:
 80a578c:	b538      	push	{r3, r4, r5, lr}
 80a578e:	4b07      	ldr	r3, [pc, #28]	; (80a57ac <localtime+0x20>)
 80a5790:	4605      	mov	r5, r0
 80a5792:	681c      	ldr	r4, [r3, #0]
 80a5794:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5796:	b91b      	cbnz	r3, 80a57a0 <localtime+0x14>
 80a5798:	2024      	movs	r0, #36	; 0x24
 80a579a:	f7fb ffcf 	bl	80a173c <malloc>
 80a579e:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a57a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a57a2:	4628      	mov	r0, r5
 80a57a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a57a8:	f000 b802 	b.w	80a57b0 <localtime_r>
 80a57ac:	20000078 	.word	0x20000078

080a57b0 <localtime_r>:
 80a57b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a57b4:	460c      	mov	r4, r1
 80a57b6:	4680      	mov	r8, r0
 80a57b8:	f000 fc62 	bl	80a6080 <__gettzinfo>
 80a57bc:	4621      	mov	r1, r4
 80a57be:	4607      	mov	r7, r0
 80a57c0:	4640      	mov	r0, r8
 80a57c2:	f000 fc61 	bl	80a6088 <gmtime_r>
 80a57c6:	6946      	ldr	r6, [r0, #20]
 80a57c8:	4604      	mov	r4, r0
 80a57ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a57ce:	07b3      	lsls	r3, r6, #30
 80a57d0:	d105      	bne.n	80a57de <localtime_r+0x2e>
 80a57d2:	2264      	movs	r2, #100	; 0x64
 80a57d4:	fb96 f3f2 	sdiv	r3, r6, r2
 80a57d8:	fb02 6313 	mls	r3, r2, r3, r6
 80a57dc:	b94b      	cbnz	r3, 80a57f2 <localtime_r+0x42>
 80a57de:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a57e2:	fb96 f3f5 	sdiv	r3, r6, r5
 80a57e6:	fb05 6513 	mls	r5, r5, r3, r6
 80a57ea:	fab5 f385 	clz	r3, r5
 80a57ee:	095b      	lsrs	r3, r3, #5
 80a57f0:	e000      	b.n	80a57f4 <localtime_r+0x44>
 80a57f2:	2301      	movs	r3, #1
 80a57f4:	4a5f      	ldr	r2, [pc, #380]	; (80a5974 <localtime_r+0x1c4>)
 80a57f6:	2530      	movs	r5, #48	; 0x30
 80a57f8:	fb05 2503 	mla	r5, r5, r3, r2
 80a57fc:	f000 fa74 	bl	80a5ce8 <__tz_lock>
 80a5800:	f000 fa74 	bl	80a5cec <_tzset_unlocked>
 80a5804:	4b5c      	ldr	r3, [pc, #368]	; (80a5978 <localtime_r+0x1c8>)
 80a5806:	681b      	ldr	r3, [r3, #0]
 80a5808:	b1f3      	cbz	r3, 80a5848 <localtime_r+0x98>
 80a580a:	687b      	ldr	r3, [r7, #4]
 80a580c:	429e      	cmp	r6, r3
 80a580e:	d105      	bne.n	80a581c <localtime_r+0x6c>
 80a5810:	6839      	ldr	r1, [r7, #0]
 80a5812:	f8d8 3000 	ldr.w	r3, [r8]
 80a5816:	69fa      	ldr	r2, [r7, #28]
 80a5818:	b941      	cbnz	r1, 80a582c <localtime_r+0x7c>
 80a581a:	e00a      	b.n	80a5832 <localtime_r+0x82>
 80a581c:	4630      	mov	r0, r6
 80a581e:	f000 f9bb 	bl	80a5b98 <__tzcalc_limits>
 80a5822:	2800      	cmp	r0, #0
 80a5824:	d1f4      	bne.n	80a5810 <localtime_r+0x60>
 80a5826:	f04f 33ff 	mov.w	r3, #4294967295
 80a582a:	e00d      	b.n	80a5848 <localtime_r+0x98>
 80a582c:	4293      	cmp	r3, r2
 80a582e:	db08      	blt.n	80a5842 <localtime_r+0x92>
 80a5830:	e001      	b.n	80a5836 <localtime_r+0x86>
 80a5832:	4293      	cmp	r3, r2
 80a5834:	da07      	bge.n	80a5846 <localtime_r+0x96>
 80a5836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a5838:	4293      	cmp	r3, r2
 80a583a:	bfac      	ite	ge
 80a583c:	2300      	movge	r3, #0
 80a583e:	2301      	movlt	r3, #1
 80a5840:	e002      	b.n	80a5848 <localtime_r+0x98>
 80a5842:	2300      	movs	r3, #0
 80a5844:	e000      	b.n	80a5848 <localtime_r+0x98>
 80a5846:	2301      	movs	r3, #1
 80a5848:	6223      	str	r3, [r4, #32]
 80a584a:	6a23      	ldr	r3, [r4, #32]
 80a584c:	203c      	movs	r0, #60	; 0x3c
 80a584e:	2b01      	cmp	r3, #1
 80a5850:	bf0c      	ite	eq
 80a5852:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a5854:	6a39      	ldrne	r1, [r7, #32]
 80a5856:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a585a:	fb91 f6f3 	sdiv	r6, r1, r3
 80a585e:	fb03 1316 	mls	r3, r3, r6, r1
 80a5862:	fb93 f2f0 	sdiv	r2, r3, r0
 80a5866:	fb00 3012 	mls	r0, r0, r2, r3
 80a586a:	6861      	ldr	r1, [r4, #4]
 80a586c:	6823      	ldr	r3, [r4, #0]
 80a586e:	1a89      	subs	r1, r1, r2
 80a5870:	68a2      	ldr	r2, [r4, #8]
 80a5872:	1a1b      	subs	r3, r3, r0
 80a5874:	1b92      	subs	r2, r2, r6
 80a5876:	2b3b      	cmp	r3, #59	; 0x3b
 80a5878:	6023      	str	r3, [r4, #0]
 80a587a:	6061      	str	r1, [r4, #4]
 80a587c:	60a2      	str	r2, [r4, #8]
 80a587e:	dd03      	ble.n	80a5888 <localtime_r+0xd8>
 80a5880:	3101      	adds	r1, #1
 80a5882:	6061      	str	r1, [r4, #4]
 80a5884:	3b3c      	subs	r3, #60	; 0x3c
 80a5886:	e004      	b.n	80a5892 <localtime_r+0xe2>
 80a5888:	2b00      	cmp	r3, #0
 80a588a:	da03      	bge.n	80a5894 <localtime_r+0xe4>
 80a588c:	3901      	subs	r1, #1
 80a588e:	6061      	str	r1, [r4, #4]
 80a5890:	333c      	adds	r3, #60	; 0x3c
 80a5892:	6023      	str	r3, [r4, #0]
 80a5894:	6863      	ldr	r3, [r4, #4]
 80a5896:	2b3b      	cmp	r3, #59	; 0x3b
 80a5898:	dd03      	ble.n	80a58a2 <localtime_r+0xf2>
 80a589a:	3201      	adds	r2, #1
 80a589c:	60a2      	str	r2, [r4, #8]
 80a589e:	3b3c      	subs	r3, #60	; 0x3c
 80a58a0:	e004      	b.n	80a58ac <localtime_r+0xfc>
 80a58a2:	2b00      	cmp	r3, #0
 80a58a4:	da03      	bge.n	80a58ae <localtime_r+0xfe>
 80a58a6:	3a01      	subs	r2, #1
 80a58a8:	60a2      	str	r2, [r4, #8]
 80a58aa:	333c      	adds	r3, #60	; 0x3c
 80a58ac:	6063      	str	r3, [r4, #4]
 80a58ae:	68a3      	ldr	r3, [r4, #8]
 80a58b0:	2b17      	cmp	r3, #23
 80a58b2:	dd22      	ble.n	80a58fa <localtime_r+0x14a>
 80a58b4:	69e2      	ldr	r2, [r4, #28]
 80a58b6:	3b18      	subs	r3, #24
 80a58b8:	3201      	adds	r2, #1
 80a58ba:	61e2      	str	r2, [r4, #28]
 80a58bc:	69a2      	ldr	r2, [r4, #24]
 80a58be:	60a3      	str	r3, [r4, #8]
 80a58c0:	3201      	adds	r2, #1
 80a58c2:	2a06      	cmp	r2, #6
 80a58c4:	bfc8      	it	gt
 80a58c6:	2200      	movgt	r2, #0
 80a58c8:	61a2      	str	r2, [r4, #24]
 80a58ca:	68e2      	ldr	r2, [r4, #12]
 80a58cc:	6923      	ldr	r3, [r4, #16]
 80a58ce:	3201      	adds	r2, #1
 80a58d0:	60e2      	str	r2, [r4, #12]
 80a58d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a58d6:	428a      	cmp	r2, r1
 80a58d8:	dd46      	ble.n	80a5968 <localtime_r+0x1b8>
 80a58da:	3301      	adds	r3, #1
 80a58dc:	2b0c      	cmp	r3, #12
 80a58de:	bf08      	it	eq
 80a58e0:	6963      	ldreq	r3, [r4, #20]
 80a58e2:	eba2 0201 	sub.w	r2, r2, r1
 80a58e6:	60e2      	str	r2, [r4, #12]
 80a58e8:	bf05      	ittet	eq
 80a58ea:	3301      	addeq	r3, #1
 80a58ec:	2200      	moveq	r2, #0
 80a58ee:	6123      	strne	r3, [r4, #16]
 80a58f0:	6122      	streq	r2, [r4, #16]
 80a58f2:	bf04      	itt	eq
 80a58f4:	6163      	streq	r3, [r4, #20]
 80a58f6:	61e2      	streq	r2, [r4, #28]
 80a58f8:	e036      	b.n	80a5968 <localtime_r+0x1b8>
 80a58fa:	2b00      	cmp	r3, #0
 80a58fc:	da34      	bge.n	80a5968 <localtime_r+0x1b8>
 80a58fe:	69e2      	ldr	r2, [r4, #28]
 80a5900:	3318      	adds	r3, #24
 80a5902:	3a01      	subs	r2, #1
 80a5904:	61e2      	str	r2, [r4, #28]
 80a5906:	69a2      	ldr	r2, [r4, #24]
 80a5908:	60a3      	str	r3, [r4, #8]
 80a590a:	3a01      	subs	r2, #1
 80a590c:	bf48      	it	mi
 80a590e:	2206      	movmi	r2, #6
 80a5910:	61a2      	str	r2, [r4, #24]
 80a5912:	68e2      	ldr	r2, [r4, #12]
 80a5914:	3a01      	subs	r2, #1
 80a5916:	60e2      	str	r2, [r4, #12]
 80a5918:	bb32      	cbnz	r2, 80a5968 <localtime_r+0x1b8>
 80a591a:	6923      	ldr	r3, [r4, #16]
 80a591c:	3b01      	subs	r3, #1
 80a591e:	d401      	bmi.n	80a5924 <localtime_r+0x174>
 80a5920:	6123      	str	r3, [r4, #16]
 80a5922:	e01d      	b.n	80a5960 <localtime_r+0x1b0>
 80a5924:	230b      	movs	r3, #11
 80a5926:	6123      	str	r3, [r4, #16]
 80a5928:	6963      	ldr	r3, [r4, #20]
 80a592a:	1e5a      	subs	r2, r3, #1
 80a592c:	f012 0f03 	tst.w	r2, #3
 80a5930:	6162      	str	r2, [r4, #20]
 80a5932:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5936:	d105      	bne.n	80a5944 <localtime_r+0x194>
 80a5938:	2164      	movs	r1, #100	; 0x64
 80a593a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a593e:	fb01 3212 	mls	r2, r1, r2, r3
 80a5942:	b94a      	cbnz	r2, 80a5958 <localtime_r+0x1a8>
 80a5944:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5948:	fb93 f2f1 	sdiv	r2, r3, r1
 80a594c:	fb01 3312 	mls	r3, r1, r2, r3
 80a5950:	fab3 f383 	clz	r3, r3
 80a5954:	095b      	lsrs	r3, r3, #5
 80a5956:	e000      	b.n	80a595a <localtime_r+0x1aa>
 80a5958:	2301      	movs	r3, #1
 80a595a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a595e:	61e3      	str	r3, [r4, #28]
 80a5960:	6923      	ldr	r3, [r4, #16]
 80a5962:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a5966:	60e3      	str	r3, [r4, #12]
 80a5968:	f000 f9bf 	bl	80a5cea <__tz_unlock>
 80a596c:	4620      	mov	r0, r4
 80a596e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5972:	bf00      	nop
 80a5974:	080a6934 	.word	0x080a6934
 80a5978:	200002fc 	.word	0x200002fc

080a597c <memcpy>:
 80a597c:	b510      	push	{r4, lr}
 80a597e:	1e43      	subs	r3, r0, #1
 80a5980:	440a      	add	r2, r1
 80a5982:	4291      	cmp	r1, r2
 80a5984:	d004      	beq.n	80a5990 <memcpy+0x14>
 80a5986:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a598a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a598e:	e7f8      	b.n	80a5982 <memcpy+0x6>
 80a5990:	bd10      	pop	{r4, pc}

080a5992 <memset>:
 80a5992:	4603      	mov	r3, r0
 80a5994:	4402      	add	r2, r0
 80a5996:	4293      	cmp	r3, r2
 80a5998:	d002      	beq.n	80a59a0 <memset+0xe>
 80a599a:	f803 1b01 	strb.w	r1, [r3], #1
 80a599e:	e7fa      	b.n	80a5996 <memset+0x4>
 80a59a0:	4770      	bx	lr
	...

080a59a4 <srand>:
 80a59a4:	b538      	push	{r3, r4, r5, lr}
 80a59a6:	4b12      	ldr	r3, [pc, #72]	; (80a59f0 <srand+0x4c>)
 80a59a8:	4605      	mov	r5, r0
 80a59aa:	681c      	ldr	r4, [r3, #0]
 80a59ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a59ae:	b9d3      	cbnz	r3, 80a59e6 <srand+0x42>
 80a59b0:	2018      	movs	r0, #24
 80a59b2:	f7fb fec3 	bl	80a173c <malloc>
 80a59b6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a59ba:	63a0      	str	r0, [r4, #56]	; 0x38
 80a59bc:	8003      	strh	r3, [r0, #0]
 80a59be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a59c2:	8043      	strh	r3, [r0, #2]
 80a59c4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a59c8:	8083      	strh	r3, [r0, #4]
 80a59ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a59ce:	80c3      	strh	r3, [r0, #6]
 80a59d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a59d4:	8103      	strh	r3, [r0, #8]
 80a59d6:	2305      	movs	r3, #5
 80a59d8:	8143      	strh	r3, [r0, #10]
 80a59da:	230b      	movs	r3, #11
 80a59dc:	8183      	strh	r3, [r0, #12]
 80a59de:	2201      	movs	r2, #1
 80a59e0:	2300      	movs	r3, #0
 80a59e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a59e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a59e8:	2200      	movs	r2, #0
 80a59ea:	611d      	str	r5, [r3, #16]
 80a59ec:	615a      	str	r2, [r3, #20]
 80a59ee:	bd38      	pop	{r3, r4, r5, pc}
 80a59f0:	20000078 	.word	0x20000078

080a59f4 <strcmp>:
 80a59f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a59f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a59fc:	2a01      	cmp	r2, #1
 80a59fe:	bf28      	it	cs
 80a5a00:	429a      	cmpcs	r2, r3
 80a5a02:	d0f7      	beq.n	80a59f4 <strcmp>
 80a5a04:	1ad0      	subs	r0, r2, r3
 80a5a06:	4770      	bx	lr

080a5a08 <strcpy>:
 80a5a08:	4603      	mov	r3, r0
 80a5a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5a0e:	f803 2b01 	strb.w	r2, [r3], #1
 80a5a12:	2a00      	cmp	r2, #0
 80a5a14:	d1f9      	bne.n	80a5a0a <strcpy+0x2>
 80a5a16:	4770      	bx	lr

080a5a18 <strdup>:
 80a5a18:	4b02      	ldr	r3, [pc, #8]	; (80a5a24 <strdup+0xc>)
 80a5a1a:	4601      	mov	r1, r0
 80a5a1c:	6818      	ldr	r0, [r3, #0]
 80a5a1e:	f000 b803 	b.w	80a5a28 <_strdup_r>
 80a5a22:	bf00      	nop
 80a5a24:	20000078 	.word	0x20000078

080a5a28 <_strdup_r>:
 80a5a28:	b570      	push	{r4, r5, r6, lr}
 80a5a2a:	4606      	mov	r6, r0
 80a5a2c:	4608      	mov	r0, r1
 80a5a2e:	460c      	mov	r4, r1
 80a5a30:	f000 f80d 	bl	80a5a4e <strlen>
 80a5a34:	1c45      	adds	r5, r0, #1
 80a5a36:	4629      	mov	r1, r5
 80a5a38:	4630      	mov	r0, r6
 80a5a3a:	f7fb feaf 	bl	80a179c <_malloc_r>
 80a5a3e:	4606      	mov	r6, r0
 80a5a40:	b118      	cbz	r0, 80a5a4a <_strdup_r+0x22>
 80a5a42:	462a      	mov	r2, r5
 80a5a44:	4621      	mov	r1, r4
 80a5a46:	f7ff ff99 	bl	80a597c <memcpy>
 80a5a4a:	4630      	mov	r0, r6
 80a5a4c:	bd70      	pop	{r4, r5, r6, pc}

080a5a4e <strlen>:
 80a5a4e:	4603      	mov	r3, r0
 80a5a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5a54:	2a00      	cmp	r2, #0
 80a5a56:	d1fb      	bne.n	80a5a50 <strlen+0x2>
 80a5a58:	1a18      	subs	r0, r3, r0
 80a5a5a:	3801      	subs	r0, #1
 80a5a5c:	4770      	bx	lr

080a5a5e <strncmp>:
 80a5a5e:	b530      	push	{r4, r5, lr}
 80a5a60:	b182      	cbz	r2, 80a5a84 <strncmp+0x26>
 80a5a62:	1e45      	subs	r5, r0, #1
 80a5a64:	3901      	subs	r1, #1
 80a5a66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a5a6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a5a6e:	42a3      	cmp	r3, r4
 80a5a70:	d106      	bne.n	80a5a80 <strncmp+0x22>
 80a5a72:	43ec      	mvns	r4, r5
 80a5a74:	4414      	add	r4, r2
 80a5a76:	42e0      	cmn	r0, r4
 80a5a78:	d001      	beq.n	80a5a7e <strncmp+0x20>
 80a5a7a:	2b00      	cmp	r3, #0
 80a5a7c:	d1f3      	bne.n	80a5a66 <strncmp+0x8>
 80a5a7e:	461c      	mov	r4, r3
 80a5a80:	1b18      	subs	r0, r3, r4
 80a5a82:	bd30      	pop	{r4, r5, pc}
 80a5a84:	4610      	mov	r0, r2
 80a5a86:	bd30      	pop	{r4, r5, pc}

080a5a88 <_strtoul_r>:
 80a5a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5a8c:	460e      	mov	r6, r1
 80a5a8e:	4680      	mov	r8, r0
 80a5a90:	483b      	ldr	r0, [pc, #236]	; (80a5b80 <_strtoul_r+0xf8>)
 80a5a92:	f8d0 9000 	ldr.w	r9, [r0]
 80a5a96:	4635      	mov	r5, r6
 80a5a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5a9c:	eb09 0004 	add.w	r0, r9, r4
 80a5aa0:	7840      	ldrb	r0, [r0, #1]
 80a5aa2:	f000 0008 	and.w	r0, r0, #8
 80a5aa6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5aaa:	b108      	cbz	r0, 80a5ab0 <_strtoul_r+0x28>
 80a5aac:	462e      	mov	r6, r5
 80a5aae:	e7f2      	b.n	80a5a96 <_strtoul_r+0xe>
 80a5ab0:	2c2d      	cmp	r4, #45	; 0x2d
 80a5ab2:	d103      	bne.n	80a5abc <_strtoul_r+0x34>
 80a5ab4:	1cb5      	adds	r5, r6, #2
 80a5ab6:	7874      	ldrb	r4, [r6, #1]
 80a5ab8:	2701      	movs	r7, #1
 80a5aba:	e003      	b.n	80a5ac4 <_strtoul_r+0x3c>
 80a5abc:	2c2b      	cmp	r4, #43	; 0x2b
 80a5abe:	bf04      	itt	eq
 80a5ac0:	7874      	ldrbeq	r4, [r6, #1]
 80a5ac2:	1cb5      	addeq	r5, r6, #2
 80a5ac4:	b113      	cbz	r3, 80a5acc <_strtoul_r+0x44>
 80a5ac6:	2b10      	cmp	r3, #16
 80a5ac8:	d10a      	bne.n	80a5ae0 <_strtoul_r+0x58>
 80a5aca:	e053      	b.n	80a5b74 <_strtoul_r+0xec>
 80a5acc:	2c30      	cmp	r4, #48	; 0x30
 80a5ace:	d14f      	bne.n	80a5b70 <_strtoul_r+0xe8>
 80a5ad0:	7828      	ldrb	r0, [r5, #0]
 80a5ad2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5ad6:	2858      	cmp	r0, #88	; 0x58
 80a5ad8:	d145      	bne.n	80a5b66 <_strtoul_r+0xde>
 80a5ada:	786c      	ldrb	r4, [r5, #1]
 80a5adc:	2310      	movs	r3, #16
 80a5ade:	3502      	adds	r5, #2
 80a5ae0:	f04f 3cff 	mov.w	ip, #4294967295
 80a5ae4:	fbbc fcf3 	udiv	ip, ip, r3
 80a5ae8:	fb03 fa0c 	mul.w	sl, r3, ip
 80a5aec:	2600      	movs	r6, #0
 80a5aee:	ea6f 0a0a 	mvn.w	sl, sl
 80a5af2:	4630      	mov	r0, r6
 80a5af4:	eb09 0e04 	add.w	lr, r9, r4
 80a5af8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5afc:	f01e 0f04 	tst.w	lr, #4
 80a5b00:	d001      	beq.n	80a5b06 <_strtoul_r+0x7e>
 80a5b02:	3c30      	subs	r4, #48	; 0x30
 80a5b04:	e00b      	b.n	80a5b1e <_strtoul_r+0x96>
 80a5b06:	f01e 0e03 	ands.w	lr, lr, #3
 80a5b0a:	d01a      	beq.n	80a5b42 <_strtoul_r+0xba>
 80a5b0c:	f1be 0f01 	cmp.w	lr, #1
 80a5b10:	bf0c      	ite	eq
 80a5b12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5b16:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5b1a:	ebce 0404 	rsb	r4, lr, r4
 80a5b1e:	42a3      	cmp	r3, r4
 80a5b20:	dd0f      	ble.n	80a5b42 <_strtoul_r+0xba>
 80a5b22:	2e00      	cmp	r6, #0
 80a5b24:	db08      	blt.n	80a5b38 <_strtoul_r+0xb0>
 80a5b26:	4560      	cmp	r0, ip
 80a5b28:	d806      	bhi.n	80a5b38 <_strtoul_r+0xb0>
 80a5b2a:	d101      	bne.n	80a5b30 <_strtoul_r+0xa8>
 80a5b2c:	4554      	cmp	r4, sl
 80a5b2e:	dc03      	bgt.n	80a5b38 <_strtoul_r+0xb0>
 80a5b30:	fb03 4000 	mla	r0, r3, r0, r4
 80a5b34:	2601      	movs	r6, #1
 80a5b36:	e001      	b.n	80a5b3c <_strtoul_r+0xb4>
 80a5b38:	f04f 36ff 	mov.w	r6, #4294967295
 80a5b3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5b40:	e7d8      	b.n	80a5af4 <_strtoul_r+0x6c>
 80a5b42:	2e00      	cmp	r6, #0
 80a5b44:	da07      	bge.n	80a5b56 <_strtoul_r+0xce>
 80a5b46:	2322      	movs	r3, #34	; 0x22
 80a5b48:	f8c8 3000 	str.w	r3, [r8]
 80a5b4c:	f04f 30ff 	mov.w	r0, #4294967295
 80a5b50:	b92a      	cbnz	r2, 80a5b5e <_strtoul_r+0xd6>
 80a5b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5b56:	b107      	cbz	r7, 80a5b5a <_strtoul_r+0xd2>
 80a5b58:	4240      	negs	r0, r0
 80a5b5a:	b172      	cbz	r2, 80a5b7a <_strtoul_r+0xf2>
 80a5b5c:	b106      	cbz	r6, 80a5b60 <_strtoul_r+0xd8>
 80a5b5e:	1e69      	subs	r1, r5, #1
 80a5b60:	6011      	str	r1, [r2, #0]
 80a5b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5b66:	2430      	movs	r4, #48	; 0x30
 80a5b68:	2b00      	cmp	r3, #0
 80a5b6a:	d1b9      	bne.n	80a5ae0 <_strtoul_r+0x58>
 80a5b6c:	2308      	movs	r3, #8
 80a5b6e:	e7b7      	b.n	80a5ae0 <_strtoul_r+0x58>
 80a5b70:	230a      	movs	r3, #10
 80a5b72:	e7b5      	b.n	80a5ae0 <_strtoul_r+0x58>
 80a5b74:	2c30      	cmp	r4, #48	; 0x30
 80a5b76:	d0ab      	beq.n	80a5ad0 <_strtoul_r+0x48>
 80a5b78:	e7b2      	b.n	80a5ae0 <_strtoul_r+0x58>
 80a5b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5b7e:	bf00      	nop
 80a5b80:	20000014 	.word	0x20000014

080a5b84 <strtoul>:
 80a5b84:	4613      	mov	r3, r2
 80a5b86:	460a      	mov	r2, r1
 80a5b88:	4601      	mov	r1, r0
 80a5b8a:	4802      	ldr	r0, [pc, #8]	; (80a5b94 <strtoul+0x10>)
 80a5b8c:	6800      	ldr	r0, [r0, #0]
 80a5b8e:	f7ff bf7b 	b.w	80a5a88 <_strtoul_r>
 80a5b92:	bf00      	nop
 80a5b94:	20000078 	.word	0x20000078

080a5b98 <__tzcalc_limits>:
 80a5b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5b9c:	4604      	mov	r4, r0
 80a5b9e:	f000 fa6f 	bl	80a6080 <__gettzinfo>
 80a5ba2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5ba6:	429c      	cmp	r4, r3
 80a5ba8:	f340 8096 	ble.w	80a5cd8 <__tzcalc_limits+0x140>
 80a5bac:	f240 156d 	movw	r5, #365	; 0x16d
 80a5bb0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5bb4:	18e3      	adds	r3, r4, r3
 80a5bb6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5bba:	109b      	asrs	r3, r3, #2
 80a5bbc:	fb05 3502 	mla	r5, r5, r2, r3
 80a5bc0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5bc4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5bcc:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a5bd0:	442b      	add	r3, r5
 80a5bd2:	18a5      	adds	r5, r4, r2
 80a5bd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5bd8:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5bdc:	fb95 f5f2 	sdiv	r5, r5, r2
 80a5be0:	fb02 4717 	mls	r7, r2, r7, r4
 80a5be4:	441d      	add	r5, r3
 80a5be6:	2364      	movs	r3, #100	; 0x64
 80a5be8:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5bec:	fab7 fe87 	clz	lr, r7
 80a5bf0:	4601      	mov	r1, r0
 80a5bf2:	fb03 4616 	mls	r6, r3, r6, r4
 80a5bf6:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5bfa:	9301      	str	r3, [sp, #4]
 80a5bfc:	f004 0303 	and.w	r3, r4, #3
 80a5c00:	6044      	str	r4, [r0, #4]
 80a5c02:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a5c06:	9300      	str	r3, [sp, #0]
 80a5c08:	f04f 0c07 	mov.w	ip, #7
 80a5c0c:	7a0b      	ldrb	r3, [r1, #8]
 80a5c0e:	2b4a      	cmp	r3, #74	; 0x4a
 80a5c10:	d10e      	bne.n	80a5c30 <__tzcalc_limits+0x98>
 80a5c12:	694b      	ldr	r3, [r1, #20]
 80a5c14:	9a00      	ldr	r2, [sp, #0]
 80a5c16:	18ec      	adds	r4, r5, r3
 80a5c18:	b902      	cbnz	r2, 80a5c1c <__tzcalc_limits+0x84>
 80a5c1a:	b906      	cbnz	r6, 80a5c1e <__tzcalc_limits+0x86>
 80a5c1c:	b927      	cbnz	r7, 80a5c28 <__tzcalc_limits+0x90>
 80a5c1e:	2b3b      	cmp	r3, #59	; 0x3b
 80a5c20:	bfd4      	ite	le
 80a5c22:	2300      	movle	r3, #0
 80a5c24:	2301      	movgt	r3, #1
 80a5c26:	e000      	b.n	80a5c2a <__tzcalc_limits+0x92>
 80a5c28:	2300      	movs	r3, #0
 80a5c2a:	4423      	add	r3, r4
 80a5c2c:	3b01      	subs	r3, #1
 80a5c2e:	e03f      	b.n	80a5cb0 <__tzcalc_limits+0x118>
 80a5c30:	2b44      	cmp	r3, #68	; 0x44
 80a5c32:	d102      	bne.n	80a5c3a <__tzcalc_limits+0xa2>
 80a5c34:	694b      	ldr	r3, [r1, #20]
 80a5c36:	442b      	add	r3, r5
 80a5c38:	e03a      	b.n	80a5cb0 <__tzcalc_limits+0x118>
 80a5c3a:	9b00      	ldr	r3, [sp, #0]
 80a5c3c:	b92b      	cbnz	r3, 80a5c4a <__tzcalc_limits+0xb2>
 80a5c3e:	2e00      	cmp	r6, #0
 80a5c40:	bf0c      	ite	eq
 80a5c42:	46f0      	moveq	r8, lr
 80a5c44:	f04f 0801 	movne.w	r8, #1
 80a5c48:	e000      	b.n	80a5c4c <__tzcalc_limits+0xb4>
 80a5c4a:	46f0      	mov	r8, lr
 80a5c4c:	46a9      	mov	r9, r5
 80a5c4e:	4b24      	ldr	r3, [pc, #144]	; (80a5ce0 <__tzcalc_limits+0x148>)
 80a5c50:	2230      	movs	r2, #48	; 0x30
 80a5c52:	fb02 3808 	mla	r8, r2, r8, r3
 80a5c56:	68cc      	ldr	r4, [r1, #12]
 80a5c58:	f1a8 0a04 	sub.w	sl, r8, #4
 80a5c5c:	2301      	movs	r3, #1
 80a5c5e:	42a3      	cmp	r3, r4
 80a5c60:	da04      	bge.n	80a5c6c <__tzcalc_limits+0xd4>
 80a5c62:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a5c66:	3301      	adds	r3, #1
 80a5c68:	44d9      	add	r9, fp
 80a5c6a:	e7f8      	b.n	80a5c5e <__tzcalc_limits+0xc6>
 80a5c6c:	f109 0304 	add.w	r3, r9, #4
 80a5c70:	fb93 fbfc 	sdiv	fp, r3, ip
 80a5c74:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5c78:	ebca 0a03 	rsb	sl, sl, r3
 80a5c7c:	694b      	ldr	r3, [r1, #20]
 80a5c7e:	2c01      	cmp	r4, #1
 80a5c80:	bfb8      	it	lt
 80a5c82:	2401      	movlt	r4, #1
 80a5c84:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5c88:	690b      	ldr	r3, [r1, #16]
 80a5c8a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a5c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 80a5c92:	f104 34ff 	add.w	r4, r4, #4294967295
 80a5c96:	bf48      	it	mi
 80a5c98:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5c9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5ca0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5ca4:	4453      	add	r3, sl
 80a5ca6:	42a3      	cmp	r3, r4
 80a5ca8:	db01      	blt.n	80a5cae <__tzcalc_limits+0x116>
 80a5caa:	3b07      	subs	r3, #7
 80a5cac:	e7fb      	b.n	80a5ca6 <__tzcalc_limits+0x10e>
 80a5cae:	444b      	add	r3, r9
 80a5cb0:	698c      	ldr	r4, [r1, #24]
 80a5cb2:	4a0c      	ldr	r2, [pc, #48]	; (80a5ce4 <__tzcalc_limits+0x14c>)
 80a5cb4:	fb02 4303 	mla	r3, r2, r3, r4
 80a5cb8:	6a0c      	ldr	r4, [r1, #32]
 80a5cba:	4423      	add	r3, r4
 80a5cbc:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a5cc0:	9b01      	ldr	r3, [sp, #4]
 80a5cc2:	4299      	cmp	r1, r3
 80a5cc4:	d1a2      	bne.n	80a5c0c <__tzcalc_limits+0x74>
 80a5cc6:	69c3      	ldr	r3, [r0, #28]
 80a5cc8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5cca:	4293      	cmp	r3, r2
 80a5ccc:	bfac      	ite	ge
 80a5cce:	2300      	movge	r3, #0
 80a5cd0:	2301      	movlt	r3, #1
 80a5cd2:	6003      	str	r3, [r0, #0]
 80a5cd4:	2001      	movs	r0, #1
 80a5cd6:	e000      	b.n	80a5cda <__tzcalc_limits+0x142>
 80a5cd8:	2000      	movs	r0, #0
 80a5cda:	b003      	add	sp, #12
 80a5cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5ce0:	080a6934 	.word	0x080a6934
 80a5ce4:	00015180 	.word	0x00015180

080a5ce8 <__tz_lock>:
 80a5ce8:	4770      	bx	lr

080a5cea <__tz_unlock>:
 80a5cea:	4770      	bx	lr

080a5cec <_tzset_unlocked>:
 80a5cec:	4b01      	ldr	r3, [pc, #4]	; (80a5cf4 <_tzset_unlocked+0x8>)
 80a5cee:	6818      	ldr	r0, [r3, #0]
 80a5cf0:	f000 b802 	b.w	80a5cf8 <_tzset_unlocked_r>
 80a5cf4:	20000078 	.word	0x20000078

080a5cf8 <_tzset_unlocked_r>:
 80a5cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5cfc:	b08d      	sub	sp, #52	; 0x34
 80a5cfe:	4607      	mov	r7, r0
 80a5d00:	f000 f9be 	bl	80a6080 <__gettzinfo>
 80a5d04:	49b0      	ldr	r1, [pc, #704]	; (80a5fc8 <_tzset_unlocked_r+0x2d0>)
 80a5d06:	4604      	mov	r4, r0
 80a5d08:	4638      	mov	r0, r7
 80a5d0a:	f000 f9b1 	bl	80a6070 <_getenv_r>
 80a5d0e:	4eaf      	ldr	r6, [pc, #700]	; (80a5fcc <_tzset_unlocked_r+0x2d4>)
 80a5d10:	4605      	mov	r5, r0
 80a5d12:	b960      	cbnz	r0, 80a5d2e <_tzset_unlocked_r+0x36>
 80a5d14:	4bae      	ldr	r3, [pc, #696]	; (80a5fd0 <_tzset_unlocked_r+0x2d8>)
 80a5d16:	4aaf      	ldr	r2, [pc, #700]	; (80a5fd4 <_tzset_unlocked_r+0x2dc>)
 80a5d18:	6018      	str	r0, [r3, #0]
 80a5d1a:	4baf      	ldr	r3, [pc, #700]	; (80a5fd8 <_tzset_unlocked_r+0x2e0>)
 80a5d1c:	6018      	str	r0, [r3, #0]
 80a5d1e:	4baf      	ldr	r3, [pc, #700]	; (80a5fdc <_tzset_unlocked_r+0x2e4>)
 80a5d20:	6830      	ldr	r0, [r6, #0]
 80a5d22:	601a      	str	r2, [r3, #0]
 80a5d24:	605a      	str	r2, [r3, #4]
 80a5d26:	f7fb fd11 	bl	80a174c <free>
 80a5d2a:	6035      	str	r5, [r6, #0]
 80a5d2c:	e148      	b.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5d2e:	6831      	ldr	r1, [r6, #0]
 80a5d30:	b979      	cbnz	r1, 80a5d52 <_tzset_unlocked_r+0x5a>
 80a5d32:	6830      	ldr	r0, [r6, #0]
 80a5d34:	f7fb fd0a 	bl	80a174c <free>
 80a5d38:	4628      	mov	r0, r5
 80a5d3a:	f7ff fe88 	bl	80a5a4e <strlen>
 80a5d3e:	1c41      	adds	r1, r0, #1
 80a5d40:	4638      	mov	r0, r7
 80a5d42:	f7fb fd2b 	bl	80a179c <_malloc_r>
 80a5d46:	6030      	str	r0, [r6, #0]
 80a5d48:	b148      	cbz	r0, 80a5d5e <_tzset_unlocked_r+0x66>
 80a5d4a:	4629      	mov	r1, r5
 80a5d4c:	f7ff fe5c 	bl	80a5a08 <strcpy>
 80a5d50:	e005      	b.n	80a5d5e <_tzset_unlocked_r+0x66>
 80a5d52:	f7ff fe4f 	bl	80a59f4 <strcmp>
 80a5d56:	2800      	cmp	r0, #0
 80a5d58:	f000 8132 	beq.w	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5d5c:	e7e9      	b.n	80a5d32 <_tzset_unlocked_r+0x3a>
 80a5d5e:	782b      	ldrb	r3, [r5, #0]
 80a5d60:	ae0a      	add	r6, sp, #40	; 0x28
 80a5d62:	2b3a      	cmp	r3, #58	; 0x3a
 80a5d64:	bf08      	it	eq
 80a5d66:	3501      	addeq	r5, #1
 80a5d68:	4633      	mov	r3, r6
 80a5d6a:	4a9d      	ldr	r2, [pc, #628]	; (80a5fe0 <_tzset_unlocked_r+0x2e8>)
 80a5d6c:	499d      	ldr	r1, [pc, #628]	; (80a5fe4 <_tzset_unlocked_r+0x2ec>)
 80a5d6e:	4628      	mov	r0, r5
 80a5d70:	f7fb fcfc 	bl	80a176c <siscanf>
 80a5d74:	2800      	cmp	r0, #0
 80a5d76:	f340 8123 	ble.w	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5d7c:	18ef      	adds	r7, r5, r3
 80a5d7e:	5ceb      	ldrb	r3, [r5, r3]
 80a5d80:	2b2d      	cmp	r3, #45	; 0x2d
 80a5d82:	d103      	bne.n	80a5d8c <_tzset_unlocked_r+0x94>
 80a5d84:	3701      	adds	r7, #1
 80a5d86:	f04f 35ff 	mov.w	r5, #4294967295
 80a5d8a:	e003      	b.n	80a5d94 <_tzset_unlocked_r+0x9c>
 80a5d8c:	2b2b      	cmp	r3, #43	; 0x2b
 80a5d8e:	bf08      	it	eq
 80a5d90:	3701      	addeq	r7, #1
 80a5d92:	2501      	movs	r5, #1
 80a5d94:	f10d 0a20 	add.w	sl, sp, #32
 80a5d98:	f10d 0b1e 	add.w	fp, sp, #30
 80a5d9c:	f04f 0800 	mov.w	r8, #0
 80a5da0:	9603      	str	r6, [sp, #12]
 80a5da2:	f8cd a008 	str.w	sl, [sp, #8]
 80a5da6:	9601      	str	r6, [sp, #4]
 80a5da8:	f8cd b000 	str.w	fp, [sp]
 80a5dac:	4633      	mov	r3, r6
 80a5dae:	aa07      	add	r2, sp, #28
 80a5db0:	498d      	ldr	r1, [pc, #564]	; (80a5fe8 <_tzset_unlocked_r+0x2f0>)
 80a5db2:	4638      	mov	r0, r7
 80a5db4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5db8:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5dbc:	f7fb fcd6 	bl	80a176c <siscanf>
 80a5dc0:	4540      	cmp	r0, r8
 80a5dc2:	f340 80fd 	ble.w	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5dc6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5dca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5dce:	213c      	movs	r1, #60	; 0x3c
 80a5dd0:	fb01 3302 	mla	r3, r1, r2, r3
 80a5dd4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5dd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5ddc:	fb01 3302 	mla	r3, r1, r2, r3
 80a5de0:	435d      	muls	r5, r3
 80a5de2:	4b7f      	ldr	r3, [pc, #508]	; (80a5fe0 <_tzset_unlocked_r+0x2e8>)
 80a5de4:	6225      	str	r5, [r4, #32]
 80a5de6:	4d7d      	ldr	r5, [pc, #500]	; (80a5fdc <_tzset_unlocked_r+0x2e4>)
 80a5de8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5ff4 <_tzset_unlocked_r+0x2fc>
 80a5dec:	602b      	str	r3, [r5, #0]
 80a5dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5df0:	464a      	mov	r2, r9
 80a5df2:	441f      	add	r7, r3
 80a5df4:	497b      	ldr	r1, [pc, #492]	; (80a5fe4 <_tzset_unlocked_r+0x2ec>)
 80a5df6:	4633      	mov	r3, r6
 80a5df8:	4638      	mov	r0, r7
 80a5dfa:	f7fb fcb7 	bl	80a176c <siscanf>
 80a5dfe:	4540      	cmp	r0, r8
 80a5e00:	dc08      	bgt.n	80a5e14 <_tzset_unlocked_r+0x11c>
 80a5e02:	682b      	ldr	r3, [r5, #0]
 80a5e04:	6a22      	ldr	r2, [r4, #32]
 80a5e06:	606b      	str	r3, [r5, #4]
 80a5e08:	4b71      	ldr	r3, [pc, #452]	; (80a5fd0 <_tzset_unlocked_r+0x2d8>)
 80a5e0a:	601a      	str	r2, [r3, #0]
 80a5e0c:	4b72      	ldr	r3, [pc, #456]	; (80a5fd8 <_tzset_unlocked_r+0x2e0>)
 80a5e0e:	f8c3 8000 	str.w	r8, [r3]
 80a5e12:	e0d5      	b.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5e16:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5e1a:	18fd      	adds	r5, r7, r3
 80a5e1c:	5cfb      	ldrb	r3, [r7, r3]
 80a5e1e:	2b2d      	cmp	r3, #45	; 0x2d
 80a5e20:	d103      	bne.n	80a5e2a <_tzset_unlocked_r+0x132>
 80a5e22:	3501      	adds	r5, #1
 80a5e24:	f04f 37ff 	mov.w	r7, #4294967295
 80a5e28:	e003      	b.n	80a5e32 <_tzset_unlocked_r+0x13a>
 80a5e2a:	2b2b      	cmp	r3, #43	; 0x2b
 80a5e2c:	bf08      	it	eq
 80a5e2e:	3501      	addeq	r5, #1
 80a5e30:	2701      	movs	r7, #1
 80a5e32:	2300      	movs	r3, #0
 80a5e34:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5e38:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5e3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5e40:	930a      	str	r3, [sp, #40]	; 0x28
 80a5e42:	9603      	str	r6, [sp, #12]
 80a5e44:	f8cd a008 	str.w	sl, [sp, #8]
 80a5e48:	9601      	str	r6, [sp, #4]
 80a5e4a:	f8cd b000 	str.w	fp, [sp]
 80a5e4e:	4633      	mov	r3, r6
 80a5e50:	aa07      	add	r2, sp, #28
 80a5e52:	4965      	ldr	r1, [pc, #404]	; (80a5fe8 <_tzset_unlocked_r+0x2f0>)
 80a5e54:	4628      	mov	r0, r5
 80a5e56:	f7fb fc89 	bl	80a176c <siscanf>
 80a5e5a:	2800      	cmp	r0, #0
 80a5e5c:	dc04      	bgt.n	80a5e68 <_tzset_unlocked_r+0x170>
 80a5e5e:	6a23      	ldr	r3, [r4, #32]
 80a5e60:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5e64:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5e66:	e00e      	b.n	80a5e86 <_tzset_unlocked_r+0x18e>
 80a5e68:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5e6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5e70:	213c      	movs	r1, #60	; 0x3c
 80a5e72:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5e7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5e7e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5e82:	435f      	muls	r7, r3
 80a5e84:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5e86:	4627      	mov	r7, r4
 80a5e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5e8a:	f04f 0900 	mov.w	r9, #0
 80a5e8e:	441d      	add	r5, r3
 80a5e90:	782b      	ldrb	r3, [r5, #0]
 80a5e92:	2b2c      	cmp	r3, #44	; 0x2c
 80a5e94:	bf08      	it	eq
 80a5e96:	3501      	addeq	r5, #1
 80a5e98:	f895 8000 	ldrb.w	r8, [r5]
 80a5e9c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5ea0:	d126      	bne.n	80a5ef0 <_tzset_unlocked_r+0x1f8>
 80a5ea2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5ea6:	9302      	str	r3, [sp, #8]
 80a5ea8:	ab09      	add	r3, sp, #36	; 0x24
 80a5eaa:	9300      	str	r3, [sp, #0]
 80a5eac:	9603      	str	r6, [sp, #12]
 80a5eae:	9601      	str	r6, [sp, #4]
 80a5eb0:	4633      	mov	r3, r6
 80a5eb2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5eb6:	494d      	ldr	r1, [pc, #308]	; (80a5fec <_tzset_unlocked_r+0x2f4>)
 80a5eb8:	4628      	mov	r0, r5
 80a5eba:	f7fb fc57 	bl	80a176c <siscanf>
 80a5ebe:	2803      	cmp	r0, #3
 80a5ec0:	d17e      	bne.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5ec2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5ec6:	1e4b      	subs	r3, r1, #1
 80a5ec8:	2b0b      	cmp	r3, #11
 80a5eca:	d879      	bhi.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5ecc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5ed0:	1e53      	subs	r3, r2, #1
 80a5ed2:	2b04      	cmp	r3, #4
 80a5ed4:	d874      	bhi.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5ed6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5eda:	2b06      	cmp	r3, #6
 80a5edc:	d870      	bhi.n	80a5fc0 <_tzset_unlocked_r+0x2c8>
 80a5ede:	f887 8008 	strb.w	r8, [r7, #8]
 80a5ee2:	60f9      	str	r1, [r7, #12]
 80a5ee4:	613a      	str	r2, [r7, #16]
 80a5ee6:	617b      	str	r3, [r7, #20]
 80a5ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5eea:	eb05 0803 	add.w	r8, r5, r3
 80a5eee:	e02a      	b.n	80a5f46 <_tzset_unlocked_r+0x24e>
 80a5ef0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5ef4:	bf06      	itte	eq
 80a5ef6:	4643      	moveq	r3, r8
 80a5ef8:	3501      	addeq	r5, #1
 80a5efa:	2344      	movne	r3, #68	; 0x44
 80a5efc:	220a      	movs	r2, #10
 80a5efe:	a90b      	add	r1, sp, #44	; 0x2c
 80a5f00:	4628      	mov	r0, r5
 80a5f02:	9305      	str	r3, [sp, #20]
 80a5f04:	f7ff fe3e 	bl	80a5b84 <strtoul>
 80a5f08:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5f0c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5f10:	4545      	cmp	r5, r8
 80a5f12:	9b05      	ldr	r3, [sp, #20]
 80a5f14:	d114      	bne.n	80a5f40 <_tzset_unlocked_r+0x248>
 80a5f16:	234d      	movs	r3, #77	; 0x4d
 80a5f18:	f1b9 0f00 	cmp.w	r9, #0
 80a5f1c:	d107      	bne.n	80a5f2e <_tzset_unlocked_r+0x236>
 80a5f1e:	7223      	strb	r3, [r4, #8]
 80a5f20:	2303      	movs	r3, #3
 80a5f22:	60e3      	str	r3, [r4, #12]
 80a5f24:	2302      	movs	r3, #2
 80a5f26:	6123      	str	r3, [r4, #16]
 80a5f28:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5f2c:	e00b      	b.n	80a5f46 <_tzset_unlocked_r+0x24e>
 80a5f2e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5f32:	230b      	movs	r3, #11
 80a5f34:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5f36:	2301      	movs	r3, #1
 80a5f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5f3a:	2300      	movs	r3, #0
 80a5f3c:	6323      	str	r3, [r4, #48]	; 0x30
 80a5f3e:	e002      	b.n	80a5f46 <_tzset_unlocked_r+0x24e>
 80a5f40:	b280      	uxth	r0, r0
 80a5f42:	723b      	strb	r3, [r7, #8]
 80a5f44:	6178      	str	r0, [r7, #20]
 80a5f46:	2302      	movs	r3, #2
 80a5f48:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5f4c:	2300      	movs	r3, #0
 80a5f4e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5f52:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5f56:	930a      	str	r3, [sp, #40]	; 0x28
 80a5f58:	f898 3000 	ldrb.w	r3, [r8]
 80a5f5c:	2b2f      	cmp	r3, #47	; 0x2f
 80a5f5e:	d10b      	bne.n	80a5f78 <_tzset_unlocked_r+0x280>
 80a5f60:	9603      	str	r6, [sp, #12]
 80a5f62:	f8cd a008 	str.w	sl, [sp, #8]
 80a5f66:	9601      	str	r6, [sp, #4]
 80a5f68:	f8cd b000 	str.w	fp, [sp]
 80a5f6c:	4633      	mov	r3, r6
 80a5f6e:	aa07      	add	r2, sp, #28
 80a5f70:	491f      	ldr	r1, [pc, #124]	; (80a5ff0 <_tzset_unlocked_r+0x2f8>)
 80a5f72:	4640      	mov	r0, r8
 80a5f74:	f7fb fbfa 	bl	80a176c <siscanf>
 80a5f78:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5f7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5f80:	213c      	movs	r1, #60	; 0x3c
 80a5f82:	fb01 3302 	mla	r3, r1, r2, r3
 80a5f86:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5f8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5f8e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5f92:	61bb      	str	r3, [r7, #24]
 80a5f94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5f96:	f109 0901 	add.w	r9, r9, #1
 80a5f9a:	f1b9 0f02 	cmp.w	r9, #2
 80a5f9e:	4445      	add	r5, r8
 80a5fa0:	f107 071c 	add.w	r7, r7, #28
 80a5fa4:	f47f af74 	bne.w	80a5e90 <_tzset_unlocked_r+0x198>
 80a5fa8:	6860      	ldr	r0, [r4, #4]
 80a5faa:	f7ff fdf5 	bl	80a5b98 <__tzcalc_limits>
 80a5fae:	6a22      	ldr	r2, [r4, #32]
 80a5fb0:	4b07      	ldr	r3, [pc, #28]	; (80a5fd0 <_tzset_unlocked_r+0x2d8>)
 80a5fb2:	601a      	str	r2, [r3, #0]
 80a5fb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5fb6:	1a9b      	subs	r3, r3, r2
 80a5fb8:	4a07      	ldr	r2, [pc, #28]	; (80a5fd8 <_tzset_unlocked_r+0x2e0>)
 80a5fba:	bf18      	it	ne
 80a5fbc:	2301      	movne	r3, #1
 80a5fbe:	6013      	str	r3, [r2, #0]
 80a5fc0:	b00d      	add	sp, #52	; 0x34
 80a5fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5fc6:	bf00      	nop
 80a5fc8:	080a6994 	.word	0x080a6994
 80a5fcc:	200002f8 	.word	0x200002f8
 80a5fd0:	20000300 	.word	0x20000300
 80a5fd4:	080a6997 	.word	0x080a6997
 80a5fd8:	200002fc 	.word	0x200002fc
 80a5fdc:	2000007c 	.word	0x2000007c
 80a5fe0:	200002eb 	.word	0x200002eb
 80a5fe4:	080a699b 	.word	0x080a699b
 80a5fe8:	080a69be 	.word	0x080a69be
 80a5fec:	080a69aa 	.word	0x080a69aa
 80a5ff0:	080a69bd 	.word	0x080a69bd
 80a5ff4:	200002e0 	.word	0x200002e0

080a5ff8 <_findenv_r>:
 80a5ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5ffc:	4607      	mov	r7, r0
 80a5ffe:	468b      	mov	fp, r1
 80a6000:	4690      	mov	r8, r2
 80a6002:	f000 f8d7 	bl	80a61b4 <__env_lock>
 80a6006:	4b19      	ldr	r3, [pc, #100]	; (80a606c <_findenv_r+0x74>)
 80a6008:	681d      	ldr	r5, [r3, #0]
 80a600a:	469a      	mov	sl, r3
 80a600c:	b13d      	cbz	r5, 80a601e <_findenv_r+0x26>
 80a600e:	465c      	mov	r4, fp
 80a6010:	4623      	mov	r3, r4
 80a6012:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6016:	b142      	cbz	r2, 80a602a <_findenv_r+0x32>
 80a6018:	2a3d      	cmp	r2, #61	; 0x3d
 80a601a:	461c      	mov	r4, r3
 80a601c:	d1f8      	bne.n	80a6010 <_findenv_r+0x18>
 80a601e:	4638      	mov	r0, r7
 80a6020:	f000 f8c9 	bl	80a61b6 <__env_unlock>
 80a6024:	2000      	movs	r0, #0
 80a6026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a602a:	ebcb 0404 	rsb	r4, fp, r4
 80a602e:	46a9      	mov	r9, r5
 80a6030:	f859 0b04 	ldr.w	r0, [r9], #4
 80a6034:	2800      	cmp	r0, #0
 80a6036:	d0f2      	beq.n	80a601e <_findenv_r+0x26>
 80a6038:	4622      	mov	r2, r4
 80a603a:	4659      	mov	r1, fp
 80a603c:	f7ff fd0f 	bl	80a5a5e <strncmp>
 80a6040:	b988      	cbnz	r0, 80a6066 <_findenv_r+0x6e>
 80a6042:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a6046:	191e      	adds	r6, r3, r4
 80a6048:	5d1b      	ldrb	r3, [r3, r4]
 80a604a:	2b3d      	cmp	r3, #61	; 0x3d
 80a604c:	d10b      	bne.n	80a6066 <_findenv_r+0x6e>
 80a604e:	f8da 3000 	ldr.w	r3, [sl]
 80a6052:	4638      	mov	r0, r7
 80a6054:	1aed      	subs	r5, r5, r3
 80a6056:	10ad      	asrs	r5, r5, #2
 80a6058:	f8c8 5000 	str.w	r5, [r8]
 80a605c:	f000 f8ab 	bl	80a61b6 <__env_unlock>
 80a6060:	1c70      	adds	r0, r6, #1
 80a6062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6066:	464d      	mov	r5, r9
 80a6068:	e7e1      	b.n	80a602e <_findenv_r+0x36>
 80a606a:	bf00      	nop
 80a606c:	200000c4 	.word	0x200000c4

080a6070 <_getenv_r>:
 80a6070:	b507      	push	{r0, r1, r2, lr}
 80a6072:	aa01      	add	r2, sp, #4
 80a6074:	f7ff ffc0 	bl	80a5ff8 <_findenv_r>
 80a6078:	b003      	add	sp, #12
 80a607a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a6080 <__gettzinfo>:
 80a6080:	4800      	ldr	r0, [pc, #0]	; (80a6084 <__gettzinfo+0x4>)
 80a6082:	4770      	bx	lr
 80a6084:	20000084 	.word	0x20000084

080a6088 <gmtime_r>:
 80a6088:	6802      	ldr	r2, [r0, #0]
 80a608a:	4b46      	ldr	r3, [pc, #280]	; (80a61a4 <gmtime_r+0x11c>)
 80a608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a608e:	fb92 f4f3 	sdiv	r4, r2, r3
 80a6092:	fb03 2214 	mls	r2, r3, r4, r2
 80a6096:	2a00      	cmp	r2, #0
 80a6098:	bfbc      	itt	lt
 80a609a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a609e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a60a2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a60a6:	fb92 f3f0 	sdiv	r3, r2, r0
 80a60aa:	fb00 2213 	mls	r2, r0, r3, r2
 80a60ae:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a60b2:	608b      	str	r3, [r1, #8]
 80a60b4:	fb92 f3f0 	sdiv	r3, r2, r0
 80a60b8:	fb00 2213 	mls	r2, r0, r3, r2
 80a60bc:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a60c0:	bfac      	ite	ge
 80a60c2:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a60c6:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a60ca:	604b      	str	r3, [r1, #4]
 80a60cc:	600a      	str	r2, [r1, #0]
 80a60ce:	2307      	movs	r3, #7
 80a60d0:	1ce2      	adds	r2, r4, #3
 80a60d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a60d6:	4d34      	ldr	r5, [pc, #208]	; (80a61a8 <gmtime_r+0x120>)
 80a60d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a60dc:	fb94 f5f5 	sdiv	r5, r4, r5
 80a60e0:	1ad3      	subs	r3, r2, r3
 80a60e2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a60e6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a60ea:	618b      	str	r3, [r1, #24]
 80a60ec:	4b2f      	ldr	r3, [pc, #188]	; (80a61ac <gmtime_r+0x124>)
 80a60ee:	4830      	ldr	r0, [pc, #192]	; (80a61b0 <gmtime_r+0x128>)
 80a60f0:	fb03 4405 	mla	r4, r3, r5, r4
 80a60f4:	fbb4 f2f2 	udiv	r2, r4, r2
 80a60f8:	fbb4 f3f7 	udiv	r3, r4, r7
 80a60fc:	fbb4 f0f0 	udiv	r0, r4, r0
 80a6100:	4422      	add	r2, r4
 80a6102:	1ad2      	subs	r2, r2, r3
 80a6104:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a6108:	1a13      	subs	r3, r2, r0
 80a610a:	f240 126d 	movw	r2, #365	; 0x16d
 80a610e:	fbb3 f6f6 	udiv	r6, r3, r6
 80a6112:	fbb3 f0f2 	udiv	r0, r3, r2
 80a6116:	fbb3 f3f7 	udiv	r3, r3, r7
 80a611a:	4434      	add	r4, r6
 80a611c:	1ae3      	subs	r3, r4, r3
 80a611e:	fb02 3310 	mls	r3, r2, r0, r3
 80a6122:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a6126:	2499      	movs	r4, #153	; 0x99
 80a6128:	3202      	adds	r2, #2
 80a612a:	fbb2 f2f4 	udiv	r2, r2, r4
 80a612e:	4354      	muls	r4, r2
 80a6130:	1ca6      	adds	r6, r4, #2
 80a6132:	2405      	movs	r4, #5
 80a6134:	fbb6 f4f4 	udiv	r4, r6, r4
 80a6138:	2a0a      	cmp	r2, #10
 80a613a:	bf34      	ite	cc
 80a613c:	2602      	movcc	r6, #2
 80a613e:	f06f 0609 	mvncs.w	r6, #9
 80a6142:	4416      	add	r6, r2
 80a6144:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6148:	fb02 0505 	mla	r5, r2, r5, r0
 80a614c:	1c5f      	adds	r7, r3, #1
 80a614e:	2e01      	cmp	r6, #1
 80a6150:	bf98      	it	ls
 80a6152:	3501      	addls	r5, #1
 80a6154:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6158:	eba7 0704 	sub.w	r7, r7, r4
 80a615c:	d302      	bcc.n	80a6164 <gmtime_r+0xdc>
 80a615e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a6162:	e014      	b.n	80a618e <gmtime_r+0x106>
 80a6164:	0782      	lsls	r2, r0, #30
 80a6166:	d105      	bne.n	80a6174 <gmtime_r+0xec>
 80a6168:	2464      	movs	r4, #100	; 0x64
 80a616a:	fbb0 f2f4 	udiv	r2, r0, r4
 80a616e:	fb04 0212 	mls	r2, r4, r2, r0
 80a6172:	b94a      	cbnz	r2, 80a6188 <gmtime_r+0x100>
 80a6174:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6178:	fbb0 f4f2 	udiv	r4, r0, r2
 80a617c:	fb02 0014 	mls	r0, r2, r4, r0
 80a6180:	fab0 f280 	clz	r2, r0
 80a6184:	0952      	lsrs	r2, r2, #5
 80a6186:	e000      	b.n	80a618a <gmtime_r+0x102>
 80a6188:	2201      	movs	r2, #1
 80a618a:	333b      	adds	r3, #59	; 0x3b
 80a618c:	441a      	add	r2, r3
 80a618e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a6192:	2300      	movs	r3, #0
 80a6194:	61ca      	str	r2, [r1, #28]
 80a6196:	614d      	str	r5, [r1, #20]
 80a6198:	610e      	str	r6, [r1, #16]
 80a619a:	60cf      	str	r7, [r1, #12]
 80a619c:	620b      	str	r3, [r1, #32]
 80a619e:	4608      	mov	r0, r1
 80a61a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a61a2:	bf00      	nop
 80a61a4:	00015180 	.word	0x00015180
 80a61a8:	00023ab1 	.word	0x00023ab1
 80a61ac:	fffdc54f 	.word	0xfffdc54f
 80a61b0:	00023ab0 	.word	0x00023ab0

080a61b4 <__env_lock>:
 80a61b4:	4770      	bx	lr

080a61b6 <__env_unlock>:
 80a61b6:	4770      	bx	lr

080a61b8 <dynalib_user>:
 80a61b8:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a61c8:	0000 0000 7552 6e6e 6e69 2067 6553 7574     ....Running Setu
 80a61d8:	2070 6f66 2072 6f6c 706f 5300 6e65 6f73     p for loop.Senso
 80a61e8:	2072 6f6e 2074 6f66 6e75 2064 283a 7b00     r not found :(.{
 80a61f8:	0020 4222 2274 003a 202c 2200 7042 3a22      ."Bt":., ."Bp":
 80a6208:	2200 6842 3a22 2200 7653 3a22 2200 7353     ."Bh":."Sv":."Ss
 80a6218:	3a22 2200 7259 3a22 2200 6f4d 3a22 2200     ":."Yr":."Mo":."
 80a6228:	6144 3a22 2200 7248 3a22 2200 694d 3a22     Da":."Hr":."Mi":
 80a6238:	2200 6353 3a22 2200 6f5a 3a22 2200 7644     ."Sc":."Zo":."Dv
 80a6248:	3a22 2220 6f4c 6152 3130 2022 007d 7542     ": "LoRa01" }.Bu
 80a6258:	6e72 656c 0079 6553 746e 7420 206f 6874     rnley.Sent to th
 80a6268:	2065 6c63 756f 2e64 2e2e 0020 6554 706d     e cloud... .Temp
 80a6278:	7265 7461 7275 2065 203d 2000 432a 5000     erature = . *C.P
 80a6288:	6572 7373 7275 2065 203d 2000 5068 0061     ressure = . hPa.
 80a6298:	7041 7270 786f 202e 6c41 6974 7574 6564     Approx. Altitude
 80a62a8:	3d20 0020 6d20 4800 6d75 6469 7469 2079      = . m.Humidity 
 80a62b8:	203d 2000 0025 5654 434f 0020 7020 6270     = . %.TVOC . ppb
 80a62c8:	0009 4365 324f 0020 7020 6d70 4d00 6165     ..eCO2 . ppm.Mea
 80a62d8:	7573 6572 656d 746e 6620 6961 656c 0064     surement failed.
 80a62e8:	6e55 6e6b 776f 206e 5353 4449 203a 4300     Unknown SSID: .C
 80a62f8:	6e6f 656e 7463 6e69 2067 6957 6946 2e2e     onnecting WiFi..
 80a6308:	002e 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
 80a6318:	6c43 756f 2e64 2e2e 5700 6669 2069 7369     Cloud....Wifi is
 80a6328:	7220 6165 7964 002e 6957 6966 6920 2073      ready..Wifi is 
 80a6338:	6f63 6e6e 6365 6974 676e 002e 6957 6966     connecting..Wifi
 80a6348:	6920 2073 6572 6461 2e79 6e20 776f 7420      is ready. now t
 80a6358:	206f 6f63 6e6e 6365 2074 6f74 7420 6568     o connect to the
 80a6368:	6320 6f6c 6475 202e 4300 6e6f 656e 7463      cloud. .Connect
 80a6378:	6465 7420 206f 6874 2065 6c63 756f 2e64     ed to the cloud.
 80a6388:	2e2e 0020 6c41 206c 6573 7574 2c70 6320     .. .All setup, c
 80a6398:	6e6f 656e 7463 6465 6120 646e 7220 6165     onnected and rea
 80a63a8:	7964 7420 206f 6164 636e 2e65 4820 7a61     dy to dance. Haz
 80a63b8:	7261 7300 6f68 6c75 2064 6562 6320 6e6f     ar.should be con
 80a63c8:	656e 7463 6465 7420 206f 6c63 756f 2e64     nected to cloud.
 80a63d8:	2e2e 0020 6957 6946 6320 6e6f 656e 7463     .. .WiFi connect
 80a63e8:	6f69 206e 6974 656d 2064 756f 2c74 7720     ion timed out, w
 80a63f8:	6c69 206c 7274 2079 6e61 2064 6f63 6e6e     ill try and conn
 80a6408:	6365 2e74 2e2e 5700 2065 7261 2065 7473     ect....We are st
 80a6418:	6c69 206c 6f63 6e6e 6365 6974 676e 7420     ill connecting t
 80a6428:	206f 6874 2065 6c63 756f 2e64 5720 6c69     o the cloud. Wil
 80a6438:	206c 7274 2079 6f63 6e6e 6365 2074 6761     l try connect ag
 80a6448:	6961 2e6e 4e00 746f 6320 6e6f 656e 7463     ain..Not connect
 80a6458:	6465 7420 206f 6874 2065 6c63 756f 2e64     ed to the cloud.
 80a6468:	7720 6c69 206c 7274 2079 6761 6961 2e6e      will try again.
 80a6478:	2e2e 4300 6e6f 656e 7463 6e69 2067 6f74     ...Connecting to
 80a6488:	7420 6568 6320 6f6c 6475 2e2e 202e 4900      the cloud... .I
 80a6498:	2073 2061 6c63 756f 2064 6f6c 706f 6220     s a cloud loop b
 80a64a8:	7475 5720 6669 2069 7369 6e20 746f 6520     ut Wifi is not e
 80a64b8:	616e 6c62 6465 202c 6977 6c6c 6e20 776f     nabled, will now
 80a64c8:	6320 6e6f 656e 7463 002e 5134 7569 3264      connect..4Qiud2
 80a64d8:	2d39 6164 3300 2047 4675 5f69 4539 0030     9-da.3G uFi_9E0.
 80a64e8:	4733 7520 6946 365f 4231 3300 2047 4675     3G uFi_61B.3G uF
 80a64f8:	5f69 3843 0033 4733 7520 6946 395f 3345     i_C83.3G uFi_9E3
 80a6508:	3300 2047 4675 5f69 3643 0042               .3G uFi_C6B.

080a6514 <_ZTVN8particle13__SPISettingsE>:
	...
 80a651c:	079d 080a 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a652c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a653c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a654c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 80a655c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

080a6568 <_ZTV8SPIClass>:
	...
 80a6570:	17bd 080a 17bf 080a                         ........

080a6578 <_ZL14clock_divisors>:
 80a6578:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 80a6588:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 80a6598:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a65a8:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a65b8:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a65c8:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a65d8:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a65e8:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a65f8:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a6608:	3031 2075 5d00 0020 6425 2800 3a29 0020     10u .] .%d.(): .
 80a6618:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
 80a6628:	6174 6c69 2073 203d 0d00 000a 6e6c 6600     tails = ....ln.f
 80a6638:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
 80a6648:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
 80a6658:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
 80a6668:	6c6c 2500 302b 6433 253a 3230 0075 5925     ll.%+03d:%02u.%Y
 80a6678:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
 80a6688:	007a 7361 7463 6d69 0065 0000               z.asctime...

080a6694 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a669c:	2395 080a 239b 080a 23df 080a 23a9 080a     .#...#...#...#..
 80a66ac:	2397 080a                                   .#..

080a66b0 <_ZTV9IPAddress>:
	...
 80a66b8:	292d 080a 291d 080a 291f 080a               -)...)...)..

080a66c4 <_ZTV9USBSerial>:
	...
 80a66cc:	29e9 080a 2a39 080a 2a47 080a 1d3b 080a     .)..9*..G*..;...
 80a66dc:	2a25 080a 29eb 080a 2a01 080a 2a33 080a     %*...)...*..3*..
 80a66ec:	2a17 080a 29e5 080a                         .*...)..

080a66f4 <_ZTV11USARTSerial>:
	...
 80a66fc:	2b51 080a 2ba1 080a 2baf 080a 1d3b 080a     Q+...+...+..;...
 80a670c:	2b65 080a 2b87 080a 2b73 080a 2b9b 080a     e+...+..s+...+..
 80a671c:	2b53 080a 2b57 080a                         S+..W+..

080a6724 <_ZTV7TwoWire>:
	...
 80a672c:	2cb1 080a 2cfb 080a 2cd3 080a 2cb3 080a     .,...,...,...,..
 80a673c:	2cdb 080a 2ce3 080a 2ceb 080a 2cf3 080a     .,...,...,...,..

080a674c <_ZTVN5spark9WiFiClassE>:
	...
 80a6754:	2df1 080a 2de7 080a 00b7 080a 00c1 080a     .-...-..........
 80a6764:	203b 080a 2ddb 080a 2dcf 080a 2dc7 080a     ; ...-...-...-..
 80a6774:	2dbd 080a 2db3 080a 2d6f 080a               .-...-..o-..

080a6780 <_ZTVN5spark12NetworkClassE>:
	...
 80a6788:	2e11 080a 2e1b 080a 2e25 080a 2e2f 080a     ........%.../...
 80a6798:	2e39 080a 2e45 080a 2e51 080a 2e5d 080a     9...E...Q...]...
 80a67a8:	2e65 080a 2e6f 080a 2e79 080a 6f70 0077     e...o...y...pow.
	...

080a67c0 <TWO52>:
 80a67c0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a67d0 <_ctype_>:
 80a67d0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a67e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a67f0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a6800:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a6810:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a6820:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a6830:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a6840:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a6850:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a68d4 <__sf_fake_stdin>:
	...

080a68f4 <__sf_fake_stdout>:
	...

080a6914 <__sf_fake_stderr>:
	...

080a6934 <__month_lengths>:
 80a6934:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a6944:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6954:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6964:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a6974:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6984:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6994:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a69a4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a69b4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a69c4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a69d0 <link_const_variable_data_end>:
 80a69d0:	080a0751 	.word	0x080a0751
 80a69d4:	080a10c9 	.word	0x080a10c9
 80a69d8:	080a1297 	.word	0x080a1297
 80a69dc:	080a19d1 	.word	0x080a19d1
 80a69e0:	080a2081 	.word	0x080a2081
 80a69e4:	080a21e9 	.word	0x080a21e9
 80a69e8:	080a2241 	.word	0x080a2241
 80a69ec:	080a2dfd 	.word	0x080a2dfd
 80a69f0:	080a2ec9 	.word	0x080a2ec9
 80a69f4:	080a2fa1 	.word	0x080a2fa1
 80a69f8:	080a2fe5 	.word	0x080a2fe5
 80a69fc:	080a3069 	.word	0x080a3069
 80a6a00:	080a30ed 	.word	0x080a30ed
 80a6a04:	080a31b1 	.word	0x080a31b1
 80a6a08:	080a3275 	.word	0x080a3275

080a6a0c <link_constructors_end>:
 80a6a0c:	00000000 	.word	0x00000000
